issueID,Project,issue_Summary,Type,Status,Priority,Resolution,Affects_version,Fix_version,Component,Label,Environment,Description,Attachments,Assignee,Reporter,Votes,Watchers,Created_date,Updated_date,Resolved_date
PDFBOX-100,PDFBOX,"NPE with corrupt pdf-document","New Feature",CLOSED,Major,"Cannot Reproduce",None,None,"Text extraction",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1326521
Originally submitted by pjwalstrom on 2005-10-14 01:35.
I have a corrupted pdf-document, which displays the
following error when Acrobat is opened: "There was an
error opening this document. The file is damaged and
could not be repaired".
I am using PDFBox 0.7.2 with Lucene, and when I try to
index the document with the following command
org.apache.Lucene.document.Document doc =
LucenePDFDocument.getDocument(fileToIndex);
I get a NPE:
2005-10-12 14:33:16,041 ERROR [STDERR]
java.lang.NullPointerException
2005-10-12 14:33:16,041 ERROR [STDERR] at
org.pdfbox.pdmodel.PDPageNode.getAllKids(PDPageNode.java:194)
2005-10-12 14:33:16,041 ERROR [STDERR] at
org.pdfbox.pdmodel.PDPageNode.getAllKids(PDPageNode.java:182)
2005-10-12 14:33:16,041 ERROR [STDERR] at
org.pdfbox.pdmodel.PDDocumentCatalog.getAllPages(PDDocumentCatalog.java:162)
2005-10-12 14:33:16,042 ERROR [STDERR] at
org.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:220)
2005-10-12 14:33:16,042 ERROR [STDERR] at
org.pdfbox.searchengine.lucene.LucenePDFDocument.addContent(LucenePDFDocument.java:278)
2005-10-12 14:33:16,042 ERROR [STDERR] at
org.pdfbox.searchengine.lucene.LucenePDFDocument.getDocument(LucenePDFDocument.java:187)
Shouldn't PDFBox throw anything else than a NPE when
dealing with corrupt documents?
A CorruptPDFException would do.",0,"Andreas Lehmkühler",Anonymous,0,1,"14/Oct/05 08:35","31/Oct/13 10:52","31/Oct/13 10:52"
PDFBOX-1000,PDFBOX,"Conforming parser","New Feature",CLOSED,Major,Fixed,1.6.0,1.7.0,Parsing,None,,"A conforming parser will start at the end of the file and read backward until it has read the EOF marker, the xref location, and trailer[1]. Once this is read, it will read in the xref table so it can locate other objects and revisions. This also allows skipping objects which have been rendered obsolete (per the xref table)[2]. It also allows the minimum amount of information to be read when the file is loaded, and then subsequent information will be loaded if and when it is requested. This is all laid out in the official PDF specification, ISO 32000-1:2008.
Existing code will be re-used where possible, but this will require new classes in order to accommodate the lazy reading which is a very different paradigm from the existing parser. Using separate classes will also eliminate the possibility of regression bugs from making their way into the PDDocument or BaseParser classes. Changes to existing classes will be kept to a minimum in order to prevent regression bugs.
[1] Section 7.5.5 "Conforming readers should read a PDF file from its end"
[2] Section 7.5.4 "the entire file need not be read to locate any particular object"",0,"Adam Nichols","Adam Nichols",4,8,"21/Apr/11 06:31","11/Oct/14 04:08","11/Oct/14 04:08"
PDFBOX-1001,PDFBOX,"TextPosition.getHeight() returns erroneous value for some PDFs",Bug,CLOSED,Major,Fixed,"1.4.0, 1.5.0",1.7.0,"Text extraction",None,"windows xp, solaris","For a PDF that worked fine under 1.2.1 the height value returned is negative and the wrong value (i.e. using Math.abs() won't fix it). Other PDFs work fine.
PDF Debug shows "Creator:Crystal Reports" and "Producer:PDF-XChange (XCPRO30.DLL v3.30.0064) (Windows 2k)"
And when examining the 'Stream' items, the text is not what displays.
Any suggestions on what to look for so that I can do differential analysis against other PDFs to see what they do/not have in common with this one?
(It's client data so I can't post the PDF. )
It's stopping us from moving off 1.2.1 (and later versions fix another issue we have of seeing question marks instead of the actual characters).",0,"Andreas Lehmkühler","Emil Wacker",0,0,"24/Apr/11 04:42","29/May/12 16:21","30/Aug/11 17:29"
PDFBOX-1002,PDFBOX,"Form field not rendered after being processed by pdfbox-1.1.0, wrong position of same field in pdfbox-1.5.0",Bug,CLOSED,Major,Fixed,1.5.0,"1.8.9, 2.0.0",AcroForm,None,,"I have a pdf form that was created with Adobe Acrobat 7.0 Professional. I feed the pdf into pdfbox and write it out again with
document= PDDocument.load(pdf);
document.save(pdf.getCanonicalPath());
I realized that a recently added form field within the pdf is not visible when I use pdfbox-1.1.0. When I use the current pdfbox-1.5.0, the field is visible, but has an incorrect position. The three pdf attachments illustrate the behavior.
Interestingly, pdfbox handles the pdf correctly, once I save the original pdf under a new file name. The "save as..." function in Acrobat Professional seems to perform some kind of compacting / clean-up within the pdf, which is also reflected by a smaller file size.
Thanks",0,"Maruan Sahyoun","Remo Marti",0,2,"26/Apr/11 12:33","28/Mar/15 14:10","03/Feb/15 23:52"
PDFBOX-1003,PDFBOX,"Incorrect width calculation for form fields that do not scroll",Bug,CLOSED,Major,Duplicate,"1.5.0, 1.6.0",None,AcroForm,None,,"When a form field is marked non scrollable, current implementation does not work. There appears to be unfinished code that in the end does not set the font size.",0,"Andreas Lehmkühler","Alex Rykov",0,0,"27/Apr/11 01:48","23/Mar/13 13:05","27/Apr/11 05:34"
PDFBOX-1004,PDFBOX,"Incorrect width calculation for form fields that do not scroll",Bug,CLOSED,Major,Fixed,None,1.6.0,PDModel,None,,"When a form field is marked non scrollable, current implementation does not work. There appears to be unfinished code that in the end does not set the font size.",0,"Andreas Lehmkühler","Alex Rykov",0,1,"27/Apr/11 01:49","02/Aug/14 15:37","09/Jun/11 09:45"
PDFBOX-1005,PDFBOX,"Unnecessary filling new array with zeros in RandomAccessBuffer::write(byte[], int, int)",Improvement,CLOSED,Major,Fixed,1.5.0,1.6.0,None,None,,"it is not required to fill new array with zeros, because it's done by JVM",0,"Andreas Lehmkühler","Sergey Vladimirov",0,0,"27/Apr/11 10:46","02/Jul/11 16:28","29/Apr/11 18:55"
PDFBOX-1006,PDFBOX,"Unnecessary using intermediate ByteArrayInputStream to copy from given byte array to OutputStream in FlateFilter::decode",Improvement,CLOSED,Trivial,Fixed,1.5.0,1.6.0,None,None,,"It is not required to use intermediate ByteArrayInputStream to copy from given byte array to OutputStream. When we have byte[], it's okay just to call write(byte[]) method of OutputStream to write all data at once.
AS IS:
// Copy data to ByteArrayInputStream for reading
bais = new ByteArrayInputStream(baos.toByteArray());
baos.close();
baos = null;
byte[] decodedData = decodePredictor(predictor, colors, bitsPerPixel, columns, bais);
bais.close();
bais = new ByteArrayInputStream(decodedData);
// write decoded data to result
while ((amountRead = bais.read(buffer)) != -1)
{ result.write(buffer, 0, amountRead); }
bais.close();
bais = null;
TO BE:
// Copy data to ByteArrayInputStream for reading
bais = new ByteArrayInputStream(baos.toByteArray());
baos.close();
baos = null;
byte[] decodedData = decodePredictor(predictor, colors, bitsPerPixel, columns, bais);
bais.close();
bais = null;
result.write(decodedData);",0,"Andreas Lehmkühler","Sergey Vladimirov",0,0,"27/Apr/11 10:49","02/Jul/11 16:29","09/Jun/11 08:57"
PDFBOX-1008,PDFBOX,"NPE warn during text extraction caused by character encoding not set",Bug,CLOSED,Minor,Fixed,1.5.0,1.6.0,"Text extraction",None,,"During text extraction, the following NPE stack is printed with a warn level.
17:34:58,762 WARN [PDFStreamEngine] java.lang.NullPointerException
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.getFontHeight(PDSimpleFont.java:136)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:408)
at org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:442)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:366)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:322)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:242)
at org.nuxeo.ecm.core.convert.plugins.tests.TestPDFEncodingWarn.extract(TestPDFEncodingWarn.java:36)
Digging in the problem, I've found that the encoding field of the true type font was not set during the dictionary load.
Thread [main] (Suspended (breakpoint at line 113 in PDTrueTypeFont))
PDTrueTypeFont.<init>(COSDictionary) line: 113
PDFontFactory.createFont(COSDictionary) line: 116
PDFontFactory.createFont(COSDictionary, Map) line: 75
PDResources.getFonts(Map) line: 115
PDFTextStripper(PDFStreamEngine).processSubStream(PDPage, PDResources, COSStream) line: 243
PDFTextStripper(PDFStreamEngine).processStream(PDPage, PDResources, COSStream) line: 225
PDFTextStripper.processPage(PDPage, COSStream) line: 442
PDFTextStripper.processPages(List<COSObjectable>) line: 366
PDFTextStripper.writeText(PDDocument, Writer) line: 322
PDFTextStripper.getText(PDDocument) line: 242
I've attached the PDF file and test class I've used for reproducing.",0,"Andreas Lehmkühler","Stephane Lacoin",0,1,"11/May/11 16:00","02/Jul/11 16:28","09/Jun/11 07:28"
PDFBOX-1009,PDFBOX,"Limit the CMap-cache to external CMaps",Bug,CLOSED,Major,Fixed,1.5.0,1.6.0,PDModel,None,,"Antoni Mylka found a potential memory leak within the class PDFont [1]
A static map is used to cache all processed CMaps, which leads after while to a huge amount of allocated memory.
IMO it doesn't make sense to cache embedded CMaps as they are only needed within the font embedding them and those CMaps are already stored in the variable "cmap". We should limit the cache to external CMaps like those which are bundled with pdfbox.
[1] http://markmail.org/message/zwhd3as67vpg7vbb",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"12/May/11 19:00","10/Jul/14 09:46","12/May/11 19:08"
PDFBOX-101,PDFBOX,"ImportXFDF results in PDF with larger text fields",Bug,CLOSED,Major,Fixed,"0.7.2, 1.4.0, 1.8.7",2.0.0,AcroForm,Appearance,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1327309
Originally submitted by roso on 2005-10-14 22:02.
Using PDFBox-0.7.2
ImportXFDF (and ImportFDF) results in PDF with larger text
If focus on field text size is back to normal
Exit the field and the font becomes large again, some
fields display same string overlayed",0,"Maruan Sahyoun",Anonymous,1,3,"15/Oct/05 05:02","17/Mar/16 19:06","03/Feb/15 22:39"
PDFBOX-1010,PDFBOX,"Image printed with colors inverted",Bug,CLOSED,Major,Fixed,1.6.0,1.6.0,Parsing,None,"windows xp","When printing a test PDF page, the colors of one embedded image has its colors inverted (black and white)",0,"Andreas Lehmkühler","Laurent Chane",0,1,"13/May/11 11:30","24/Mar/13 14:30","08/Jun/11 08:29"
PDFBOX-1011,PDFBOX,"Incorrect metadata for encrypted PDFs with non-ASCII characters",Bug,CLOSED,Minor,Fixed,1.5.0,1.8.0,Parsing,None,"mac os x","I have a document which has Author metadata = "Jırg Boettger". That second character is not an 'i', it is a dotless lower case i.
It is also an encrypted pdf, with user password = "".
The problem is that if I load the document, decrypt it and then try to examine the document-level metadata (such as author) I see problems with the non-ASCII chars.
I will attach a testcase & the sample PDF that reproduces the problem for me.
A bit of detail that may be useful: COSObject 19 0 at the end of the PDF defines the Author. It is represented as byte[] = {-95, -118, -50, 122, -127, 105, 53, 105, 50, 14, -27, 122, 120}
SecurityHandler.encryptData() line 223 - which decrypts the string gives: J?rg Boettger. bytes = [74, -102, 114, 103, 32, 66, 111, 101, 116, 116, 103, 101, 114]
Note the -102 in the second character.
The second character, whose byte-value is -102 is not a displayable ASCII char (even at 256 -102 = 154) and it just gets dropped from the COSString & so we get an author of Jrg Boettger from PDDocumentInformation.
I'm not sure what the requirements are for handling non-ASCII chars in this situation. But Adobe Reader 9, 10 & Mac OS X's Preview application all show the correct author value.",0,"Andreas Lehmkühler","Neil McErlean",0,2,"14/May/11 18:44","10/Nov/14 11:37","10/Nov/14 11:37"
PDFBOX-1012,PDFBOX,"Update the documentation of the command line tools",Bug,CLOSED,Minor,Fixed,1.5.0,1.6.0,"Swing GUI",None,,"The documentation of the command lines tools is updated/wrong/inconsistent as sorted out by Markus Schlautmann, see [1] for further details
[1] http://markmail.org/message/hrvl2rjhwlt6qcgs",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"15/May/11 15:32","02/Jul/11 16:28","15/May/11 16:43"
PDFBOX-1013,PDFBOX,"NullPointerException in org.apache.pdfbox.pdmodel.graphics.PDShading.toString, when getDomain() returns null",Bug,CLOSED,Minor,Fixed,1.5.0,1.6.0,PDModel,None,"windows 7, ubuntu","The problem is that the toString method is called on objects which may have been returned as null
The suggested fix to this, in the attached patch is to check if null, then write an empty string
String s = "Shading " + shadingname + "\n"
+ "\tShadingType: " + getShadingType() + "\n"
+ "\tColorSpace: " + sColorSpace + "\n"
+ "\tAntiAlias: " + getAntiAlias() + "\n"
+ "\tCoords: " + (getCoords() != null ? getCoords().toString() : "") + "\n"
+ "\tDomain: " + (getDomain() != null ? getDomain().toString() : "") + "\n"
+ "\tFunction: " + sFunction + "\n"
+ "\tExtend: " + (getExtend() != null ? getExtend().toString() : "") + "\n"
+ "\tRaw Value:\n" +
<Error message as dumped to log>
INFO [main] (PDFStreamEngine.java557) - unsupported/disabled operation: BDC
INFO [main] (PDFStreamEngine.java557) - unsupported/disabled operation: BX
WARN [main] (SHFill.java63) - java.lang.NullPointerException
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.graphics.PDShading.toString(PDShading.java:204)
at org.apache.pdfbox.pdfviewer.PageDrawer.SHFill(PageDrawer.java:398)
at org.apache.pdfbox.util.operator.pagedrawer.SHFill.process(SHFill.java:58)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
INFO [main] (PDFStreamEngine.java557) - unsupported/disabled operation: EX
INFO [main] (PDFStreamEngine.java557) - unsupported/disabled operation: EMC
</Error message as dumped to log>",0,"Andreas Lehmkühler","Craig Stires",0,0,"17/May/11 10:47","02/Jul/11 16:29","08/Jun/11 10:31"
PDFBOX-1014,PDFBOX,"Unused XRef object streams cause parser to fail + FIX",Bug,CLOSED,Major,Duplicate,1.6.0,None,Parsing,None,,"I have a PDF document with 3 XRef streams (no xref table; PDF version 1.6). Currently PDFBOX reads and parses all 3 streams in the order the appear and combines the data in a dictionary (thus attributes specified in a later XRef stream overwrite attributes in earlier streams). The problem with my document is that the first 2 XRef streams declare document encryption while the last one does not. Furthermore the last one uses another document id thus trying to decrypt the document would fail because of the different IDs (however already the parsing of the stream in the first XRef object already fails.
The solution I came up with is to first get all XRef streams, start looking from last one if it contains a 'Prev' key and go up the list as long as we have this 'Prev' key. This should work in most cases assuming that multiple active XRef sections appear in order without an unused XRef section in between. A really correct solution would have to test for object byte positions (therefore it would be necessary to store byte positions for each object).
The fix in COSDocument.parseXrefStreams():
public void parseXrefStreams() throws IOException
{
COSDictionary trailerDict = new COSDictionary();
// use only last XRef and XRef which are referenced by a used XRef via 'Prev'
// we assume that 'Prev' will reference next preceding xref object
// (otherwise we would have to use object byte positions)
List<COSObject> xrefStreams = getObjectsByType( "XRef" );
int firstXRefIdx = xrefStreams.size() - 1;
while ( firstXRefIdx > 0 )
{ COSStream stream = (COSStream)xrefStreams.get( firstXRefIdx ).getObject(); if ( stream.getInt( COSName.PREV, -1 ) == -1 ) // no 'Prev' key; current xref object will be first one we use break; }
// for( COSObject xrefStream : getObjectsByType( "XRef" ) )
for ( int xrefIdx = firstXRefIdx, len = xrefStreams.size(); xrefIdx < len; xrefIdx++ )
{ COSStream stream = (COSStream)xrefStreams.get( xrefIdx ).getObject(); trailerDict.addAll(stream); PDFXrefStreamParser parser = new PDFXrefStreamParser(stream, this, forceParsing); parser.parse(); }
setTrailer( trailerDict );
}",0,"Andreas Lehmkühler","Timo Boehme",0,0,"18/May/11 13:45","09/Feb/13 11:19","19/May/11 14:22"
PDFBOX-1016,PDFBOX,"Specification conform xref/trailer parsing + Fix",Bug,CLOSED,Major,Fixed,1.6.0,1.6.0,Parsing,None,,"PDFBOX currently reads xref table/trailer and XRef objects without using startxref or 'Prev' information which results in applying not active data resulting in using wrong objects or resulting in parsing exceptions because old trailer settings do not apply anymore. This happens especially with updated PDF documents where changes are simply appended and old objects/xref entries remain but are not referenced. My last patch (PDFBOX-1014) tried to solve this for a specific case but it was based on assumptions which do not hold in every case.
The specification compliant way is to read the last startxref which points to the last xref object which itself may reference further xref objects using 'Prev' attribute.
I have written a fix which works the standard way and can fall back to the old behavior in case startxref is wrong or missing. The fix tries to be as unobtrusive as possible. A new class (o.a.p.pdfparser.XrefTrailerResolver) is filled with all xref table/trailer and XRef object data. After document is parsed (and last startxref is read) this class creates xref table and trailer using startxref and 'Prev' information. Beside this new class there are small changes to PDFParser and COSDocument.
This bugfix/improvement should bring PDFBOX a good step closer to be PDF specification conform - especially as long as the new specification conform parser project is not finished.
This bugfix supersedes the fix from PDFBOX-1014.",0,"Andreas Lehmkühler","Timo Boehme",0,0,"19/May/11 14:13","02/Jul/11 16:28","23/Jun/11 17:19"
PDFBOX-1018,PDFBOX,"Remove imageIO dependency (was: PDPage convertToImage bug creates white images from black and white pdf files.)",Improvement,CLOSED,Critical,Fixed,"1.2.0, (4)",1.6.0,None,pdfbox,"java 1.6","This bug has been reported in various other tickets submitted before. I am attempting to conclusively prove that this is an issue, and it needs to be attended to since all past tickets regarding this bug have been marked invalid.
I have attached a video showing very basic code that will reproduce the issue. I have also attached the code that causes the issue, as well as a PDF file that works (a color one), and a black and white PDF file that doesn't.
The main issue is that when reading a black and white PDF file (see attached black and white pdf file), the following message is displayed, and the contents of the output image is completely white.
26/05/2011 3:20:14 PM org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNING: getRGBImage returned NULL
We use PDFBox in our program for reading PDF files, and at least 50 percent of our customer's PDF files (from different scanners) will not read because of this issue. This is a complete show stopper, and I'd be more than happy to help in any way I could to resolve it.",0,"Andreas Lehmkühler","Roland Quast",0,1,"26/May/11 05:41","30/May/11 05:29","30/May/11 05:29"
PDFBOX-1019,PDFBOX,"PDF conversion to image crashes the JVM",Bug,CLOSED,Major,Fixed,1.5.0,2.0.0,PDModel,None,"ubuntu, mac os x","The file http://tie.open.ac.uk/256.pdf crashes the JVM during conversion to jpeg with the following message :
Assertion failed: (fnum >= 0 && fnum < t->numSubrs), function BuildSubrs, file ../../../src/share/native/sun/font/t2k/t1.c, line 3098.
Java Result: 134
The error happens in the method convertToImage():
PDPage page = (PDPage) pages.get(startPage);
PDPage page = (PDPage) pages.get(0);
try
{ image = page.convertToImage(); }
catch (IOException ex)
{ Logger.getLogger(PdfIText.class.getName()).log(Level.SEVERE, null, ex); }
The problem occurs not for all files, but is critical as it stops my webserver (Tomcat) that needs to be then restarted.",0,"Andreas Lehmkühler","Petr Knoth",1,9,"26/May/11 17:02","17/Mar/16 19:08","20/Jan/14 19:00"
PDFBOX-1020,PDFBOX,"Can't read embedded font YDLRUT+ArialMT",Bug,CLOSED,Major,Fixed,1.5.0,2.0.0,PDModel,None,"java 1.6, linux","On all PDF reports of our application we get the following (or similar) errors.
The reports are based on Arial with Unicode. Renders fine on Adobe Acrobat and similar products. However, the resulting png is in a different font.
Messages:
[java] WARNING: Changing font on < > from <Arial Bold> to the default font
[java] May 29, 2011 11:15:04 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
...
[java] INFO: Can't read the embedded font FYKTFO+Arial-BoldMT
To reproduce:
1. Extract zip.
2. Start tst.ksh.",0,"Andreas Lehmkühler","Guido Leenders",0,1,"29/May/11 09:35","17/Mar/16 19:08","04/Aug/13 12:31"
PDFBOX-1021,PDFBOX,"Performance in PDDocument.Load",Improvement,CLOSED,Major,Duplicate,1.5.0,None,PDModel,performance,"windows 7","When I use PDFBox 1.5.0, it takes longer to load a pdf file than PDFBox 1.4.x.
I tested PDDocument.load performance by a 10M pdf file.
It took 1.5 sec in PDFBox 1.4.0, and 9.1 sec in PDFBox 1.5.0.
Is it a performance issue in PDFBox 1.5.0?
What functions should I use to improve performance?",0,"Andreas Lehmkühler","Ting Huang Chen",0,0,"29/May/11 15:57","01/Jun/11 21:19","01/Jun/11 21:19"
PDFBOX-1022,PDFBOX,"PDPage convertToImage creates inverted black and white image for indexed colorspace.",Bug,CLOSED,Critical,Duplicate,1.5.0,None,PDModel,None,"java 1.6, windows 7","The attached PDF file demonstrates that line 178 of PDPixelMap.java does not try to determine what is the black value and what is the white value. The colorspace of the attached PDF file is PDIndexed.
Inverting this value makes the file render correctly, but there needs to be some kind of way to determine what is black/white for a PDIndexed colorspace.
if (colorspace instanceof PDDeviceGray)
{
COSArray decode = getDecode();
// we have to invert the b/w-values,
// if the Decode array exists and consists of (1,0)
if (decode != null && decode.getInt(0) == 1)
{
map = new byte[]
{(byte)0xff};
}
else
{
map = new byte[] {(byte)0x00, (byte)0xff};
}
}
else if (colorspace instanceof PDICCBased)
{
if ( ((PDICCBased)colorspace).getNumberOfComponents() == 1)
{
map = new byte[] {(byte)0xff}
;
}
else
{
map = new byte[]
{(byte)0x00, (byte)0xff};
}
}
else
{
map = new byte[] {(byte)0x00, (byte)0xff}
; // <--- HAPPENS HERE - NO TEST FOR BLACK/WHITE LIKE OTHER CASES ABOVE.
}",0,"Andreas Lehmkühler","Roland Quast",0,0,"30/May/11 06:36","30/May/11 16:42","30/May/11 16:42"
PDFBOX-1023,PDFBOX,"Getting image with black background when converting from PDF to Image!!",Bug,CLOSED,Major,Fixed,1.5.0,1.6.0,PDModel,None,"windows 7","Everytime I try to conver a PDF file with a graphic on it, to Image (PNG) I get a black background beneath the graphic, where the background is white originally, here's my code:
PDDocument document = PDDocument.load(new File("C:\\export_settings
testReport.pdf"));
List<PDPage> pages = document.getDocumentCatalog().getAllPages();
for (int i = 0; i < pages.size(); i++)
{ PDPage singlePage = pages.get(i); BufferedImage buffImage = singlePage.convertToImage(); ImageIO.write(buffImage, "PNG", new File("C:\\export_settings\\page" + i + ".png")); }
The image quality is good, except for this, I tried with two different methos but I got the same result, please help me, thanks!",0,"Andreas Lehmkühler",OttoMP,0,0,"30/May/11 23:50","02/Jul/11 16:29","07/Jun/11 14:03"
PDFBOX-1024,PDFBOX,"Some PDBorderStyleDictionary options not honored",Bug,CLOSED,Minor,"Not A Problem",1.5.0,None,PDModel,"border links","windows 7, acrobat","I'm creating links and using PDBorderStyleDictionary to set the border style, but have noticed that some options are not honored when opening the files. Here are my findings:
PDBorderStyleDictionary.STYLE_UNDERLINE = works correctly.
PDBorderStyleDictionary.STYLE_SOLID = works correctly.
PDBorderStyleDictionary.STYLE_BEVELED = identical to using SOLID.
PDBorderStyleDictionary.STYLE_INSET = identical to using SOLID.
PDBorderStyleDictionary.STYLE_DASHED = identical to using SOLID in appearance, link type under Properties in Acrobat is "Custom".
I've noticed that when I manually create a link in Acrobat the only options are Solid, Dashed and Underline, so maybe the PDF specs have changed and need to be updated in PDFBox as well.",0,"Andreas Lehmkühler","Gilad Denneboom",0,1,"31/May/11 14:00","25/Jun/11 17:34","25/Jun/11 17:34"
PDFBOX-1025,PDFBOX,"Can't load pdf file which has attachment",Bug,CLOSED,Major,"Cannot Reproduce","1.4.0, 1.5.0",None,PDModel,None,,"PDFBox throws exeception when parsing some pdf files with attachment.
Those pdf files can be opened by acrobat reader successfully.
The exception messages are not the same, different file has different message.
One of the message is:
Invalid dictionary, found: 'U' but expected: '/'
I've checked latest version, it still happen.",0,"Andreas Lehmkühler","Ting Huang Chen",0,2,"02/Jun/11 08:58","13/Oct/14 18:25","13/Oct/14 18:25"
PDFBOX-1029,PDFBOX,"Patch for ArrayIndexOutOfBound Exception",Bug,CLOSED,Major,Fixed,1.5.0,1.6.0,PDModel,patch,,"This document opens fine in Adobe Reader.While extracting page labels from getLabelsByPageIndices() i got the below exception
java.lang.ArrayIndexOutOfBoundsException: 3
at org.apache.pdfbox.pdmodel.common.PDPageLabels$2.newLabel(PDPageLabels.java:218)
at org.apache.pdfbox.pdmodel.common.PDPageLabels.computeLabels(PDPageLabels.java:252)
at org.apache.pdfbox.pdmodel.common.PDPageLabels.getLabelsByPageIndices(PDPageLabels.java:214)
ORIGINAL CODE IN PDPageLabels.java
public String[] getLabelsByPageIndices()
{
final String[] map = new String[doc.getNumberOfPages()];
computeLabels(new LabelHandler()
{
public void newLabel(int pageIndex, String label)
{ map[pageIndex] = label; }
});
return map;
}
It works fine with the below modified code in PDPageLabels.java
MODIFIED CODE IN PDPageLabels.java
public String[] getLabelsByPageIndices()
{
final String[] map = new String[doc.getNumberOfPages()];
computeLabels(new LabelHandler()
{
public void newLabel(int pageIndex, String label)
{
if(pageIndex < doc.getNumberOfPages())
{ map[pageIndex] = label; }
}
});
return map;
}",0,"Andreas Lehmkühler",karthick,0,0,"03/Jun/11 05:43","02/Jul/11 16:28","07/Jun/11 08:27"
PDFBOX-103,PDFBOX,"ExtractImages Failed",Bug,CLOSED,Major,"Cannot Reproduce",None,None,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1335826
Originally submitted by rob_tmaz on 2005-10-23 16:12.
I try this command line
C:\PDFBox-0.7.2\PDFBox-0.7.2\bin>ExtractImages.exe
"c:\CMGCDENVOI.PDF"
Writing image:I0-2
Exception in thread "main" java.lang.ClassCastException
at org.pdfbox.filter.FlateFilter.decode
(FlateFilter.java:70)
at
org.pdfbox.pdmodel.common.PDStream.getPartiallyFilteredStream
(PDStrea
m.java:257)
at
org.pdfbox.pdmodel.graphics.xobject.PDCcitt.write2OutputStream
(PDCcit
t.java:125)
at
org.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file
(PDXObje
ctImage.java:118)
at org.pdfbox.ExtractImages.extractImages
(ExtractImages.java:169)
at org.pdfbox.ExtractImages.main
(ExtractImages.java:74)
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1335826&file_id=153553
CMGCDENVOI.PDF (application/pdf), 18118 bytes
PDF with image
[comment on SourceForge]
Originally sent by groosta.
Logged In: YES
user_id=1496332
The following simple code leads to
error: "UnsupportedOperationException was unhandled". In
different tests I always received this error when running:
write2file method.
org.pdfbox.pdmodel.PDDocument document =
org.pdfbox.pdmodel.PDDocument.load(@"C:\a1.pdf");
java.util.List pages = document.getDocumentCatalog
().getAllPages();
org.pdfbox.pdmodel.PDPage page =
(org.pdfbox.pdmodel.PDPage)pages.get(0);
org.pdfbox.pdmodel.PDResources resources =
page.getResources();
java.util.Map images = resources.getImages();
java.util.Iterator imageIter = images.keySet
().iterator();
while (imageIter.hasNext())
{ string key = (string)imageIter.next(); org.pdfbox.pdmodel.graphics.xobject.PDPixelMap image = (org.pdfbox.pdmodel.graphics.xobject.PDPixelMap) images.get(key); image.write2file(file_name); }",0,"Andreas Lehmkühler",Anonymous,0,1,"23/Oct/05 23:12","13/Mar/13 11:33","13/Mar/13 11:33"
PDFBOX-1030,PDFBOX,"COSWriter.visitFromStream() does not close InputStream.",Bug,CLOSED,Major,Fixed,"1.4.0, 1.5.0",1.6.0,Writing,None,,"We use pdfbox inside apache-karaf to write complex PDF files.
Therefore we are including several COSStreams in the PDF file to be written. Some of the COSStream's use a scratch file for storing the stream content.
Inspecting the open files of my apache-karaf unveiled, that these scratch files a still open after writing the PDDocument and closing it.
Therefore I inspected the code inside COSWriter.visitFromStream(COSStream) and found out, the the InputStream name 'input' opened right at the beginning is never closed.
Please add a finally-clause, which robustely closes this input stream.
I inspected pdfbox-1.4.0 and the current SVN revision under
http://svn.apache.org/viewvc/pdfbox/trunk/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java?revision=1092855&view=markup
I would be very nice, if this issue could be fixed before pdfbox-1.6.0
TIA and best regards, Wolfgang",0,"Andreas Lehmkühler","Wolfgang Glas",0,1,"04/Jun/11 16:34","02/Jul/11 16:29","20/Jun/11 17:57"
PDFBOX-1031,PDFBOX,"PDFMergerUtility - form fields disappear",Bug,CLOSED,Major,Fixed,1.5.0,"2.0.5, (1)",Utilities,"PDFMergerUtility acr","windows 7, acrobat, eclipse","I merge 2 PDF files with fields in them, but the result PDF contains no fields.
I believe this is related to PDFBOX-930, which remains unsolved.",0,"Maruan Sahyoun","Gilad Denneboom",3,5,"07/Jun/11 11:55","25/Mar/17 18:13","29/Jan/17 19:13"
PDFBOX-1032,PDFBOX,"Signing improvement (settable signature size)",Improvement,CLOSED,Major,Fixed,1.6.0,1.6.0,Writing,None,,"Here is a small patch that add a new setter and getter "preferedSignatureSize" to the SignatureOptions. So the user can set the approximate signature size on one's own.
We use a small amount of bytes for the signature itself like 0x500 and additional calculate the size of the whole certificate chain that should be wrote inside the signature. This is much better than setting a fix signature size.
If the user don't set any size, 0x2500 will be reserved.",0,"Andreas Lehmkühler","Thomas Chojecki",0,0,"07/Jun/11 17:32","02/Jul/11 16:29","25/Jun/11 17:01"
PDFBOX-1033,PDFBOX,"PDFToImage create blank pages: llegalArgumentException: Width (2480) and height (0) must be > 0",Bug,CLOSED,Major,Fixed,1.6.0,1.6.0,None,None,,"PDFToImage create blank pages.
You can find this PDF file here: http://acl.ldc.upenn.edu/C/C90/C90-3003.pdf
Exception is:
java.lang.IllegalArgumentException: Width (2480) and height (0) must be > 0
at java.awt.image.SampleModel.<init>(Unknown Source)
at java.awt.image.MultiPixelPackedSampleModel.<init>(Unknown Source)
at java.awt.image.MultiPixelPackedSampleModel.<init>(Unknown Source)
at java.awt.image.Raster.createPackedRaster(Unknown Source)
at java.awt.image.Raster.createPackedRaster(Unknown Source)
at java.awt.image.IndexColorModel.createCompatibleWritableRaster(Unknown Source)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDCcitt.getRGBImage(PDCcitt.java:134)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:78)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:135)
at org.apache.pdfbox.PDFToImage.main(PDFToImage.java:231)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:58)",0,"Andreas Lehmkühler","hanna grochowska",0,0,"08/Jun/11 09:52","02/Jul/11 16:29","08/Jun/11 13:17"
PDFBOX-1034,PDFBOX,"Missing definition for some values within build.xml",Bug,CLOSED,Minor,Fixed,1.5.0,1.6.0,Utilities,None,,"According to Bill Burns description the definition of some values within the build.xml file is missing.
[1] http://markmail.org/message/t6ngho2vyf3qjbu7",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"08/Jun/11 14:08","02/Jul/11 16:28","08/Jun/11 14:27"
PDFBOX-1035,PDFBOX,"DateConverter badly handles date with minus sign in TimeZone",Bug,CLOSED,Minor,Fixed,"1.5.0, 1.6.0",1.6.0,Parsing,None,"windows 7, fedora","In a PDF where CreationDate is like "D:20110603085808-04'00'" (American West Coast), the method PDDocumentInformation.getCreationDate does not return a calendar with a correctly set timezone : offset remains 0.
There is no problem with "D:20110603085808+04'00'" where offset is correct.
The problem is in org.apache.pdfbox.util.DateConverter that does not handle '-'.
Obvisouly, same problem with getModificationDate
I made this patch to fix my problem :
— DateConverter.java (revision 1133573)
+++ DateConverter.java (working copy)
@@ -251,6 +251,10 @@
//parseInt cannot handle the + sign
hours = Integer.parseInt( date.substring( 15, 17 ) );
}
+ else if (sign == '-')
+
{ + hours = -Integer.parseInt(date.substring(15,17)); + }
else
{
hours = -Integer.parseInt( date.substring( 14, 16 ) );
It works, but I think there is much work to do on this method.",0,"Andreas Lehmkühler","Guillaume Bailleul",0,0,"08/Jun/11 22:56","02/Jul/11 16:28","13/Jun/11 15:34"
PDFBOX-1036,PDFBOX,"FDFExport/Import gives strange results",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Utilities,"AcroForm Appearance ","windows 7, acrobat, eclipse","1. Create a new, blank PDF in Acrobat.
2. Add a text form field and set the contents to "some text".
3. Run ExportFDF and then ImportFDF on this file.
The result is a messed-up text box. See the attached files.
Also I've noticed that the FDF created by PDFBox is very different to the one created by Acrobat.
Here's my code:
ExportFDF.main(new String[]
{"c:/gilad/input/test.pdf", "c:/gilad/input/test.fdf"}
);
ImportFDF.main(new String[]
{"c:/gilad/input/test.pdf", "c:/gilad/input/test.fdf", "c:/gilad/input/result.pdf"}
);",0,"Maruan Sahyoun","Gilad Denneboom",0,4,"10/Jun/11 08:04","13/Dec/14 14:14","03/Nov/14 11:47"
PDFBOX-1038,PDFBOX,"Strange signs after pdftohtml parsing.",Bug,CLOSED,Major,Fixed,1.5.0,1.6.0,"Text extraction",None,windows,"After parsing pdf to html I've got a strange signs which supposed to be nice letter (not chinese or japanese). I've noticed that font description for them is UniversPro-Roman-Identity-H.
How can get it generated properly?",0,"Andreas Lehmkühler",Funfel,0,2,"14/Jun/11 15:33","23/Oct/14 18:26","23/Oct/14 18:26"
PDFBOX-1039,PDFBOX,"Arabic Text Extraction using PDFTextStripper working partially",Bug,CLOSED,Major,"Not A Problem",1.5.0,None,"Text extraction","arabic textExtractio","windows xp, java 1.6","I have been trying to extract the contents of PDF file (so as to index it with lucene). The PDF file contains arabic.
Both PDF files contain the exact same information. The strange thing is PDFTextStripper extract data from one file correctly(gives proper arabic) but not from the other(gives complete question marks ???? or [][][][][] )
Below is the code being used
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import org.apache.pdfbox.cos.COSDocument;
import org.apache.pdfbox.pdfparser.PDFParser;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.util.PDFTextStripper;
public class TesExtraction {
// Extract text from PDF Document
static String pdftoText(String fileName) {
PDFParser parser;
String parsedText = null;;
PDFTextStripper pdfStripper = null;
PDDocument pdDoc = null;
COSDocument cosDoc = null;
File file = new File(fileName);
if (!file.isFile())
{ System.err.println("File " + fileName + " does not exist."); return null; }
try
{ parser = new PDFParser(new FileInputStream(file)); }
catch (IOException e)
{ System.err.println("Unable to open PDF Parser. " + e.getMessage()); return null; }
try
{ parser.parse(); cosDoc = parser.getDocument(); pdfStripper = new PDFTextStripper("CP-1252"); pdDoc = new PDDocument(cosDoc); pdfStripper.setStartPage(1); pdfStripper.setEndPage(5); parsedText = pdfStripper.getText(pdDoc); }
catch (Exception e)
{ System.err .println("An exception occured in parsing the PDF Document." + e.getMessage()); }
finally {
try
{ if (cosDoc != null) cosDoc.close(); if (pdDoc != null) pdDoc.close(); }
catch (Exception e)
{ e.printStackTrace(); }
}
return parsedText;
}
public static void main(String args[])
{ System.out.println(pdftoText("C:\\LuceneTest\\Data\\TestWord.pdf")); System.out.println(pdftoText("C:\\LuceneTest\\Data\\TestPDFCreator.pdf")); }
}
NOTE: Where can I upload the pdf files ?",0,"Andreas Lehmkühler",Franklin,0,1,"17/Jun/11 08:02","23/Mar/13 13:05","18/Jun/11 12:37"
PDFBOX-104,PDFBOX,"NullPointerException from using PDFTextStripper w/ some URLs",Bug,CLOSED,Major,"Won't Fix",None,None,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1335941
Originally submitted by pkorn78 on 2005-10-23 21:51.
Hi,
I've tried to extract text from this URL:
http://www.ischool.washington.edu/mcdonald/papers/Lutters.AMCIS00.pdf
However, it throws java.lang.NullPointerException on me
although the PDF file does exist on that URL.
Here's the code where I invoke the PDFTextStripper:
String docURL =
"http://www.ischool.washington.edu/mcdonald/papers/Lutters.AMCIS00.pdf";
try{
PDFTextStripper stripper = new PDFTextStripper();
PDDocument pdfDoc =
PDDocument.load(getInputStreamFromURL(docURL));
String strippedText = stripper.getText(pdfDoc);
pdfDoc.close();
return stippedText;
}
catch(IOException e){
e.printStackTrace();
}
Here's getInputStreamFromURL method used in the above code:
public InputStream getInputStreamFromURL(String url){
try
{ URL myURL = new URL(url); URLConnection con = myURL.openConnection(); con.setRequestProperty("User-Agent",""); return con.getInputStream(); }
catch(MalformedURLException e)
{ e.printStackTrace(); }
catch(IOException ie)
{ ie.printStackTrace(); }
return null;
}
Please advise, Thanks
-Palakorn
[comment on SourceForge]
Originally sent by brzrkr.
Logged In: YES
user_id=1489602
I am chasing a similar problem which might be related.
What I found (using PDFDebugger.java) was that the PDF
has an invalid PageTree: the root node and 5 of the 6
Page objects are valid, but the 6th is a Stream, and
not a Dictionary(Page). The offending code is:
private static COSArray
org.pdfbox.pdmodel.PDPageNode.getAllKids(
List result, COSDictionary page, boolean recurse
);
which needs to check that kids is non-null before
using it.
[comment on SourceForge]
Originally sent by brzrkr.
Logged In: YES
user_id=1489602
I am chasing a similar problem which might be related.
What I found (using PDFDebugger.java) was that the PDF
has an invalid PageTree: the root node and 5 of the 6
Page objects are valid, but the 6th is a Stream, and
not a Dictionary(Page). The offending code is:
private static COSArray
org.pdfbox.pdmodel.PDPageNode.getAllKids(
List result, COSDictionary page, boolean recurse
);
which needs to check that kids is non-null before
using it.",0,"Andreas Lehmkühler",Anonymous,0,1,"24/Oct/05 04:51","13/Mar/13 18:43","13/Mar/13 18:43"
PDFBOX-1041,PDFBOX,"While creating a signature, in some cases two same entries may ocure inside the AcroForm fields",Bug,CLOSED,Major,Fixed,1.5.0,1.6.0,PDModel,None,,"This can happen if the DocumentCatalog-AcroForm and the Page-Annotations share the same fields-array.
The patched PDDocument check if an entry exists and decide if it should be add.",0,"Andreas Lehmkühler","Thomas Chojecki",0,0,"20/Jun/11 10:38","02/Jul/11 16:28","28/Jun/11 17:42"
PDFBOX-1043,PDFBOX,"PDF Version not read in the document catalog","New Feature",CLOSED,Minor,Fixed,1.5.0,1.6.0,"Parsing, (1)",None,ubuntu,"The version of the PDF document is read ONLY in the header. PDF 1.4 allows the version to also be specified in the document catalog (see section 3.6.1 PDF 1.5 reference).",0,"Andreas Lehmkühler","Mehdi Houshmand",0,1,"21/Jun/11 09:50","02/Jul/11 16:29","25/Jun/11 17:32"
PDFBOX-1044,PDFBOX,"Handle function parameters more abstract",Bug,CLOSED,Major,Fixed,1.5.0,1.6.0,Parsing,None,,"When numbers are parsed, PDFBox uses the floating point to detect wether the number is a float (floating point exists) or an integer (no floating point). This may lead to a ClassCastException.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"21/Jun/11 16:09","02/Jul/11 16:28","21/Jun/11 16:25"
PDFBOX-1045,PDFBOX,"Typos within the thumbnail datatype",Bug,CLOSED,Minor,Fixed,1.5.0,1.6.0,JempBox,None,,"Rüdiger Rauschenbach reported some minor typos within the thumbnail datatype implementation of jempbox, see [1] for further details.
[1] http://markmail.org/thread/tv52uf6jo6b7k3dd",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"21/Jun/11 20:56","02/Jul/11 16:29","21/Jun/11 20:58"
PDFBOX-1046,PDFBOX,"Decrypting malformed document with signature cause NPE",Bug,CLOSED,Major,Fixed,1.5.0,1.6.0,Parsing,None,,"I got a encrypted document that was destroyed by the signer.
The decrypter can handle it but while searching for signatures, a null check is missing. This cause NPE.
My patch will cause throw a IOException if something went wrong while decrypting. Another solution is just skipping the object (in my case the referenced object is missing) and continue.
Maybe a errorhandling for the parser will be a good idea. So the user can decide how importan it is for him to parse a pdf properly and step off if a document isn't conform OR continue and risk to lose some information while parsing malformed documents.",0,"Andreas Lehmkühler","Thomas Chojecki",0,0,"22/Jun/11 09:40","02/Jul/11 16:29","25/Jun/11 13:55"
PDFBOX-1047,PDFBOX,"PDPageLabels with Junks in Particular Pdf",Bug,CLOSED,Major,Fixed,1.5.0,1.7.0,PDModel,PageLabel,,"Hi all.
While extracting Page number with particular PDF, the last page number was with Junk values which is also extracted.
Here by I attaching the particular PDF and kindly guide me in that particular issue.
Here by I show my snippet of code which is working fine in all PDF but adding junk values with the particular PDF.
CODE:
PDDocumentCatalog cat = pd.getDocumentCatalog();
String[] labels = cat.getPageLabels().getLabelsByPageIndices();
System.out.println("Hi"+labels[0] +"Hi");
System.out.println("Hi" +labels[labels.length - 1] + "Hi");
OUTPUT
Hi1Hi Correct Output for First Page
Hi3 Orginal output for Last Page(bug)
Hi3Hi Expected output for Last Page
Kindly guide me in this issue .i attach the sample PDF with this file.
Thank you
Regards
Karthick.g",0,"Andreas Lehmkühler",karthick,0,0,"22/Jun/11 10:24","29/May/12 16:21","03/Jul/11 18:08"
PDFBOX-1048,PDFBOX,"Extracted PDF (text) partially garbled",Bug,CLOSED,Major,Fixed,1.5.0,1.7.0,"Text extraction",None,"mac os x","When using Tika 0.9 to etxract text from the given PDF, the text partially gets garbled.",0,"Andreas Lehmkühler","Joscha Feth",0,2,"24/Jun/11 06:12","13/Oct/14 18:55","13/Oct/14 18:55"
PDFBOX-1049,PDFBOX,"NPE in PDFont.getFontWidth()",Bug,CLOSED,Major,Fixed,1.6.0,1.6.0,PDModel,None,,"Trying to run ExtractText on the attached PDF will result in a lot of the following Exceptions:
Jun 24, 2011 11:44:54 AM org.apache.pdfbox.util.PDFStreamEngine processOperator
WARNING: java.lang.NullPointerException
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.font.PDFont.getFontWidth(PDFont.java:787)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.getFontWidth(PDSimpleFont.java:1
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.ja
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:22
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:442)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:366
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:322)
at org.apache.pdfbox.ExtractText.startExtraction(ExtractText.java:256)
at org.apache.pdfbox.ExtractText.main(ExtractText.java:76)",0,"Andreas Lehmkühler","Henning Saul",0,0,"24/Jun/11 15:49","02/Jul/11 16:28","25/Jun/11 07:17"
PDFBOX-1050,PDFBOX,"Unit tests for PDFBox features","New Feature",CLOSED,Minor,Fixed,1.5.0,1.6.0,PDModel,None,ubuntu,"We're upgrading the pdfbox we use and to ensure there aren't any regressions, while also learning pdfbox, we are unit testing some of the classes, especially the PDF "primitive" objects (COS level).",0,"Andreas Lehmkühler","Mehdi Houshmand",0,0,"27/Jun/11 07:16","02/Jul/11 16:28","28/Jun/11 17:55"
PDFBOX-1051,PDFBOX,"Problem reading signed documents without new line after %%EOF",Bug,CLOSED,Major,Fixed,1.5.0,1.6.0,Writing,None,,"If a document without an new line after %%EOF was signed incremental, the first object in the revision will be wrote directly behind the %%EOF without a blank or a new line
this will look like this:
%%EOF1 obj <<......>>
The adobe reader can read such documents, the pdfbox skip it. I looked inside the pdf specification and can't find more details about such kind of documents, so I think this is a valid document. In case that some readers can handle it, I added a "new line" before writing the incremental update with the PDDocument.saveIncremental method.",0,"Adam Nichols","Thomas Chojecki",0,0,"27/Jun/11 11:00","24/Mar/13 14:44","28/Jun/11 21:41"
PDFBOX-1052,PDFBOX,"XMPMetadata.getSchemas () delivery incorrect result if multiple namespaces are present",Bug,CLOSED,Major,Fixed,1.5.0,1.6.0,JempBox,None,,"If an RDF document only has a single rdf:description element covering multiple namespaces, the getSchemas () method delivers only the first namespace.
It can easily be fixed by changing line 613 to:
for (int j = 0; j < attributes.getLength(); j++)
Please see the attached file for an example.",0,"Andreas Lehmkühler","Philip Helger",0,0,"27/Jun/11 11:42","02/Jul/11 16:28","28/Jun/11 17:17"
PDFBOX-1053,PDFBOX,"DateConverter fails to handle dates having milliseconds",Bug,CLOSED,Major,Duplicate,1.5.0,None,JempBox,None,,"The method DateConverter.toCalendar fails to parse dates that have milliseconds. The Adobe SDK can handle them.
Example date:
2010-12-12T12:41:35.00+01:00",0,"Guillaume Bailleul","Philip Helger",0,0,"27/Jun/11 11:52","12/Nov/11 12:49","12/Nov/11 12:49"
PDFBOX-1054,PDFBOX,"DateConverter: allow for external adding of potential date parsing formats","New Feature",CLOSED,Major,Fixed,1.5.0,"1.8.3, 2.0.0",JempBox,None,,"Please create a method "addPotentialDateFormat" in class DateConverter so that new date formats can be added from the outside without modifying the JemBox sources themselves.",0,"Andreas Lehmkühler","Philip Helger",0,1,"27/Jun/11 12:11","30/Nov/13 17:02","11/Nov/13 19:02"
PDFBOX-1055,PDFBOX,"XMPMetadata.getSchemasByNamespaceURI() implementation inefficient",Improvement,CLOSED,Minor,Fixed,1.5.0,1.8.7,JempBox,None,,"The implementation of getSchemasByNamespaceURI is inefficient, if no namespace mapping is present.
You may consider to call "List<XMPSchema> l = getSchemas();" just before the iterator is retrieved.",0,"Andreas Lehmkühler","Philip Helger",0,1,"27/Jun/11 12:16","19/Sep/14 14:40","23/Jun/14 16:46"
PDFBOX-1056,PDFBOX,"Integration of a PDF/A validator in PDFBox",Task,CLOSED,Major,Fixed,1.6.0,1.7.0,Utilities,None,,"We (Atos Worldline) donate our PDF/A validator to the PDFBox project. This product is based on PDFBox and a javacc parser. Before this donation, the product was already distributed under Apache Licence 2. Its current name is padaf.
Padaf complies the isartor test suite.
This version depends on standard PDFBox 1.5.0 version. Only one test class does not compile with current HEAD (on 27 of june), all other test cases pass.
Padaf is composed of 2 modules :
preflight : the validator
xmpbox : an other implementation of xmp parser and writer. We make that choice because we did not have the time to propose all necessary modification in jempbox.
The attached tar ball contains :
sources of the 2 modules
junit tests for each one
a parent (that will soon disappear) already depending on pdfbox-parent
These are SHA1 for each attached file
b9bb323fa73e1416a8b282fe2a687cebf1ac2145 padaf-apache.tgz
e9e5fb05105799b9884be0ae6c060323aed3211a pdfbox160.patch",0,"Andreas Lehmkühler","Guillaume Bailleul",0,1,"27/Jun/11 19:12","26/Jul/11 20:32","26/Jul/11 20:32"
PDFBOX-1057,PDFBOX,"PDXObjectImage create diferences between pdf on mac and windows",Bug,CLOSED,Major,"Not A Problem",1.5.0,None,PDModel,None,"mac os x, java 1.6","Hi! I hope you can help me with this, I have a pdf form, I use pdfbox to fill the fields, but also to add a barcode to the form, the barcode is generated with jbars, this generate a jpg, then I add this jpg to the pdf form, on Mac works everything fine, but when I generate/open the same form on Windows the barcode is distorted, I dont know whats going on, not sure If I did something wrong or is the pdfbox.
[code]
File fi = new File(codigoBarras.getPathToImg()); //the generated Codebar
if(!fi.exists() || !fi.canRead())
{ Log.error("GenerarPoliza", "La imagen del codigo de barras no se genero correctamente."); //the codebar didnt generate correctly codigo = false; }
PDXObjectImage ximage = null;
ximage = new PDJpeg(this.pdf, new FileInputStream( fi ) ); //this.pdf is the pdf document.
ximage.setWidth(toPixel(60 * pixelXmm_x)); //set the width of the image
ximage.setHeight(toPixel(13 * pixelXmm_x)); //set the height of the image
PDPageContentStream contentStream = new PDPageContentStream(this.pdf, pagina, true , true);
contentStream.drawImage(ximage, toPixel(20.0 * pixelXmm_x), toPixel(10.0 * pixelXmm_y)); //draw the codebars to the given coordinates.
contentStream.close();
[/code]",0,"Andreas Lehmkühler","Jose robles",0,0,"01/Jul/11 17:00","31/Jan/12 16:48","31/Jan/12 16:48"
PDFBOX-1058,PDFBOX,"Converting PDF to Image gives error and the image generated is of poor quality",Bug,CLOSED,Major,Fixed,1.6.0,2.0.0,Rendering,JDK1.7,"windows 7","please download a pdf from http://www.fujixeroxprinters.com.au/downloads/uploaded/DocuPrint%20Mono%20205%20Series_8c68.pdf (now attached to this issue)
and Try converting it to images using below command through command prompt :-
java -jar pdfbox-app-1.6.0.jar PDFToImage abc123.pdf
It generated images for me but images generated are of very poor quality and I can see exceptions also in command prompt.
Below is the error I get on console :-
WARNING: java.io.IOException: Not Implemented
java.io.IOException: Not Implemented
at org.apache.pdfbox.pdfviewer.PageDrawer.SHFill_Axial(PageDrawer.java:4
79)
at org.apache.pdfbox.pdfviewer.PageDrawer.SHFill(PageDrawer.java:412)
at org.apache.pdfbox.util.operator.pagedrawer.SHFill.process(SHFill.java
:58)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngin
e.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngi
ne.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngi
ne.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.
java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:
135)
at org.apache.pdfbox.PDFToImage.main(PDFToImage.java:231)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:58)
Jul 7, 2011 9:51:17 AM org.apache.pdfbox.pdfviewer.PageDrawer SHFill
INFO: Shading = Shading COSName
{Sh0}
ShadingType: 3
ColorSpace: DeviceN{ }
AntiAlias: false
Coords: COSArray{[COSFloat
{0.0}, COSFloat{0.0}
, COSFloat
{0.0}, COSFloat{0.0}
, COSFloat
{0.0}, COSFloat{1.0}]}
Domain: COSArray{[COSFloat{0.0}
, COSFloat
{1.0}]}
Function: org.apache.pdfbox.pdmodel.common.function.PDFunctionType3@1b59
98f
Extend: COSArray{[true, true]}
Raw Value:
COSDictionary{(COSName{ColorSpace}:COSArray{[COSName{DeviceN}, COSArray{[COSName {Black}]}, COSName{DeviceCMYK}, COSObject{487, 0}, COSObject{485, 0}]}) (COSName {AntiAlias}:false) (COSName{Coords}:COSArray{[COSFloat{0.0}, COSFloat{0.0}, COSF
loat{0.0}, COSFloat{0.0}, COSFloat{0.0}, COSFloat{1.0}
]}) (COSName
{Function}
:COS
Dictionary{(COSName
{FunctionType}
:COSInt
{3}) (COSName{Encode}:COSArray{[COSFloat {0.0}, COSFloat{1.0}, COSFloat{0.0}, COSFloat{1.0}]}) (COSName{Domain}:COSArray{
[COSFloat{0.0}, COSFloat{1.0}]}) (COSName{Functions}:COSArray{[COSObject{621, 0}
, COSObject{620, 0}]}) (COSName{Bounds}:COSArray{[COSFloat{0.840652}]}) }) (COSN
ame{Extend}:COSArray{[true, true]}) (COSName{Domain}:COSArray{[COSFloat{0.0}, CO
SFloat{1.0}]}) (COSName{ShadingType}:COSInt{3}
) }
Jul 7, 2011 9:51:17 AM org.apache.pdfbox.util.operator.pagedrawer.SHFill process
WARNING: java.io.IOException: Not Implemented
java.io.IOException: Not Implemented
at org.apache.pdfbox.pdfviewer.PageDrawer.SHFill_Radial(PageDrawer.java:
493)
at org.apache.pdfbox.pdfviewer.PageDrawer.SHFill(PageDrawer.java:415)
at org.apache.pdfbox.util.operator.pagedrawer.SHFill.process(SHFill.java
:58)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngin
e.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngi
ne.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngi
ne.java:251)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java
:130)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngin
e.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngi
ne.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngi
ne.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.
java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:
135)
at org.apache.pdfbox.PDFToImage.main(PDFToImage.java:231)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:58)
Writing: abc1234.jpg",0,"John Hewson","Nidhi Jain",1,3,"07/Jul/11 02:01","17/Mar/16 19:07","26/Feb/14 20:58"
PDFBOX-1059,PDFBOX,"WinAnsiEncoding : the code 0251 (Copyrigth) inserted twice",Bug,CLOSED,Trivial,Fixed,1.6.0,1.7.0,None,None,,"Hi,
We are using PDFBox to explore the PDF file structure in Padaf. (PDF/A validation tool)
We have an issue on font validation.
For each character we have to check the width consistency of the glyph in the PDFFont dictionary and the Glyph width in the font program.
However, the WinAnsiEncoding defines the Copyright character twice with two different names. ("copyright" and "circlecopyrt") When we ask the name of the character, PDFBox returns "circlecopyrt" and this name is missing from our font program.
The "circlecopyrt" isn't the name used in the PDF Reference Appendix, so we can remove it because it is declared in a custom Encoding dictionary.
Do you agree with that point?
Best Regards,
Eric",0,"Andreas Lehmkühler","Eric Leleu",0,0,"07/Jul/11 13:05","29/May/12 16:21","23/Jul/11 16:12"
PDFBOX-1060,PDFBOX,"convertToImage includes "ghost" annotation outlines",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Rendering,convertToImage,"windows 7, eclipse","When using PDPage.convertToImage() to export PNG files of pages with annotations on them, "ghost" outlines of the annotations sometimes appear on the generated image. The outlines do not correspond to the location of the annotations. See the attached files.
Code used:
String inputFilePath = "C:/Gilad/input/3 Pages from batch_sequences.pdf";
PDDocument doc = PDDocument.load(inputFilePath);
for (int p=0; p<doc.getNumberOfPages(); p++)
{ PDPage page = (PDPage) doc.getDocumentCatalog().getAllPages().get(p); BufferedImage bImg = page.convertToImage(); String imagePath = FilenameUtils.getFullPath(inputFilePath) + "PAGE"+ Integer.toString(p) + ".png"; File yourImageFile = new File(imagePath); ImageIO.write(bImg,"png",yourImageFile); }",0,"Andreas Lehmkühler","Gilad Denneboom",0,2,"11/Jul/11 10:08","13/Dec/14 14:15","10/Nov/14 11:27"
PDFBOX-1064,PDFBOX,"Can't set destination of a PDOutlineItem to null",Bug,CLOSED,Minor,"Not A Problem",None,None,PDModel,bookmarks,"windows 7, eclipse","Because of the overloaded setDestination() method of PDOutlineItem it's not possible to set it to null and therefore remove the Go To Named Destination action, like it is possible with PDOutlineItem.setAction(), for example.
Sample code:
PDOutlineItem bookmark = doc.getDocumentCatalog().getDocumentOutline().getFirstChild();
bookmark.setDestination(null); // DOES NOT COMPILE",0,"Andreas Lehmkühler","Gilad Denneboom",0,1,"14/Jul/11 11:55","23/Jul/11 15:58","23/Jul/11 15:58"
PDFBOX-1065,PDFBOX,"PDF Link Annotations not working after Merge - PDFBox version 1.6.0",Bug,CLOSED,Major,Fixed,1.6.0,"2.0.5, (1)",Utilities,features,"windows xp, linux","Hi All,
We are using Apache PDFBox-v1.6.0 to merge PDF documents. Strangely we are facing issues with the Annotations & Links after merging the PDF documents.
Say 1_testfile1.pdf has 3 Link annotations. If this PDF document is opened seperately, upon clicking the annotation it properly takes
us to the annotation reference.
2_testfile1.pdf has 3 Link annotations, likewise the annotation and its references are properly working.
Once these documents are merged using PDFBox-v1.6.0, the annotations in the first PDF alone works without any issues. When we click the annotations in the second/merged PDF nothing happens.
I do have the 1_testfile1.pdf, 2_testfile1.pdf and merged output.pdf. Please mail me (sgkrishnan_5@yahoo.com) in case you need the PDF files for testing. Can anyone please help me in resolving this issue? Let me know if you require any other information.
Regards,
Gokul",0,"Maruan Sahyoun",Krishnan,0,2,"14/Jul/11 22:30","25/Mar/17 18:13","10/Feb/17 18:28"
PDFBOX-1066,PDFBOX,"There is no functionlaity of reading the text line by line with its input field",Bug,CLOSED,Major,"Not A Problem",0.7.3,None,"Text extraction",patch,windows,"I am trying to read the PDF texts along with its input type like textfield/checkboxes. What i found is TextStripper is pasing the whole document and retuning the string in getText(). And using Acroform.getfields i am able ot get all fields.
But I have perticuler requierment of reading the texts and its input type. Do we have any class/method which can resolve this issue.
Its very urgent.",0,"Andreas Lehmkühler",Nishant,0,1,"15/Jul/11 12:31","23/Oct/14 18:19","23/Oct/14 18:19"
PDFBOX-1067,PDFBOX,"PDF Scan from Xerox WorkCentre 5030 renders as all black","New Feature",CLOSED,Major,Fixed,1.6.0,1.8.0,PDModel,JBIG2,"mac os x, ubuntu, windows","The file "ItDoesntWorkScan.pdf" renders to an empty
black page. This file is a copy of "ItDoesntWorkPrinted.pdf"
that has been printed on paper, and then scanned with
a Xerox WorkCentre 5030 scanner, which then emails a pdf file
back to the user.
Tested On:
Mac OS 10.6
Windows 7
Ubuntu 10.10
Unfortunately, the WorkCentre 5030 doesn't appear to have
many user-settable options for scanning to PDF, so we weren't
really able to try scanning with settings other than the defaults.
Will attach pdf and code to demonstrate.",0,"Andreas Lehmkühler","Sarah Kelley",4,6,"18/Jul/11 18:42","04/Jun/14 09:32","18/Nov/12 14:36"
PDFBOX-1072,PDFBOX,"PDFImageWriter extracts black images from arabic PDFs",Bug,CLOSED,Major,Fixed,1.6.0,1.8.0,Utilities,JBIG2,,"When I tried to extract a JPEG image from arabic PDF, i've got a corrupted file with black area which overlays all arabic text on each page.
In console i've got only this debug message and no other exceptions and so on:
DEBUG (PDPixelMap.java:241) - ColorModel: IndexColorModel: #pixelBits = 1 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@2eeb3c84 transparency = 2 transIndex = 1 has alpha = true isAlphaPre = false
This is not only one pdf file. I have about 400-500 files which produces the same thing.
Code:
PDFImageWriter writer = new PDFImageWriter();
PDDocument document = PDDocument.load(sourceFile);
writer.writeImage(document, "jpg", "", 1, 1, filename);",0,"Andreas Lehmkühler","Anton Stremoukhov",0,1,"19/Jul/11 12:59","23/Mar/13 12:56","18/Nov/12 14:46"
PDFBOX-1074,PDFBOX,"TIFFFaxDecoder5 when using PDFImageWriter",Bug,CLOSED,Major,Fixed,"1.6.0, 1.8.4, 1.8.5","1.8.5, 2.0.0",Utilities,"CCITTFaxDecode ccitt",,"I'm getting this when I try to PDFImageWriter.writeImage() on a PDF with one page (see attached page_83.pdf):
Caused by: java.lang.Error: TIFFFaxDecoder5
at org.apache.pdfbox.filter.TIFFFaxDecoder.decodeT6(TIFFFaxDecoder.java:1005)
at org.apache.pdfbox.filter.CCITTFaxDecodeFilter.decode(CCITTFaxDecodeFilter.java:101)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:279)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:221)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:156)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDCcitt.getRGBImage(PDCcitt.java:153)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:78)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:135)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:105)
If you look on the pdf file i'm using (see attached page_83.pdf) you'll notice its completely blank, but this is ok - page was obtained from source pdf file with 84 pages where the last one is blank (see attached 34315.pdf).
Source pdf has been splitted on pages (without any errors) via Splitter like so:
FileInputStream fis = new FileInputStream(file);
PDFParser parser = new PDFParser(fis);
parser.parse();
COSDocument cosDoc = parser.getDocument();
PDDocument pdDoc = new PDDocument(cosDoc);
Splitter splitter = new Splitter();
List<PDDocument> pages = splitter.split(pdDoc);
for (int i = 0; i < pages.size(); i++){
PDDocument pageDoc = pages.get;
String fileNameNew = "page_" + i + ".pdf";
writeDocument(pageDoc, new File(destDir, fileNameNew).getPath());
pageDoc.close();
}
fis.close();
cosDoc.close();
pdDoc.close();",0,"Tilman Hausherr","Anton Stremoukhov",3,4,"21/Jul/11 09:37","02/May/14 06:12","26/Mar/14 06:50"
PDFBOX-1075,PDFBOX,"Can't get images from a PDF",Bug,CLOSED,Major,Fixed,"1.6.0, 1.7.0",1.7.0,Parsing,None,,"This is a regression. In 1.4.0 I was able to extract images from a PDF file. In 1.6 and the current trunk I get exceptions:
SEVERE: java.lang.IllegalArgumentException: Raster BytePackedRaster: width = 1000 height = 32 #channels 1 xOff = 0 yOff = 0 is incompatible with ColorModel IndexColorModel: #pixelBits = 1 numComponents = 3 color space = java.awt.color.ICC_ColorSpace@1050169 transparency = 1 transIndex = -1 has alpha = false isAlphaPre = false
java.lang.IllegalArgumentException: Raster BytePackedRaster: width = 1000 height = 32 #channels 1 xOff = 0 yOff = 0 is incompatible with ColorModel IndexColorModel: #pixelBits = 1 numComponents = 3 color space = java.awt.color.ICC_ColorSpace@1050169 transparency = 1 transIndex = -1 has alpha = false isAlphaPre = false
at java.awt.image.BufferedImage.<init>(BufferedImage.java:611)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:252)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.write2OutputStream(PDPixelMap.java:289)
at org.apache.pdfbox.TestGovdocs148902.test148902(TestGovdocs148902.java:58)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at junit.framework.TestCase.runTest(TestCase.java:168)
at junit.framework.TestCase.runBare(TestCase.java:134)
at junit.framework.TestResult$1.protect(TestResult.java:110)
at junit.framework.TestResult.runProtected(TestResult.java:128)
at junit.framework.TestResult.run(TestResult.java:113)
at junit.framework.TestCase.run(TestCase.java:124)
at junit.framework.TestSuite.runTest(TestSuite.java:232)
at junit.framework.TestSuite.run(TestSuite.java:227)
at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
http://domex.nps.edu/corp/files/govdocs1/148/148902.pdf
I pasted it into the src/test/resources/pdfparser folder and run a test case like this:
public class TestGovdocs148902 extends TestCase
{
public void test148902() throws IOException {
PDDocument doc = PDDocument.load( "src/test/resources/pdfparser/148902.pdf");
int imageCounter = 0;
COSDocument cosDoc = doc.getDocument();
List<COSObject> list = cosDoc.getObjectsByType(COSName.XOBJECT);
for (COSObject cosOb : list) {
COSBase baseObject = cosOb.getObject();
if (baseObject != null && baseObject instanceof COSStream) {
COSStream st = (COSStream)baseObject;
String subtype = st.getNameAsString(COSName.SUBTYPE);
if (subtype != null && subtype.equalsIgnoreCase("image")) {
PDXObjectImage ximage = (PDXObjectImage)PDXObject.createXObject( st );
if (ximage != null && ximage.getWidth() >= 5 && ximage.getHeight() >= 5) {
ByteArrayOutputStream baos = new ByteArrayOutputStream();
ximage.write2OutputStream(baos);
byte [] bytes = baos.toByteArray();
if (bytes.length > 0)
{ imageCounter++; }
}
}
}
}
assertEquals(32, imageCounter);
}
}
The test cases passes in 1.4.",0,"Andreas Lehmkühler","Antoni Mylka",0,3,"25/Jul/11 13:21","28/May/14 13:16","23/Oct/11 14:55"
PDFBOX-1077,PDFBOX,"PDPage convertToImage not returning rotated image",Bug,CLOSED,Major,Duplicate,1.6.0,None,"Swing GUI",None,"java 1.6, windows xp","PDPage.convertToImage is not returning a rotated image when Rotate: 90 or Rotate: 270 is specified in the page dictionary.",0,"Andreas Lehmkühler","Joseph Berglund",0,1,"25/Jul/11 19:32","23/Mar/13 13:05","10/Aug/11 06:07"
PDFBOX-1079,PDFBOX,"TestCOSFloat occasionally fails: Is something wrong with my machine?",Bug,CLOSED,Minor,Fixed,1.7.0,1.7.0,None,None,"windows, netbeans, java","In org.apache.pdfbox.cos.TestCOSFloat, testEquals() fails when num is close to 1.0f.
I originally encountered the problem as an occasional failure while building the unmodified source code.
I can get the failure consistently by setting num to 1.0f explicitly in the code and running the test.
The problem occurs on this line, on the last iteration of the loop, when i is 280000f and num is close to 280000f.
COSFloat test4 = new COSFloat(num + 0.01f);
It passes consistently on my machine if I change this value to 0.02f.",0,"Guillaume Bailleul","Aaron Stewart",0,0,"29/Jul/11 19:33","15/Aug/11 09:43","15/Aug/11 09:43"
PDFBOX-1080,PDFBOX,"Improve TextPosition.isDiacritic and ICU4JImpl normalizeDiac performance",Improvement,CLOSED,Minor,Fixed,1.6.0,1.7.0,"Text extraction",None,,"Character.getType with cText.charAt(0) and index range checks are invoked unnecessarily three times instead of only one time.
Current 1.6.0 implementation:
public boolean isDiacritic()
{ String cText = this.getCharacter(); return (cText.length() == 1 && (Character.getType(cText.charAt(0)) == Character.NON_SPACING_MARK || Character.getType(cText.charAt(0)) == Character.MODIFIER_SYMBOL || Character.getType(cText.charAt(0)) == Character.MODIFIER_LETTER)); }
Please use something like this:
public boolean isDiacritic()
{ final String cText = this.getCharacter(); if (cText.length() != 1) return false; final int type = Character.getType(cText.charAt(0)); return (type == Character.NON_SPACING_MARK || type == Character.MODIFIER_SYMBOL || type == Character.MODIFIER_LETTER); }
Check the ICU4JImpl.normalizeDiac method also",0,"Andreas Lehmkühler","Lars Torunski",0,0,"29/Jul/11 20:13","29/May/12 16:21","14/Sep/11 18:55"
PDFBOX-1082,PDFBOX,"A landscape PDF is rasterized as portrait",Bug,CLOSED,Minor,Duplicate,1.6.0,None,PDModel,None,ubuntu,"Fairly simple put give PDFBox a landscape PDF and create an image raster. It is created as portrait.",0,"Andreas Lehmkühler","Mehdi Houshmand",0,1,"05/Aug/11 08:13","23/Mar/13 13:05","10/Aug/11 06:09"
PDFBOX-1084,PDFBOX,"java.lang.NumberFormatException when getting PDF text of some PDF file if dup line does not contains font index",Bug,CLOSED,Major,Fixed,"1.5.0, 1.6.0",1.8.0,"Text extraction",Type1,,"Get the following exception when getting text of some PDF if dup line does not contains font index (I can send a sample PDF file)
java.lang.NumberFormatException: For input string: "8#40"
at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
at java.lang.Integer.parseInt(Integer.java:458)
at java.lang.Integer.parseInt(Integer.java:499)
at org.apache.pdfbox.pdmodel.font.PDType1Font.getEncodingFromFont(PDType1Font.java:341)
at org.apache.pdfbox.pdmodel.font.PDType1Font.determineEncoding(PDType1Font.java:276)
at org.apache.pdfbox.pdmodel.font.PDFont.<init>(PDFont.java:181)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.<init>(PDSimpleFont.java:83)
at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:152)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:108)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:75)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:243)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:442)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:366)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:322)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:242)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:255)
Suggested correction is :
in org.apache.pdfbox.pdmodel.font.PDType1Font.java in method getEncodingFromFont add try/catch block line 341 to avoid java.lang.NumberFormatException if dup line does not contains font index.",0,"Andreas Lehmkühler","Sandra Grenier",1,1,"09/Aug/11 09:13","19/Jul/14 12:46","27/Dec/12 14:37"
PDFBOX-1085,PDFBOX,"Wrong PostcriptScriptTable due to wrong assumption in Encoding/MacRomanEncoding",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,FontBox,None,,"When parsing a PostScriptTable of a TrueType font (Format 2.0: Non-Standard (for PostScript) TrueType Glyph Set.) I wondered about the many wrong "space" entries for non-whitespace-glyphs for which TTFDump stated ".notdef".
I found out that org.apache.fontbox.encoding.(MacRoman)Encoding.getName() puts a "space" when codeToName doesnt find a name.
This method should be changed to return ".notdef" for unknown codes (means code with no PSGlyf Name)
public String getName( int code ) throws IOException
{
String name = codeToName.get( code );
if( name == null )
{ name = ".notdef"; }
return name;
}",0,"Andreas Lehmkühler","Wulf Berschin",0,0,"09/Aug/11 15:23","29/May/12 16:21","01/Nov/11 16:55"
PDFBOX-1086,PDFBOX,"Error when decoding CCITT compressed data that contains EOLs, fill bits etc.",Bug,CLOSED,Major,Fixed,None,2.0.0,Parsing,"CCITTFaxDecode ccitt",,"The TIFFFaxDecoder class (originally coming from JAI via XML Graphics Commons) does not handle cases like EOLs between lines and in front. But the PDF CCITTFaxDecode filter needs to allow many different variants of the encoding. Apparently, TIFF has a relatively restricted way of encoding CCITT data, so TIFFFaxDecoder was not written to be as flexible as we need it. Ideally, PDFBox should handle anything that gets thrown at it.
It apprears that it would be rather difficult to retrofit TIFFFaxDecoder with the necessary flexibility. So, new decoders for T.4 and T.6 should probably be written.",0,"Jeremias Maerki","Jeremias Maerki",0,2,"10/Aug/11 14:53","17/Mar/16 19:08","10/Oct/14 19:49"
PDFBOX-1087,PDFBOX,"FDF parsing is unreliable when xref are missing",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,FDF,"windows, java 1.6","The following simple FDF is not parsed correctly. The fields list returned by FDFDocument.load(fdfPath).getCatalog().getFDF().getFields(); is null. Note that xrefs are optional in FDF
%FDF-1.2
%âãÏÓ
1 0 obj
<< 
/FDF << /Fields [ << /V (Sample body)/T (Body)>> << /V (Sample to)/T (To)>> 
] 
>> 
>> 
endobj
trailer
<<
/Root 1 0 R 

>>
%%EOF",0,"Andreas Lehmkühler","Michel Onoff",0,1,"11/Aug/11 13:59","13/Dec/14 14:14","02/Nov/14 12:37"
PDFBOX-1088,PDFBOX,"Class PDDocument Method getPageMap returns a ClassCastException",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,PDModel,None,"windows xp","Trying to get the map of bookmarks to page numbers by using method getPageMap but throws a java.lang.ClassCastException: org.apache.pdfbox.pdmodel.PDPage",0,"Andreas Lehmkühler","Nghi Nguyen",0,0,"11/Aug/11 13:59","29/May/12 16:21","20/Sep/11 20:27"
PDFBOX-1089,PDFBOX,"Download page has PGP signature links but no KEYS link",Improvement,CLOSED,Minor,Fixed,None,None,None,None,,"The software download page has links to PGP signatures for the different components but there is no link to the KEYS that signed.
Moreover, the "release notes" link is broken.",0,"Andreas Lehmkühler","Michel Onoff",0,0,"11/Aug/11 14:04","24/Mar/13 14:35","11/Aug/11 17:00"
PDFBOX-1090,PDFBOX,"Text is extracted incorrectly",Bug,CLOSED,Major,Invalid,"1.6.0, 1.7.0",None,"Text extraction",None,,"Source file is attached, it's v1.3 PDF
1. Some text is extracted as garbage
2. columns are not separated
Result output is:
Documents Stack
Welcome to Mac OS X Stacks automatically display their contents in a fan or a
Snow Leopard. grid based on the number of items in the stack. You
JHUHSZV]PL^[OLZ[HJRHZHSPZ[0M`V\WYLMLYVULZ[`SL
The Dock in Snow Leopard V]LY[OLV[OLY`V\JHUZL[[OLZ[HJR[VHS^H`ZVWLUPU
includes Stacks, which that style.
you can use to quickly",0,"Andreas Lehmkühler","Sergey Vladimirov",0,2,"12/Aug/11 08:49","13/Oct/14 18:39","13/Oct/14 18:39"
PDFBOX-1093,PDFBOX,"Copy Page from one Document to another: Page Content Stream Linked to Original Document",Bug,CLOSED,Major,Fixed,1.6.0,1.8.2,"Text extraction",None,,"When a page is grabbed from one document and added to another (via addPage or importPage) the Content Stream of the page retains the scratchFile and unFiltered/FilteredStreams from it's original document. This means that a page is always connected to it's original document and not wholly a part of it's new document.
The problem with this situation:
-When searching for text within a large (800,000 page) pdf file performance can potentially be increased if the pdf file is split into single pages for incremental text extraction. Each page is searched individually rather than an entire document search. To achieve this, a new document is created and a single page from the original pdf is added.
-When searching through these 1 page documents, the scratchFile of the original pdf is used, and it will grow as the text from each page is extracted. This leads to an out of memory condition, which appears as a "SEVERE Stop reading corrupt stream" exception from doDecode() as the write buffer attempts to expand to a size greater than the maximum heap size.
A workaround for this problem is to create a new document, add the page to the document, save the document, close it and then load it again. Unfortunately the performance cost of this workaround is prohibitive.",0,"Andreas Lehmkühler",eddie.greene@gmail.c,0,2,"12/Aug/11 20:01","02/Jun/13 13:35","05/May/13 13:09"
PDFBOX-1095,PDFBOX,"PDFToImage image rendering fails on pdf with embedded picture(s)",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,Utilities,"image rendering",,,0,"Andreas Lehmkühler","Marco Ellwanger",0,0,"15/Aug/11 16:50","29/May/12 16:21","28/Sep/11 18:46"
PDFBOX-1096,PDFBOX,"CMapParser doesn't parse cmap version",Bug,CLOSED,Trivial,Fixed,None,1.7.0,None,None,,"CMapParser doesn't parse cmap version because it is usually number and CMapParser expect it to be always string.",0,"Andreas Lehmkühler","Sergey Vladimirov",0,0,"16/Aug/11 09:22","29/May/12 16:21","30/Aug/11 18:16"
PDFBOX-1097,PDFBOX,"Classes from generated sources are not included in preflight jar",Bug,CLOSED,Minor,Fixed,None,1.7.0,Preflight,None,,"classes generated from javacc are not in the simple jar due to default behaviour of maven-bundle-plugin
package should be added in pom configuration
jar-with-dependencies contains all because it is generated with maven-assembly-plugin
— preflight/pom.xml (revision 1158520)
+++ preflight/pom.xml (working copy)
@@ -61,6 +61,11 @@
<artifactId>maven-bundle-plugin</artifactId>
<version>2.0.0</version>
<extensions>true</extensions>
+ <configuration>
+ <instructions>
+ <Export-Package>org.apache.padaf.preflight.javacc|org.apache.padaf.preflight.javacc.*</Export-Package>
+ </instructions>
+ </configuration>
</plugin>
<plugin>
<artifactId>maven-assembly-plugin</artifactId>",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"17/Aug/11 05:54","17/Aug/11 06:09","17/Aug/11 06:09"
PDFBOX-1098,PDFBOX,"Wrong implemented stream reader",Bug,CLOSED,Critical,Duplicate,None,1.7.0,Parsing,ZLIB,,"The BaseParser#readUntilEndStream(OutputStream) method is parsing streams the wrong way. [1]
This method will start reading a stream till the keyword "endstream" is reached and don't care about the length value inside the dictionary. This implementation brokes nearly every pdf document with a pdf embedded inside a stream [2].
Encoder that is used for compressing streams can be block-based (like FlateDecode which is mostly used). If a block of data that should be compressed don't spare space after compressing, the encode do not compress this block and mark it as uncompressed. So a stream can containing compressed and uncompressed parts. So if someone try to embed pdf documents with streams inside a stream, the encoder will left most parts of the document uncompressed. Such parts can contain plan text like "endstream" or other critical keywords that can cause the parser to stop.
So we need to read the whole stream length that was wrote inside the dictionary and don't look at "endstream" keywords until the end is reached.
The current stream parser cause a ZIPException with the Message "Unexpected end of ZLIB input stream".
A sample pdf and a patch is coming soon.
[1] PDF 32000-1:2008 -> 7.3.8.2 Stream Extent
[2] PDF 32000-1:2008 -> 7.11.4 Embedded File Streams",0,"Timo Boehme","Thomas Chojecki",0,2,"17/Aug/11 13:49","29/May/12 16:21","21/May/12 21:19"
PDFBOX-1099,PDFBOX,"Only parsing object streams if they are referenced by the xref table / stream",Improvement,CLOSED,Major,Fixed,None,1.7.1,Parsing,None,,"Some pdf documents have objects streams and don't reference them through the xref table / stream. To prevent the stream parser to dereference such object streams, we need to implement the type 2 part (case 2) inside the PDFXRefStreamParser and store the objects inside a map. This will take some load from the stream parser (see PDFBOX-1098) and causes less failures while parsing a document.
A sample pdf can be get from the issue PDFBOX-1098 and a patch is coming soon.",0,"Timo Boehme","Thomas Chojecki",0,2,"17/Aug/11 14:38","25/Jul/12 06:01","16/Jul/12 15:56"
PDFBOX-1100,PDFBOX,"PDFMerger: Empty form fields",Bug,CLOSED,Major,Fixed,1.6.0,"2.0.5, (1)",Utilities,AcroForm,windows,"Merging two PDFs with form fields results in a PDF with empty fields.
The issue seems to be similar to PDFBOX-1031, but in my case i see the fields but not the value in the fields.
I use the following command to merge the PDFs:
java -classpath pdfbox-app-1.6.0.jar org.apache.pdfbox.PDFMerger a.pdf b.pdf c.pdf",0,"Maruan Sahyoun","Gerhard Temper",3,5,"18/Aug/11 08:45","25/Mar/17 18:13","30/Jan/17 10:45"
PDFBOX-1101,PDFBOX,"Improve JavaCC Grammar and Preflight to manage Xref stream object",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,Preflight,None,,"Until PDF 1.4, keywords "xref" and "trailer" were mandatory at the end of the PDF File to know where object are located into the PDF Body.
However, according to my understanding of the PDF Reference 1.5 and 1.7, this two entries can be referenced as object stream.
Because of the PDF/A-1 specification is based on the PDF 1.4, our JavaCC parser check that the file contains trailer entries and extract these trailers to process some controls after Syntax Validation.
TODO :
Check XRef and Trailer needs in the PDFReference 1.4 to 1.7
implement new XRef and Trailer managment rules in preflight.",0,"Eric Leleu","Eric Leleu",0,0,"18/Aug/11 10:59","29/May/12 16:21","27/Aug/11 11:59"
PDFBOX-1102,PDFBOX,"Attributes managment : Detect XMP properties défined as XMP attributes",Improvement,CLOSED,Major,Fixed,1.7.0,1.7.0,XmpBox,None,,"When we ask a specific property name on an instance of XMPSchema, only xml elements are parsed to retrieve the value.
In some cases, the property can be defined as xml attribute.
Instances of XMPSchema must provide a way to access a property value through an attribute.",0,"Eric Leleu","Eric Leleu",0,0,"18/Aug/11 11:06","10/Apr/13 17:28","04/Sep/11 17:13"
PDFBOX-1103,PDFBOX,"Addition on missing XMP Schema definitions","New Feature",CLOSED,Minor,Duplicate,1.7.0,None,XmpBox,None,,"Check that all Schema defined in the XMP specification are managed by the XMPBox module. (ex : Photoshop namespace is missing)",0,"Guillaume Bailleul","Eric Leleu",0,0,"18/Aug/11 19:53","28/Jul/12 08:56","28/Jul/12 08:56"
PDFBOX-1105,PDFBOX,"Integration Test in preflight to make easy validation",Improvement,CLOSED,Major,Fixed,None,1.7.0,Preflight,None,,"I join a patch that add 3 Test to :
check isartor files and check if expected error occurs
check invalid files and check (if defined) if expected error occurs
check valid files
pom.xml is modified to set these test as integration test.
If nothing is configured, integration phase does not fail.
If parameters are configured, directories with pdf files are pointed and test should fail is configuration is invalid
Parameters are :
isartor.files = path of isartor files
expected.errors = the file that contains expected error codes (see preflight/src/test/resources/expected_errors.txt)
invalid.files = path of directory containing file known as invalid
invalid.errors = a file that can contain expected error code for invalid file, this is not mandatory
valid.files = path of directory containing file known as valid
Use -D... to set parameters.
I will not commit that patch quickly because I am not sure it is the best way to do. With this method, there is no PDF/A file in generated artefacts so no licence problem. Anyone can have his set of file to validate preflight even if I could be a good idea to share when possible ... But I don't known where.
So if anyone has suggestion to help ...
sha1sum : d1694158976f7f6e69f893be149b7a1bb9a6a714 padaf-integ.patch",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"18/Aug/11 22:01","31/Aug/11 08:12","31/Aug/11 08:12"
PDFBOX-1106,PDFBOX,"PDFMergerUtility corrupts file attachments",Bug,CLOSED,Minor,Fixed,1.6.0,1.7.0,Utilities,"PDFMergerUtility att","windows 7, acrobat, eclipse","When combining files that contain (PDF) file attachments, the attachments carry over, but are corrupted in the merged file.
Code used:
PDFMergerUtility merger = new PDFMergerUtility();
merger.addSource("c:/gilad/testing/in/1.pdf");
merger.addSource("c:/gilad/testing/in/2.pdf");
merger.setDestinationFileName("c:/gilad/testing/in/merged.pdf");
try
{ merger.mergeDocuments(); }
catch (Exception e)
{ e.printStackTrace(); }",0,"Timo Boehme","Gilad Denneboom",0,1,"24/Aug/11 11:35","22/May/12 13:53","22/May/12 13:53"
PDFBOX-1108,PDFBOX,"NPE and IndexOutOfBounds in PDFunctionType3",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,PDModel,None,,"When experimenting with a possible shading implementation using the pdf attached to PDFBOX-615 I ran into some problems with functions of type 3",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"27/Aug/11 14:58","29/May/12 16:21","27/Aug/11 15:03"
PDFBOX-1109,PDFBOX,"Data corruption related to scratch file use",Bug,CLOSED,Critical,Invalid,"1.8.7, 2.0.0",2.0.0,"Parsing, (1)",None,,"PDFBox uses a scratch file to reduce memory consumption. However, there is no mechanism that prevents two PDStreams from writing to the scratch file at the same time. When this happens, the resulting PDF contains garbage in some streams. This problem occurred several times to me (e.g. when writing to an image stream while constructing a page).
Reproducing the bug
*******************
One can easily reproduce the bug. Open file AddImageToPDF.java and move the following line:
PDPageContentStream contentStream =
new PDPageContentStream(doc, page, true, true);
immediately after the line in which the PDPage object is fetched:
PDPage page =
(PDPage)doc.getDocumentCatalog().getAllPages().get( 0 );
With this modification, one will still get a PDF file, but Acrobat Reader will report that the image could not be processed. BTW, the files AddImageToPDF.java and ImageToPDF.java are almost identical. One of them should be deleted.
Bug-Fix
*******
The problem can be solved by using a scratch file that is divided into pages (e.g. of 4 KB). Each PDStream in the scratch file is then associated with a list of pages. This list grows as more data is written to the stream.
The bug fix requires minimal changes to the existing code. The very nice RandomAccess interface made this very easy.
Here is what needs to be changed:
Add the attached "PagedMultiRandomAccessFile.java" to the I/O package
Change COSDocument.getScratchFile() to return a RandomAccess
instance provided by PagedMultiRandomAccessFile:
private PagedMultiRandomAccessFile scratchFile = null;
[...]
public COSDocument(File scratchDir) throws IOException
{ tmpFile = File.createTempFile("pdfbox", "tmp", scratchDir); scratchFile = new PagedMultiRandomAccessFile( new RandomAccessFile(tmpFile, "rw")); }
public COSDocument(RandomAccess file)
{ // scratchFile = file; throw new RuntimeException("Not yet implemented."); //$NON-NLS-1$ }
[...]
/**
Returns a new scratch file.
*
@return the newly created scratch file
*/
public RandomAccess getScratchFile() { return scratchFile.getNewRandomAcess(); }
One of the COSDocument constructors takes a RandomAccess file. This constructor is only called in a single location, namely, in method PDFParser.parse(). I am not sure if the RandomAccess parameter provided here is really a scratch file. Someone will have to decide what to do with this one.
The code has been throughly tested and has been used in the production of several books without any problems.
In the attachment please find the code. There is also a JUnit test that was used to debug my code. I have added an Apache license header and adopted PDFBox's code style. Feel free to make any desired changes.",0,"Andreas Lehmkühler","Stefan Mücke",1,2,"29/Aug/11 19:44","02/Mar/15 12:07","02/Mar/15 12:05"
PDFBOX-1110,PDFBOX,"Check rules for ColorSpace validation",Bug,CLOSED,Minor,Fixed,1.7.0,1.7.0,Preflight,None,,"Some PDF/A validated by Adobe products are rejected by Preflight due to color space rules.
TODO :
Check requirement on the PDF/A specification
Fix problems",0,"Eric Leleu","Eric Leleu",0,1,"30/Aug/11 11:57","17/Nov/14 20:49","10/Jan/12 17:28"
PDFBOX-1111,PDFBOX,"Add Duplex and PrintScaling to viewer preferences",Improvement,CLOSED,Minor,Fixed,1.6.0,1.7.0,PDModel,ViewerPreferences,,"org.apache.pdfbox.pdmodel.interactive.viewerpreferences.PDViewerPreferences currently doesn't support viewer preferences Duplex and PrintScaling (defined in PDF Reference 1.7, Table 8.1). I created a simple patch to the above mentioned class including the two preferences.
Notes:
1. They require pdfversion 1.7 and 1.6 respectively. I don't know if this is the reason why they are not currently available and I also don't know if there's a way in PDFBox to make sure that the document version is consistent with the version required by the preferences.
2. Since the target jdk version is 1.5 I suggest to refactor the viewer preferences area to use Enums instead of String constants (Ex. right now I think nothing prevents to set a READING_DIRECTION constant as a NON_FULL_SCREEN_MODE) making the code more robust.",0,"Andreas Lehmkühler","Andrea Vacondio",0,0,"30/Aug/11 13:14","29/May/12 16:21","21/Sep/11 17:58"
PDFBOX-1112,PDFBOX,"Fix outline hierarchy control",Bug,CLOSED,Minor,Fixed,1.7.0,1.7.0,Preflight,None,,"During the Catalog validation, preflight checks the expected entries of the bookmark (Outline Dictionary).
There are a problem when the Outline is present with a Count entry set to 0, we expect First and Last entries.
First and last entries are forbidden if Count entry is missing
First and last entries must be present only if Count entry bigger than 0.",0,"Eric Leleu","Eric Leleu",0,0,"30/Aug/11 20:53","29/May/12 16:21","30/Aug/11 20:57"
PDFBOX-1115,PDFBOX,"Control on Font MetaData failed",Bug,CLOSED,Minor,Fixed,1.7.0,1.7.0,Preflight,None,,"Currently, the validation of the Font MetaData is too restrictive.
Preflight should only check the FontName consistency with the dc:title and the value of xmpRights:Marked.",0,"Eric Leleu","Eric Leleu",0,0,"06/Sep/11 17:29","24/Mar/13 14:44","06/Sep/11 17:42"
PDFBOX-1116,PDFBOX,"Wrong colors with test file",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,None,FunctionType4,"windows, java 1.6","The colors of the attached PDF are wrong when rendered with pdfbox 1.6.
As a sitenote, on a Windows 2000 system I do not have access to regularly, the text was completely messed up, too. I could not reproduce this on Windows Vista, though.
For completeness's sake, this is the code used to render the image:
PDDocument doc=PDDocument.load(file);
try
{ @SuppressWarnings("unchecked") List<PDPage> pages=doc.getDocumentCatalog().getAllPages(); return pages.get(0).convertToImage(); }
finally
{ doc.close(); }",0,"Andreas Lehmkühler","Axel Dörfler",0,0,"08/Sep/11 09:25","29/May/12 16:21","24/Oct/11 19:25"
PDFBOX-1117,PDFBOX,"[Preflight] Continue the PDF validation after syntax error",Improvement,CLOSED,Minor,Fixed,1.7.0,1.7.0,Preflight,None,,"Currently, the PDF content isn't checked if the PDF Syntax is invalid.
Study the possibility to continue the validation process if the grammar throws an exception.
It should be possible but I prefer to check that there aren't bad effects.",0,"Eric Leleu","Eric Leleu",0,0,"08/Sep/11 15:48","29/May/12 16:21","18/Sep/11 17:14"
PDFBOX-1118,PDFBOX,"All images in pdf document is not listed/extracted",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,"PDModel, (1)",None,"mac os x","Im using pdfbox to extract all images in a pdf document, but I have found some documents where not all images are exported. Im using the code from org.apache.pdfbox.ExtractImages
to extract the images.",0,"Andreas Lehmkühler","Pontus Hulin",0,0,"15/Sep/11 06:27","29/May/12 16:21","20/Sep/11 17:13"
PDFBOX-1119,PDFBOX,"Define the behaviour of the StreamValidationHelper",Task,CLOSED,Minor,Fixed,1.7.0,None,Preflight,None,,"Define the behaviour of the StreamValidationHelper when the COSStream provided by the PDDocument.getDocument().getObject() is missing from the XRef Table.
Currently, control on stream is done except for the length validation because we are using the offset provided by the XRefTable.
The way to check the stream length was developed at the beginning of the preflight project.
Maybe there are a better way using the PDFBox object to process it now or perhaps no control must be done if the object is missing from the Xref table",0,"Eric Leleu","Eric Leleu",0,0,"18/Sep/11 17:28","24/Jun/12 13:20","24/Jun/12 13:20"
PDFBOX-112,PDFBOX,"Retaining Bookmarks when merging PDF documents","New Feature",CLOSED,Major,Fixed,None,1.2.0,Utilities,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1374993
Originally submitted by nobody on 2005-12-06 19:09.
When two PDF documents containing Bookmarks are
apended,the bookmarks of both the PDF documents must
also be appended.",0,"Adam Nichols",Anonymous,0,0,"07/Dec/05 03:09","12/Feb/11 18:54","12/Aug/10 20:07"
PDFBOX-1120,PDFBOX,"PDFMergerUtility does not maintain tagged document structure",Bug,CLOSED,Major,Duplicate,None,None,Utilities,None,,"When appending tagged documents with the PDFMergerUtility.appendDocument method, tags from the source document are not copied to the destination document.",0,"Andreas Lehmkühler","Peter Spencer",2,4,"19/Sep/11 18:22","27/Oct/13 12:42","27/Oct/13 12:42"
PDFBOX-1122,PDFBOX,"Parsing Error, Skipping Object",Bug,CLOSED,Major,"Cannot Reproduce",1.6.0,None,Parsing,pdfbox,"windows 7, eclipse","Parsing Error, Skipping Object
java.io.IOException: expected='endstream' actual='' org.apache.pdfbox.io.PushBackInputStream@38011d45
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSStream(BaseParser.java:439)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:552)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:184)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1088)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1053)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:74)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:197)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:197)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:135)
at org.apache.tika.Tika.parseToString(Tika.java:357)
at edu.uci.ics.crawler4j.crawler.BinaryParser.parse(BinaryParser.java:37)
at edu.uci.ics.crawler4j.crawler.WebCrawler.handleBinary(WebCrawler.java:223)
at edu.uci.ics.crawler4j.crawler.WebCrawler.processPage(WebCrawler.java:462)
at edu.uci.ics.crawler4j.crawler.WebCrawler.run(WebCrawler.java:129)
at java.lang.Thread.run(Thread.java:662)
Did not found XRef object at specified startxref position 0
This is the sample URL where I am facing this problem:-
http://www.qualcomm.com/documents/files/rev-b-enhanced-mobile-broadband-for-all.pdf
Any suggestions why is it happening...!! Or its a bug??",0,"Andreas Lehmkühler","Raihan Jamal",0,4,"21/Sep/11 17:12","13/May/14 12:45","24/May/12 16:09"
PDFBOX-1125,PDFBOX,"NullPointerException when saving Document",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,Writing,None,,"I am trying to fill out this form(official Norwegian Government form): http://www.nav.no/Om+NAV/Skjemaer/Arbeidsgiverskjemaer/L%C3%B8nn+og+personalskjemaer+for+din+bedrift+%28HR%29/Yrkesskade/_attachment/1073746888?_ts=1271f676c80
My code looks as follows:
public void setKode(InputStream inputStream, String value, OutputStream output) throws IOException, COSVisitorException
{
PDDocument pdfDocument = PDDocument.load(inputStream);
if (LOGGER.isInfoEnabled())
{ LOGGER.info(pdfDocument.getCurrentAccessPermission().toString()); }
PDDocumentCatalog docCatalog = pdfDocument.getDocumentCatalog();
PDAcroForm acroForm = docCatalog.getAcroForm();
PDField field = acroForm.getField("beskrivelse");
if (field != null)
{ field.setValue(value); }
else
{ System.err.println("No field found with name:" + "beskrivelse"); }
pdfDocument.save(output);
}
While trying to fill in the field "beskrivelse" (or any other field in this form) I get the following stacktrace:
java.lang.NullPointerException
at java.io.FilterInputStream.close(FilterInputStream.java:155)
at org.apache.pdfbox.pdfwriter.COSWriter.doWriteSignature(COSWriter.java:688)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1039)
at org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:456)
at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1360)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1121)
at com.qmplus.PDFTest.App.setKode(App.java:36)
at com.qmplus.PDFTest.AppTest.test(AppTest.java:35)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
at org.junit.runners.ParentRunner.run(ParentRunner.java:292)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
The funny thing is, the output is created and looks to my eyes fine...",0,"Andreas Lehmkühler","Per Abich",1,2,"27/Sep/11 12:19","29/May/12 16:21","01/Nov/11 16:37"
PDFBOX-1126,PDFBOX,"Form Fields missing values (values are NULL)",Bug,CLOSED,Major,Fixed,1.7.0,1.8.0,AcroForm,None,"redhat, java 1.5, tomcat","When using getValue() to get the field value in PDFs, getValue() returns NULL. Even though the document, when opened in evince or in acroread shows the form fields correctly filled in (and the commandline pdftk utility also correctly grabs the form values). Using the precompiled commandline pdfbox app to bring up the PDFDebugger, the affected fields do not have any values, so I can't even try to grab the values "manually" by parsing the COSDictionary.
Also affects PDFBox 1.6.0.
Sample PDF triggering this issue in 90% of the form fields:
http://www.cnf.cornell.edu/doc/New_User_Application_-_Cornell.pdf
Grab it, fill it out with Acrobat Reader, then try to get the field values.",0,"Maruan Sahyoun","Dave Botsch",0,2,"27/Sep/11 15:23","27/Feb/14 14:32","27/Feb/14 14:31"
PDFBOX-1127,PDFBOX,"PDF supplies glyph->unicode mapping, but PDFBox doesn't use it.",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,None,None,,"We had a user report this PDF to the lucene lists: http://www.lucidimagination.com/search/document/7a8c14a534d9a84c/tika_can_not_parse_all_of_the_persian_pdf_files
I asked them to create a TIKA issue (TIKA-713) and attach the PDF file
Upon inspection, the fonts used in the PDF have custom encodings (that map the characters to U+0001, U+0002, ...), however they contain a mapping for the font to unicode >>/Type/Encoding/BaseEncoding/WinAnsiEncoding/Differences, but PDFbox doesnt use this mapping. If you use ExtractText it extracts the raw control characters instead.",0,"Andreas Lehmkühler","Robert Muir",0,1,"02/Oct/11 20:08","02/May/13 02:29","03/Oct/11 15:23"
PDFBOX-1128,PDFBOX,"Wrong color space used for DeviceN operator without color space specified",Bug,CLOSED,Minor,Fixed,1.6.0,1.7.0,"PDModel, (1)",None,,"I have a PDF that uses a DeviceN color space, but when using the PDFToImage utility I noticed that some of the text comes out as cyan.
I tracked the issue down to when the scn or SCN operator is used without setting the color space explicitly (ie using the current color space). I have attached a patch which resolves the issue by reinstating the original (DeviceN) color space after using the alternate color space, otherwise the alternate color space (in this case CMYK) was seen as the current color space and the attribute of 1 for the scn operator, which was meant for the DeviceN color space, is used in the CMYK color space resulting in the cyan.
I have also attached an example PDF and the result for the PDFToImage conversion.",0,"Andreas Lehmkühler","Simon Maskell",0,1,"03/Oct/11 11:41","29/May/12 16:21","15/Oct/11 15:08"
PDFBOX-1129,PDFBOX,"Quote glyphs (quoteright, quotedblright, etc.) not mapped to the right Unicode character",Bug,CLOSED,Minor,"Not A Problem",1.7.0,None,None,None,,"I have an example PDF (will attach) that uses a right-single-quote
character, but extracts incorrectly from PDFBox (using ExtractText).
If I copy/paste, the text is correct (I get U+2019 for the right
quote).
Search for "cashier" in the PDF, on page 1 to see it; that right quote
is supposed to come through as U+2019 I think.
I looked at the PDF in PDFDebugger, and I see this fragment in the
"Contents" for page 1:
(Bring the voucher handout to the cashier\325s office (10-180))Tj
So somehow this \325 escape fails to map to the quoteright glyph. The
font is partial embedded font BPOLKO+TimesNewRomanPSMT, and I can see
in the Charset (under FontDescriptor, for font F1) that it references
this glyph.
I also see a [correct] entry in glyphlist.txt, mapping to U+2019, so
that's not the problem.
Not sure what's going wrong... maybe somehow \325 fails to map to
quoteright?
There are other glyphs (quotedblright, quotedblleft) that are also not
converted correctly, eg search for project review on page 2.",0,"Andreas Lehmkühler","Michael McCandless",0,1,"03/Oct/11 16:46","23/Mar/13 13:05","13/Oct/12 14:11"
PDFBOX-1130,PDFBOX,"ExtractText -html doesn't always close the <p> tags it opens",Bug,CLOSED,Minor,Fixed,None,1.8.0,None,None,,"I have a test document (same one on PDFBOX-1129), which when run through ExtractText -html, extracts the page number for each page, however in each case the page number looks like:
<p>N<p>Text of page N...
Ie, the <p> tag for the page number wasn't closed.
Maybe related: if I run ExtractText without html, there is not space after the page number and before the next word, ie I see words like 1Massachusetts, 2Course, 3also, 4the.",0,"Andreas Lehmkühler","Michael McCandless",0,3,"04/Oct/11 10:23","02/Mar/15 20:51","13/Oct/12 13:59"
PDFBOX-1131,PDFBOX,"Patch: Adding line cap, line join, and line pattern support to PDPageContentStream",Improvement,CLOSED,Minor,Fixed,1.7.0,1.7.0,PDModel,None,,"PDPageContentStream does not support setting line cap style, line join style, and a line pattern. This patch adds the functionality.",0,"Andreas Lehmkühler","Alexander Fried",0,0,"04/Oct/11 18:42","29/May/12 16:21","19/Dec/11 18:43"
PDFBOX-1132,PDFBOX,"Add Tika parsers for PDF and TTF","New Feature",CLOSED,Major,"Won't Fix",None,None,"FontBox, Parsing",None,,"The PDF and TTF parsers in Apache Tika rely more on improvements in PDFBox than on those in Tika, so it would make more sense for that code to reside inside Apache PDFBox.
Having the code inside PDFBox would allow for tighter integration with PDFBox internals and avoid need to wait for an official PDFBox release before new features can be used inside the PDF and TTF parsers.
To do this, I'd migrate the code PDF and TTF parser classes and related test cases and files from Tika to the PDFBox and FontBox components. We'd add an optional dependency to tika-core to these components, so people who don't use or need Tika wouldn't be affected.
I'll attach a patch with the proposed changes.",0,"Jukka Zitting","Jukka Zitting",0,1,"05/Oct/11 18:23","23/Mar/13 13:05","22/May/12 13:38"
PDFBOX-1135,PDFBOX,"TextPosition created with wrong text size",Bug,CLOSED,Major,"Not A Problem","1.6.0, 1.7.0",None,"Text extraction",None,,"Both totalVerticalDisplacementDisp and fontSizeTextPx shall use textXctm to get actual size, not textMatrix.
I.e. line 503 of PDFStreamEngine shall be
(int)(fontSizeText * textXctm.getXScale())
Affected file in attach.",0,"Andreas Lehmkühler","Sergey Vladimirov",0,1,"10/Oct/11 08:17","04/Sep/13 10:50","04/Sep/13 10:50"
PDFBOX-1136,PDFBOX,"Possibilty to direcvtly add R and D stream into PDAppearanceDictionary",Improvement,CLOSED,Major,Fixed,1.6.0,1.7.0,"AcroForm, (1)",patch,,"Adding two methods to authorize adding directly R and D stream into AP dictionary, by patching org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary class",0,"Andreas Lehmkühler","Pierre Huttin",0,2,"11/Oct/11 19:34","29/May/12 16:21","18/May/12 13:58"
PDFBOX-1137,PDFBOX,"PDSimpleFont.determineEncoding will never parse embedded CMAPs",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,"Text extraction",None,,"The enconding of a PDSimpleFont is determined in determineEncoding. It contains a series of ifs. Most notably at the end there is a:
if (encoding instanceof COSDictionary)
{ ... }
else if (encoding instanceof COSStream) { ... }
This is wrong because COSStream is a subclass of COSDictionary, so the program will never get into the COSStream-specific block, which is responsible for the parsing of embedded CMAPs. The solution would be to reverse the order of those ifs.",0,"Andreas Lehmkühler","Antoni Mylka",0,0,"12/Oct/11 22:18","29/May/12 16:21","13/Oct/11 18:17"
PDFBOX-1138,PDFBOX,"Printing fails for pages in landscape format",Bug,CLOSED,Major,Fixed,1.6.0,1.8.0,"PDModel, (1)",printing,,"Printing fails for PDFs with mixed page orientations",0,"Andreas Lehmkühler","Brad Reynolds",2,3,"13/Oct/11 23:36","23/Mar/13 12:56","03/Mar/13 13:08"
PDFBOX-1140,PDFBOX,"TTFDataStream.read32Fixed() discards fractions",Bug,CLOSED,Minor,Fixed,1.6.0,1.7.0,FontBox,None,,"TTFDataStream.read32Fixed() tries to calculate its fractional part by dividing an unsigned short with 65536. But because this method uses an integer division, the fractional value will always be 0. I've attached a simple patch that fixes this.",0,"Andreas Lehmkühler","Arjohn Kampman",0,1,"17/Oct/11 14:21","29/May/12 16:21","25/Oct/11 05:09"
PDFBOX-1142,PDFBOX,"Implement type 4 functions (PDFunctionType4)","New Feature",CLOSED,Major,Fixed,None,1.7.0,PDModel,None,,"Type 4 functions require a scaled-down, pseudo PostScript interpreter. See section 3.9.4 of the PDF 1.4 Reference.",0,"Jeremias Maerki","Jeremias Maerki",0,0,"18/Oct/11 14:54","29/May/12 16:21","18/Oct/11 15:30"
PDFBOX-1144,PDFBOX,"update pom in parent project to support maven build in eclipse Indigo",Improvement,CLOSED,Major,Fixed,1.7.0,1.7.0,None,"maven patch",,"To be able to build the project using eclispe indigo (3.7.1) the artifact org.apache:apache must be update to a version greater than 6.",0,"Andreas Lehmkühler","Pierre Huttin",0,1,"19/Oct/11 19:19","29/May/12 16:21","22/Oct/11 12:14"
PDFBOX-1145,PDFBOX,""write2file" gives Null Pointer Exception",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,Writing,"image nullpointerexc","windows xp","Oct 24, 2011 11:00:15 AM org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap getRGBImage
SEVERE: java.lang.NullPointerException
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.getColorSpace(PDXObjectImage.java:286)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:140)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.write2OutputStream(PDPixelMap.java:285)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file(PDXObjectImage.java:139)
at org.apache.pdfbox.ExtractImages.extractImages(ExtractImages.java:165)
at org.apache.pdfbox.ExtractImages.main(ExtractImages.java:62)",0,"Andreas Lehmkühler","sagar pise",0,1,"24/Oct/11 05:42","29/May/12 16:21","16/Dec/11 07:07"
PDFBOX-1146,PDFBOX,"Don't use COSArrays when calling PDFunction#eval",Improvement,CLOSED,Minor,Fixed,1.6.0,1.7.0,PDModel,None,,"Whenever PDFunction#eval is called one has to put the input values into a COSArray and get the output values from the returned COSArray.
To improve the performance we should use float[].",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"24/Oct/11 18:34","29/May/12 16:21","24/Oct/11 19:06"
PDFBOX-1147,PDFBOX,"Printing a PDF with an image inside show black.",Bug,CLOSED,Major,Fixed,1.6.0,"1.8.5, 2.0.0",Rendering,"LZW image print","windows xp","I have a PDF with a image inside.
When i print the PDF the image show corrupted similar a black area.
In the java console:
25-oct-2011 13:12:39 org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap getRGBImage
GRAVE: java.io.StreamCorruptedException: Error: data is null
java.io.StreamCorruptedException: Error: data is null
at org.apache.pdfbox.filter.LZWFilter.decode(LZWFilter.java:82)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:301)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:229)",0,"Tilman Hausherr","Rafa Hernandez",1,7,"25/Oct/11 11:11","02/May/14 06:12","25/Feb/14 20:07"
PDFBOX-1148,PDFBOX,"PDF with embedded fonts (Identity-H) not print.",Bug,CLOSED,Major,Fixed,1.6.0,2.0.0,None,"font print","windows xp","I'm printing a PDF with TrueType font fully embedded and encoding: Identity-H .
Fail with this message in java console.
EBUG MESSAGE DirectPrint0: DIRECT_PRINT_PDF_URL: http://srv-datadec-ias:7777/erp/prueba_courier_10g.pdf
DEBUG MESSAGE DirectPrint0: Printing URL: http://srv-datadec-ias:7777/erp/prueba_courier_10g.pdf
DEBUG MESSAGE DirectPrint0: Pages list is NOT empty
DEBUG MESSAGE DirectPrint0: Map is:
{F1=org.apache.pdfbox.pdmodel.font.PDType0Font@17456bc, F0=org.apache.pdfbox.pdmodel.font.PDType0Font@ea85b4}
DEBUG MESSAGE DirectPrint0: org.apache.pdfbox.pdmodel.font.PDType0Font cannot be cast to org.apache.pdfbox.pdmodel.font.PDType1Font
25-oct-2011 13:26:44 org.apache.pdfbox.cos.COSDocument finalize",0,"Andreas Lehmkühler","Rafa Hernandez",0,1,"25/Oct/11 11:30","17/Mar/16 19:07","04/Aug/13 12:37"
PDFBOX-1151,PDFBOX,"StreamCorruptedException on bad PDF with -force",Bug,CLOSED,Major,Invalid,"1.6.0, 1.8.7, 2.0.0",None,Parsing,None,windows,"I am getting the StreamCorruptedException when trying to parse a possibly invalid PDF document even if the -force option is specified.
Stack trace:
java.io.StreamCorruptedException: Error: data is null
at org.apache.pdfbox.filter.LZWFilter.decode(LZWFilter.java:82)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:301)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:221)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:156)
at org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:105)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:264)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:442)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:366)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:322)
at org.apache.pdfbox.ExtractText.startExtraction(ExtractText.java:256)
at org.apache.pdfbox.ExtractText.main(ExtractText.java:76)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:42)
My suggestion is to skip bad sub-streams without throwing exceptions in PDFStreamEngine.processSubStream() in case of forceParsing is true.",0,"Andreas Lehmkühler","Stas Shaposhnikov",0,1,"28/Oct/11 10:01","26/Jul/15 16:50","26/Jul/15 16:50"
PDFBOX-1152,PDFBOX,"Gets scrambled japanese text while reading a PDF file",Bug,CLOSED,Major,Fixed,1.6.0,2.0.0,"Text extraction",PDFBox,"windows xp","During conversion of a Japanese PDF file to XML the output Japanese text gets scrambled.",0,"Andreas Lehmkühler","Suresh Somanathan",0,1,"31/Oct/11 05:27","17/Mar/16 19:07","23/Oct/14 17:03"
PDFBOX-1154,PDFBOX,"pdfbox exports 1200+ images from a pdf instead of one","New Feature",CLOSED,Major,"Not A Problem",1.6.0,None,"Rendering, (1)","extract images","mac os x","I have a pdf that I export all images from. My problem is that I get 1290 images after export. If I export all images from the pdf in Acrobat Pro, I get only one. There must be some way that the pdf composes these images together, but I cant figure out how?
The pdf is problbly made from an ad pdf placed in an indesign CS4 dokument and exported as a pdf by Indesign server 6.x
I dont need to compose all the images to one, I just want to filter out the ones that "belong" together. I will attach the pdf to this Issue.
Does anyone know how to do that?
Best regards
/ Pontus Hulin",0,"Andreas Lehmkühler","Pontus Hulin",0,1,"01/Nov/11 14:03","28/Jul/14 18:10","28/Jul/14 18:10"
PDFBOX-1155,PDFBOX,"setSuppressDuplicateOverlappingText sometimes removes characters that it shouldn't",Bug,CLOSED,Minor,Fixed,"1.8.7, 2.0.0",2.0.0,"Text extraction",None,,"The duplicate detection (in PDFTextStripper.java) checks whether the
same character was placed "nearish" to where we are about to place
another and de-dups it if so; this is to catch documents that rewind
and overwrite in order to bold word(s).
But in some cases I see it removing valid characters (that were not
dups).",0,"Andreas Lehmkühler","Michael McCandless",0,1,"01/Nov/11 22:21","17/Mar/16 19:08","17/Dec/14 11:23"
PDFBOX-1156,PDFBOX,"Color conversion for PDJpegs using a DeviceN colorspace","New Feature",CLOSED,Major,Fixed,1.6.0,1.7.0,"Swing GUI",None,,"PDFBOX-1116 and PDFBOX-1154 already added some color conversions for PDJpegs and PDPixelMaps, except one for handling DeviceN colorspaces.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"02/Nov/11 20:48","29/May/12 16:21","02/Nov/11 21:02"
PDFBOX-1157,PDFBOX,"A failure in building pdfbox from the source",Bug,CLOSED,Major,"Cannot Reproduce",None,None,None,"build maven",,"Hi
I can't build pdfbox source by Maven.
It gave me this failure and so the final jar file is not built in ./app/target/ .
Test set: org.apache.jempbox.xmp.XMPSchemaTest
------------------------------------
Tests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.093
sec <<< FAILURE!
testDateList(org.apache.jempbox.xmp.XMPSchemaTest) Time elapsed:
0.005 sec <<< FAILURE!
junit.framework.AssertionFailedError: expected:<12600000> but was:<10860000>
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.failNotEquals(Assert.java:283)
at junit.framework.Assert.assertEquals(Assert.java:64)",0,"Andreas Lehmkühler","Ahmad Ajiloo",0,1,"03/Nov/11 07:51","15/Jun/13 12:56","15/Jun/13 12:56"
PDFBOX-1159,PDFBOX,"Speed up LZWFilter decoding",Improvement,CLOSED,Minor,Fixed,None,1.7.0,None,None,,"I noticed that the LZW decoder performance can be improved: it's
allocating a new byte[] for every byte it visits in the stream. This
is actually an O(N^2) cost, but N is typically fairly small.
I changed LZWDictionary to use its own private growable byte[] to
accumulate each added byte. I also changed it to not pre-enroll all
initial (0-255) codes, but instead add it (lazily) on demand if the
code is used.
I also randomized the TestFilters test, and mixed in some
"more predictable" patterns, so we get better testing of the filters.
If the test fails it prints the seed used for the random numbers, so
we can reproduce the failure.",0,"Andreas Lehmkühler","Michael McCandless",0,2,"05/Nov/11 14:44","29/May/12 16:21","18/May/12 10:54"
PDFBOX-1160,PDFBOX,"Add "Save as image" to PDFReader","New Feature",CLOSED,Minor,Fixed,1.6.0,1.7.0,"Swing GUI",None,,"Extend the PDFReader with a "Save as image" function so that it'd be easy to save the current page as png",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"06/Nov/11 13:36","29/May/12 16:21","06/Nov/11 13:45"
PDFBOX-1161,PDFBOX,"CMapParser exception when call extractToUnicodeEndoding",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,FontBox,None,"windows xp, java 1.5, eclipse","Open 17704628.pdf in PdfReader, throws exception
Exception in thread "AWT-EventQueue-0" java.lang.ClassCastException: org.apache.fontbox.cmap.CMapParser$Operator
at org.apache.fontbox.cmap.CMapParser.parse(CMapParser.java:172)
at org.apache.pdfbox.pdmodel.font.PDFont.parseCmap(PDFont.java:559)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.extractToUnicodeEncoding(PDSimpleFont.java:425)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.determineEncoding(PDSimpleFont.java:393)
at org.apache.pdfbox.pdmodel.font.PDFont.<init>(PDFont.java:189)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.<init>(PDSimpleFont.java:82)
at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:65)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:75)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:119)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:239)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:221)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:96)",0,"Eric Leleu","philip huang",1,1,"07/Nov/11 05:54","29/May/12 16:21","18/Feb/12 18:17"
PDFBOX-1162,PDFBOX,"Font error in "preflight" .....when validating the attached PDF/A",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,Preflight,None,,"Font Issue problem when validating the attached PDF/A.
3.1.6 : Invalid Font definition, Width of the character "367" in the font program "ABCDEE+Calibri"is inconsistent with the width in the PDF dictionary.",0,"Eric Leleu","William Fausser",0,1,"08/Nov/11 16:06","29/May/12 16:21","02/Dec/11 12:41"
PDFBOX-1165,PDFBOX,"Xmpbox does not accept rdf:description without rdf:about attribute",Improvement,CLOSED,Minor,Fixed,None,1.7.0,XmpBox,None,,"While working on jempbox and xmpbox merge, I generated an xmp with jempbox that was not readable by xmpbox.
In xmp specification part 1 [1], page 19, rdf:about attribute is defined as mandatory in the rdf:description element. But for compatibility reason a parser should tolerate a missing attribute.
The attached patch add this tolerance for xmpbox.
[1] http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/xmp/pdfs/XMPSpecificationPart1.pdf",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"10/Nov/11 19:37","30/Nov/11 20:16","16/Nov/11 21:03"
PDFBOX-1168,PDFBOX,"Adding Basic Job Ticket Schema",Improvement,CLOSED,Minor,Fixed,None,1.7.0,XmpBox,None,,"Add a missing schema : Basic Job Ticket
Some evolution to do :
Make evolution in the parser to enable arrays of structured properties
Enable multi namespace description in rdf:description without forcing first description to be schema description",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"12/Nov/11 11:50","16/Nov/11 21:04","16/Nov/11 21:04"
PDFBOX-1169,PDFBOX,"Images extracted from PDF are loosing color (are shown in blackcolor)",Bug,CLOSED,Major,Fixed,1.6.0,1.8.0,Utilities,overprintcontrol,windows,"Using PDFBox, tried to read file (eBook-Mini.pdf, which is attached)
When images are extracted using below mentioned code, the extracted images aren't as per the ones in PDF, they have lost color.
Checked extracting images, using other tools and images were extracted correctly.
Attached images extracted using PDFBox as well.",0,"Andreas Lehmkühler",susheel,0,2,"14/Nov/11 10:12","02/May/13 02:29","07/Oct/12 13:10"
PDFBOX-1170,PDFBOX,"Strange behavior in TextPositionComparator",Bug,CLOSED,Minor,"Cannot Reproduce","1.6.0, 1.7.0",None,"Text extraction",None,windows,"When extracting text for the pdf (see attachement) with setSortByPosition(true), the output does not follow nor the visual position of the elements, nor the document structure.
Here is the output of PDfTextStripper :
11111 333333333333333 : 222222222
The expected output would be :
11111 : 222222222 333333333333333
The string « 11111 : » is defined in only one instruction :
[(1) -9.555729866 (1) 17.5939998627 (1) 3.5597500801 (1) 1.9403500557 (1) 4.1794600487 ( ) -0.1493600011 (:) -4.7775301933 ( ) 250 ] TJ
How explain that the 3... is inserted inside ?
(Note : the pdf has been deflated and edited for « anonymising » the text. I also removed a picture, wich explain the XRef error )",0,"Andreas Lehmkühler","Sébastien Dailly",0,1,"15/Nov/11 13:53","19/May/13 12:12","19/May/13 12:12"
PDFBOX-1171,PDFBOX,"Parsing hexadecimal strings is not strict enough + FIX",Bug,CLOSED,Minor,Fixed,1.7.0,1.7.0,Parsing,None,,"Hexadecimal strings (strings in '<','>') are parsed in BaseParser with the same method parsing literal strings (strings in '(',')'). Since in literal strings the parsing of escape sequences and parentheses is quite tricky, there are a number of rules to capture problematic cases. However for hexadecimal strings this is not needed. Here we known of the allowed restricted character set and we don't have to count opening and closing brackets.
The problem with the relaxed parsing (and therefore this is marked as bug) is with parsing documents containing trash data between objects (I have a number of them - however confidential ones - produced by verypdf.com, which seems to got updated a lot and after an endobj it contains e.g. <PrY... - simply some remainings from old objects). This trash would be no problem when parsing with an ISO conforming parser since these ranges would be ignored, but with the current sequential parser it is parsed and the best one can hope is that the trash is found to be not parseable and the parser searches for a new starting point via PDFParser#skipToNextObj. This is now where the problem with the relaxed hexadecimal parsing is: as in the example the opening '<' triggers a hexadecimal string parsing it because of later '<' it goes until end of document, reading all valid objects as string content. With a more strict parsing we would find that it is not a hexadecimal string with the second character.
I have therefore added a method for parsing hexadecimal strings (see attached diff) which fails (IOException) if an invalid character is read (this method also runs faster than previous parser since there are only small number of cases to test).
With this change I can now parse the mentioned (correct) documents (with forced parsing) which wasn't possible before.",0,"Andreas Lehmkühler","Timo Boehme",0,1,"15/Nov/11 15:29","25/Jan/13 11:05","01/Dec/11 15:58"
PDFBOX-1172,PDFBOX,"COSNumber throws IOException",Bug,CLOSED,Minor,Fixed,1.6.0,1.7.0,None,None,,"COSNumber.get() throws IOException 'Value is not an integer'.
The method parameter was '-2e-006'.
Is my PDF file wrong?
I cannot upload my PDF file due to copyright. Sorry.
java.io.IOException: Value is not an integer: -2e-006
at org.apache.pdfbox.cos.COSNumber.get(COSNumber.java:96)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1084)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray(BaseParser.java:802)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1011)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:179)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:292)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1000)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:543)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:184)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1069)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1036)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1007)
at PDFBoxTest.main(PDFBoxTest.java:36)",0,"Andreas Lehmkühler","Hiroshi Koyama",0,1,"15/Nov/11 18:28","29/May/12 16:21","14/Feb/12 19:54"
PDFBOX-1173,PDFBOX,"Missing Fonts after PDFMergerUtility mergeDocuments",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,Utilities,None,"centos, java 1.6","After using the PDFMergeUtility, the fonts for all documents but the first seem to be discarded.
CODE:
public class PDFMergeTest {
public static void main(String[] args) {
PDFMergerUtility mergePdf = new PDFMergerUtility();
mergePdf.addSource("/home/lucas/control/issue/blankPage.pdf");
mergePdf.addSource("/home/lucas/control/issue/Milne_Lucas_Resume_2011.pdf");
mergePdf.setDestinationFileName("/home/lucas/control/issue/broken_merge.pdf");
mergePdf.setIgnoreAcroFormErrors(false);
try
{ mergePdf.mergeDocuments(); }
catch (COSVisitorException e)
{ // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); }
}
}
Output from pdffonts:
[lucas@star issue]$ ll
total 3332
rw-rw-r- 1 lucas lucas 11433 Nov 16 14:19 blankPage.pdf
rw-rw-r- 1 lucas lucas 1703635 Nov 16 15:47 broken_merge.pdf
rw-rw-r- 1 lucas lucas 1685246 Nov 16 14:19 Milne_Lucas_Resume_2011.pdf
[lucas@star issue]$ pdffonts blankPage.pdf
name type emb sub uni object ID
------------------------------------ ------------ — --- — ---------
EZSZAN+Helvetica TrueType yes yes no 8 0
[lucas@star issue]$ pdffonts Milne_Lucas_Resume_2011.pdf
name type emb sub uni object ID
------------------------------------ ------------ — --- — ---------
CourierNew CID TrueType yes no yes 7 0
SegoeUI CID TrueType yes no yes 11 0
Calibri CID TrueType yes no yes 14 0
Calibri,Bold CID TrueType yes no yes 17 0
Symbol CID TrueType yes no yes 20 0
TimesNewRoman CID TrueType yes no yes 25 0
[lucas@star issue]$ pdffonts broken_merge.pdf
name type emb sub uni object ID
------------------------------------ ------------ — --- — ---------
EZSZAN+Helvetica TrueType yes yes no 32 0",0,"Andreas Lehmkühler","Lucas Milne",0,1,"16/Nov/11 23:48","29/May/12 16:21","26/Dec/11 19:35"
PDFBOX-1174,PDFBOX,"i have problem in BaseParser.readInt",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,"Parsing, (1)",None,,"i can't load PDF to PDDocument.load( )
it give me this exception
java.io.IOException: Error: Expected an integer type, actual='Fatal'
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1384)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:517)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:184)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1069)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1036)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1007)",0,"Andreas Lehmkühler","ahmad makram",0,2,"17/Nov/11 14:37","29/May/12 16:21","18/May/12 10:18"
PDFBOX-1175,PDFBOX,"Stream parsing performance improvement + patch",Improvement,CLOSED,Minor,Fixed,1.6.0,1.7.0,Parsing,None,,"Stream parsing is one of the critical parts looked from a performance point of view since typically most data is stored in streams. While PDFBOX already got some speedup some time ago in the method copying stream data from file to random access buffer (BaseParser#readUntilEndStream) there is some room for improvement.
The problem with the current implementation is the byte wise reading and writing of the data. I have rewritten the method using byte arrays for IO and optimized the number of needed comparisons for finding 'endstream'/'endobj'. This results in 7-8 times faster parsing of streams and a 3-4 times faster parsing of a normal 10 page PDF.
See the attached file which is a drop in replacement for the readUntilEndStream method in BaseParser.",0,"Andreas Lehmkühler","Timo Boehme",0,0,"22/Nov/11 14:29","29/May/12 16:21","01/Dec/11 14:05"
PDFBOX-1177,PDFBOX,"Create a module with examples instead having them in pdfbox.jar",Wish,CLOSED,Minor,Fixed,1.6.0,1.7.0,Utilities,modularization,,"The package org.apache.pdfbox.examples (and its subpackage) contains examples on how to use pdfbox.
The size of these classes in the generated jar not so big (100 kb, 3% of the size), but it is a first step in reduction of pdfbox jar size.
Moreover, it would be easier to add examples depending on preflight in a separate jar.
If there is enough vote, I can do it.",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"30/Nov/11 20:30","07/Dec/11 12:04","06/Dec/11 21:35"
PDFBOX-1178,PDFBOX,"Type3Validation error when firstChar and lastChar badly defined in font description dictionary",Bug,CLOSED,Major,Fixed,None,1.7.0,Preflight,None,,"I have got a problem with a font in a PDF/A where LastChar entry seems badly defined (255). I will add the file if possible. The file is valid with commercial validators.
File cannot be validated due to NullPointerException because the case "character stream not existing and character width not defined" is not handle. I join a patch that accept that character are not defined.
With this patch, validation works. I put "TODO" where new case have to be handled.",0,"Eric Leleu","Guillaume Bailleul",0,0,"01/Dec/11 20:30","29/May/12 16:21","02/Dec/11 13:13"
PDFBOX-1179,PDFBOX,"Remove file resource used to retrieve version of parser",Improvement,CLOSED,Trivial,Fixed,None,1.7.0,Preflight,None,,"Validator class retrieve preflight version in a resource file.
A stronger option is to use a maven property in the source file and filter sources at project build. There are no more problem with missing resources when building without maven : the property name is displayed.",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"01/Dec/11 21:04","01/Dec/11 21:12","01/Dec/11 21:12"
PDFBOX-1180,PDFBOX,"Anomalie lors de la validation d'un PDF/A1-b",Bug,CLOSED,Major,Duplicate,1.7.0,1.7.0,None,None,"windows 7","Anomalie lors de la validation d'un PDF/A1-b,
Une document PDF a été généré en ajoutant des métadonnées via la librairie « pdflib ». Le résultat est le fichier PDF en pièce jointe.
Mais celui-ci provoque une anomalie lors de la validation avec PDFBox, trace en pièce jointe,
Caused by: java.lang.NullPointerException
at org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:105)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:262)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.padaf.preflight.font.Type3FontValidator.checkCharProcsAndMetrics(Type3FontValidator.java:365)
at org.apache.padaf.preflight.font.Type3FontValidator.validate(Type3FontValidator.java:549)
at org.apache.padaf.preflight.helpers.FontValidationHelper.validateFont(FontValidationHelper.java:110)
at org.apache.padaf.preflight.helpers.FontValidationHelper.innerValidate(FontValidationHelper.java:101)
at org.apache.padaf.preflight.helpers.AbstractValidationHelper.validate(AbstractValidationHelper.java:91)
at org.apache.padaf.preflight.AbstractValidator.runValidation(AbstractValidator.java:137)
at org.apache.padaf.preflight.PdfA1bValidator.validate(PdfA1bValidator.java:97)
....",0,"Guillaume Bailleul",stephane,0,0,"02/Dec/11 08:16","02/Dec/11 10:10","02/Dec/11 10:10"
PDFBOX-1182,PDFBOX,"Create a module for the commandline tools",Improvement,CLOSED,Major,Fixed,1.6.0,2.0.0,None,modularization,,"We should modularize PDFBox as already discussed in PDFBOX-586 so that people can drop unneeded functions to get a smaller jar.
I'll create a new module "tools" containing all commandline tools.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"04/Dec/11 15:11","17/Mar/16 19:07","08/Feb/14 18:21"
PDFBOX-1183,PDFBOX,"RenderingProblem at PDFReader",Bug,CLOSED,Critical,"Won't Fix","1.6.0, 2.0.0",None,"Swing GUI",None,"windows xp, java 1.6","When making the PDFReader frame smaller so the PDF doesnt fit the frame the PDF is painted over the upper, lower and right margin i.e. the scrollbars and the lower panel.
Having a look at the code, I found the problem.
In all relevant methods of PDFDrawer I removed graphics.setClip(getGraphicsState().getCurrentClippingPath());
Now the PDF is rendered within the right margins.",0,"Andreas Lehmkühler",Danzelot,0,3,"05/Dec/11 07:28","30/Jul/15 10:05","30/Jul/15 10:05"
PDFBOX-1184,PDFBOX,"[PATCH] Bug in PDPage when the page is rasterized",Bug,CLOSED,Minor,Fixed,None,1.7.0,PDModel,None,"ubuntu, java","When a PDPage is rasterized, the image created isn't cropped properly. Tests are included in this patch",0,"Andreas Lehmkühler","Mehdi Houshmand",0,0,"06/Dec/11 13:47","29/May/12 16:21","06/Dec/11 20:03"
PDFBOX-1185,PDFBOX,"A problem with indexed color spaces: bpc of the base color space seems wrong.",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,PDModel,None,,"I incorporated the "proper" solution to PDFBOX-1075 into my regression tests and the file which made me raise that issue got broken again. It has pictures with indexed color spaces, which now are returned as black. The indexed color space is one-bit. The lookup table has two colors: black and white. With the current trunk, the black pixels remain black (0,0,0), but the white pixels are returned as (1,1,1), which in RGB is nearly just as black. The text on the picture is obviously unreadable.
On a second look it seems to me that the offending line is here (in PDPixelMap.getRGBImage):
ColorModel baseColorModel = csIndexed.getBaseColorSpace().createColorModel(bpc);
I think it's wrong, as in an indexed color space, "bpc" is not "bits per component", but "bits per index" i.e. bits per the integer which is interpreted as the index to the color lookup array. I think that the base color space's color model should be initialized with a different number. I came up with a following calculation:
PDIndexed csIndexed = (PDIndexed)colorspace;
PDColorSpace baseCs = csIndexed.getBaseColorSpace();
int numberOfColorValues = 1 << bpc;
int highValue = csIndexed.getHighValue();
int size = Math.min(numberOfColorValues-1, highValue);
byte[] index = csIndexed.getLookupData();
int parentComponentsCount = baseCs.getNumberOfComponents();
int baseColorModelBPC = (index.length * 8) / ((size+1) * parentComponentsCount);
ColorModel baseColorModel = csIndexed.getBaseColorSpace().createColorModel(baseColorModelBPC);
The baseColorModelBPC is calculated as the total number of bits in the lookup array divided by the total number of components in all colors. This seems to work for my offending file and causes no regressions with files from PDFBOX-1075, PDFBOX-1010 and PDFBOX-706.
What is weird though is a line which is later:
byte[] inData = new byte[baseColorModel.getNumComponents()];
Doesn't this effectively assume that baseColorModelBPC should always be 8? If the base color model bpc were anything else than 8, then this code wouldn't be able to handle it correctly anyway. Or am I overlooking something?
I'll attach a patch which works for me. Note that simply changing
ColorModel baseColorModel = csIndexed.getBaseColorSpace().createColorModel(bpc);
into
ColorModel baseColorModel = csIndexed.getBaseColorSpace().createColorModel(8);
has exactly the same effect (fixed my problem, no regressions in those three earlier issues). Please decide what makes more sense.",0,"Andreas Lehmkühler","Antoni Mylka",0,0,"06/Dec/11 17:34","29/May/12 16:21","10/Apr/12 16:34"
PDFBOX-1186,PDFBOX,"Improve xmpbox code strength",Improvement,CLOSED,Trivial,Fixed,None,1.7.0,XmpBox,None,,"Fix some issues in xmpbox code to improve strength and quality :
Preserve stack Trace
System println
Loose coupling
avoid print stack trace
Integer Instanciation
Constructor calls overridable method",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"07/Dec/11 06:13","29/May/12 16:21","07/Dec/11 22:01"
PDFBOX-1187,PDFBOX,"Cut dependency between pdfbox and jempbox",Wish,CLOSED,Minor,Fixed,None,2.0.0,JempBox,None,,"pdfbox artifact depends on jempbox only in PDMetadata class where two methods export or import XMPMetadata :
exportXMPMetadata
importXMPMetadata
The work on serializing/unserializing could be done in the calling code without complexity (see attached patch)
Please give opinion",0,"Guillaume Bailleul","Guillaume Bailleul",0,4,"07/Dec/11 06:27","17/Mar/16 19:08","20/Jun/14 05:55"
PDFBOX-1188,PDFBOX,"PDStream Exception when using a Cast",Bug,CLOSED,Major,"Not A Problem",None,1.7.0,"PDModel, (1)",None,,"For some PDF/A, getDictionaryObject does not return COSStream but other COSDictionary (super class)
public PDMetadata getMetadata()
{
PDMetadata retval = null;
COSStream mdStream = (COSStream)stream.getDictionaryObject( COSName.METADATA );
if( mdStream != null )
{ retval = new PDMetadata( mdStream ); }
return retval;
}
org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSStream
at org.apache.pdfbox.pdmodel.common.PDStream.getMetadata(PDStream.java:508)
at net.padaf.preflight.font.AbstractFontValidator.checkFontFileMetaData(AbstractFontValidator.java:162)
at net.padaf.preflight.font.Type1FontValidator.checkFontFileElement(Type1FontValidator.java:228)
at net.padaf.preflight.font.Type1FontValidator.checkFontDescriptor(Type1FontValidator.java:125)
at net.padaf.preflight.font.SimpleFontValidator.validate(SimpleFontValidator.java:264)
at net.padaf.preflight.helpers.FontValidationHelper.validateFont(FontValidationHelper.java:107)
at net.padaf.preflight.helpers.FontValidationHelper.innerValidate(FontValidationHelper.java:90)
at net.padaf.preflight.helpers.AbstractValidationHelper.validate(AbstractValidationHelper.java:87)
at net.padaf.preflight.AbstractValidator.runValidation(AbstractValidator.java:134)
at net.padaf.preflight.PdfA1bValidator.validate(PdfA1bValidator.java:90)
at net.padaf.preflight.Validator_A1b.main(Validator_A1b.java:47)",0,"Eric Leleu","William Fausser",0,0,"08/Dec/11 14:54","13/Dec/11 15:52","13/Dec/11 15:52"
PDFBOX-1189,PDFBOX,"Nullpointer Exception while extracting images",Bug,CLOSED,Major,Duplicate,1.6.0,None,"Text extraction","exception image null","windows xp","When I tried to extract images using ExtractImages.java, I got following Nullpointer exception
Dec 14, 2011 6:30:11 PM org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap getRGBImage
SEVERE: java.lang.NullPointerException
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.getColorSpace(PDXObjectImage.java:286)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:140)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.write2OutputStream(PDPixelMap.java:285)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file(PDXObjectImage.java:139)
at org.apache.pdfbox.ExtractImages.extractImages(ExtractImages.java:165)
at org.apache.pdfbox.ExtractImages.main(ExtractImages.java:62)",0,"Andreas Lehmkühler","sagar pise",0,0,"14/Dec/11 13:09","14/Dec/11 13:31","14/Dec/11 13:31"
PDFBOX-1190,PDFBOX,"Attempting to render to BMP, WBMP or GIF causes IllegalStateException",Bug,CLOSED,Minor,Fixed,1.6.0,1.7.0,Utilities,None,"windows 7, java 1.6","Attempting to render PDF to either BMP, WBMP or GIF causes IllegalStateException while rendering to JPG, JPEG or PNG works. All of these image formats are reported as being present and available via call: ImageIO.getWriterFormatNames()
The issue seems to be with this code in PDFImageWriter
if( writerParams.canWriteCompressed() )
{ writerParams.setCompressionMode(ImageWriteParam.MODE_EXPLICIT); writerParams.setCompressionQuality(1.0f); // <== Exception here }
where a call to setCompressionType should precede setCompressionQuality for the failing image types listed above.
[looks like JUnit test cases only tests PNG ....]
Start of stack trace is this:
java.lang.IllegalStateException: No compression type set!
at javax.imageio.ImageWriteParam.setCompressionQuality(ImageWriteParam.java:1230)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:151)
......",0,"Andreas Lehmkühler","Lars Hougaard",0,0,"15/Dec/11 16:05","29/May/12 16:21","18/Dec/11 15:53"
PDFBOX-1191,PDFBOX,"Lost information while extracting images from pdf scanned by XEROX",Bug,CLOSED,Major,Fixed,None,1.8.0,None,"jbig2 pdf pdfreader ",,"I've got an application that get's a pdf scanned by several scanners, I'm currently having a problem with pdfs scanned by XEROX WorkCentre. The problem persists while we set the scanner to use JBIG2. If we change the printer's configuration, the image extraction does not lose information. As we have a lot of printers, and they access the application via webservice, it would be necessary to handle the issue from the application and not from every particular scanner.
Thanks",0,"Andreas Lehmkühler","Matias Traverso",0,1,"16/Dec/11 12:34","02/May/13 02:29","18/Nov/12 18:10"
PDFBOX-1193,PDFBOX,"BaseParser print useful offset instead of java object",Improvement,CLOSED,Major,Fixed,None,1.7.0,None,None,,"When dictionary parsing explodes, the exception thrown contains a java object reference. Much more interesting is to print out the PDF offset where it goes wrong.",0,"Andreas Lehmkühler","Frank Cornelis",0,0,"19/Dec/11 13:50","29/May/12 16:21","19/Dec/11 18:49"
PDFBOX-1194,PDFBOX,"XMLValueTypeDescriptionManagerTest fails on Java 7",Bug,CLOSED,Minor,Fixed,1.6.0,1.7.0,XmpBox,xstream,,"The test fails because of an XStream problem (http://jira.codehaus.org/browse/XSTR-651) fixed in XStream version 1.4.
The exception I see is:
org.apache.padaf.xmpbox.BuildPDFAExtensionSchemaDescriptionException: Failed to get correct properties descriptions from specified XML stream
at org.apache.padaf.xmpbox.parser.XMLPropertiesDescriptionManager.loadListFromXML(XMLPropertiesDescriptionManager.java:138)
at org.apache.padaf.xmpbox.parser.XMLPropertiesDescriptionManager.loadListFromXML(XMLPropertiesDescriptionManager.java:106)
at org.apache.padaf.xmpbox.BuildPDFExtensionSchemaHelper.includePDFAExtensionDefinition(BuildPDFExtensionSchemaHelper.java:95)
at org.apache.padaf.xmpbox.BuildPDFAExtensionSchemaDescriptionTest.test(BuildPDFAExtensionSchemaDescriptionTest.java:57)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:601)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: com.thoughtworks.xstream.converters.reflection.ObjectAccessException: Cannot construct org.apache.padaf.xmpbox.type.PropertyDescription as it does not have a no-args constructor
at com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance(PureJavaReflectionProvider.java:71)
at com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance(AbstractReflectionConverter.java:308)
at com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal(AbstractReflectionConverter.java:161)
at com.thoughtworks.xstream.core.TreeUnmarshaller.convert(TreeUnmarshaller.java:82)
at com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert(AbstractReferenceUnmarshaller.java:63)
at com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother(TreeUnmarshaller.java:76)
at com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother(TreeUnmarshaller.java:60)
at com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter.readItem(AbstractCollectionConverter.java:71)
at com.thoughtworks.xstream.converters.collections.CollectionConverter.populateCollection(CollectionConverter.java:68)
at com.thoughtworks.xstream.converters.collections.CollectionConverter.unmarshal(CollectionConverter.java:61)
at com.thoughtworks.xstream.core.TreeUnmarshaller.convert(TreeUnmarshaller.java:82)
at com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert(AbstractReferenceUnmarshaller.java:63)
at com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother(TreeUnmarshaller.java:76)
at com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother(TreeUnmarshaller.java:60)
at com.thoughtworks.xstream.core.TreeUnmarshaller.start(TreeUnmarshaller.java:137)
at com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy.unmarshal(AbstractTreeMarshallingStrategy.java:33)
at com.thoughtworks.xstream.XStream.unmarshal(XStream.java:923)
at com.thoughtworks.xstream.XStream.unmarshal(XStream.java:909)
at com.thoughtworks.xstream.XStream.fromXML(XStream.java:861)
at org.apache.padaf.xmpbox.parser.XMLPropertiesDescriptionManager.loadListFromXML(XMLPropertiesDescriptionManager.java:121)
... 26 more",0,"Jukka Zitting","Jukka Zitting",0,0,"19/Dec/11 14:32","29/May/12 16:21","19/Dec/11 14:53"
PDFBOX-1195,PDFBOX,"Font Validation Problem",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,Preflight,None,,"Simple PDF/A fails on "Invalid Font Definition", passes on commercial validators.",0,"Eric Leleu","William Fausser",0,0,"21/Dec/11 11:52","29/May/12 16:21","26/Dec/11 17:35"
PDFBOX-1196,PDFBOX,"Object offsets should be of type long + PATCH",Improvement,CLOSED,Minor,Fixed,1.6.0,1.7.0,Parsing,None,,"Currently object offsets are stored as integer (32 bit). However the PDF specification does not limit a PDF document to 2GB. The only restriction is the XREF table which supports 10 digit values for object offsets. Thus we could have offsets >2GB (<10GB). The attached patch changes all locations (as far as I could find them) dealing with object offsets to long type.
Since this is a rather small change which should not have greater performance/space impact I recommend to include it. Otherwise we would have to include checks that the parsed file is smaller then Integer.MAX_VALUE.",0,"Andreas Lehmkühler","Timo Boehme",0,1,"23/Dec/11 15:27","01/Jun/12 11:34","04/Jan/12 18:10"
PDFBOX-1197,PDFBOX,"PrintImageLocations does not print information of all images",Bug,CLOSED,Major,Fixed,None,1.7.0,None,PrintImageLocations,"windows xp","Hi,
PrintImageLocations does not print information of all images.
However I am able to extract all images using "ExtractImages.java"
Following is my initial analysis:
In processResources method of ExtractImages.java, source code is present as given below
if( xobjects != null )
{
Iterator<String> xobjectIter = xobjects.keySet().iterator();
while( xobjectIter.hasNext() )
{
if (xobject instanceof PDXObjectImage)
{ ---- ---- }
else if (xobject instanceof PDXObjectForm)
{ PDXObjectForm xObjectForm = (PDXObjectForm)xobject; PDResources formResources = xObjectForm.getResources(); processResources(formResources, prefix, addKey); }
}
}
My PDF contains some images which are of type PDXObjectForm.
I am not able to get information of all those images (of type PDXObjectForm) using PrintImageLocations.java
In processOperator method of PrintImageLocations.java, there is no "else" statement for images of type PDXObjectForm. Is this problem?
Kindly help and suggest how to fix this.",0,"Andreas Lehmkühler","sagar pise",0,0,"26/Dec/11 04:30","29/May/12 16:21","26/Dec/11 16:12"
PDFBOX-1198,PDFBOX,"Remove dependency to commons-io in xmpbox",Wish,CLOSED,Trivial,Fixed,None,1.7.0,XmpBox,None,,"xmpbox has a dependency on commons-io for only one class : IOUtils. This artefact weights 170 kb.
To make easier deployment and reduce dependencies foot print, this class could be copied in xmpbox artefact (changing package name).
This copy looks acceptable because, there is really few code (and robust).
This utility class could also be used in preflight.",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"28/Dec/11 15:49","21/Apr/12 07:45","21/Apr/12 07:45"
PDFBOX-1199,PDFBOX,"Non-sequential PDF parser + PATCH",Improvement,CLOSED,Major,Fixed,1.6.0,1.7.0,Parsing,None,,"Currently PDF parsing is done in sequential manner resulting in problems with stream parsing and skipping unused content. The solution is a conforming parser which first reads XREF tables and uses this information to only parse required objects and uses length information for stream parsing. A completely new implementation of such a parser is currently worked on in PDFBOX-1000. While this parser will be the long term solution a short term solution based on existing code would be desirable. A first incomplete solution was presented in PDFBOX-1104.
Starting from PDFBOX-1104 I have implemented an 'as much as possible' conforming parser, called 'non-sequential parser', which handles all PDF documents (even inlined, with object streams etc.). The parser can be used as a drop-in-replacement for PDFParser (subclass of PDFParser). It overwrites method parse and getPage method. The only restriction is currently the need to specify a file instead of an input stream. In order to efficiently read the file and use it with the existing object parsing code I developed a RandomAccessBufferedFileInputStream which allows InputStream operations in combination with seek operations and cached read data.
In order to use NonSequentialPDFParser small changes and additions on existing classes are needed. This includes changing some methods/fields from private to protected in PDFParser, add parsing of stream object information from XREF streams, store and get this information from XrefTrailerResolver (object ids are stored negated in order to distinguish them from offsets) and allow resetting offset in PushBackInputStream. All these changes do not change behavior of current parser. Another requirement is the long offset patch (PDFBOX-1196) which is excluded from the patch set provided here.
The provided parser currently works in a forceParsing=false mode resulting in an IOException if a parsing error occurs. In most cases this shouldn't be a problem since in my use cases exceptions typically occur trying to parse unused content or streams which with this new parser are no problems anymore. In my setup I use the new parser first and if a parsing error occurs, fall back to the sequential parser (a bit like Acrobat does it if XREF information is buggy):
try {
// ---- try first with (mostly) standard conform parsing
doc = PDDocument.loadNonSeq( PDF_FILE, raBuf );
handleDocument(doc);
} catch ( IOException ioe ) {
// ---- retry with sequential parser and force parsing
doc = PDDocument.load( new FileInputStream(PDF_FILE), raBuf, true );
handleDocument(doc);
}
For me this new parser works very well on large document collections and is a large step forward to parse all documents also accepted by common PDF tools. While its behavior is nearly 'conform' there is nevertheless a need for a clean 'real' conforming parser. For instance since the underlying object structure has no access to the parser it is necessary to first parse all objects before they can be used. This includes objects that might not be needed at all. Another normally not needed step is copying the content of a stream. Since we work on a file with random access there would be no need for it. However this parser should fill the hole until a full featured and clean conforming parser is available.",0,"Timo Boehme","Timo Boehme",0,3,"02/Jan/12 13:45","29/May/12 16:21","08/Apr/12 15:27"
PDFBOX-1200,PDFBOX,"Invalid Color space, Invalid Color space, DestOutputProfile is missing",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,Preflight,None,,"User submitted attached pdf fails under preflight with the following error:
/home/fausser/djntest.PDF is not valid, error(s):
2.4.3: Invalid Color space, Invalid Color space, DestOutputProfile is missing
Vendor claims djntest.PDF verifies using commercial validators.",0,"Eric Leleu","William Fausser",0,0,"04/Jan/12 13:41","10/Apr/13 17:28","10/Jan/12 17:41"
PDFBOX-1202,PDFBOX,"org.apache.pdfbox.filter.FlateFilter decode SEVERE: Stop reading corrupt stream",Bug,CLOSED,Critical,"Not A Problem",1.6.0,None,"Text extraction",None,"mac os x","Error "org.apache.pdfbox.filter.FlateFilter decode SEVERE: Stop reading corrupt stream" thrown when extracting text.
The error is thrown at:
page 397 if the page loop starts at zero – for (int i = 0; i < allPages.size(); i++)
page 790 if the loop starts at 395 (that would make it approx. 397 pages from the beggining of the loop)
page 848 if the loop starts at 450 (that would make it aprox. 397 pages from the beggining of the loop)
The error is not thrown if:
the loop starts at page 452 or later
the loop starts at 0 and ends before 396
the loop starts at 200 and ends before 595
Therefore I suspect that a loop spanning more than 396 pages will throw an error. Is that an indication of a memory leak of some sort?
Full code is below. Note that the result is the same when instantiating a single PDFTextStripperByArea outside the page loop and invoking resetEngine() on the stripper inside the page loop.
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.util.List;
import org.apache.pdfbox.exceptions.COSVisitorException;
import org.apache.pdfbox.exceptions.CryptographyException;
import org.apache.pdfbox.exceptions.InvalidPasswordException;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.util.PDFTextStripperByArea;
public class Main {
public static void main(String[] args) throws IOException,
COSVisitorException, CryptographyException {
PDDocument document = null;
try {
document = PDDocument.load("/Users/ilijapavlic/Desktop/IATAUnitedStates.pdf");
if (document.isEncrypted()) {
try
{ document.decrypt(""); }
catch (InvalidPasswordException e)
{ System.err.println("Error: Document is encrypted with a password."); System.exit(1); }
}
float x = 55f;
float y = 40f;
float width = 168.5f;
float height = 689f;
float evenOffset = -10f;
List allPages = document.getDocumentCatalog().getAllPages();
for (int i = 0; i < allPages.size(); i++) {
System.out.println("Page " + i);
PDPage page = (PDPage) allPages.get;
PDFTextStripperByArea stripper = new PDFTextStripperByArea();
stripper.setSortByPosition(true);
for (int j = 0; j < 3; j++)
{
if (i % 2 == 0)
{ Rectangle2D.Float region = new Rectangle2D.Float(x, y, width*3, height); stripper.addRegion("region", region); }
else
{ Rectangle2D.Float region = new Rectangle2D.Float(x + evenOffset, y, width*3, height); stripper.addRegion("region", region); }
}
stripper.extractRegions(page);
for (String regionName : stripper.getRegions())
{ stripper.getTextForRegion(regionName); }
}
}
catch(Exception e)
{ e.printStackTrace(); }
finally {
if (document != null)
{ document.close(); }
}
}
}",0,"Andreas Lehmkühler","Ilija Pavlic",0,1,"05/Jan/12 01:11","05/Feb/12 18:48","05/Feb/12 18:48"
PDFBOX-1203,PDFBOX,"PrintImageLocations doesn't print images inside PDXObjectForm objects",Bug,CLOSED,Minor,Duplicate,1.6.0,None,Utilities,None,,"Some pdf store images inside forms to reuse them throughout the document. PrintImageLocations misses such images.
A workaround that works for some documents:
if (xobject instanceof PDXObjectForm) {
Map images = ((PDXObjectForm) xobject).getResources()
.getImages();
if (images != null) {
Iterator imageIter = images.keySet().iterator();
while (imageIter.hasNext()) {
String key = (String) imageIter.next();
PDXObjectImage image = (PDXObjectImage) images.get(key);
String name = key;
//System.out.println("Writing image:" + name);
//image.write2file(name);
try
{ PDPage page = getCurrentPage(); Matrix ctm = getGraphicsState() .getCurrentTransformationMatrix(); double rotationInRadians = (page.findRotation() * Math.PI) / 180; AffineTransform rotation = new AffineTransform(); rotation.setToRotation(rotationInRadians); AffineTransform rotationInverse = rotation.createInverse(); Matrix rotationInverseMatrix = new Matrix(); rotationInverseMatrix .setFromAffineTransform(rotationInverse); Matrix rotationMatrix = new Matrix(); rotationMatrix.setFromAffineTransform(rotation); Matrix unrotatedCTM = ctm.multiply(rotationInverseMatrix); float xScale = unrotatedCTM.getXScale(); float yScale = unrotatedCTM.getYScale(); imagesInformation.add(new ImageInformation(name, unrotatedCTM.getXPosition(), unrotatedCTM.getYPosition(), xScale / 100f * image.getWidth(), yScale / 100f * image.getHeight())); }
catch (NoninvertibleTransformException e)
{ throw new WrappedIOException(e); }
}
}
}
if (xobject instanceof PDXObjectImage) {
try
{ PDXObjectImage image = (PDXObjectImage) xobject; PDPage page = getCurrentPage(); Matrix ctm = getGraphicsState() .getCurrentTransformationMatrix(); double rotationInRadians = (page.findRotation() * Math.PI) / 180; AffineTransform rotation = new AffineTransform(); rotation.setToRotation(rotationInRadians); AffineTransform rotationInverse = rotation.createInverse(); Matrix rotationInverseMatrix = new Matrix(); rotationInverseMatrix .setFromAffineTransform(rotationInverse); Matrix rotationMatrix = new Matrix(); rotationMatrix.setFromAffineTransform(rotation); Matrix unrotatedCTM = ctm.multiply(rotationInverseMatrix); float xScale = unrotatedCTM.getXScale(); float yScale = unrotatedCTM.getYScale(); imagesInformation.add(new ImageInformation(objectName.getName(), unrotatedCTM.getXPosition(), unrotatedCTM.getYPosition(), xScale / 100f * image.getWidth(), yScale / 100f * image.getHeight())); }
catch (NoninvertibleTransformException e)
{ throw new WrappedIOException(e); }",0,"Andreas Lehmkühler","Ilija Pavlic",0,1,"05/Jan/12 12:04","05/Jan/12 16:54","05/Jan/12 16:54"
PDFBOX-1204,PDFBOX,"OCR generated PDF/A has problems with preflight validation",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,Preflight,None,,"/home/fausser/boyd.pdf is not valid, error(s):
2.1.2:Invalid Graphis object, The Info entry of a OutputIntent dictionary is missing
3.3.1: Glyph error, CID 95 is missing from the Composite Font format "HiddenHorzOCR"
7.2:Error on MetaData, ModificationDate present in the document catalog dictionary doesn't match with XMP information
Passes as a valid PDF/A with commercial validators Adobe Acrobat 10.x and Callas",0,"Eric Leleu","William Fausser",0,0,"06/Jan/12 16:31","10/Apr/13 17:28","29/Jan/12 09:43"
PDFBOX-1206,PDFBOX,"TrueType glyphs render incorrectly",Bug,CLOSED,Major,Fixed,"1.6.0, 1.7.0, 2.0.0",2.0.0,Rendering,"convertToImage image",,"I've done a extensive testing of pdfbox under the new Java 7, update 1 & update 2 releases, and am noticing
severe image quality issues when converting a pdf to an image.
Attached is the same pdf turned converted to an image under Java 6, then again with Java 7
with the same code. The Java 7 version looks pretty bad.
This is with jdk 1.7 update 1 & 2 (for solaris x64, running headless, and OS X running Java 7 preview update 2 with default with no addition vm args to the default java command). I've also tested against
the latest code in svn (the images below are from the most current version).
The good image below is from a recent version of the jdk 1.6 (and it has always looked good
on at least jdk1.5+).
To test, I used code like this:
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;

public final class PdfToImageTest {

  public static BufferedImage toBufferedImage(final String pdfFile, final int resolution)
    throws IOException {
    PDDocument document = null;
    try {
      document = PDDocument.load(pdfFile);
      final PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);
      final BufferedImage result = page.convertToImage(BufferedImage.TYPE_INT_ARGB, resolution);
      return result;
    } finally {
      if (document != null) {
        document.close();
      }
    }
  }

  public static void main (String[] args) throws IOException {
    ImageIO.write(toBufferedImage(args[0], 108), "png", new File(args[1]));
  }

}",0,"Tilman Hausherr","Armando Singer",3,6,"10/Jan/12 01:52","17/Mar/16 19:07","15/Feb/15 13:07"
PDFBOX-1208,PDFBOX,"Color Space Problem- Invalid Color Space",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,Preflight,None,,"The attached PDF/A validates with commercial validators like Adobe Acrobat 10.x
/home/fausser/BadPDFA.pdf is not valid, error(s) :
2.4.3:| Invalid Color space, The operator "f" can't be used without Color Profile
The Color space appears to be "adhoc"",0,"Eric Leleu","William Fausser",0,0,"12/Jan/12 19:34","10/Apr/13 17:28","23/Jan/12 11:20"
PDFBOX-1209,PDFBOX,"Add insertSiblingBefore() to PDOutlineItem","New Feature",CLOSED,Minor,Duplicate,"1.6.0, 2.0.0",2.0.0,PDModel,bookmarks,,"At the moment it's not possible to insert a first child to a pre-existing PDDocumentOutline because all the available methods only allow you to add a PDOutlineItem at the end of the list (PDDocumentOutline.appendChild()) or after an existing child (PDOutlineItem.insertSiblingAfter()). As a result, if you wish to insert a new first child, you have to manually traverse and re-create the entire tree, which is ridiculous.
As a solution, I offer to add a new method to the PDOutlineItem class, insertSiblingBefore(). I've written the code necessary based on insertSiblingAfter(). It's very straight-forward...
 /**
     * Insert a sibling before this node.
     *
     * @param item The item to insert.
     */
    public void insertSiblingBefore( PDOutlineItem item )
    {
        item.setParent( getParent() );
        PDOutlineItem previous = getPreviousSibling();
        setPreviousSibling( item );
        item.setNextSibling( this );
        if( previous != null )
        {
            item.setPreviousSibling( previous );
            previous.setNextSibling( item );
        }
        updateParentOpenCount( 1 );
    }
I hope this can be integrated in the next release...",0,"Tilman Hausherr","Gilad Denneboom",0,1,"16/Jan/12 13:34","14/Feb/15 12:23","14/Feb/15 12:23"
PDFBOX-121,PDFBOX,"EOL changes on different OSes",Bug,CLOSED,Major,Duplicate,None,None,Writing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1415803
Originally submitted by yourgod on 2006-01-26 15:03.
ContentStreamWriter.EOL is currently defined as
System.getProperty("line.separator").getBytes()
I am using PDDocument.save(OutputStream) to send the
pdf through a CheckedOutputStream for getting a
checksum for the pdf. I found that because of this use
of System.getProperty("line.separator") that my
checksums were different when this ran on different
operating systems. My workaround was to force
System.getProperty("line.separator") to a known value
before calling PDDocument.save(OutputStream) and then
resetting it after, but this is not an optimal solution.
I propose that this value be made a fixed one (which
one you pick apparently doesn't matter) as it's more
"java like" for things to be the same on different
operating systems.
[comment on SourceForge]
Originally sent by yourgod.
Logged In: YES
user_id=257129
Seems COSStandardOutputStream.EOL also needs a change made
as it is initialized the same way.",0,"Andreas Lehmkühler",Anonymous,0,1,"26/Jan/06 23:03","02/Nov/13 16:10","02/Nov/13 16:10"
PDFBOX-1211,PDFBOX,"Refactor IO interfaces + PATCH",Improvement,CLOSED,Minor,Fixed,1.6.0,1.7.0,Utilities,None,,"The new (more) conforming PDF parsers (PDFBOX-1000, PDFBOX-1199) have other access requirements on the input data than the current parser. Depending on the component (Lexer, Parser) a sequential read or random read is needed. In order to support multiple kinds of sources the access should be defined via interfaces which allows different implementations (files, streams, ...). Since PDFBox already has a RandomAccess interface the most compatible solution is to split it up into an interface hierarchy: RandomAccess extends RandomAccessRead extends SequentialRead.
Attached are the new classes RandomAccessRead and SequentialRead as well as the patch for RandomAccess.",0,"Timo Boehme","Timo Boehme",0,0,"18/Jan/12 10:16","09/Mar/12 10:05","09/Mar/12 10:05"
PDFBOX-1212,PDFBOX,"NullPointerException in SecurityHandler.addDictionaryAndSubDictionary(SecurityHandler.java:185)",Bug,CLOSED,Minor,Fixed,1.6.0,1.7.0,Parsing,None,,"NullPointerException in SecurityHandler.addDictionaryAndSubDictionary(SecurityHandler.java:185)
The attached pdf causes a null pointer in my environment possible security encryption issue?
java.io.IOException:
at org.apache.tika.parser.ParsingReader.read(ParsingReader.java:260)
...
Caused by: org.apache.tika.exception.TikaException: Unexpected RuntimeException from org.apache.tika.parser.pdf.PDFParser@335ac93d
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:244)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:242)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:120)
at org.apache.tika.parser.ParsingReader$ParsingTask.run(ParsingReader.java:221)
... 1 more
Caused by: java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.addDictionaryAndSubDictionary(SecurityHandler.java:185)
Note I incorrectly logged this in TIKA as https://issues.apache.org/jira/browse/TIKA-848 so could that one be resolved when this one is? thanks.",0,"Timo Boehme","Tom Field",0,0,"23/Jan/12 00:18","23/Jan/12 15:35","23/Jan/12 15:35"
PDFBOX-1213,PDFBOX,"Adding style information to the PDF to HTML converter",Improvement,CLOSED,Major,Fixed,1.6.0,"1.8.3, 2.0.0",None,None,,"This patch modifies the PDF to HTML conversion in order to add style information (bold, italic and size font) in the resulting file. Moreover, we have deleted the "DOCTYPE" header because some parsers throws the following exception:
[Fatal Error] loose.dtd:31:3: The declaration for the entity "HTML.Version" must end with '>'.
org.xml.sax.SAXParseException: The declaration for the entity "HTML.Version" must end with '>'.",0,"Andreas Lehmkühler","Enrique Pérez",0,4,"23/Jan/12 11:19","22/Jan/14 21:47","23/Nov/13 15:26"
PDFBOX-1214,PDFBOX,"Allow subclassing of PDFParser","New Feature",CLOSED,Minor,Fixed,1.6.0,1.7.0,Parsing,None,,"As a precondition of PDFBOX-1199 and other improvements implementing new ways of parsing PDF documents using existing code base it is necessary that subclasses of PDFParser can be created. While this is already possible with the current version accessing some needed methods is prohibited by the 'private' keyword. The attached patch changes this to 'protected'.
If there are no objections against the patch I will commit it in the next days.",0,"Timo Boehme","Timo Boehme",0,1,"23/Jan/12 16:15","09/Mar/12 09:37","09/Mar/12 09:37"
PDFBOX-1216,PDFBOX,"Arabic / Farsi (Persian) text appear disconnected when PDF is converted to image",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,None,None,,"When the PDF file contains Arabic / Farsi text, they appear disconnected when converting pages to image.
Arabic / Farsi letters are connected to each other when written.
Additionally, the error message "Changing font on <?> from <B Lotus> to the default font" appears on the console.
As I tried to debug the issue, it is because PDFBox is looking into the embedded fonts for the "isolated" variation of the character, where the embedded font only includes "connected" variation.
If the embedded font contains the isolated format too, the font is displayed correctly (the warning message doesn't appear for that character), but the character is displayed as the incorrect variation (i.e. isolated instead of connected)
This happens in both 1.6.0 release and the latest trunk code (as of today). I didn't test previous versions.
The difference is that in 1.6.0, the default font (that is substituted as mentioned above) contains the Arabic / Persian characters, but in the trunk, the replaced characters are displayed as squares.
I will attach a PDF as an input for reproducing the issue.
Note: this might be related to issue PDFBOX-1127, but that one regards text extraction.",0,"Andreas Lehmkühler","Hamed Iravanchi",0,1,"30/Jan/12 16:05","29/May/12 16:21","04/Mar/12 18:48"
PDFBOX-1218,PDFBOX,"width = 0 if a type1 font uses a standard base 14 font",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,PDModel,"fontwidth type1",,"The width of each character will be 0 if a type1 font uses one of the standard 14 fonts.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"31/Jan/12 18:19","29/May/12 16:21","31/Jan/12 18:23"
PDFBOX-1219,PDFBOX,"org.apache.jempbox.impl.DateConverter unable to parse correct date value",Bug,CLOSED,Major,Fixed,1.6.0,"1.8.3, 2.0.0",JempBox,None,,"In a PDF I have found the following XMP field:
xmp:CreateDate="2012-01-31T10:33+01:00"
When Jempbox try to access this field I received the following error : "Error converting date:201201311033+0100"
If we read the XMP SPECIFICATION PART 1 (http://www.adobe.com/devnet/xmp.html) in chapter "8.2.1.2 Date" the value is correct, it respect the format : YYYY-MM-DDThh:mmTZD but the DateConverter class is not able to read it.
After a quick view of the class the complete parsing method need to be rewritten.
Best regards,
Pierre Huttin",0,"Andreas Lehmkühler","Pierre Huttin",0,2,"02/Feb/12 13:41","30/Nov/13 17:02","11/Nov/13 18:53"
PDFBOX-1220,PDFBOX,"CMYK image cannot be extracted (empty file generated)",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,None,CMYK,,"Extracting the attached PDF with the following command:
java -jar app/target/pdfbox-app-1.7.0-SNAPSHOT.jar PDFToImage -imageType png /tmp/WO2011140338-Page25.pdf
This generates image WO2011140338-Page251.png (attached).
This is a great improvement over pdfbox 1.6.0, which generates four copies of the image (maybe because of the CMYK encoding?). Well done!
However the image is still of quite poor quality, apparently lower than the actual image data in the PDF, when displayed with acrobat reader or evince 2.32.0 (screenshot attached too). It would be great if that could be fixed too.",0,"Andreas Lehmkühler","Daniel Bonniot de Ru",0,1,"02/Feb/12 15:02","29/May/12 16:21","04/Feb/12 11:57"
PDFBOX-1221,PDFBOX,"Add support to set a start and/or end page when splitting a pdf","New Feature",CLOSED,Minor,Fixed,1.6.0,1.7.0,Utilities,None,,"PDFSplit splits a pdf in portions of the same size. The size can be set using the "split" parameter. The default value is 1.
If someone needs the last 8 pages of an 13 pages pdf, it can't be done with PDFSplit.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"04/Feb/12 17:33","29/May/12 16:21","04/Feb/12 18:15"
PDFBOX-1222,PDFBOX,"PDFs created with idealsoftware.com's VPE are all wrong",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,"Text extraction",None,,"Follow the steps:
1. Download the example pdf I'll attach. It's the same as "example rich text format" pdf from idealsoftware.com but with text extraction protection disabled.
2a. java -jar pdfbox-app-1.6.0.jar ExtractText -sort rtf.pdf extr.txt
Actual results:
Text is all gibberish. If you look at it very carefully, sorting "reads" the text vertically and you find first characters of each line first, then second characters of each line, etc.
Moreover, on jdk7: java.lang.IllegalArgumentException: Comparison method violates its general contract! (that's the text position sorting comparator)
Poking around the code indicates that sorting is correct if character rotation was 270 degrees. It (correctly?) calculates it as zero instead.
2b. java -jar pdfbox-app-1.6.0.jar ExtractText rtf.pdf extr.txt
Actual results:
Text is fine, but each page is glued to a single line. Poking around the code indicates that character offsets go down correctly, but expected line height is huge (full page height or width?) and therefore they never go down sufficiently to trigger a newline detection.
So, there's something very wrong with character positions in those files, making pdfbox not extract text correctly.",0,"Andreas Lehmkühler",Radek,2,2,"06/Feb/12 02:39","23/Oct/14 17:19","23/Oct/14 17:19"
PDFBOX-1223,PDFBOX,"Strange color issues with convertToImage method","New Feature",CLOSED,Major,Fixed,1.6.0,2.0.0,Rendering,"colorspaces convertT",,"While testing PDFBox I noticed a few strange color issues when converting the first page of an pdf to an image using the method convertToImage on a PDPage. An example pdf and resulting png is attached for each case.
Case 1: Most of the colors seem to get inverted.
Case 2: The green color of the area in the top right is paler the the original, and the text under the logo at the bottom right is quite "pixely"
Case 3: The blue area under the text is missing
Case 4: The red area should be semi-transparent (so the rose stem can be seen behind it), not solid.
I compared all resulting images with how the pdf looks in Foxit Reader 5.1 on Windows 7.
This is the code I used:
---------
PDFParser parser = new PDFParser(new FileInputStream(pdfInputFile));
parser.parse();
PDDocument document = parser.getPDDocument();
List<PDPage> pages = (List<PDPage>)document.getDocumentCatalog().getAllPages();
if (pages.size() > 0) {
PDPage page = pages.get(0);
BufferedImage image = page.convertToImage(BufferedImage.TYPE_INT_RGB, 300);
ImageIO.write(image, "png", pngOutputFile);
}
---------
If there is some change I can do in my code or some configuration to improve some of these issues, then I would love to hear about it. As a comparison, Ghost4j (with Ghostscript underneath) can handle these cases better. Even the text under the logo in case 2 was less "pixely", with the same resolution.",0,"Andreas Lehmkühler","Jimi Hullegård",0,2,"06/Feb/12 16:42","17/Mar/16 19:06","17/Dec/14 11:33"
PDFBOX-1224,PDFBOX,"Angle units are not consistent",Wish,CLOSED,Minor,Fixed,"1.6.0, 2.0.0","1.8.8, 2.0.0","Documentation, (1)",api-change,ubuntu,"Hi Devs,
I've noticed that the angle units are not consistent throughout pdfbox. For instance, org.apache.pdfbox.pdmodel.PDPage.setRotation() needs a angle in degrees while org.apache.pdfbox.pdmodel.edit.PDPageContentStream.setTextRotation() needs an angle in radians...
The javadoc does not specify which units are taken as arguments.
It would save devs a bit of time to know that all angles are to be provided in degrees or radians.
Thanks and keep up the good work !!
jy",0,"Tilman Hausherr",jypllx,0,2,"07/Feb/12 09:00","13/Dec/14 14:15","11/Oct/14 21:57"
PDFBOX-1225,PDFBOX,"java.io.IOException: For input string: "2152829241"",Bug,CLOSED,Major,Duplicate,1.6.0,None,"Swing GUI",None,"windows 7, windows xp","I had a pdf of 6 pages, size of 2,40 GB.
I can open the PDF with AcrobatReader 9, but I cannot open with FoxitReader. (pdf corrupted)
The code I am using to count pages is the following:
//create a temporary file needed by the PDFBox when dealing with PDFs really really large
temp = new File("e:/temp.tmp");
//using random access file needed for PDF really large
rand = new RandomAccessFile(temp,"rw");
doc = PDDocument.load(file,rand);
nr = doc.getNumberOfPages();
I receive the following exception:
java.io.IOException: For input string: "2152829241"
at org.apache.pdfbox.pdfparser.PDFParser.parseXrefTable(PDFParser.java:730)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:452)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:184)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1069)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1022)
at PDFBoxExample.getHugeNrOfFiles(PDFBoxExample.java:36)
at PDFBoxExample.main(PDFBoxExample.java:257)
After searching in your code , I found the cause of the exception is NumberFormatException , due to 2152829241 =>
Integer.parseInt(2152829241) crashes , because 2152829241 > Integer.MAX_VALUE
I have made several changes to the source code :
XRefTrailerResolver
COSDocument
PDFParser
COSWriter
BaseParser
XRefTrailerResolver
changing from int to long => code worked
Is it possible for you to change the code accordingly or I can send you the classes.",0,"Andreas Lehmkühler","Anca Zapuc",0,0,"09/Feb/12 21:40","09/Feb/12 21:51","09/Feb/12 21:51"
PDFBOX-1226,PDFBOX,"Counting pages of a PDF gives OutOfMemoryError",Bug,CLOSED,Minor,"Not A Problem",1.6.0,1.6.0,"Parsing, (1)",None,"windows 7, windows xp","I have a pdf ( 397 MB) and I am trying to count the pages.
I am able to open the PDF with AdobeReader 9, but no with FoxitReader.
Code:
PDDocument doc = null;
File temp = null;
RandomAccessFile rand = null;
int nr = 0;
try
{ //create a temporary file needed by the PDFBox when dealing with PDFs really really large temp = new File("e:/temp.tmp"); //using random access file needed for PDF really large rand = new RandomAccessFile(temp,"rw"); doc = PDDocument.load(file,rand); nr = doc.getNumberOfPages(); }
catch(Exception e)
{ e.printStackTrace(); }
Got following exception:
org.apache.pdfbox.exceptions.WrappedIOException
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:240)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1069)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1022)
at PDFBoxExample.getHugeNrOfFiles(PDFBoxExample.java:36)
at PDFBoxExample.main(PDFBoxExample.java:258)
Caused by: java.lang.OutOfMemoryError: Java heap space
at java.lang.AbstractStringBuilder.<init>(AbstractStringBuilder.java:45)
at java.lang.StringBuffer.<init>(StringBuffer.java:79)
at org.apache.pdfbox.pdfparser.BaseParser.readString(BaseParser.java:1121)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSStream(BaseParser.java:402)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:552)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:184)
... 4 more
I attached the PDF.",0,"Timo Boehme","Anca Zapuc",0,0,"09/Feb/12 22:01","10/Feb/12 18:25","10/Feb/12 18:25"
PDFBOX-1228,PDFBOX,"PDocument corrupts file",Bug,CLOSED,Critical,"Not A Problem","1.6.0, 1.7.0",None,PDModel,None,ubuntu,"I have a file (attached) that when loaded with PDocument.load and then saved to another location simply saves as a blank PDF. The number of pages is correct, but when opened in Acrobat, all the page names are corrupted and the pages are blank.
Here's the code:
PDDocument doc = PDDocument.load("/home/jnankin/Desktop/in.pdf");
doc.save("/home/jnankin/Desktop/out.pdf");
doc.close();
Please advise.",0,"Andreas Lehmkühler","Josh Nankin",0,0,"15/Feb/12 21:35","01/Mar/12 08:43","29/Feb/12 18:11"
PDFBOX-1229,PDFBOX,"PDFBox: PDFReader invokes heap memory exception while loading big documents",Bug,CLOSED,Major,"Won't Fix",None,None,Parsing,None,windows,"I am trying to load load bigger document using PDFReader component of PDFBox with version 1.6.0, if I have not set any maximum heap memory then load method invokes heap memory exception. On setting java max heap to 800 resolve the issue.
But if I use the same PDFReader component of PDFBox with version 1.4.0 to load the same document with default java min and max heap memory it loads the pdf properly.
Is it possible to to investigate why memory is leaked with pdfbox component version higher than 1.4.
Thanks",0,"Andreas Lehmkühler","Sanket Sangodkar",0,0,"20/Feb/12 09:51","22/Feb/12 12:18","22/Feb/12 12:18"
PDFBOX-1230,PDFBOX,"Support CIDToGIDMap of CID-Type2 fonts","New Feature",CLOSED,Major,Fixed,1.6.0,1.7.0,PDModel,None,,"If a CDIType2 fonts uses an embedded ttf it may have a CIDToGIDMap which provides a mapping from CID to glyph indices",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"20/Feb/12 16:46","29/May/12 16:21","20/Feb/12 16:51"
PDFBOX-1231,PDFBOX,"AcroForm appearance generator",Bug,CLOSED,Major,Fixed,1.6.0,2.0.0,AcroForm,"Appearance Encoding",,"On a PDF with an AcroForm, when setting the PDVariableText value, there's a problem with the encoding. The value is stored on the PDF as UTF-8 instead of ISO8859-1.
Another problem is when setting the value again the FontSize set is lost, and if the textbox is multiline it also doesn't work.",0,"Maruan Sahyoun","André Camilo",1,4,"21/Feb/12 12:36","17/Mar/16 19:08","03/Feb/15 22:18"
PDFBOX-1232,PDFBOX,"FlateDecoder in stream mode",Bug,CLOSED,Major,Fixed,None,1.7.0,None,None,,"The zlib (the unlying spec for Flate compression) does not require an Z_STREAM_END to terminate the compression. The Java InflateInputStream is really assuming that you are reading a zip or gzip file which will always have a Z_STREAM_END (Z_STREAM_END is a constant in the zlib library which Java calls natively) . So the following chunk decodes fine using the jcraft zlib decoder, but fails using the InflateInputStream.
3 0 obj
<<
/Type /XObject
/Subtype /Form
/FormType 1
/Resources << /Font 4 0 R
/ProcSet [/PDF /ImageC /Text]>>
/BBox [0 0 595 842]
/Matrix [1 0 0 1 0 0]
/Filter /FlateDecode
/Length 5 >>
stream
H<89>C@
endstream
endobj
The blob is 72, -119, 3, 0, 13 decimal. It decodes to an empty string.
The fix is to use Inflater and check to see if it has consumed all of the input buffer and make sure it has nothing to write into the output buffer.
protected ByteArrayOutputStream decompress(InputStream in)
throws IOException, DataFormatException
{
ByteArrayOutputStream out = new ByteArrayOutputStream();
byte buf[] = new byte[1000];
Inflater inflater = new Inflater();
int read = in.read(buf);
if(read == 0)
{ return out; }
inflater.setInput(buf,0,read);
byte res[] = new byte[1000];
while(true)
{
int resRead = inflater.inflate(res);
if(resRead !=0)
{ out.write(res,0,resRead); continue; }
if(inflater.finished() || inflater.needsDictionary() || in.available()==0)
{ out.close(); return out; }
read = in.read(buf);
inflater.setInput(buf,0,read);
}
}
We then need to change FlateFilter.decode(InputStream compressedData, OutputStream result,
COSDictionary options, int filterIndex )
to look like ...
if (compressedData.available() > 0)
{
try
{ baos = decompress(compressedData); }
if (predictor==-1 || predictor == 1 )
{ result.write(baos.toByteArray()); }
else
{
use the bytearrayoutput stream as before ...
}",0,"Andreas Lehmkühler","Dave Smith",0,0,"21/Feb/12 13:04","29/May/12 16:21","10/Mar/12 15:20"
PDFBOX-1233,PDFBOX,"CCITTFaxG31DDecodeInputStream - Extended codes have wrong length",Bug,CLOSED,Major,Fixed,None,1.7.0,None,None,,"When dealing with large fax images there are Extended Make Up Codes.
They are added to the tree as ...
buildUpMakeUp(LONG_MAKE_UP, WHITE_LOOKUP_TREE_ROOT);
buildUpMakeUp(LONG_MAKE_UP, BLACK_LOOKUP_TREE_ROOT);
Accept, the length is 0 based not starting at 1792.
The quick hack is to create a new method so the length of the node is correct
private static void buildUpMakeUpLong(short[] codes,
NonLeafLookupTreeNode root)
{
for (int len = 0, c = codes.length; len < c; len++)
{ LookupTreeNode leaf = new MakeUpTreeNode((len + 28) * 64); addLookupTreeNode(codes[len], root, leaf); }
}
as thus ...
buildUpMakeUpLong(LONG_MAKE_UP, WHITE_LOOKUP_TREE_ROOT);
buildUpMakeUpLong(LONG_MAKE_UP, BLACK_LOOKUP_TREE_ROOT);",0,"Andreas Lehmkühler","Dave Smith",0,0,"21/Feb/12 13:33","29/May/12 16:21","11/Mar/12 13:58"
PDFBOX-1234,PDFBOX,"NPE at org.apache.pdfbox.pdmodel.interactive.form.PDAppearance.calculateFontSize(PDAppearance.java:551)",Bug,CLOSED,Major,Fixed,"1.8.4, 2.0.0",2.0.0,AcroForm,None,,"Using SVN trunk revision 1291094 (2012-02-18)
Getting the following stack trace when trying to call PDField.setValue() on a AcroForm field in the attached document;
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.interactive.form.PDAppearance.calculateFontSize(PDAppearance.java:551)
at org.apache.pdfbox.pdmodel.interactive.form.PDAppearance.insertGeneratedAppearance(PDAppearance.java:371)
at org.apache.pdfbox.pdmodel.interactive.form.PDAppearance.setAppearanceValue(PDAppearance.java:281)
at org.apache.pdfbox.pdmodel.interactive.form.PDVariableText.setValue(PDVariableText.java:131)
Reason seems to be that PDApperance.getFontAndUpdateResources() returns null, in turn because the font dictionary for the DA of the field ("/Cour 11 Tf 0 g") is not present in the document.",0,"Maruan Sahyoun","Christer Palm",0,4,"21/Feb/12 22:20","17/Mar/16 19:07","04/Feb/15 14:36"
PDFBOX-1236,PDFBOX,"Glyph Error in PDF/A that passes comercial validators",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,Preflight,None,redhat,"home/fausser/CCREADMEPDFA.pdf is not valid, error(s) :
3.3.1: Glyph error, CID 515 can't be found in the cidToGid map",0,"Eric Leleu","William Fausser",0,0,"24/Feb/12 16:46","10/Apr/13 17:28","17/Mar/12 10:44"
PDFBOX-1237,PDFBOX,"PDPixelMap uses wrong number of components for the target colorspace",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,"Swing GUI",None,,"PDPixelMap#getRGBImage uses a rgb-based colorspace as target, but it the calculation for the number of components is wrong. There are only 2 valid values 3 (RGB) or 4 (RGB + alpha).
The pdf attached to PDFBOX-1022 triggers this issue.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"27/Feb/12 15:26","29/May/12 16:21","27/Feb/12 15:30"
PDFBOX-1238,PDFBOX,"Document stream used a undefined font resource",Bug,CLOSED,Major,Fixed,"1.6.0, 1.7.0",1.7.0,"Parsing, (3)",None,"java 1.5, eclipse","I can not find the font (F3) in resouces, but the content stream included the follow script
BT /F3 8 Tf ET q BT /F3 8 Tf 0 0 0.6275 rg 0 0 0.6275 RG 1 0 0 1 1 5.89 Tm 8 TL (www.global-reports.com)Tj ()'
ET Q
and then, some exceptions are threw.
15:25:19,985 WARN [PDFStreamEngine] java.io.IOException: Error: Could not find font(COSName
{F3}) in map={F2=org.apache.pdfbox.pdmodel.font.PDType1Font@18f5824}
java.io.IOException: Error: Could not find font(COSName{F3}
) in map=
{F2=org.apache.pdfbox.pdmodel.font.PDType1Font@18f5824}
at org.apache.pdfbox.util.operator.SetTextFont.process(SetTextFont.java:57)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:553)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:270)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)
15:25:19,985 WARN [PDFStreamEngine] java.lang.NullPointerException
java.lang.NullPointerException
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:357)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:553)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:270)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)",0,"Andreas Lehmkühler","philip huang",0,1,"28/Feb/12 07:57","29/May/12 16:21","13/May/12 09:54"
PDFBOX-1239,PDFBOX,"Using PDFToImage creates blank images on pages.",Bug,CLOSED,Major,"Not A Problem",1.6.0,None,PDModel,"Image PDFBox PDFToIm","windows xp, java 1.6","I have been using PDFToImage to create images from the PDF documents and everything has been working great until I ran into this file.
It will create the images of each page but not display the image correctly. Either it will show the image as white or black. I attached the pdf and some of the images it created. Below I have used this command and some of the output. Any ideas? Is it because it is an embedded image relating to PDFBOX-1095
java -jar pdfbox-app-1.6.0.jar PDFToImage -imageType png -startPage 1 -endPage 10 afdd2_1_1.pdf
Feb 28, 2012 9:14:57 PM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFO: unsupported/disabled operation: BDC
Feb 28, 2012 9:14:58 PM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFO: unsupported/disabled operation: EMC
Feb 28, 2012 9:14:58 PM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFO: unsupported/disabled operation: i
Writing: afdd2_1_11.png",0,"Andreas Lehmkühler","Nghi Nguyen",0,3,"29/Feb/12 02:20","23/Mar/13 13:05","13/May/12 11:16"
PDFBOX-1240,PDFBOX,"Extract Images from PDF file using PDFBox in C#","New Feature",CLOSED,Minor,"Not A Problem",0.7.3,None,Utilities,None,,"public class ExtractImage
{
private int imageCounter = 1;
private static string PASSWORD = "-password";
private static string PREFIX = "-prefix";
public ExtractImage()
{
}
public void extractImage(string []args)
{
if(args.Length<1||args.Length>4)
{ usage(); }
else
{
string pdfFile = "";
string password = "";
string prefix = null;
for (int i = 0; i < args.Length; i++)
{
if(args[i]==PASSWORD)
{
i++;
if (i >= args.Length)
{ usage(); }
password = args[i];
}
else if (args[i]==PREFIX)
{
i++;
if(i>=args.Length)
{ usage(); }
prefix = args[i];
}
else
{
if(pdfFile==null)
{ pdfFile = args[i]; }
}
}
if(pdfFile==null)
{ usage(); }
else
{
if(prefix==null && pdfFile.Length>4)
{ prefix = pdfFile.Substring(0, pdfFile.Length - 4); }
PDDocument document=null;
try
{
document = PDDocument.load(pdfFile);
if( document.isEncrypted() )
{
StandardDecryptionMaterial spm = new StandardDecryptionMaterial(password);
document.openProtection(spm);
AccessPermission ap = document.getCurrentAccessPermission();
if( ! ap.canExtractContent() )
{ Console.WriteLine("Error: You do not have permission to extract images." ); }
}
List pages = document.getDocumentCatalog().getAllPages();
java.util.Iterator iter = pages.iterator();
while( iter.hasNext() )
{
PDPage page = (PDPage)iter.next();
PDResources resources = page.getResources();
java.util.Map images = resources.getImages();
if( images != null )
{
Iterator imageIter = images.keySet().iterator();
while( imageIter.hasNext() )
{ string key = (String )imageIter.next(); PDXObjectImage image = (PDXObjectImage)images.get( key ); string name = getUniqueFileName( key, image.getSuffix() ); Console.WriteLine( "Writing image:" + name ); image.write2file( name ); }
}
}
}
catch (Exception)
{ throw; }
}
}
}
private string getUniqueFileName(string prefix, string suffix)
{
string uniqueName = null;
java.io.File f = null;
f = null;
while (f == null || f.exists())
{ uniqueName = prefix + "-" + imageCounter; f =new File(uniqueName + "." + suffix); imageCounter++; }
return uniqueName;
}
private void usage()
{ Console.Error.WriteLine("Usage: java org.pdfbox.ExtractImages [OPTIONS] <PDF file>\n" + " -password <password> Password to decrypt document\n" + " -prefix <image-prefix> Image prefix(default to pdf name)\n" + " <PDF file> The PDF document to use\n"); Environment.Exit(1); }
}
Reference: http://svn.apache.org/repos/asf/pdfbox/trunk/pdfbox/src/main/java/org/apache/pdfbox/ExtractImages.java
I tested but i have a problem.It ran if(args.Length<1||args.Length>4) and stopped in usage().It loop.Please help me.Many thanks.
{ usage(); }",0,"Andreas Lehmkühler","Pham Minh Cuong",0,2,"29/Feb/12 03:41","21/May/12 04:58","21/May/12 04:58"
PDFBOX-1242,PDFBOX,"Handle non ISO-8859-1 chars with drawString",Bug,CLOSED,Major,Fixed,"1.5.0, 1.6.0",2.0.0,Writing,None,,"The PDPageContentStream.drawString take a String as argument, it construct a COSString of the input.
If the input contain chars above 255, the COSString is prefixed 0xFe, 0xff and the bytes are taken from the
input as "UTF-16BE" encoded.
Back in the drawString method this unicode16 encoded COSString is appended as a "ISO-8859-1"
appendRawCommands( new String( buffer.toByteArray(), "ISO-8859-1"));
The result of this is that a line with UTF-16 chars is shown prefix with þÿ, and with double space between the other chars.
The chars above 255 are shown as the two corresponding ISO-8859-1 characters.
As a side question to this observation, is there an alternative way to use Pdfbox, to support UTF16?",0,"John Hewson","Peter Andersen",1,4,"29/Feb/12 12:32","17/Mar/16 19:08","12/Dec/14 04:49"
PDFBOX-1243,PDFBOX,"XMPSchemaMediaManagement : bad setManagedFrom",Bug,CLOSED,Minor,Fixed,1.6.0,1.7.0,JempBox,None,,"Mail from Chris J Lindberg :
While trying to decide on how to implement qualifiers I came across what appears to be a copy and paste error in the XMPSchemaMediaManagment setManagedFrom method. Instead of using prefix + ":ManagedFrom" it uses prefix + ":DerivedFrom"
Here is the 1.6.0 source:
/**
Set or clear the managed from value.
*
@param resource The resource reference to set.
*
@see XMPSchemaMediaManagement#createManagedFrom()
*/
public void setManagedFrom( ResourceRef resource )
{
XMLUtil.setElementableValue( schema, prefix + ":DerivedFrom", resource );
}",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"29/Feb/12 19:26","29/May/12 16:21","29/Feb/12 19:28"
PDFBOX-1244,PDFBOX,"the text content extracted by PDFBOX is not as the same as it is displayed in Adobe reader",Bug,CLOSED,Major,"Not A Problem","1.6.0, 1.7.0",None,"Text extraction",None,"windows xp, eclipse","Hello,
I useed pdfbox extract text content from the PDF document in the appendix, founded the extracted text is "年预" but the text displayed in Adobe reader is "年期". I want to know how to get the correct text content (as Adobe reader showing) from this kind of PDF documents by PDFBOX.",0,"Andreas Lehmkühler",huangchangan,0,1,"01/Mar/12 09:20","23/Oct/14 17:10","23/Oct/14 17:10"
PDFBOX-1246,PDFBOX,"Allow resolution to be defined when calling ImageIOUtil.writeImage",Improvement,CLOSED,Trivial,Fixed,1.7.0,1.8.0,Utilities,patch,,"I would like to call the method
private static boolean writeImage(BufferedImage image, String imageFormat, Object outputStream, int resolution)
but it's private.
The easiest solution in my mind would be just to change this method to a public method.",0,"Andreas Lehmkühler","Josh Brackett",0,1,"06/Mar/12 18:43","23/Mar/13 12:56","20/Aug/12 06:14"
PDFBOX-1248,PDFBOX,"PDNumberTreeNode method setNumbers( Map numbers ) sets the key for the for the Nums dictionary entry to Names rather than Nums",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,PDModel,pdfbox,"windows 7, java 1.6","PDNumberTreeNode setNumbers(Map numbers) uses "Names" rather than "Nums" as key for Nums entry in NumberTreeNode dictionary.
Any number tree node updated this way will, upon execution of getNumbers(), return null, and will in fact be an invalid NumberTreeNode
Line in method with problem is #256:
node.setItem( "Names", array );",0,"Andreas Lehmkühler","Sheila Morrissey",0,1,"07/Mar/12 21:09","29/May/12 16:21","13/Mar/12 22:15"
PDFBOX-1249,PDFBOX,"PDF/A file has a preflight, .pdmodel.font exception. Validates with commercial viewers",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,"PDModel, (1)",None,linux,"java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.font.PDType0Font.encode(PDType0Font.java:182)
at org.apache.padaf.preflight.contentstream.ContentStreamWrapper.validText(ContentStreamWrapper.java:339)
at org.apache.padaf.preflight.contentstream.ContentStreamWrapper.validStringArray(ContentStreamWrapper.java:280)
at org.apache.padaf.preflight.contentstream.ContentStreamWrapper.validStringArray(ContentStreamWrapper.java:278)
at org.apache.padaf.preflight.contentstream.ContentStreamWrapper.checkShowTextOperators(ContentStreamWrapper.java:207)
at org.apache.padaf.preflight.contentstream.ContentStreamWrapper.processOperator(ContentStreamWrapper.java:180)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.padaf.preflight.contentstream.ContentStreamWrapper.validPageContentStream(ContentStreamWrapper.java:79)
at org.apache.padaf.preflight.helpers.PagesValidationHelper.validateContent(PagesValidationHelper.java:196)
at org.apache.padaf.preflight.helpers.PagesValidationHelper.validatePage(PagesValidationHelper.java:105)
at org.apache.padaf.preflight.helpers.PagesValidationHelper.innerValidate(PagesValidationHelper.java:73)
at org.apache.padaf.preflight.helpers.AbstractValidationHelper.validate(AbstractValidationHelper.java:91)
at org.apache.padaf.preflight.AbstractValidator.runValidation(AbstractValidator.java:122)
at org.apache.padaf.preflight.PdfA1bValidator.validate(PdfA1bValidator.java:97)
at org.apache.padaf.preflight.Validator_A1b.validate(Validator_A1b.java:182)
at org.apache.padaf.preflight.Validator_A1b.<init>(Validator_A1b.java:86)
at org.apache.padaf.preflight.Validator_A1b.main(Validator_A1b.java:80)",0,"Eric Leleu","William Fausser",0,0,"08/Mar/12 12:26","29/May/12 16:21","13/Mar/12 21:08"
PDFBOX-1252,PDFBOX,"Use a separate CMap for the ToUnicode mapping",Improvement,CLOSED,Major,Fixed,1.6.0,1.7.0,PDModel,None,,"As discussed on dev@pdfbox we have to avoid that the ToUnicode mapping overrides the encoding cmap",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"13/Mar/12 19:20","29/May/12 16:21","13/Mar/12 19:27"
PDFBOX-1253,PDFBOX,"split PDFont#encode","New Feature",CLOSED,Major,Fixed,1.6.0,1.7.0,"Preflight, (2)",None,,"As discussed in the dev@pdfbox.apache.org (thread : Questions about toUnicode Cmap).
We need to split PDFont#encode, to get one method providing the string and one providing the cid.",0,"Eric Leleu","Eric Leleu",0,0,"13/Mar/12 20:51","29/May/12 16:21","17/Mar/12 10:26"
PDFBOX-1254,PDFBOX,"[PATCH] Support translate/scale/rotate of overlay in Overlay.java",Improvement,CLOSED,Minor,Duplicate,1.7.0,None,Utilities,None,,"As part of some ground-testing work I've been doing for pdf embedding enhancements in Apache FOP, I've modified PDFBox's Overlay.java to support translation, rotation and scaling of the PDF being overlaid.
This may be a useful feature for PDFBox, so I thought I'd send it in.
Right now it uses the target PDF document's co-ordinate units for translations, so it's hard for users to know what translation to specify without trial and error. I'm not sure what the best way to remedy this is to make for a better user interface, but I suspect that adding the ability to set an origin (TL, BL, TR, BR, or center) that'd help. That way it's easier for them to say "position the overlay on the top left" for example. The actual translation amount could be given as a percentage of the target document size in that axis, maybe, or accept different unit suffixes like "%" or "cm". I'm not sure what the best approach is, and I won't need to explore it for my current project, but it should be easy enough to add.
diffstat:
Overlay.java | 168 +++++++++++++++++++++++++++++++++++++++++++----------------
1 file changed, 123 insertions, 45 deletions",0,"Andreas Lehmkühler","Craig Ringer",0,0,"14/Mar/12 05:56","14/Mar/12 06:57","14/Mar/12 06:57"
PDFBOX-1258,PDFBOX,"2.4.9 Invalid color space..ok with commercial validators",Bug,CLOSED,Major,Fixed,None,1.7.0,Preflight,None,,"AutoPPDFA.pdf is not valid, error(s):
2.4.9:Invalid Color space, Invalid Color space, ICCBased ColorSpace is forbidden.",0,"Eric Leleu","William Fausser",0,0,"14/Mar/12 18:38","10/Apr/13 17:28","17/Mar/12 13:29"
PDFBOX-1259,PDFBOX,"3.1.6 Invalid Font Definition - not your usual pdf - passes Adobe and pdfaPilot validation as PDF/A",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,Preflight,None,linux,"testXPDFA.pdf is not valid, error(s):
3.1.6: Invalid Font definition, Width of the character "2" in the font program "EJCJIO+FrankRuehlCLM-Medium"is inconsistent with the width in the PDF dictionary.",0,"Eric Leleu","William Fausser",0,0,"15/Mar/12 18:22","10/Apr/13 17:28","11/Apr/12 21:27"
PDFBOX-1260,PDFBOX,"parser.XmpUnexpectedElementException...Commercial validators verify as a valid PDF/A",Bug,CLOSED,Major,Fixed,1.7.0,1.8.0,"Preflight, (1)",None,linux,"org.apache.padaf.xmpbox.parser.XmpUnexpectedElementException: Unexpected property definition in one of PDF/A Extension schemas description
at org.apache.padaf.xmpbox.parser.XMPDocumentBuilder.parseSchemaDescription(XMPDocumentBuilder.java:732)
at org.apache.padaf.xmpbox.parser.XMPDocumentBuilder.parseExtensionSchema(XMPDocumentBuilder.java:677)
at org.apache.padaf.xmpbox.parser.PDFAExtentionSchemaPreprocessor.parseDescription(PDFAExtentionSchemaPreprocessor.java:74)
at org.apache.padaf.xmpbox.parser.XMPDocumentBuilder.parse(XMPDocumentBuilder.java:164)
at org.apache.padaf.xmpbox.parser.PDFAExtentionSchemaPreprocessor.process(PDFAExtentionSchemaPreprocessor.java:42)
at org.apache.padaf.xmpbox.parser.XMPDocumentBuilder.parse(XMPDocumentBuilder.java:124)
at org.apache.padaf.preflight.helpers.MetadataValidationHelper.innerValidate(MetadataValidationHelper.java:122)
at org.apache.padaf.preflight.helpers.AbstractValidationHelper.validate(AbstractValidationHelper.java:91)
at org.apache.padaf.preflight.AbstractValidator.runValidation(AbstractValidator.java:122)
at org.apache.padaf.preflight.PdfA1bValidator.validate(PdfA1bValidator.java:97)
at org.apache.padaf.preflight.Validator_A1b.validate(Validator_A1b.java:182)
at org.apache.padaf.preflight.Validator_A1b.<init>(Validator_A1b.java:86)
at org.apache.padaf.preflight.Validator_A1b.main(Validator_A1b.java:80)
/home/fausser/WeirdOrigFlattenedPDFA.pdf is not valid, error(s) :
3.1.3: Invalid Font definition, The FontFile2 is invalid
3.1.3:Invalid Font definition, The FontFile2 is invalid
2.4.3: Invalid Color space, DestOutputProfile is missing",0,"Eric Leleu","William Fausser",0,1,"16/Mar/12 15:47","10/Apr/13 17:28","22/Dec/12 15:21"
PDFBOX-1263,PDFBOX,"[PATCH] Rewrite Overlay.java's stream rewriting and rsrc dict renaming to use PDFStreamProcessor",Improvement,CLOSED,Minor,"Won't Fix",1.7.0,None,Utilities,"newbie overlay patch",,"The attached patch reworks the handling of content stream rewriting for resource dictionary clash avoidance in Overlay.java .
Prior to this patch, Overlay appends "overlay" to all names in the Font, XObject and ExGState resource dictionaries, then rewrites content stream(s) in the overlay PDF to reference those new names using a simple hand-rolled content-stream find-and-replace process. It doesn't check for over-length names, and it doesn't check to make sure that the newly generated name(s) don't clash. Because PDFs often use the same names for objects, this quickly becomes a problem when you're doing multiple overlays - something that becomes more likely with https://issues.apache.org/jira/browse/PDFBOX-1255 but is already useful to do with stock PDFBox.
This patch alters Overlay so that it only renames objects from the overlay PDF when there is a conflict with the PDF being overlaid upon. It also uses a name generation strategy that checks for conflicts and for over-length names, so multiple overlays will work much better. The patch uses the PDFStreamProcessor (a simplified base extracted from PDFStreamEngine by https://issues.apache.org/jira/browse/PDFBOX-1256) to copy each stream from the PDF to overlay to a ContentStreamWriter. It checks for names that reference renamed resources and substitutes the new name before writing each operator and its arguments to the output stream.
The main benefit of this patch is that it enables multiple overlays without name clashes.
A secondary benefit of this patch is that it eliminates Overlay.java -specific code in favour of using facilities provided by the rest of PDFBox. That makes Overlay a better example, helps it test the rest of PDFBox better, and makes it benefit from improvements in PDFBox's stream processor and writer.
Depends on prior patches in series:
https://issues.apache.org/jira/browse/PDFBOX-1256
https://issues.apache.org/jira/browse/PDFBOX-1255",0,"Andreas Lehmkühler","Craig Ringer",1,2,"19/Mar/12 13:14","13/Oct/14 18:48","13/Oct/14 18:48"
PDFBOX-1264,PDFBOX,"Null Pointer exception on attached PDF/A verifies with commercial validators",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,Preflight,None,linux,"java.lang.NullPointerException
at org.apache.padaf.preflight.graphics.color.StandardColorSpaceHelper.processDeviceNColorSpace(StandardColorSpaceHelper.java:340)
at org.apache.padaf.preflight.graphics.color.StandardColorSpaceHelper.processAllColorSpace(StandardColorSpaceHelper.java:156)
at org.apache.padaf.preflight.graphics.color.StandardColorSpaceHelper.validate(StandardColorSpaceHelper.java:118)
at org.apache.padaf.preflight.utils.ContentStreamEngine.checkSetColorSpaceOperators(ContentStreamEngine.java:550)
at org.apache.padaf.preflight.contentstream.ContentStreamWrapper.processOperator(ContentStreamWrapper.java:183)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.padaf.preflight.contentstream.ContentStreamWrapper.validPageContentStream(ContentStreamWrapper.java:79)
at org.apache.padaf.preflight.helpers.PagesValidationHelper.validateContent(PagesValidationHelper.java:196)
at org.apache.padaf.preflight.helpers.PagesValidationHelper.validatePage(PagesValidationHelper.java:105)
at org.apache.padaf.preflight.helpers.PagesValidationHelper.innerValidate(PagesValidationHelper.java:73)
at org.apache.padaf.preflight.helpers.AbstractValidationHelper.validate(AbstractValidationHelper.java:91)
at org.apache.padaf.preflight.AbstractValidator.runValidation(AbstractValidator.java:122)
at org.apache.padaf.preflight.PdfA1bValidator.validate(PdfA1bValidator.java:97)
at org.apache.padaf.preflight.Validator_A1b.validate(Validator_A1b.java:182)
at org.apache.padaf.preflight.Validator_A1b.<init>(Validator_A1b.java:86)
at org.apache.padaf.preflight.Validator_A1b.main(Validator_A1b.java:80)",0,"Eric Leleu","William Fausser",0,0,"20/Mar/12 13:45","24/Mar/13 14:44","30/Mar/12 15:59"
PDFBOX-1265,PDFBOX,"Invalid Font Definition",Bug,CLOSED,Major,Fixed,None,1.7.0,Preflight,None,linux,"MegaZine.pdf.pdf is not valid, error(s):
3.1.6 : Invalid Font definition, Width of the character "129" in the font program "PPACDG+ArialMT"is inconsistent with the width in the PDF dictionary.",0,"Eric Leleu","William Fausser",0,0,"21/Mar/12 16:08","29/May/12 16:21","17/Apr/12 19:35"
PDFBOX-1266,PDFBOX,"When I try to convert certain pages of certain PDF to images I am getting error java.lang.ClassCastException: org.apache.pdfbox.cos.COSNull cannot be cast to org.apache.pdfbox.cos.COSDictionary",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,PDModel,None,"java 1.6","Unable to convert certain pages to images for certain PDF documents. Getting error: java.lang.ClassCastException: org.apache.pdfbox.cos.COSNull cannot be cast to org.apache.pdfbox.cos.COSDictionary
method for converting page is called this way: BufferedImage image = page.convertToImage(BufferedImage.TYPE_3BYTE_BGR, 300); // where page is of type org.apache.pdfbox.pdmodel.PDPage
Full stacktrace (of relevant part):
java.lang.ClassCastException: org.apache.pdfbox.cos.COSNull cannot be cast to org.apache.pdfbox.cos.COSDictionary
at org.apache.pdfbox.pdmodel.graphics.xobject.PDCcitt.getRGBImage(PDCcitt.java:119)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:78)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:130)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at eu.eudml.enhancement.pdf2textviaocr.PdfImageExtractor.extractImagesUsingPdfParser(PdfImageExtractor.java:236)",0,"Andreas Lehmkühler","Radim Hatlapatka",0,1,"21/Mar/12 20:21","29/May/12 16:21","15/May/12 08:58"
PDFBOX-1269,PDFBOX,"ClassCastException on COSDocument#getDocumentID",Bug,CLOSED,Minor,Fixed,1.6.0,1.7.0,PDModel,None,,"I got this error while trying to save a PDF where I added encryption:
ava.lang.ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSArray
at org.apache.pdfbox.cos.COSDocument.getDocumentID(COSDocument.java:379)
at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareDocumentForEncryption(StandardSecurityHandler.java:300)
at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1306)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1121)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1102)
Inspecting the pdf in a REPL, I found out that the ID is not a direct array, but a reference to one. I changed the line 401 of COSDocument.java to use getDictionaryObject instead of getItem and it seemed to fix the problem.",0,"Andreas Lehmkühler","Jean-Philippe Bougie",0,0,"26/Mar/12 18:09","29/May/12 16:21","28/Mar/12 05:43"
PDFBOX-127,PDFBOX,"Accessing XML-Forms (patch provided)","New Feature",CLOSED,Major,Fixed,None,1.8.0,PDModel,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1420152
Originally submitted by mig-o on 2006-01-31 00:42.
Hi all,
I have to modify forms in the new PDF1.6 format, so it
seems like its up to me to implement it (since no one
has done before).
I will provide my development as a series of patches
(just in case i give up, and get other things to do, my
work is not lost then
This one allows to get the xml in the Form. It adds
getter-Functions to the PDXFA, that return
org.w3c.Element-Objects for the XFA.
I will have to try modifing them by hand, and will
provide write support in the next patch.
Some questions left open:
Is it okey to handle errors like i did with
RuntimeExceptions?
Maybe i missed the point in my modification of
COSDictionaryMap.convertBasicTypesToMap(). I like it
more like it is the wys i did, but maybe it breks
something on your side so please check.
I added getStreamAsString-Functions to COSStream,
since most interesting Streams are ASCII anyway.
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552835&aid=1420152&file_id=165613
patch.txt (text/plain), 6546 bytes
patch to add limited, basic access to xml-forms.
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
Thanks for taking the time to submit a patch, but we should
talk a little about how we want this designed.
Today forms are written in two ways, the old way using
COSDictionary and the new way using XML forms. It would be
nice if there was a single API that people could use that
would update fields in both spots. Need to think about how
we can do that. Such that both old and new get written
properly and people who use PDFBox don't have to write it
in both spots.
Also, despite popular belief I have never met anyone that
actually wants to work in XML object model, most people
would rather use a standard java object model.
For example, I would be willing to bet that most people
would rather see
public XFAConfig getConfigXML()
rather than
public Element getConfigXML()
Returing an XML element means that the user is required to
go look at the XFA documentation to know what is in there
and handle any details themselves. If a XFAConfig(or
whatever name) was returned that could do it for them.
Maybe the XFAConfig simply holds as a data member an
Element object and is really just a wrapper, just like most
pdmodel objects are just wrappers to COSDictionaries.
Ben",0,"Andreas Lehmkühler",Anonymous,0,1,"31/Jan/06 08:42","23/Mar/13 12:56","02/Feb/13 18:31"
PDFBOX-1271,PDFBOX,"Bug during direct printing PDF using pdfbox-1.6.0.jar",Bug,CLOSED,Minor,"Not A Problem",1.6.0,None,"Swing GUI",None,"windows xp","I got the following exception during direct print using pdfbox-1.6.0.jar,fontbox-1.6.0.jar,jempbox-1.6.0.jar and commons-logging-1.1.1.jar
DEBUG MESSAGE DirectPrint0: org.apache.pdfbox.pdmodel.font.PDType0Font cannot be cast to org.apache.pdfbox.pdmodel.font.PDType1Font
i am using Oracle Report Server 10g and i am trieng to print PDF file including Arial font only it is fully embedded and it is type is TrueType not PDType0Font
Please tell how can i solve this problem
Thanks
Mahmoud",0,"Andreas Lehmkühler","Maho Rashad",0,0,"29/Mar/12 10:29","07/Apr/12 13:07","07/Apr/12 10:44"
PDFBOX-1273,PDFBOX,"java.io.IOException: Error: Unknown annotation type null",Bug,CLOSED,Minor,Fixed,"1.7.0, 1.8.7, 2.0.0","1.8.8, 2.0.0",PDModel,None,,"Hi,
I've come across the following exception on a very small number of documents:
org.apache.tika.exception.TikaException: Unable to extract PDF content
at org.apache.pdfbox.tika.PDF2XHTML.process(PDF2XHTML.java:80) ~[extractor.jar:na]
at org.apache.pdfbox.tika.PDFParser.parse(PDFParser.java:116) ~[extractor.jar:na]
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:242) ~[extractor.jar:na]
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:242) ~[extractor.jar:na]
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:120) ~[extractor.jar:na]
Caused by: java.io.IOException: Error: Unknown annotation type null
at org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation.createAnnotation(PDAnnotation.java:165) ~[extractor.jar:na]
at org.apache.pdfbox.pdmodel.PDPage.getAnnotations(PDPage.java:785) ~[extractor.jar:na]
at org.apache.pdfbox.tika.PDF2XHTML.endPage(PDF2XHTML.java:142) ~[extractor.jar:na]
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:450) ~[extractor.jar:na]
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:372) ~[extractor.jar:na]
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:328) ~[extractor.jar:na]
at org.apache.pdfbox.tika.PDF2XHTML.process(PDF2XHTML.java:63) ~[extractor.jar:na]
Here are a few examples:
http://www.jdsupra.com/documents/01ece854-a961-4184-8de7-f6d5311d6a48.pdf
http://www.jdsupra.com/documents/0aabecb4-094a-40e4-a507-8b49ecb90a3e.pdf
http://www.jdsupra.com/documents/0d74ccf8-2d57-487d-88c2-98eee26f8236.pdf
Thanks",0,"Andreas Lehmkühler",William,0,4,"29/Mar/12 14:41","13/Dec/14 14:15","23/Oct/14 17:43"
PDFBOX-1274,PDFBOX,"Another Invalid Color Space, DestOutputProfile , passes commercial validators",Bug,CLOSED,Major,Fixed,1.7.0,1.8.0,Preflight,None,linux,"kun_muutat_suomeenEN.pdf.pdf is not valid, error(s):
2.4.3 | Invalid Color space, Invalid Color space, DestOutputProfile is missing",0,"Eric Leleu","William Fausser",0,2,"29/Mar/12 19:37","24/Mar/13 14:44","06/Aug/12 19:44"
PDFBOX-1275,PDFBOX,"Glyph error, CID 0 -- passes compercial validators as a valid PDF/A",Bug,CLOSED,Major,Fixed,None,1.7.0,Preflight,None,linux,"Seybold.pdf.pdf is not valid, error(s) :
3.3.1 : Glyph error, CID 0 is missing from the Composite Font format "TradeGothic-Identity-H-Identity-H"",0,"Eric Leleu","William Fausser",0,0,"30/Mar/12 12:22","29/May/12 16:21","30/Mar/12 15:55"
PDFBOX-1276,PDFBOX,"java.lang.NullPointerException on trying to set value for PDTextBox in pdf file.",Bug,CLOSED,Major,Duplicate,1.6.0,2.0.0,AcroForm,patch,"windows 7","When trying to set value for a field in pdf using,
PDDocument pdf = PDDocument.load(<pdfFileName>);
PDDocumentCatalog docCatalog = pdf.getDocumentCatalog();
PDAcroForm acroForm = docCatalog.getAcroForm();
PDTextbox t = (PDTextbox) acroForm.getField(<fieldName>);
t.setValue(<someValue>);
got following exception :
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.common.COSDictionaryMap.put(COSDictionaryMap.java:106)
at org.apache.pdfbox.pdmodel.interactive.form.PDAppearance.getFontAndUpdateResources(PDAppearance.java:440)
at org.apache.pdfbox.pdmodel.interactive.form.PDAppearance.setAppearanceValue(PDAppearance.java:268)
at org.apache.pdfbox.pdmodel.interactive.form.PDVariableText.setValue(PDVariableText.java:131)
at qs.common.GenerateReports.generateBidderDeclaration_OBS_05_105(GenerateReports.java:71)
Source of the exception :
NullPointerException thrown at retval = (PDFont)formResources.getFonts().get( fontName ); in org.apache.pdfbox.pdmodel.interactive.form.PDAppearance
Tried suggestion from following link :
http://mail-archives.apache.org/mod_mbox/pdfbox-dev/201108.mbox/%3CBE54CE7A716A7247B1D3BF9D9C187CED0843E2A8@SOM-TEAQASMAIL1.som.w2k.state.me.us%3E
i.e. intruduced a try-catch for
retval = (PDFont)formResources.getFonts().get( fontName );
resolved the issue for me as well.
Also, I had to add try-catch for following :
printWriter.println(getTextPosition(boundingBox, pdFont, fontSize, tokens));
as getTextPosition() is throwing IOException as the pdFont is null.
Creating this issue so that the bug is documented and would like to see the change in upcoming releases.
Shall attach the jar file that contains the changes which resolved the issue.",0,"Maruan Sahyoun","Ravikiran Mane",0,2,"02/Apr/12 21:31","17/Mar/16 19:07","03/Feb/15 21:43"
PDFBOX-1277,PDFBOX,"NPE when extracting image inside form",Bug,CLOSED,Major,Fixed,None,1.7.0,None,None,,"Unsing current HEAD version:
java -cp app/target/pdfbox-app-1.7.0-SNAPSHOT.jar org.apache.pdfbox.ExtractImages /tmp/in.pdf
Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.ExtractImages.processResources(ExtractImages.java:166)
at org.apache.pdfbox.ExtractImages.processResources(ExtractImages.java:195)
at org.apache.pdfbox.ExtractImages.extractImages(ExtractImages.java:150)
at org.apache.pdfbox.ExtractImages.main(ExtractImages.java:64)",0,"Andreas Lehmkühler","Daniel Bonniot de Ru",0,2,"03/Apr/12 08:17","08/Nov/12 09:26","08/Nov/12 09:26"
PDFBOX-1279,PDFBOX,"Preflight reports "1.1 : Body Syntax error"",Bug,CLOSED,Minor,Fixed,1.7.0,1.7.0,Preflight,None,"windows 7, java 1.6","Just tried the PDF/A Validation. It fails on the attached pdf with "1.1 : Body Syntax error". Adobe Preflight reports success for both pdf/a level a and pdf/a level b validation. PDF was created with plain LibreOffice 3.5.2 (export as pdf, using pdf/a level a).",0,"Guillaume Bailleul","beat weisskopf",0,0,"05/Apr/12 12:33","29/May/12 16:21","09/May/12 19:42"
PDFBOX-128,PDFBOX,"PDF does not display correctly.",Bug,CLOSED,Major,"Cannot Reproduce",None,None,PDModel,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1422067
Originally submitted by benlitchfield on 2006-02-01 17:35.
See SimpleGroove-Schedule-546.pdf, colors are
incorrect.
Ben",0,"Andreas Lehmkühler",Anonymous,0,1,"02/Feb/06 01:35","11/Aug/13 17:44","11/Aug/13 17:44"
PDFBOX-1280,PDFBOX,"Support for PDPattern "colorspace"",Improvement,CLOSED,Minor,Duplicate,None,None,PDModel,None,,"PDPattern is a special colorspace which provides a shading or a tiling pattern to be used for stroke or fill operations. At least one PDF generator is known to use this on occasion as a means of embedding images into PDFs (Aspose.Words)",0,"Andreas Lehmkühler","Will West",0,0,"05/Apr/12 14:04","05/Apr/12 17:15","05/Apr/12 17:15"
PDFBOX-1281,PDFBOX,"FDFDictionary parses fields in XFDF incorrectly",Bug,CLOSED,Major,Fixed,"1.6.0, 1.7.0",1.7.0,PDModel,None,,"FDFDictionary finds "fields" tag and then parses all of it's descendants which tag name is "field". But that is wrong, because only direct children of "fields" tag should be handled by FDFDictionary. All the other fields are handled recursively by FDFField constructor.",0,"Andreas Lehmkühler","Ilya Sazonov",0,0,"05/Apr/12 15:36","29/May/12 16:21","15/Apr/12 17:27"
PDFBOX-1282,PDFBOX,"Unicode characters displayed with wrong glyps because of interpretation as 8 bit strings",Bug,CLOSED,Major,Fixed,1.6.0,2.0.0,"Swing GUI",None,,"the file Characters_Arial.pdf shows that some unicode values are displayed with wrong glyphs, for example the u2020 which is displayed as two spaces. Another Issue is that invalid unicode characters are not handled correctly. They should display
the invalid character box or something like that. This is demonstrated with a modified version
of the file.
The method processEncodedText is called when the texts of the document are printed
int codeLength = 1;
for( int i=0; i<string.length; i+=codeLength)
{
// Decode the value to a Unicode character
codeLength = 1;
String c = font.encode( string, i, codeLength );
if( c == null && i+1<string.length)
{ //maybe a multibyte encoding codeLength++; c = font.encode( string, i, codeLength ); }
This code tries to determine if the values in variable 'string' are 8 or 16 bit values or even a mixture of both types of values <lol>.
Everything works fine when variable 'string' contains 8 bit values, in most cases. If there is an invalid 8 bit value this character may be dropped together with the following character.
The real problem occurs when the data in variable 'string' is encoded as 16 bit values. For many characters this works fine as the first byte is usually not a valid character:
for example u0041 is first tried as char 00 with codeLength=1 an as there is no entry for unicode 0 in the font it will be re-tried with codeLength=2 and then interpreted as u0041.
But what happens if the first byte of the 16 bit code is also a valid character code?
to check this I created the file Characters_Arial_Changed.pdf where I simply changed the 16-bit string <0041> which displays 'A' to <4141> which is an invalid character in this font. I Also changed a 8-bit string nearby from (0041) to the value <4141>.
Note that there are now two strings with the same value <4141> which have to be displayed in a different way.
Acrobat Reader then shows the invalid character box for the 16 bit string and 'AA' for the 8 bit string above. PDFBox shows 'AA' for both strings.
Problems are occuring with valid unicode character codes too: Unicode u2020 will be shown as two nice spaces in PDFBox where Adobe Reader shows the correct character.
To guess that it is a 16 bit character when the first byte is an invalid character in the current font is the wrong way to handle the string values. If the variable 'string' contains 8 or 16 bit values can't be detected by analysing the values as the example shows.
processEncodedText has to handle the data in variable 'string' as 16 bit values when the font which is used has an (unicode-)encoding which uses more than 256 characters, in all other cases it should be interpreted as 8 bit values!!!
With an Unicode Font <4343> or (CC) should show the invalid character box, with an 8 bit font both values should show the text 'CC'. I have included this example in the file too.
The Adobe documentation says about 8 or 16 bit values in strings for example:
"When the current font is a Type 0 font whose Encoding entry is Identity-H or Identity-V, the string to be shown shall contain pairs of bytes representing CIDs, high-order byte first. When the current font is a CIDFont, the string to be shown shall contain pairs of bytes representing CIDs, high-order byte first. When the current font is a Type 2 CIDFont in which the CIDToGIDMap entry is Identity and if the TrueType font is embedded in the PDF file, the 2-byte CID values shall be identical glyph indices for the glyph descriptions in the TrueType font program."
I guess depending on this information it has to be determined if the string is 8 or 16 bits!
In my example pdf files the type 0 font has always the Indentity-H set as encoding and so the strings have to be en-/decoded as pure 16 bit strings.",0,"Andreas Lehmkühler","Daniel Schwinn",0,1,"06/Apr/12 21:51","17/Mar/16 19:07","04/Aug/13 12:48"
PDFBOX-1283,PDFBOX,"Unicode characters displayed with wrong Advance",Bug,CLOSED,Major,Fixed,1.6.0,2.0.0,"Swing GUI",None,,"The file AnnahmeReport_MitRussischTest.pdf is not displayed correctly. The advance of the characters is calculated wrong. The document is displayed correctly in Adobe Reader.
In PDCIDFont.java the method extractWidths() fills widthCache with the character widths based on the array in the "W" Dictionary. The widthCache seems to translate from from Unicode to character width but the "W" Dictionary translates from CID-code to character width.
In this PDF file the TTF font is embedded and the CID code is identical to the glyph code in the TTF font. A cmap maps from unicode directly to the cid/gid in the ttf font.
So this cache is filled in the wrong way or when accessing the cache it is not taken into account that this array containes the widths based on the cid/gid.
The cmap encoding has to be used when filling the cache or when reading the values from the cache
I checked if Adobe Reader uses the values in /W to determine the widths to rule out the case that
the PDF file is faulty and adobe reader just ignores the faulty /W array.
When changing the entries for the glyphs number 20..23 in the /W array of the bold font
(first 4 values in the second line of the array which match to characters '1'..'4')
then the numbers are displayed with wrong widths in AdobeReader while nothing changes in PDFBox.
(file AnnahmeReport_MitRussischTest_Modified.pdf)",0,"Andreas Lehmkühler","Daniel Schwinn",0,1,"06/Apr/12 22:02","17/Mar/16 19:07","23/Sep/13 17:32"
PDFBOX-1285,PDFBOX,"Unable to process attached pdf",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,None,None,"windows xp, windows 7","Unable to process attached pdf, here are the logs when trying to process
Exception in thread "main" java.lang.Error: TIFFFaxDecoder5
at org.apache.pdfbox.filter.TIFFFaxDecoder.decodeT6(TIFFFaxDecoder.java:
1071)
at org.apache.pdfbox.filter.CCITTFaxDecodeFilter.decode(CCITTFaxDecodeFi
lter.java:101)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:279)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:221)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:15
6)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDCcitt.getRGBImage(PDCcit
t.java:153)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java
:78)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngin
e.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngi
ne.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngi
ne.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.
java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:
135)
at org.apache.pdfbox.PDFToImage.main(PDFToImage.java:231)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:58)",0,"Andreas Lehmkühler","Alejandro Cerdas",0,0,"09/Apr/12 20:08","10/Apr/12 16:32","10/Apr/12 16:32"
PDFBOX-1286,PDFBOX,"Add the BouncyCastleProvider only once a time",Improvement,CLOSED,Major,Fixed,1.6.0,1.7.0,PDModel,None,,"The BouncyCastleProvider is added multiple times which may lead to a performance and/or memory issue as described by Anthony on the mailing list, see [1] for further details.
[1] http://apache.markmail.org/thread/dnej42g4mywdnps4",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"10/Apr/12 17:53","29/May/12 16:21","10/Apr/12 17:55"
PDFBOX-1289,PDFBOX,"PDResources overrides any existing font when calling addFont",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,PDModel,None,,"If you call addFont on a PDResource (for example, while calling setFont on a PDPageContentStream) without first having manually called getFonts on the resource, the "fonts" field will be set to a new hashmap. It will thus forego loading any existing font from the dictionary, and make those fonts disappear when saving the file again. The bug was probably introduced by the removal of the font mapping in the resources.",0,"Andreas Lehmkühler","Jean-Philippe Bougie",0,0,"17/Apr/12 13:03","29/May/12 16:21","17/Apr/12 16:40"
PDFBOX-129,PDFBOX,"Error when setting the value of a combo box to " "",Bug,CLOSED,Major,Fixed,"0.7.0, 1.8.7",2.0.0,AcroForm,Appearance,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1422082
Originally submitted by catalino on 2006-02-01 17:59.
Hi all.
When I try to set the value of a combo box to " ", it
gives the following error:
Exception in thread "main"
java.lang.ArrayIndexOutOfBoundsException: -2
at java.util.ArrayList.set(Unknown Source)
at
org.pdfbox.pdmodel.interactive.form.PDAppearance.setAppearanceValue(PDAppearance.java:323)
at
org.pdfbox.pdmodel.interactive.form.PDVariableText.setValue(PDVariableText.java:145)
at
org.pdfbox.pdmodel.interactive.form.PDChoiceField.setValue(PDChoiceField.java:91)
at pdfForms.PDFForms.setvalorCampo(PDFForms.java:235)
at pdfForms.SetValores.main(SetValores.java:
I found out the following. I think it may help you to
understand the problem.
When the default value, set by Acrobat Professional
7.0, is set to " ", the error occurs; when is set to
another value, lets say "A", the value " " is setted
correctly. If i run the program again, trying to set
the value " ", the error does not ocurr.
Thanks,
Luis Catalino
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1422082&file_id=165878
Doc1.pdf (application/pdf), 198269 bytes
Form with a combo box",0,"Maruan Sahyoun",Anonymous,0,2,"02/Feb/06 01:59","17/Mar/16 19:07","03/Feb/15 23:33"
PDFBOX-1290,PDFBOX,"CloseFillNonZeroAndStrokePath operator fails to do the stroke.",Bug,CLOSED,Minor,Fixed,1.6.0,1.7.0,"Swing GUI",None,,"When displaying or printing a PDF that uses the CloseFillNonZeroAndStrokePath OperatorProcessor, the stroke is not done.
This is because the FillNonZeroRule which is executed before the stroke calls PageDrawer.fillPath(), which does a reset of the path via getLinePath().reset().
After the reset, the path is empty, so the stroke operation just does nothing.
I helped myself by changing CloseFillNonZeroAndStrokePath.java like this:
public void process(PDFOperator operator, List<COSBase> arguments) throws IOException {
context.processOperator( "h", arguments );
// clone the path
PageDrawer pd = (PageDrawer) context;
GeneralPath p = (GeneralPath)pd.getLinePath().clone();
context.processOperator( "f", arguments );
// and restore before calling stroke
pd.setLinePath(p);
context.processOperator( "S", arguments );
}
This seems like a hack, so you guys probably know a cleaner way to fix this.",0,"Andreas Lehmkühler","Martin Schrodt",0,0,"17/Apr/12 14:56","29/May/12 16:21","17/Apr/12 16:23"
PDFBOX-1293,PDFBOX,"PDFImageWriter should use logging instead of System.out.println",Improvement,CLOSED,Minor,Fixed,1.6.0,1.8.2,None,None,,"The PDFImageWriter writes to System.out. It's annoying to suppress/redirect it in a wrapper script.",0,"Andreas Lehmkühler","Erik Froese",0,2,"23/Apr/12 15:51","02/Jun/13 13:35","07/May/13 19:18"
PDFBOX-1295,PDFBOX,"Unable to create the color instance / bg color inverted",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,None,None,"windows xp, java 1.7","I get a ton of red for this code segment, and the resulting file has the background color inverted.
PDDocument document = null;
try
{
document = PDDocument.load(pdfFile);
List pages = document.getDocumentCatalog().getAllPages();
int p = 0;
for (Object pobj : pages)
{
PDPage page = (PDPage) pobj;
++p;
BufferedImage bim = page.convertToImage();
// Test with output in memory, to see the size
ByteArrayOutputStream memout = new ByteArrayOutputStream();
boolean memoutok = ImageIO.write(bim, "png", memout);
if (!memoutok)
System.err.println ("mem write failed for " + p);
memout.reset();
memout.close();
// Test with output to png file
String fname = String.format("%s-%02d.png", prefix, p);
boolean foutok = ImageIO.write(bim, "png", new File(fname));
if (!foutok)
System.err.println ("file write failed for " + p);
...
Apr 26, 2012 2:15:49 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [1.0] in color space ICCBased{ COSArray{[COSName
{ICCBased}, COSObject{14, 0}]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)
at org.apache.pdfbox.util.operator.pagedrawer.FillNonZeroRule.process(FillNonZeroRule.java:58)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)

Apr 26, 2012 2:15:50 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.133057] in color space ICCBased{ COSArray{[COSName{ICCBased}
, COSObject
{14, 0}]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)

Apr 26, 2012 2:15:50 PM org.apache.pdfbox.util.PDFStreamEngine processOperator
Information: unsupported/disabled operation: EI
Apr 26, 2012 2:15:50 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.921875] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}
]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)
at org.apache.pdfbox.util.operator.pagedrawer.FillEvenOddRule.process(FillEvenOddRule.java:57)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)
Apr 26, 2012 2:15:50 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.397949] in color space ICCBased{ COSArray{[COSName
{ICCBased}, COSObject{14, 0}]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)
at org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)

Apr 26, 2012 2:15:50 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.898438] in color space ICCBased{ COSArray{[COSName{ICCBased}
, COSObject
{14, 0}]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)
at org.apache.pdfbox.util.operator.pagedrawer.FillEvenOddRule.process(FillEvenOddRule.java:57)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)

Apr 26, 2012 2:15:50 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.397949] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}
]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)
Apr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.667969] in color space ICCBased{ COSArray{[COSName
{ICCBased}, COSObject{14, 0}]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)
at org.apache.pdfbox.util.operator.pagedrawer.FillEvenOddRule.process(FillEvenOddRule.java:57)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)

Apr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [1.0] in color space ICCBased{ COSArray{[COSName{ICCBased}
, COSObject
{14, 0}]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)
at org.apache.pdfbox.util.operator.pagedrawer.FillNonZeroRule.process(FillNonZeroRule.java:58)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)

Apr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}
]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)
at org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)
Apr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName
{ICCBased}, COSObject{14, 0}]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)

Apr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName{ICCBased}
, COSObject
{14, 0}]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)
at org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)

Apr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}
]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)
Apr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName
{ICCBased}, COSObject{14, 0}]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)
at org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)

Apr 26, 2012 2:15:51 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [1.0] in color space ICCBased{ COSArray{[COSName{ICCBased}
, COSObject
{14, 0}]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:281)
at org.apache.pdfbox.util.operator.pagedrawer.FillNonZeroRule.process(FillNonZeroRule.java:58)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)

Apr 26, 2012 2:15:52 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName{ICCBased}, COSObject{14, 0}
]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)
at org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)
Apr 26, 2012 2:15:52 PM org.apache.pdfbox.pdmodel.graphics.color.PDColorState createColor
Warnung: Unable to create the color instance [0.0] in color space ICCBased{ COSArray{[COSName
{ICCBased}
, COSObject
{14, 0}
]} }
Number of Components: 1; guessing color ...
Interpretating as single-integer RGB
java.awt.color.ProfileDataException: Invalid profile sequence
at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:149)
at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:170)
at java.awt.Color.<init>(Color.java:542)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:165)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:113)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:151)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)
at org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:73)",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"26/Apr/12 12:31","14/Oct/16 16:28","15/May/12 07:54"
PDFBOX-1296,PDFBOX,"Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font",Bug,CLOSED,Major,Fixed,"1.6.0, 1.8.2, 2.0.0",2.0.0,PDModel,None,"windows xp, java 1.7","Pdfbox does not produce the correct fonts in the PNG file created with the following code and I get a lot of warnings:
PDDocument document = null;
try
{
document = PDDocument.load(pdfFile);
List pages = document.getDocumentCatalog().getAllPages();
int p = 0;
for (Object pobj : pages)
{
PDPage page = (PDPage) pobj;
++p;
BufferedImage bim = page.convertToImage();
// Test with output in memory, to see the size
ByteArrayOutputStream memout = new ByteArrayOutputStream();
boolean memoutok = ImageIO.write(bim, "png", memout);
if (!memoutok)
System.err.println ("mem write failed for " + p);
memout.reset();
memout.close();
// Test with output to png file
String fname = String.format("%s-%02d.png", prefix, p);
boolean foutok = ImageIO.write(bim, "png", new File(fname));
if (!foutok)
System.err.println ("file write failed for " + p);
....
Apr 26, 2012 2:41:11 PM org.apache.pdfbox.util.PDFStreamEngine processOperator
Information: unsupported/disabled operation: i
Apr 26, 2012 2:41:12 PM org.apache.pdfbox.util.PDFStreamEngine processOperator
Information: unsupported/disabled operation: ri
Apr 26, 2012 2:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font
Apr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
Warnung: Changing font on < > from <AMAKEA+TimesNewRoman> to the default font
Apr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
Warnung: Changing font on <O> from <AMAKME+Arial,Bold> to the default font
Apr 26, 2012 2:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"26/Apr/12 12:48","17/Mar/16 19:07","04/Aug/13 09:30"
PDFBOX-1297,PDFBOX,"ExtractText fails to extract text from packaged PDFs",Improvement,CLOSED,Major,Fixed,1.6.0,1.7.0,"Text extraction",None,"fedora, linux","Apparently a PDF is able to contain multiple files (like a Zip file); it's called
a PDF Package, described at
http://help.adobe.com/en_US/Reader/8.0/help.html?content=WSE034CA46-D08F-4fff-AA3C-FF04510DAEF0.html
I have a simple example PDF Package, containing two sub-PDFs, but ExtractText
fails to extract their text.
It does run successfully (no exceptions), but the text it extracts is just the boilerplate text
saying you should upgrade to Adobe Acrobat version 8 or later to view this PDF.",0,"Andreas Lehmkühler","Michael McCandless",0,1,"26/Apr/12 16:55","29/May/12 16:21","16/May/12 16:08"
PDFBOX-1298,PDFBOX,"java.lang.IllegalArgumentException: fromIndex(0) > toIndex(-2)",Bug,CLOSED,Major,Fixed,1.6.0,1.8.0,FontBox,None,"windows xp, java 1.7","I get this exception with page.convertToImage():
Apr 27, 2012 10:58:46 AM org.apache.pdfbox.util.PDFStreamEngine processOperator
Warnung: java.lang.IllegalArgumentException: fromIndex(0) > toIndex(-2)
java.lang.IllegalArgumentException: fromIndex(0) > toIndex(-2)
at java.util.ArrayList.subListRangeCheck(ArrayList.java:924)
at java.util.ArrayList$SubList.subList(ArrayList.java:1109)
at org.apache.fontbox.cff.CharStringConverter.handleType2Command(CharStringConverter.java:259)
at org.apache.fontbox.cff.CharStringConverter.handleCommand(CharStringConverter.java:81)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:53)
at org.apache.fontbox.cff.CharStringConverter.convert(CharStringConverter.java:64)
at org.apache.fontbox.cff.CFFFont$Mapping.toType1Sequence(CFFFont.java:374)
at org.apache.fontbox.cff.Type1FontFormatter.printEexecFontDictionary(Type1FontFormatter.java:177)
at org.apache.fontbox.cff.Type1FontFormatter.printFontDictionary(Type1FontFormatter.java:127)
at org.apache.fontbox.cff.Type1FontFormatter.printFont(Type1FontFormatter.java:57)
at org.apache.fontbox.cff.Type1FontFormatter.format(Type1FontFormatter.java:47)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareAwtFont(PDType1CFont.java:546)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.getawtFont(PDType1CFont.java:287)
at org.apache.pdfbox.pdmodel.font.PDType1Font.getawtFont(PDType1Font.java:216)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(PDSimpleFont.java:101)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:194)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:494)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxpageimageextraction.ExtractImages.doPdf(ExtractImages.java:78)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:52)
the code:
...
document = PDDocument.load(pdfFilename);
List pages = document.getDocumentCatalog().getAllPages();
int p = 0;
for (Object pobj : pages)
{
PDPage page = (PDPage) pobj;
++p;
BufferedImage bim = page.convertToImage();
....
This happens on page 25, (and others) on the attached PDF. (Note that when viewing that file with Acrobat Reader, the page number is "xxiv"). It seems to deal with special characters. In the attached PNG file, at least one such character is missing.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"27/Apr/12 09:31","12/Aug/13 15:13","26/Dec/12 18:04"
PDFBOX-1299,PDFBOX,"BaseParser.readUntilEndOfStream can stop too early, causing IOException on valid PDFs",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,None,None,,"The purpose of BaseParser.readUntilEndOfStream is to scan ahead,
copying bytes to the output, stopping once it sees "endstream".
The problem with this approach is sometimes the stream data itself
contains endstream causing readUntilEndOfStream to stop too early.
This can legitimately happen when the stream is an embedded PDF; I'll
attach a test PDF showing this.
However, the stream dict declares the stream length (in bytes)... so
it seems like we should be respecting that length (if present) and
simply copy over that many bytes, instead of scanning the stream bytes
for endstream? This should be a lot faster too...
I imagine we always scan so that we are more robust if the length is
missing/invalid? Is that why this method was used? (I don't know the
history here...). If so, maybe we can have an option to use
the declared stream length if present.
I have a patch to use the declared stream length (if present), and it enables
at least this test PDF to correctly parse.",0,"Timo Boehme","Michael McCandless",0,2,"29/Apr/12 13:44","21/May/12 15:51","21/May/12 14:07"
PDFBOX-13,PDFBOX,"Add ability to digitally sign a PDF","New Feature",CLOSED,,Fixed,None,1.8.0,Signing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1000109
Originally submitted by benlitchfield on 2004-07-29 06:27.
Implementation Notes:
What about the info on this site:
http://www.codeproject.com/useritems/PdfDigiPad.asp
Adobe PDF Public-Key Digital Signature and Encryption
Specification
http://partners.adobe.com/asn/developer/pdfs/tn/ppk_pd
fspec.pdf
Adobe Acrobat Digital Signature API Reference
http://partners.adobe.com/asn/acrobat/docs/digsig.pdf
http://www.mail-archive.com/itext-
questions@lists.sourceforge.net/msg11084.html
http://groups.google.de/groups?
q=sign+openssl+group:comp.text.pdf&hl=de&lr=lang_de|l
ang_en&ie=UTF-
8&group=comp.text.pdf&selm=f55510dc.0403111256.f0a6
513%40posting.google.com&rnum=1
[comment on SourceForge]
Originally sent by notessensei.
Logged In: YES
user_id=675521
I second the request
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
The org.pdfbox.pdmodel.interactive.digitalsignature package
has been created but needs to be implemented.
Ben
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
java example of signing a pdf using an x509 certificate from a
file or a X506Certificate instance",0,"Thomas Chojecki",Anonymous,0,2,"29/Jul/04 13:27","08/Feb/14 11:25","08/Feb/14 11:21"
PDFBOX-1302,PDFBOX,"Got ArrayIndexOutOfBoundsException in parsing a Chinese ttf file.",Bug,CLOSED,Minor,Fixed,1.6.0,"1.8.4, 2.0.0",FontBox,None,,"using this code to parse the ttf file:
public static void main(String[] args) throws IOException
{ TTFParser parser = new TTFParser(); TrueTypeFont font = parser.parseTTF("C:\\workspace\\downloader\\pdf\\金梅毛行书.TTF"); System.out.println("Font:" + font); }
got exception with stacktrace:
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 41280
at org.apache.fontbox.ttf.CMAPEncodingEntry.processSubtype2(CMAPEncodingEntry.java:429)
at org.apache.fontbox.ttf.CMAPEncodingEntry.initSubtable(CMAPEncodingEntry.java:82)
at org.apache.fontbox.ttf.CMAPTable.initData(CMAPTable.java:90)
at org.apache.fontbox.ttf.AbstractTTFParser.parseTables(AbstractTTFParser.java:163)
at org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:61)
at org.apache.fontbox.ttf.AbstractTTFParser.parseTTF(AbstractTTFParser.java:90)
at org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:26)
at org.apache.fontbox.ttf.AbstractTTFParser.parseTTF(AbstractTTFParser.java:43)
at org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:26)
at elmar.demo.TFFTest.main(TFFTest.java:11)",0,"Andreas Lehmkühler","Elmar Chen",0,1,"04/May/12 16:21","31/Jan/14 06:46","31/Dec/13 15:09"
PDFBOX-1305,PDFBOX,"Text extraction takes huge amount of time on some files",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,"Text extraction",None,"windows 7, solaris","I've got 1.2M single-page PDF files which I'm indexing using Solr (which is using Tika, which is using PDFBox) and some of them takes between 20min up to an hour to index.
This is a huge problem for me, in 48hours I've indexed about 45k files and 19 hours of that time was spent on just 279 files.
I've traced it to PDFBox taking a lot of time extracting the text from the documents.
I've tested extracting the text using pdfbox-app's ExtractText with the same result, the text is extracted but it takes forever...
The attached file took about 23min (using ExtractText) and from the result I can see a lot of "rubbish text" which I don't see in the text extracted from files that takes a normal amount of time (up to a few seconds per file) to parse.
When running truss (on Solaris, strace on Linux) on the java-process, I can see a lot of SEGV due to FLTBOUNDS, which I don't know if its related to this problem but I just want to mention it.",0,"Andreas Lehmkühler","Roger Håkansson",0,1,"09/May/12 14:58","07/May/13 19:05","07/May/13 19:05"
PDFBOX-1306,PDFBOX,"Transparent PNG file display with black border",Bug,CLOSED,Major,Fixed,None,1.7.0,None,None,,"Hi,
I have added Transparent PNG file in PDF with PDFBox and it's display black border around image. I have added same PNG file with IText and it's display good in PDF.
I have used below function to add PNG file. I am using latest PDFBox SVN code to add PNG file.
public void createPDFFromImage( String inputFile, String image, String outputFile )
throws IOException, COSVisitorException
{
// the document
PDDocument doc = null;
try
{
doc = PDDocument.load( inputFile );
//we will add the image to the first page.
PDPage page = (PDPage)doc.getDocumentCatalog().getAllPages().get( 0 );
PDXObjectImage ximage = null;
/*if( image.toLowerCase().endsWith( ".jpg" ) )
{ ximage = new PDJpeg(doc, new FileInputStream( image ) ); }
else if (image.toLowerCase().endsWith(".tif") || image.toLowerCase().endsWith(".tiff"))
{ ximage = new PDCcitt(doc, new RandomAccessFile(new File(image),"r")); }
else
{ BufferedImage awtImage = ImageIO.read( new File( image ) ); FileInputStream inputStream = new FileInputStream(image); PDStream stream = new PDStream(doc, inputStream); ximage = new PDPixelMap(stream); //throw new IOException( "Image type not supported:" + image ); }
*/
System.out.println("Testing");
BufferedImage stampImage = null;
try
{ stampImage = ImageIO.read(new File(image)); }
catch(Exception e)
{ e.printStackTrace(); }
ximage = new PDJpeg(doc, stampImage );
//ximage = new PDPixelMap(doc, stampImage);
COSStream stream = ximage.getCOSStream();
PDStream pdStream = new PDStream(stream);
ximage = new PDPixelMap(pdStream);
//BoxImage imageData = BoxImage.getInstance(image);
//System.out.println(""+imageData.getImageType());
PDPageContentStream contentStream = new PDPageContentStream(doc, page, true, true, true);
AffineTransform transform = new AffineTransform(stampImage.getWidth(), 0, 0, stampImage.getHeight(), 20, 200);
//contentStream.drawImage( ximage, 20, 20 );
contentStream.drawXObject(ximage, transform);
contentStream.close();
doc.save( outputFile );
}
finally
{
if( doc != null )
{ doc.close(); }
}
}",0,"Andreas Lehmkühler","Manoj Patel",0,1,"12/May/12 05:31","29/May/12 16:21","14/May/12 15:24"
PDFBOX-1308,PDFBOX,"PDResources.getImages() is broken",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,PDModel,patch,,"the current trunk getImages() call will always return an emptyset.
as it tries to get the image from a freshly created hashmap instead of allXObjects.",0,"Andreas Lehmkühler","Ian Holsman",0,0,"13/May/12 09:14","29/May/12 16:21","13/May/12 14:36"
PDFBOX-1309,PDFBOX,"Support decompression of password protected pdfs",Improvement,CLOSED,Minor,Fixed,1.6.0,1.7.0,Utilities,"commandline decrypt",,"The commandline utility WriteDecodedDoc tries to decrypt encrypted pdfs while decompressing them. But it doesn't work if a password is needed as one can't pass a password to the decrypt method.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"13/May/12 09:28","29/May/12 16:21","13/May/12 09:34"
PDFBOX-1310,PDFBOX,"Remove project version retrieval in preflight",Improvement,CLOSED,Trivial,Fixed,None,1.7.0,Preflight,None,,"There is already a class in pdfbox.jar to retrieve project version with a filtered property file : org.apache.pdfbox.Version
Remove the same stuff of preflight where it is based on a filtered source",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"13/May/12 09:35","29/May/12 16:21","13/May/12 09:48"
PDFBOX-1311,PDFBOX,"Extend commandline utilities to use the non sequential parser by choice",Improvement,CLOSED,Major,Fixed,1.6.0,1.7.0,Utilities,None,,"I'd like to extend the commandline utilities, at least to most important ones, to use optionally the non sequential parser.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"15/May/12 19:41","29/May/12 16:21","16/May/12 14:20"
PDFBOX-1312,PDFBOX,"Refactor the PdfA parser",Improvement,CLOSED,Major,Fixed,1.7.0,1.8.0,Preflight,None,,"To fix the PDFBox-1274 issue, the validation of PDF/A needs a refactoring.
Currently, each XRef entry is checked independently.
Most of the time, this is enough because the required information to validate the object are present in the object.
For the issue PDFBox-1274, the object validation should access to the page that uses the object.
After the refactoring the valdiation unit will be the PDPage.",0,"Eric Leleu","Eric Leleu",0,2,"16/May/12 07:26","23/Mar/13 12:56","09/Feb/13 17:55"
PDFBOX-1315,PDFBOX,"Build WriteDecodedDoc and PDFMerger as .NET tool",Improvement,CLOSED,Minor,Fixed,1.6.0,1.7.0,Utilities,.NET,,"The ant build file also provides a .NET build of PDFBox. Part of the build are standalone versions of some of the command line tools. WriteDecodedDoc and PDFMerger are missing.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"18/May/12 17:28","29/May/12 16:21","18/May/12 17:30"
PDFBOX-1316,PDFBOX,"NonSequentialPDFParser does not set security handler for access check",Bug,CLOSED,Major,Fixed,1.6.0,1.7.0,Parsing,None,,"While NonSequentialPDFParser uses SecurityHandler for decryption and also provides a method to get the handler it does not assign it to generated PDDocument thus classes without access to parser object cannot retrieve access permissions.
In this issue the necessary changes to NonSequentialPDFParser, PDDocument and tools using it will be collected.",0,"Timo Boehme","Timo Boehme",0,1,"19/May/12 12:12","19/May/12 12:47","19/May/12 12:47"
PDFBOX-1319,PDFBOX,"NullPointerException in NonSequentialPDFParser with corrupt xref/trailer",Bug,CLOSED,Minor,Fixed,1.6.0,1.7.0,Parsing,None,,"With broken PDF files having corrupt xref or trailer object NonSequentialPDFParser might throw an NullPointerException in initialParse().",0,"Timo Boehme","Timo Boehme",0,1,"21/May/12 09:30","21/May/12 09:51","21/May/12 09:51"
PDFBOX-132,PDFBOX,"PDFReader text shows as boxes",Bug,CLOSED,Major,"Cannot Reproduce",None,None,"Swing GUI",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1430273
Originally submitted by benlitchfield on 2006-02-12 12:44.
See newcent_soca_trad.pdf
Ben
[comment on SourceForge]
Originally sent by govardhana.
Logged In: YES
user_id=1452645
Hi Ben,
I was going through the Pdf file conversion by the acrobat
professional. One difference i observed between the
extraction of text by acrobat professional and PDFBox is
that while exracting the text from the pdf file, the
PDFBox extracts even the text from the image object if
there is some text present, but the acrobat doesn't do
that it eliminates the text which is present in the
images. So that makes the difference. When we start
extract the text from the images if there is some text
which is in a non-ascii format then that text is
represented as a box because it is extracted as it from
the image. The acrobat avoids this type of extraction and
does not give any box.
This is only my view if i am wrong thn please excuse me.
I am waiting for your reply on this.
Thanking you
Regards,
Govardhana
[comment on SourceForge]
Originally sent by govardhana.
Logged In: YES
user_id=1452645
Hi Ben,
Even i am facing the same problem. Sometimes when i try to
extract the PDF file content the extracted text contains
boxes which doesn't give me any idea of they mean. When i
tried to extract the same pdf file using the acrobat
professional the whole text which contained boxes was
eliminated and the rest of the text content was extracted.
I wanted to know whether any remedy as been found or can u
help to do the same what the acrobat professional does.
Thank You
Regards,
Govardhan",0,"Andreas Lehmkühler",Anonymous,0,1,"12/Feb/06 20:44","11/Aug/13 17:46","11/Aug/13 17:46"
PDFBOX-1320,PDFBOX,"NPE in extractEmbeddedDocuments",Bug,CLOSED,Major,Fixed,1.7.0,1.7.0,Parsing,None,,"While parsing a pdf document the following exception is thrown:
java.lang.NullPointerException
at org.apache.pdfbox.tika.PDFParser.extractEmbeddedDocuments(PDFParser.java:155)
at org.apache.pdfbox.tika.PDFParser.parse(PDFParser.java:133)
at test.TikaParse.main(TikaParse.java:27)
The document I'm trying to parse is probably confidential so I cannot attach it until (or if) I get clearence.",0,"Timo Boehme","Samuli Saarinen",0,3,"23/May/12 08:44","29/May/12 16:21","24/May/12 13:08"
PDFBOX-1322,PDFBOX,"gif with less than 256 colors prints wrong colors",Bug,CLOSED,Major,"Not A Problem",1.6.0,1.7.0,None,"accuracy color","windows 7, java 1.6, jasperreports, ireport","Using JasperReports, generate report with embedded jpg image. To make the resulting pdf smaller, I converted the image to a gif and tried to use as few colors as possible. The image is very simple and jpg wasn't the correct format to begin with, since it just has three colors. I used fsview to reduce the number of colors from 256 to 4. It is correct when printed by adobe, but when the java program, using pdfbox, prints it, the white background is prints as grey and the solid blue section seems less saturated so it's a light blue.",0,"Andreas Lehmkühler","John T. Dow",0,2,"24/May/12 14:35","29/May/12 16:30","29/May/12 16:30"
PDFBOX-1323,PDFBOX,"PDF with subset CIDFontType2 (TTF) paints wrong characters",Bug,CLOSED,Major,Fixed,1.7.0,1.7.1,"Swing GUI",None,,"A PDF created with Apache FOP containing a CID TrueType font shows bad characters when painted. Since PDFBox apparently cannot currently load the subset TTF, the font is substituted but that information is not propagated from the descendant font to the parent font. As a consequence, the codepoints are used instead of the Unicode text which results in the wrong glyphs being used.
Log output:
26.05.2012 18:32:11 org.apache.pdfbox.pdmodel.font.PDCIDFont determineEncoding
SCHWERWIEGEND: Error: Could not parse predefined CMAP file for 'Adobe-Identity-UCS'
26.05.2012 18:32:11 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont
INFO: Can't read the embedded font EAAEHE+ArialMT
26.05.2012 18:32:13 org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont
INFO: Using font Arial instead",0,"Jeremias Maerki","Jeremias Maerki",0,1,"26/May/12 16:40","25/Jul/12 06:01","26/May/12 16:45"
PDFBOX-1324,PDFBOX,"OSGi: package exports don't include version numbers",Improvement,CLOSED,Minor,Fixed,1.7.0,1.7.1,None,None,,"Of course, I only noticed shortly after the release that the PDFBox bundles don't properly publish the version numbers for the packages.",0,"Jeremias Maerki","Jeremias Maerki",0,1,"29/May/12 14:47","24/Mar/13 14:44","29/May/12 15:37"
PDFBOX-1325,PDFBOX,"Converting page to png creates an empty image",Bug,CLOSED,Major,Fixed,1.6.0,2.0.0,None,Type3,,"Generating an image from PDF generated by pdfTeX-1.40.12 creates empty images (transparent images in png format, and black images in jpeg format), see pdf-nok.pdf and pdf-nok1.png files attached.
However, pdfTeX versions 1.40.10 and 1.40.13 generate pdf files that are correctly converted to images, see pdf-ok.pdf and pdf-ok1.png files attached.
The code used to generate the png files is the following:
Test.java
import java.awt.image.BufferedImage;
import java.io.File;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.util.PDFImageWriter;

public class Test {
  public static void main(String[] args) throws Exception {
    PDDocument docOk = PDDocument.load(new File("pdf-ok.pdf"));
    PDDocument docNok = PDDocument.load(new File("pdf-nok.pdf"));

    PDFImageWriter imagewriter = new PDFImageWriter();
    try {
      imagewriter.writeImage(docOk, "png", null, 1, 1, "pdf-ok",
BufferedImage.TYPE_INT_RGB, 100);
      imagewriter.writeImage(docNok, "png", null, 1, 1, "pdf-nok",
BufferedImage.TYPE_INT_RGB, 100);
    } finally {
      docOk.close();
      docNok.close();
    }
  }
}",0,"Andreas Lehmkühler","Lucas Satabin",1,2,"31/May/12 06:23","17/Mar/16 19:06","18/Jul/13 15:32"
PDFBOX-1326,PDFBOX,"Parser: java.io.IOException: Error: Expected an integer type, actual='R'",Bug,CLOSED,Major,Incomplete,1.6.0,None,Parsing,None,"windows 7","Exception in thread "main" java.io.IOException: Error: Expected an integer type, actual='R'
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1384)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:522)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:184)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1069)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1036)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1007)
===============For Another PDF==========================
Exception in thread "main" java.io.IOException: Error: Expected an integer type, actual='I?¬ !'
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1384)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:517)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:184)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1069)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1036)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1007)",0,"Andreas Lehmkühler",d32,0,2,"01/Jun/12 08:35","07/May/13 18:38","07/May/13 18:38"
PDFBOX-1327,PDFBOX,"Parser: java.io.IOException: Unknown dir object c='>' cInt=62 peek='>' peekInt=62",Bug,CLOSED,Major,Incomplete,1.6.0,None,Parsing,None,,"Exception in thread "main" java.io.IOException: Unknown dir object c='>' cInt=62 peek='>' peekInt=62 org.apache.pdfbox.io.PushBackInputStream@7d2a1e44
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1098)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:179)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:292)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1000)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:543)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:184)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1069)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1036)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1007)",0,"Andreas Lehmkühler",d32,0,2,"01/Jun/12 08:36","07/May/13 18:38","07/May/13 18:38"
PDFBOX-1328,PDFBOX,"PDSignature should return byte range as long array",Improvement,CLOSED,Major,Later,1.7.0,None,Parsing,None,,"Fix for PDFBOX-1196 should be propagated to PDSignature, which should return the byte range, that this signature covers, as long array (currently - int array).",0,"Thomas Chojecki",Petras,0,2,"01/Jun/12 11:33","08/Feb/14 19:01","20/Nov/13 18:50"
PDFBOX-1331,PDFBOX,"Can't load any text when font is null",Bug,CLOSED,Major,Duplicate,"1.7.0, 1.8.0",1.7.1,PDModel,None,"java 1.6","Open 19472133.PDF PdfboxReader without "-nonSeq" parameter.
Turn to page 3, many NullPointerExceptions are displayed, and pdfviewer can't show any text.
java.lang.NullPointerException
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:366)
at org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:556)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:270)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:246)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)
at org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)
java.util.EmptyStackException
at java.util.Stack.peek(Stack.java:85)
at org.apache.pdfbox.util.PDFStreamEngine.getFonts(PDFStreamEngine.java:601)
at org.apache.pdfbox.util.operator.SetTextFont.process(SetTextFont.java:54)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:556)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:270)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:246)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)
at org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:98)
at javax.swing.JComponent.paintChildren(JComponent.java:862)
Open document with "-nonSeq" parameter
Exception in thread "main" java.io.IOException: Error reading stream using length value. Expected='endstream' actual=''
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseCOSStream(NonSequentialPDFParser.java:1327)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1032)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:955)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseDictObjects(NonSequentialPDFParser.java:929)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:337)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:574)
at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1124)
at org.apache.pdfbox.PDFReader.parseDocument(PDFReader.java:378)
at org.apache.pdfbox.PDFReader.openPDFFile(PDFReader.java:319)
at org.apache.pdfbox.PDFReader.main(PDFReader.java:305)",0,"Timo Boehme","philip huang",0,1,"06/Jun/12 07:39","25/Jul/12 06:01","16/Jul/12 16:10"
PDFBOX-1332,PDFBOX,"Some inline font is can not parsed out",Bug,CLOSED,Major,Fixed,1.7.0,2.0.0,FontBox,None,"java 1.6","WARNING: Changing font on <e> from <Z_C00140.tmp> to the default font
Jun 6, 2012 5:48:54 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
WARNING: Changing font on <b> from <Z_C00140.tmp> to the default font
Jun 6, 2012 5:48:54 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
WARNING: Changing font on <W> from <Z_C00140.tmp> to the default font
Jun 6, 2012 5:48:54 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
WARNING: Changing font on <!> from <Z_C00140.tmp> to the default font",0,"Andreas Lehmkühler","philip huang",0,2,"06/Jun/12 10:19","17/Mar/16 19:08","04/Aug/13 09:31"
PDFBOX-1333,PDFBOX,"Stream parsing of BaseParser should fall back to scanning if length value is wrong",Improvement,CLOSED,Major,Fixed,1.7.0,1.7.1,Parsing,None,,"In 1.7.0 stream parsing in BaseParser was optimized to use length value if available. The advantage is faster parsing and independence of 'endstream' bytes sequences in stream. However the disadvantage is that streams with wrong length values cannot be parsed anymore (see PDFBOX-1331).
To solve this we should check if 'endstream' is really reached when using length value and if not, fall back to 'old' behavior of reading stream until 'endstream' is found.",0,"Timo Boehme","Timo Boehme",0,1,"06/Jun/12 13:23","08/Apr/14 16:58","16/Jul/12 16:09"
PDFBOX-1334,PDFBOX,"EmptyStackException in PDFStreamEngine.getFonts",Bug,CLOSED,Minor,Fixed,1.7.0,1.7.1,Parsing,None,,"Method getFonts in PDFStreamEngine does not test for empty streamResourceStack and might throw an EmptyStackException which is not catched (RuntimeException) by calling classes. We have to test for empty stack and return empty map in such cases.",0,"Timo Boehme","Timo Boehme",0,1,"06/Jun/12 14:13","25/Jul/12 06:01","16/Jul/12 16:09"
PDFBOX-1336,PDFBOX,"JVM Crashes on Linux OS + Sun JVM + PDFBox",Bug,CLOSED,Critical,Fixed,1.7.0,2.0.0,None,None,centos,"A fatal error has been detected by the Java Runtime Environment:
#
SIGSEGV (0xb) at pc=0x796af64d, pid=16603, tid=2021653392
#
JRE version: 6.0_31-b04
Java VM: Java HotSpot(TM) Server VM (20.6-b01 mixed mode linux-x86 )
Problematic frame:
C [libfontmanager.so+0x1e64d] imaginary long double+0x7d
#
If you would like to submit a bug report, please visit:
http://java.sun.com/webapps/bugreport/crash.jsp
The crash happened outside the Java Virtual Machine in native code.
See problematic frame for where to report the bug.
I can provide the full error, please let me know.",0,"Andreas Lehmkühler","Ann Addicks",0,7,"11/Jun/12 13:03","17/Mar/16 19:08","04/Aug/13 09:50"
PDFBOX-1337,PDFBOX,"Improve PDFOperator performance on multithreading environment",Bug,CLOSED,Major,Fixed,1.6.0,1.7.1,"Parsing, Utilities",None,,"With more than 6 threads, the API PDFOperator#getOperator(String operator) is still blocked :
Sample with 48 threads :
pool-1-thread-46" - Thread t@72
java.lang.Thread.State: RUNNABLE
at org.apache.pdfbox.util.PDFOperator.getOperator(PDFOperator.java:76)
at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:441)
at org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)
at org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:175)
at org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:187)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:266)
I propose to remove the synchronization of the attribute "operators" and set up a synchronization
on the put operation. (This optimization saves 30 percent of time)
public class PDFOperator
{
[...]
// private static Map operators = Collections.synchronizedMap( new HashMap() );
private static Map operators = new HashMap();
[...]
public static PDFOperator getOperator( String operator )
{
PDFOperator operation = null;
if( operator.equals( "ID" ) || operator.equals( "BI" ) )
{ //we can't cache the ID operators. operation = new PDFOperator( operator ); }
else
{
operation = (PDFOperator)operators.get(operator);
if( operation == null )
{
synchronized (operators) {
operation = (PDFOperator)operators.get(operator);
if ( operation == null )
{ operation = new PDFOperator( operator ); operators.put( operator, operation ); }
}
}
}
return operation;
}
[...]
}",0,"Timo Boehme",Alexis,0,3,"11/Jun/12 13:59","25/Jul/12 06:01","16/Jul/12 16:09"
PDFBOX-1339,PDFBOX,"PDFMergerUtility addSources function does not work",Bug,CLOSED,Critical,Fixed,1.7.0,1.7.1,Utilities,None,"java 1.6, windows 7","public void addSources(List<InputStream> sourcesList)
{
this.sources.addAll(sources);
}
it should be "this.sources.addAll(sourcesList);"",0,"Timo Boehme","Andy Han",0,2,"14/Jun/12 07:15","25/Jul/12 06:01","16/Jul/12 16:09"
PDFBOX-1340,PDFBOX,"i got wrong characters when i extract some chinese pdf files",Bug,CLOSED,Major,Fixed,1.7.0,1.7.1,"Text extraction",None,"windows, java 1.6","for pdfbox1.6,i can extract the right chinese, but some pages are not right, so i transform to pdfbox1.7, but the version get all wrong, it seems like Korean",0,"Andreas Lehmkühler",linqiang,0,2,"14/Jun/12 08:29","25/Jul/12 06:01","15/Jul/12 16:12"
PDFBOX-1341,PDFBOX,"PDFStreamEngine incorrectly calculates coordinates of characters.",Bug,CLOSED,Major,"Not A Problem",1.7.0,None,None,None,,"When I parse document with PDFStreamEngine, in method processTextPosition i receive incorrect coordinates of characters.
It's happening for documents with version up to 1.5, widht of each character is equal 0 if one of 14 standard fonts is using.
PDF specification talks that from version 1.5 standard fonts processing like the all.",0,"Andreas Lehmkühler","Oleg Vladimirov",0,2,"14/Jun/12 09:28","06/May/13 20:57","06/May/13 20:57"
PDFBOX-1342,PDFBOX,"Tags not fully preserved when merging PDFs.",Bug,CLOSED,Major,Fixed,1.7.0,"1.8.3, 2.0.0","Swing GUI",None,"java 1.6","When merging PDFs, 508 accessibility tags are only preserved on the first page of combined PDF.
Both PDFMergerUtility.mergeDocuments() and PDFMergerUtility..appendDocument() exhibit this behavior.
Example file attached to BugZilla "issue".",0,"Andreas Lehmkühler","Jim G",2,4,"14/Jun/12 18:37","30/Nov/13 17:02","27/Oct/13 14:18"
PDFBOX-1343,PDFBOX,"Addition of missing XMP standard value types",Bug,CLOSED,Major,Fixed,1.7.0,None,"Preflight, (1)","Parser metadata sche",,"Not all value types, defined in XMP Specification, are included in org.apache.padaf.xmpbox.parser.NSMapping. Thus its method isBasic() returns false on such types, like Choice or Real.
If PDF/A file includes custom metadata and its extension schema description with such types, PDF/A validation using Preflight fails with error like this:
"7.6 : Error on MetaData, ValueType 'closed Choice of Text' is unknown. no declaration found in this schema"
These value types are not included and regarded in NSMapping class:
• Basic value types: (open and closed) Choice, Dimensions, Locale, MIMEType, ProperName, Real, Thumbnail, XPath
• Media Management value types: AgentName, RenditionClass, ResourceEvent, ResourceRef, Version
• Basic Job/Workflow value type: Job
• EXIF schema value types: Flash, CFAPattern, DeviceSettings, GPSCoordinate, OECF/SFR, Rational
Note, that XPath type in NSMapping is included only in conjunction with bag, but spelled incorrectly as "bag Xpath".",0,"Guillaume Bailleul",Petras,0,1,"15/Jun/12 11:54","08/Feb/14 19:01","08/Dec/13 07:53"
PDFBOX-1344,PDFBOX,"xml namespace problem in ResourceRef",Bug,CLOSED,Minor,Fixed,1.7.0,1.8.0,JempBox,None,,"Working on xmpbox and jempbox, I encountered a problem with ResourceRef in jempbox
The attached example fails with current version of jempbox
Reading dom.Element javadoc, I understand that is because le namespaceURI is not good. Changing it to the expected constants fixes the problem.
But I am not sure, I understand all the problem... So if someone has 5 minuts to look at it and comment that issue to validate or invalidate the patch ... let do it.
The patch is really short.
Thanks",0,"Guillaume Bailleul","Guillaume Bailleul",0,1,"18/Jun/12 19:37","28/Jul/12 14:49","28/Jul/12 14:49"
PDFBOX-1345,PDFBOX,"Set the Image DPI to include in the PDF",Improvement,CLOSED,Major,"Not A Problem",1.7.0,None,PDModel,None,,"Hi,
I try to add an Image with a 200DPI in a A4 PDF, using PDFBox. When I open the PDF using Acrobat Reader, all I can see is the buttom left of the image. The remaining of the image is out of the page.
How can I add the image with a "FitToPage" option?
Thanks,
Douglas.",0,"Andreas Lehmkühler","SIX Douglas",0,2,"19/Jun/12 15:19","25/Mar/13 04:29","24/Mar/13 14:37"
PDFBOX-1346,PDFBOX,"Can't assign an arbitrary string value to an editable acroform combobox",Bug,CLOSED,Major,Fixed,1.7.0,1.8.0,AcroForm,patch,,"If the field flags "Combo" and "Edit" of an acro form choice field are both set, the field is an editable combo box and can hold arbitrary string values. See ISO32000-1:2008 Section 12.7.4.4 "Choice Fields", Table 230 "Field flags specific to choice fields".
Problem:
The implementation of the method org.apache.pdfbox.pdmodel.interactive.form.PDChoiceField#setValue(String) does not check for the special case of an editable combo box and raises an exception, if you try to set a value not in the options list.
The provided patch fixes the problem.",0,"Andreas Lehmkühler","Anselm Kruis",0,2,"20/Jun/12 18:37","23/Mar/13 12:56","14/Oct/12 14:35"
PDFBOX-1348,PDFBOX,"ExtractImages jpg and tiff picture from pdf but color wrong",Bug,CLOSED,Major,Fixed,1.7.0,2.0.0,Rendering,None,"windows 7","jpeg image covered with a layer of blue. tiff image background color was gone.",0,"John Hewson",brooklet,0,3,"25/Jun/12 02:30","17/Mar/16 19:06","20/Feb/14 17:42"
PDFBOX-1349,PDFBOX,"Postscript tables of truetype fonts are not correctly parsed.",Bug,CLOSED,Major,Fixed,1.7.0,1.7.1,FontBox,None,,"The specification of the 'post' table contains a list of 258 predefined character names.
However, the current fontbox interprets name indices <258 in terms of MacRomanEncoding, which is wrong.
Testcase and patch will be attached shortly.",0,"Andreas Lehmkühler","Wolfgang Glas",0,2,"29/Jun/12 09:06","25/Jul/12 06:01","08/Jul/12 13:56"
PDFBOX-135,PDFBOX,"AES Support","New Feature",CLOSED,Major,Fixed,None,1.4.0,Writing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1432143
Originally submitted by nobody on 2006-02-15 05:05.
Hi, it should be right time now to add AES support
which is in default enabled on all encrypted PDF
documents made by Adobe Acrobat 7.0.
Since AES is supported by java JCE it should not be a
big deal. Currently only Big Faceless PDF Library seems
to support it.
Thanks for big help.",0,"Andreas Lehmkühler",Anonymous,1,1,"15/Feb/06 13:05","22/Nov/12 05:40","03/Dec/11 10:59"
PDFBOX-1351,PDFBOX,"False paragraph caused by superscript (1.7 regression)",Bug,CLOSED,Major,Fixed,1.7.0,2.0.0,"Text extraction",None,,"On the attached minimal example document, text extraction seems to be confused by the superscript, and generates three paragraphs where there is only one.
Note that 1.6 is processing this case well:
$ java -jar /dev/shm/pdfbox-app-1.6.0.jar ExtractText /tmp/superscript.pdf
Jun 29, 2012 4:52:24 PM org.apache.pdfbox.pdfparser.PDFParser parseObject
WARNING: expected='%%EOF' actual='5 0 obj '
$ cat /tmp/superscript.txt 
  
Multiple synthetic routes have been described by R. Filler et al.11 regarding 1,3-
Bis(perfluorophenyl)propane-1,3-dione.  The synthesis and 
 
 
$ java -jar /dev/shm/pdfbox-app-1.7.0.jar ExtractText /tmp/superscript.pdf 
Jun 29, 2012 4:52:39 PM org.apache.pdfbox.pdfparser.PDFParser parseObject
WARNING: expected='%%EOF' actual='5 0 obj '
$ cat /tmp/superscript.txt                                                 
  
Multiple synthetic routes have been described by R. Filler et al.
11
 regarding 1,3-
Bis(perfluorophenyl)propane-1,3-dione.  The synthesis and 
 
 ",0,"Andreas Lehmkühler","Daniel Bonniot de Ru",1,3,"29/Jun/12 14:56","17/Mar/16 19:08","20/Dec/14 13:27"
PDFBOX-1352,PDFBOX,"xmpbox refactoring",Improvement,CLOSED,Minor,Fixed,None,1.8.0,XmpBox,None,,"Today, some xmp schema and some objects are missing.
The interfaces are close to jempbox but not really similar.
Convenience method for creation of schema are missing.
The aim of this issue is to :
make interface similar
create missing object and methods
clean useless code",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"30/Jun/12 09:53","28/Jul/12 09:00","28/Jul/12 09:00"
PDFBOX-1353,PDFBOX,"PDFBox extracts wrong characters for some korean pdf files.",Bug,CLOSED,Major,Fixed,1.7.0,1.7.1,"Text extraction",newbie,"java 1.6, windows, linux","PDFBox1.7.0 extracts wrong characters for some korean pdf files with ratio of about 25%.
I attach two pdf files such as those and output.
Thanks a lot.",0,"Andreas Lehmkühler","Michael Chung",0,2,"02/Jul/12 13:28","25/Jul/12 06:01","15/Jul/12 17:31"
PDFBOX-1355,PDFBOX,"Truetype font loaded in 1.6.0 (and previous), does not load in 1.7.0",Bug,CLOSED,Major,Fixed,1.7.0,1.7.1,PDModel,"font truetype","mac os","I have been using a particular TrueType font with
many previous versions of PDFBox. It loaded and worked fine
up to version 1.6.0. Now at level 1.7.0, I get a
NullPointerException when attempting to load this
TTF file:
Exception: java.lang.NullPointerException
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadDescriptorDictionary(PDTrueTypeFont.java:319)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:166)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:142)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:129)
at test.<init>(test.java:23)
at test.main(test.java:36)
My testcase (simply performing a loadTTF()) works with 1.6.0
of PDFBox. This font is certainly an oldie, but it does validate
using "Font Book" on my Mac. That program looks through a TrueType font,
checking all internal tables for correctness.
I have attached a copy of the .ttf file.",0,"Andreas Lehmkühler","Bob Swanson",0,1,"03/Jul/12 21:47","01/Aug/12 04:58","08/Jul/12 13:57"
PDFBOX-1356,PDFBOX,"Support lucene 3.6.0",Improvement,CLOSED,Major,Fixed,1.7.0,2.0.0,"Text extraction",None,fedora,"Fedora rawhide has updated to lucene 3.6.0. When trying to compile pdfbox against it I get:
[ERROR] /builddir/build/BUILD/pdfbox-1.7.0/lucene/src/main/java/org/apache/pdfbox/lucene/IndexFiles.java:[27,29] error: cannot find symbol
[ERROR] symbol: class HTMLDocument
location: package org.apache.lucene.demo
Looks like the demo package in lucene has change quite a lot, including changing the artifaceId to lucene-demo:
diff -up pdfbox-1.7.0/lucene/pom.xml.lucene pdfbox-1.7.0/lucene/pom.xml
— pdfbox-1.7.0/lucene/pom.xml.lucene 2012-07-05 09:16:35.056582368 -0600
+++ pdfbox-1.7.0/lucene/pom.xml 2012-07-05 09:45:08.069655661 -0600
@@ -47,7 +47,7 @@
</dependency>
<dependency>
<groupId>org.apache.lucene</groupId>
<artifactId>lucene-demos</artifactId>
+ <artifactId>lucene-demo</artifactId>
<version>${lucene.version}</version>
</dependency>
</dependencies>",0,"Andreas Lehmkühler","Orion Poplawski",0,2,"05/Jul/12 21:33","17/Mar/16 19:08","08/Oct/13 17:18"
PDFBOX-1357,PDFBOX,"Missing character encoding in MacRoman & WinAnsi",Bug,CLOSED,Minor,Fixed,1.7.0,1.7.1,"PDModel, (1)",None,,"During my Preflight refactoring, I encountered some characters mapping that are missing from the WinAnsiEncoding and the MacRomanEncoding.
"nonbreaking space" is missing from the WInAnsi and the MacRoman Encoding that must be mapped with the "space" character.
"soft hyphen" is missing from the WinAnsi encoding that must be mapped with the "hyphen" character.
Unfortunately, they are no clearly defined name for these two characters, so only the getName() method have been updated to return "space" and "hyphen" when code for the "nonbreaking space" or "soft hyphen" is received.",0,"Eric Leleu","Eric Leleu",0,1,"10/Jul/12 19:05","09/Jun/14 13:01","10/Jul/12 19:06"
PDFBOX-1358,PDFBOX,"Reduce the memory consumption of a RandomAccessBuffer",Improvement,CLOSED,Major,Fixed,1.7.0,1.7.1,PDModel,memory,,"PDFBOX-1005 introduced a faster way to handle the growth of the RandowAccessBuffer. But the buffer is expanded by just doubling it which leads to a 2^n consumption of memory.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"15/Jul/12 13:21","25/Jul/12 06:01","15/Jul/12 13:47"
PDFBOX-1359,PDFBOX,"stack overflow~~ ExtractText (PDF2TXT)",Bug,CLOSED,Critical,Fixed,1.7.0,1.8.0,Utilities,None,eclipse,"java.io.IOException: Error: Could not find font(COSName
{F1}) in map={F27=org.apache.pdfbox.pdmodel.font.PDType1Font@40bb2bc3, F8=org.apache.pdfbox.pdmodel.font.PDType1Font@40363068, F56=org.apache.pdfbox.pdmodel.font.PDType1Font@25a41cc7, F7=org.apache.pdfbox.pdmodel.font.PDType1Font@395d601f, F13=org.apache.pdfbox.pdmodel.font.PDType1Font@2151b0a5}
java.io.IOException: Error: Could not find font(COSName{F1}
) in map=
{F27=org.apache.pdfbox.pdmodel.font.PDType1Font@40bb2bc3, F8=org.apache.pdfbox.pdmodel.font.PDType1Font@40363068, F56=org.apache.pdfbox.pdmodel.font.PDType1Font@25a41cc7, F7=org.apache.pdfbox.pdmodel.font.PDType1Font@395d601f, F13=org.apache.pdfbox.pdmodel.font.PDType1Font@2151b0a5}
at org.apache.pdfbox.util.operator.SetTextFont.process(SetTextFont.java:57)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:562)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:238)
at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:77)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:562)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:238)
at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:77)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:562)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:238)
at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:77)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:562)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:238)
at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:77)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:562)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:238)",0,"Andreas Lehmkühler",GloryKim,0,4,"19/Jul/12 01:34","08/Nov/18 18:06","22/Jul/12 13:42"
PDFBOX-1360,PDFBOX,"Adding page from one doc to another (as a layer) results in faulty doc",Bug,CLOSED,Major,"Won't Fix",1.7.0,None,Utilities,"compatibility compli","windows, java 1.6","Using the process laid out in testLayerImport() of http://java2s.com/Open-Source/Java/PDF/PDFBox-1.4.0/org/apache/pdfbox/util/TestLayerUtility.java.htm , a PDF document is generated that can be viewed in both Adobe Reader X (10.1.3) and SumatraPDF.
But when opening some of the tools in Reader X, an error box gets displayed. It warns about a potentially corrupt file and potentially incorrect display
For example, opening the resulting PDF, pressing F4 to view the layer utils will trigger this behavior.
I used page 1 from
(1): http://www.enterasys.com/company/literature/a4-ds.pdf
(2): http://www.tex.ac.uk/tex-archive/info/symbols/comprehensive/symbols-a4.pdf
respectively, to create a PDF with page 1 of (1) overlayed with page 1 of (2).
These are just random Google results. The error was triggered with more concrete files of my own as well
Since the PDF displays fine on initial load, it wouldn't be so bad if it wasn't exactly the layering I was after (overlaying, toggling display of individual layers)
I tried different variations:
created a new document and importPage() from (1)
did not create a new document but used (1) directly
a few permutations of adding page/saving/re-loading or not
Alternatively - is there a way to add a layer/OCG without creating an XObject form off it?
Best,
Tobias",0,"Andreas Lehmkühler","Tobias Skarman",0,2,"20/Jul/12 21:51","13/Oct/14 18:50","13/Oct/14 18:50"
PDFBOX-1362,PDFBOX,"Slovakian characters",Bug,CLOSED,Major,Fixed,1.7.0,1.8.0,"Text extraction",None,"windows xp, java 1.6","Hello,
I have a PDF document with Slovakian characters:
Hlavní administrátor
My code:
PDDocument document = null;
document = PDDocument.load(pdfFile, true); PDFTextStripper stripper =
null; stripper = new PDFTextStripper("ISO-8859-2");
stripper.getText(document);
I always get this result: Hlavn? administr\ ?tor",0,"Andreas Lehmkühler","Christian Czech",0,4,"23/Jul/12 15:56","23/Mar/13 12:56","01/Nov/12 18:08"
PDFBOX-1364,PDFBOX,"Error On MetaData",Bug,CLOSED,Major,Fixed,1.7.0,1.8.0,"Preflight, (1)",None,linux,"Testing the preflight-1.8.0-20120715.180423-19-jar-with-dependencies.jar on file: Notepad++_A1b.pdf (attached) I get the following errors:
The file/home/fausser/Notepad++_A1b.pdf is not valid, error(s) :
7.1 : Error on MetaData, 'schemas' expected and 'Producer' found at Line number = 14
Column number = 24
System Id = null
Public Id = null
Location Uri= null
CharacterOffset = 855
Note: this file verifies as a valid PDF/A with commercial validators",0,"Guillaume Bailleul","William Fausser",0,1,"26/Jul/12 12:17","23/Mar/13 12:56","28/Oct/12 12:08"
PDFBOX-1365,PDFBOX,"Error On MetaData: The Metadata entry doesn't reference a stream object",Bug,CLOSED,Major,Fixed,1.7.0,1.8.0,Preflight,None,linux,"On testing preflight-1.8.0-20120715.180423-19-jar-with-dependencies.jar for the attached file out_PDFA.pdf, I get the following error:
The file/home/fausser/out_PDFA.pdf is not valid, error(s) :
7.1.3 : Error on MetaData, The Metadata entry doesn't reference a stream object",0,"Eric Leleu","William Fausser",0,2,"26/Jul/12 12:37","23/Mar/13 12:56","31/Jul/12 19:42"
PDFBOX-1366,PDFBOX,"Reduce xmpbox code complexity",Task,CLOSED,Minor,Fixed,None,1.8.0,XmpBox,None,,"Refactoring of xmpbox to :
reduce complexity
increase unitary test coverage rate
remove duplicated code",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"28/Jul/12 08:19","28/Jul/12 14:38","28/Jul/12 14:38"
PDFBOX-1367,PDFBOX,"Do not generate preflight jar with dependencies at each build",Improvement,CLOSED,Trivial,Fixed,None,1.8.0,Preflight,None,,"Each time pdfbox is built, a big jar is created in preflight module containing all dependencies of preflight.
I propose to not generate this jar by default (see patch).
To create this jar, useful when testing pdf/a files, only use the mvn command line :
mvn package -DskipAssembly=false",0,"Andreas Lehmkühler","Guillaume Bailleul",0,1,"28/Jul/12 14:36","02/May/13 02:30","10/Mar/13 18:34"
PDFBOX-1368,PDFBOX,"Xmp validation KO if there are complex type in a seq element",Bug,CLOSED,Major,Fixed,1.8.0,1.8.0,XmpBox,None,,"Hi,
I updated my local repository with the last revision of the XMPBox.
I encounter a validation issue on five PDF/A that were valid before.
In attachment, there are the XMP stream.
The XMPBox parser expects a text content in a <rdf:seq><rdf:li> element, but in this XMP there are a rdf:Description as content.
BR,
Eric",0,"Guillaume Bailleul","Eric Leleu",0,1,"29/Jul/12 14:39","23/Mar/13 12:56","28/Oct/12 12:06"
PDFBOX-1369,PDFBOX,"support getting file pointer from RandomAccessRead interface",Improvement,CLOSED,Minor,Fixed,1.7.1,1.8.0,Parsing,None,,"The RandomAccessRead interface allows seek operations but currently does not provide a method to get offset of next byte to read. The interface should be enhanced with a method getPointer() returning this offset.",0,"Timo Boehme","Timo Boehme",0,1,"29/Jul/12 21:25","23/Mar/13 12:56","29/Jul/12 22:01"
PDFBOX-137,PDFBOX,"Does not detect paper format",Bug,CLOSED,Major,Fixed,None,1.8.0,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1435244
Originally submitted by nobody on 2006-02-20 06:55.
Pdfbox does not detect the paper format of the PDF. It
always says "Orientation 1" even after changing it from
java:
document.getPageFormat(0).setOrientation(PageFormat.LANDSCAPE);
and alternates between "Height 595.0, Width 842.0" and
"Height 842.0, Width 595.0" (which both is A1 if
interpreted as mm)
I tried several PDF-Creators (itext, Openoffice), but
the Pdfbox always wants to print LETTER in PORTRAIT
orientation. (the pages are A4)
Settings the orientation in the printer dialog does not
help.
I believe it get's its info from:
/Rotate 90/MediaBox[0 0 595 842]
regards,
JPT, j.p.t.@gmx.net
(pdfbox 0.7.2, itext 1.3.6)",0,"Andreas Lehmkühler",Anonymous,3,3,"20/Feb/06 14:55","23/Mar/13 12:56","03/Mar/13 13:40"
PDFBOX-1370,PDFBOX,"Only the last visual signature is valid when multiple signatures have been added on different pages",Bug,CLOSED,Major,Duplicate,"1.6.0, 1.7.1",None,None,None,,"Every visual signature that is added invalidates the previous ones (Adobe Reader displays the message that the document has changed)
If the signatures are added to different pages only the ones that have been added to the page of the last one are visible in PDFReader (Adobe displays the message in the signature view that the form field has been deleted)",0,"Thomas Chojecki","Matthias Küng",0,2,"30/Jul/12 15:53","14/Dec/15 08:42","14/Nov/13 22:04"
PDFBOX-1371,PDFBOX,"MetaData : Trapped property",Bug,CLOSED,Major,Fixed,"1.7.1, 1.8.0",1.8.0,"Preflight, (1)",None,linux,"Using the latest trunk, the attached PDF fails to validate even though commercial validators like
Adobe Acrobat 10.x and Adobe PDFGenerator pass as valid PDF/A.
java -classpath ./preflight-1.8.0-SNAPSHOT-jar-with-dependencies.jar org.apache.pdfbox.preflight.Validator_A1b /home/fausser/ghostpdlPDFA.pdf
log4j:WARN No appenders could be found for logger (org.apache.pdfbox.util.PDFStreamEngine).
log4j:WARN Please initialize the log4j system properly.
The file/home/fausser/ghostpdlPDFA.pdf is not valid, error(s) :
3.1.3 : Invalid Font definition, The FontFile is invalid
3.3.1 : Glyph error, The character "71" in the font program "RIRFIH+CMBX12"is missing from the Charater Encoding.
3.1.3 : Invalid Font definition, The FontFile is invalid
3.3.1 : Glyph error, The character "112" in the font program "FNWTPN+CMR10"is missing from the Charater Encoding.
3.3.1 : Glyph error, The character "78" in the font program "FNWTPN+CMR10"is missing from the Charater Encoding.
3.1.3 : Invalid Font definition, The FontFile is invalid
3.3.1 : Glyph error, The character "136" in the font program "MULJMX+SFRM1000"is missing from the Charater Encoding.
3.1.3 : Invalid Font definition, The FontFile is invalid
3.3.1 : Glyph error, The character "112" in the font program "POSEZB+CMBX10"is missing from the Charater Encoding.
3.3.1 : Glyph error, The character "47" in the font program "FNWTPN+CMR10"is missing from the Charater Encoding.
3.3.1 : Glyph error, The character "82" in the font program "RIRFIH+CMBX12"is missing from the Charater Encoding.
7.1.1 : Error on MetaData, Cannot find a description for 'Trapped' property",0,"Guillaume Bailleul","William Fausser",0,2,"31/Jul/12 11:42","23/Mar/13 12:56","28/Oct/12 12:09"
PDFBOX-1372,PDFBOX,"NullPointerException with loadDescriptorDictionary",Bug,CLOSED,Major,Fixed,"1.6.0, 2.0.0",2.0.0,PDModel,None,"windows 7, weblogic, java 1.6","I downloaded a ttf from http://www.jtbarton.com/Barcodes/code128.ttf and tried to use this with pdfbox 1.6.0 in my jsp.
it returns below error
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadDescriptorDictionary(PDTrueTypeFont.java:339)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:164)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:140)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:127)",0,"John Hewson",wentao,0,4,"01/Aug/12 18:29","17/Mar/16 19:07","12/Dec/14 23:22"
PDFBOX-1375,PDFBOX,java.lang.StackOverflowError,Bug,CLOSED,Major,"Won't Fix",0.7.3,None,Parsing,documentation,redhat,"Caused by: java.lang.StackOverflowError
at org.pdfbox.pdmodel.PDPageNode.getAllKids(PDPageNode.java:210)
at org.pdfbox.pdmodel.PDPageNode.getAllKids(PDPageNode.java:210)
at org.pdfbox.pdmodel.PDPageNode.getAllKids(PDPageNode.java:210)
... ...
at org.pdfbox.pdmodel.PDPageNode.getAllKids(PDPageNode.java:210)",0,"Andreas Lehmkühler",liubingjian,0,2,"02/Aug/12 16:18","06/May/13 19:38","06/May/13 19:38"
PDFBOX-1376,PDFBOX,"xmpbox cannot parse structured types containing structured types",Bug,CLOSED,Major,Fixed,None,1.8.0,XmpBox,None,,"Xmpbox is only able to parse xmp structured types containing basic or derived type.",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"02/Aug/12 17:18","02/Aug/12 21:22","02/Aug/12 21:22"
PDFBOX-1377,PDFBOX,"Simplify PDF/A schema parsing",Improvement,CLOSED,Minor,Fixed,None,1.8.0,XmpBox,None,,"As structured type were not implemented in xmpbox, specific parsing was done to handle PDF/a schema definition and extension in xmpbox.
Now, structured types can be parsed. A refactoring is needed to remove duplicated parsing code.",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"02/Aug/12 21:21","02/May/13 02:29","28/Oct/12 12:06"
PDFBOX-1378,PDFBOX,"[PATCH] COSArray: Avoid NullPointerException in setString",Bug,CLOSED,Minor,Fixed,1.7.1,1.8.0,None,patch,,"NullPointerException when calling setString in COSArray with null.",0,"Andreas Lehmkühler","Dominic Tubach",0,2,"03/Aug/12 11:33","23/Mar/13 12:56","03/Aug/12 16:35"
PDFBOX-1379,PDFBOX,"[PATCH] COSDocument: setVersion",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,None,patch,,"Th attribute version in COSDocument is not initialized by default, so that calling setVersion does not change the header string.",0,"Andreas Lehmkühler","Dominic Tubach",0,2,"03/Aug/12 11:38","23/Mar/13 12:56","04/Aug/12 15:47"
PDFBOX-1380,PDFBOX,"[PATCH] PDNameTreeNode",Bug,CLOSED,Minor,Fixed,1.7.1,1.8.0,PDModel,patch,,"Limits in method setKids are not removed if parameter kids is null or empty and no names are not set.
IndexOutOfBoundsException in method setNames if pararmeter names is empty.",0,"Andreas Lehmkühler","Dominic Tubach",0,2,"03/Aug/12 11:46","02/May/13 02:29","11/Mar/13 19:31"
PDFBOX-1381,PDFBOX,"[PATCH] PDNumberTreeNode",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,PDModel,None,,"Limits are not updated in method setKids.
NullPointerException in method getValue if names and kids are not set.
NullPointerException in method getLowerLimit and getUpperLimit if limit is null.
NullPointerException in method setLowerLimit and setUpperLimit if parameter is null.",0,"Andreas Lehmkühler","Dominic Tubach",0,2,"03/Aug/12 11:52","23/Mar/13 12:56","10/Mar/13 13:21"
PDFBOX-1382,PDFBOX,"[PATCH] PDObjectReference",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,PDModel,patch,,"The method getObjectReference always returns a PDAnnotation because PDAnnotation.createAnnotation(COSDictionary) returns at least a PDUnknownAnnotation.",0,"Andreas Lehmkühler","Dominic Tubach",0,2,"03/Aug/12 12:29","23/Mar/13 12:56","10/Mar/13 12:29"
PDFBOX-1387,PDFBOX,"Create NonSequentialParser with InputStream",Improvement,CLOSED,Major,Fixed,1.7.1,1.8.0,"Parsing, Preflight",None,,"Hi,
Currently the NonSequentialParser can't be initialized using an InputStream.
To allow the PreflightParser to inherit from the NonSequentialParser, I have create a constructor that takes an InputStream as parameter.
In attachment you can find a patch that :
Creates a TmpFile with the given InputStream in the constructor method
Deletes the TmpFile at the end of the parse method.
call the parseObjectDynamically method on the Trailer entries (useful for Preflight module)
What is your opinion about this proposal.
Regards,
Eric",0,"Eric Leleu","Eric Leleu",0,1,"06/Aug/12 20:32","23/Mar/13 12:56","19/Sep/12 20:20"
PDFBOX-1388,PDFBOX,"Create a branch to refactor xmpbox",Improvement,CLOSED,Minor,Implemented,None,1.8.0,XmpBox,None,,"important refactoring have to be done on xmpbox to reduce complexity and fix some limitation of the current implementation.
As the work is important but does not impact more than xmpbox itself and some classes in preflight it will be done in a branch.
At the end of the refactoring xmpbox in trunk will be replaced.
This issue will be closed at the end of the merge",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"07/Aug/12 15:55","02/May/13 02:29","28/Oct/12 11:21"
PDFBOX-139,PDFBOX,"The CMapParser does not recognize essential cmap operators",Bug,CLOSED,Major,Fixed,None,None,Parsing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1438028
Originally submitted by vdimchev on 2006-02-24 03:48.
The bug is directly related to the following bug I
discovered in the database:
[ 1208652 ] PDFTextStripper.writeText Exception:Unknown
encoding for ..
I'll try to exlain it again here and supply enough
resources for its fix.
The problem is that the current implementation of
CMapParser class supports only the beginbfchar and
beginbfrange operators.
This is not enough and causes the invokation to
PDFTextStripper.writeText() to throw IOException with
the following message: Unknown encoding for 'Identity-
V'.
I also managed to produce the message: "Unknown
encoding for '90ms-RKSJ-H'.
The complete stacktrace is:
java.io.IOException: Unknown encoding for 'Identity-V'
at org.pdfbox.encoding.EncodingManager.
getEncoding(EncodingManager.java:83)
at org.pdfbox.pdmodel.font.PDFont.
getEncoding(PDFont.java:627)
at org.pdfbox.pdmodel.font.PDFont.
encode(PDFont.java:476)
at org.pdfbox.util.PDFStreamEngine.
showString(PDFStreamEngine.java:332)
at org.pdfbox.util.operator.ShowText.
process(ShowText.java:66)
at org.pdfbox.util.PDFStreamEngine.
processOperator(PDFStreamEngine.java:494)
at org.pdfbox.util.PDFStreamEngine.
processSubStream(PDFStreamEngine.java:207)
at org.pdfbox.util.PDFStreamEngine.
processStream(PDFStreamEngine.java:160)
at org.pdfbox.util.PDFTextStripper.
processPage(PDFTextStripper.java:355)
at org.pdfbox.util.PDFTextStripper.
processPages(PDFTextStripper.java:268)
at org.pdfbox.util.PDFTextStripper.
writeText(PDFTextStripper.java:220)
In fact the cause of this exception is that the
CMapParser does not recognize the begincidchar and
begincidrange operators (in the case of the 90ms-RKSJ-
H) encoding and usecmap operator in the case of
Identity-V encoding.
The cmap files for these encodings are not properly
parsed and the corresponding Cmap objects do not
contain neither one nor two byte mappings, further the
lookup() method returns null.
I'll attach two samples for the 90ms-RKSJ-H encoding
and one for the Identity-V encoding.
I'll attach cmap reference also.
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1438028&file_id=168711
5014.CIDFont_Spec.rar (application/octet-stream), 240282 bytes
Reference, containing CMAP description
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1438028&file_id=168709
ken1.pdf (application/pdf), 33713 bytes
The Identity-V sample
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1438028&file_id=168708
tp0404-2a.pdf (application/pdf), 11434 bytes
The second 90ms-RKSJ-H sample
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1438028&file_id=168705
nan_youkou.pdf (application/pdf), 7663 bytes
The first 90ms-RKSJ-H sample",0,"Andreas Lehmkühler",Anonymous,1,2,"24/Feb/06 11:48","25/Aug/13 16:57","25/Aug/13 16:57"
PDFBOX-1390,PDFBOX,"Is COSNumber mutable or immutable?",Bug,CLOSED,Minor,"Not A Problem",1.7.0,None,PDModel,COS,,"I'm writing code to clone a PDPage as a deep copy. I'm trying to decide which objects are mutable and which are immutable.
COSInteger is confusing. It has a factory method, which suggests there is some internal caching going on, but it also has a setValue() method. Caching makes sense for immutable objects. If it is caching values, then setValue() should probably be deprecated or removed.
* *
Proposed JUnit code:
COSInteger original = COSInteger.get(1);
COSInteger copy = COSInteger.get(1);
copy.setValue(5);
assertEquals(1L, original.longValue());",0,"Andreas Lehmkühler","Aaron Stewart",0,2,"17/Aug/12 18:21","27/Jan/15 12:28","27/Jan/15 12:28"
PDFBOX-1391,PDFBOX,"Document with "embedded subset" fonts is displayed incorrect",Bug,CLOSED,Major,Fixed,1.7.1,2.0.0,"Swing GUI",None,"windows xp","Hi. I am trying use PDFReader to display a PDF file produced with OpenOffice.org, but the output contains lots of grabbled characters.
I thought the problem was that the font was not embedded (Tahoma in this case), but after inspecting the file, Tahoma is listed as "embedded subset". However, lots of "Changing font on <> from <Tahoma> to the default font" messages are logged.
The file is correctly displayed by other readers, could you please help me to determine what is wrong?
Thanks in advance.",0,"Andreas Lehmkühler","Juan Diaz",0,3,"20/Aug/12 11:15","17/Mar/16 19:08","09/Aug/13 15:37"
PDFBOX-1392,PDFBOX,"Enable usage of compressionQuality when creating a PDJpeg",Improvement,CLOSED,Major,Fixed,1.7.1,1.8.0,PDModel,PDJpeg,,"The optional compressionQuality parameter isn't used when creating a PDJpeg which leads to bigger pdfs.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"20/Aug/12 15:52","23/Mar/13 12:56","20/Aug/12 15:55"
PDFBOX-1394,PDFBOX,"Image streams are lost when adding new images to page",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,PDModel,None,"java 1.6","I open existing PDF which contains images. Then I want to insert new images and save it as new PDF.
The resulting PDF does not contain original images, just the new ones. Adobe Reader complains about missing object too.
PDDocument pdDoc=PDDocument.load("input.pdf", false);
PDXObjectImage ximage = new PDJpeg(pdDoc, bufferedImage);
PDPage page=(PDPage) pdDoc.getDocumentCatalog().getAllPages().get(0);
PDPageContentStream content = new PDPageContentStream(pdDoc, page, true, true);
content.drawXObject(ximage, 100, 600, 200, 130);
// or content.drawImage(ximage, 0, 0);
content.close();
pdDoc.save("output.pdf");
pdDoc.close();
When I look into PDF binary file I can see only 1 image stream (the one I added) and I can't see streams of original images, they simply are not there.",0,"Andreas Lehmkühler","Juraj Lonc",0,3,"21/Aug/12 13:44","23/Mar/13 12:56","23/Aug/12 15:46"
PDFBOX-1395,PDFBOX,"Transparency isn't checked in Page dictionary",Bug,CLOSED,Minor,Fixed,"1.7.0, 1.7.1",1.8.0,Preflight,None,,"A Page dictionary can contain Transparency information.
Until now, preflight didn't check this information.
Like for XObject or ExtGState dictionary, "/S" entry can't be associated with the value "Transparent".",0,"Eric Leleu","Eric Leleu",0,1,"22/Aug/12 19:17","23/Mar/13 12:56","22/Aug/12 19:19"
PDFBOX-1397,PDFBOX,"Some characters are displayed by default font (not by correct font)",Bug,CLOSED,Major,"Won't Fix",1.7.1,None,PDModel,None,,"I have created simple test pdf which contains some central european characters.
Adobe Reader displays text OK.
But this code
BufferedImage bufferedImage = pdPage.convertToImage();
renders some characters with default font (not the one set in content).",0,"Andreas Lehmkühler","Juraj Lonc",0,2,"24/Aug/12 14:52","04/Aug/13 12:55","04/Aug/13 12:55"
PDFBOX-1398,PDFBOX,"Runtime exception when trying to check PDF/A compliance on non PDF/A document",Bug,CLOSED,Trivial,Fixed,None,1.8.0,Preflight,None,,"$ java -jar preflight-1.8.0-SNAPSHOT-jar-with-dependencies.jar CM-Aangifte_arbeidsongeschiktheid_werknemers_tcm252-47272.pdf
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 576
at org.apache.fontbox.ttf.CMAPEncodingEntry.processSubtype4(CMAPEncodingEntry.java:353)
at org.apache.fontbox.ttf.CMAPEncodingEntry.initSubtable(CMAPEncodingEntry.java:85)
at org.apache.fontbox.ttf.CMAPTable.initData(CMAPTable.java:90)
at org.apache.fontbox.ttf.AbstractTTFParser.parseTables(AbstractTTFParser.java:163)
at org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:61)
at org.apache.fontbox.ttf.AbstractTTFParser.parseTTF(AbstractTTFParser.java:90)
at org.apache.fontbox.ttf.AbstractTTFParser.parseTTF(AbstractTTFParser.java:66)
at org.apache.pdfbox.preflight.font.descriptor.TrueTypeDescriptorHelper.processFontFile(TrueTypeDescriptorHelper.java:77)
at org.apache.pdfbox.preflight.font.descriptor.FontDescriptorHelper.validate(FontDescriptorHelper.java:96)
at org.apache.pdfbox.preflight.font.SimpleFontValidator.processFontDescriptorValidation(SimpleFontValidator.java:76)
at org.apache.pdfbox.preflight.font.SimpleFontValidator.validate(SimpleFontValidator.java:53)
at org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.validate(FontValidationProcess.java:58)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:67)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:45)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:82)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:65)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:67)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:45)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:142)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:76)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:67)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:45)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:49)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:41)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:67)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:79)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:151)
at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:56)",0,"Eric Leleu","Fanny Lesecq",0,2,"24/Aug/12 16:09","23/Mar/13 12:56","09/Feb/13 17:40"
PDFBOX-1399,PDFBOX,"Add an example on how to extract embedded files",Improvement,CLOSED,Minor,Fixed,1.7.1,1.8.0,PDModel,None,,"There is no example on how to extract embedded files.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"25/Aug/12 16:32","23/Mar/13 12:56","25/Aug/12 16:43"
PDFBOX-1402,PDFBOX,"Improve handling of multiline text boxes",Improvement,CLOSED,Major,Fixed,1.7.1,2.0.0,AcroForm,Appearance,,"The current implementation for setting the appearance of content that is added to a multiline text box is incorrect in a number of ways:
Doesn't position the start of the text in the correct location
Incorrectly uses font size '0' instead of auto-sizing the font
Doesn't break up very long lines
If the font size is very large, then the next line is started too close to the previous line.",0,"Maruan Sahyoun","Will May",6,9,"29/Aug/12 21:13","17/Mar/16 19:06","15/Mar/15 21:58"
PDFBOX-1406,PDFBOX,"PDFBox creates corrupt PDF files",Bug,CLOSED,Major,"Cannot Reproduce",1.7.0,None,Utilities,corruption,"linux, java 1.6","In some cases, when a PDF document is splitted page by page and then merged again into one or several PDF files, Acrobat Reader produces an "Error 14 - A problem occured when reading the document" message.
The message is not shown when opening the document, but when scrolling downwards from the first page to the second. This happens on different machines. The original PDF files do not cause the error to be displayed.
Acrobat reader continues working, but doesn't display some pages (see screenshot). In the specific case, page 1 and 4 are displayed, page 2 and 3 remain undisplayed.
Additionally, I was unable to find out what's the case when "Error 14" is displayed. When browsing for the problem you'll find people saying that this happens when the file isn't standard-conform, but I found no reliable source for this explanation.
At the moment I cannot provide a file to reproduce as those files are confidential, but I'll try to provide an anonymized version.",0,"Andreas Lehmkühler","Bastian Preindl",0,2,"06/Sep/12 10:41","05/Nov/14 11:37","05/Nov/14 11:37"
PDFBOX-1407,PDFBOX,"ClassCastException: COSObject cannot be cast to COSName",Bug,CLOSED,Major,"Not A Problem",1.7.0,None,Parsing,None,,"Parsing PDF file
java.lang.ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSName
at org.apache.pdfbox.cos.COSDocument.getObjectsByType(COSDocument.java:264)
at org.apache.pdfbox.cos.COSDocument.dereferenceObjectStreams(COSDocument.java:571)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:225)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1090)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1055)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:110)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:242)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:120)",0,"Andreas Lehmkühler","Lau Brino",0,4,"07/Sep/12 14:33","26/Apr/13 15:56","09/Mar/13 16:13"
PDFBOX-1408,PDFBOX,"Width of space character is calculated wrong",Bug,CLOSED,Major,Fixed,None,1.8.0,None,None,,"PDFStreamEngine calculates width of space (line 357):
spaceWidthText = (font.getFontWidth( SPACE_BYTES, 0, 1 )*glyphSpaceToTextSpaceFactor);
In some cases the result is 0.
Problem is that getFontWidth requires code number of " ".
If there is "ToUnicode" mapping for that font that it is necessary to lookup CMap for code number and NOT to use 0x20 (space) as it is in souce code.",0,"Andreas Lehmkühler","Juraj Lonc",0,2,"10/Sep/12 08:37","23/Mar/13 12:56","14/Oct/12 11:35"
PDFBOX-1410,PDFBOX,"Error while converting pdf version 1.3 to text",Bug,CLOSED,Major,"Not A Problem",1.7.1,None,"Swing GUI",None,,"I am getting error when trying to extract text from PDF 1.3 using command line ExtractText.
SEVERE: Error: Could not parse predefined CMAP file for 'Adobe-Identity-UCS'
I can extract from PDF 1.5
Is this issue fixed in PDFBOX ? which version?",0,"Andreas Lehmkühler","Avinash Jadhav",0,3,"11/Sep/12 14:49","06/May/13 19:22","06/May/13 19:22"
PDFBOX-1411,PDFBOX,"[Patch] PDPixelMap.createImageStream can attempt to close output stream it didn't open, hiding errors.",Bug,CLOSED,Minor,Fixed,1.7.0,1.8.0,None,None,,"Under some error conditions, PDPixelMap.createImageStream will attempt to close a null output stream, hiding the original exception.
The following patch will fix this issue
Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDPixelMap.java
===================================================================
— pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDPixelMap.java (revision 1383964)
+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/xobject/PDPixelMap.java (working copy)
@@ -156,7 +156,9 @@
}
finally
{
os.close();
+ if (os != null) { + os.close(); + }
}
}
/**",0,"Andreas Lehmkühler","Michael Graessle",0,2,"12/Sep/12 14:41","23/Mar/13 12:56","16/Sep/12 15:16"
PDFBOX-1412,PDFBOX,"NullPointerException when getting fields from a PDF file",Bug,CLOSED,Critical,Fixed,"1.7.1, 1.8.2","1.8.3, 2.0.0",AcroForm,None,,"I am getting a NullPointerException thrown from PDField.java line 540. The problem is that the code calls COSArray.getObject on line 539, which can return a NULL. Line 540 uses the returned value without first checking for NULL, thus throwing NPE when the value is NULL. The following is the stack trace:
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.interactive.form.PDField.getKids(PDField.java:540)
at org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory.isButton(PDFieldFactory.java:159)
at org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory.createField(PDFieldFactory.java:68)
at org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm.getFields(PDAcroForm.java:203)
...",0,"Andreas Lehmkühler","Wayne Chan",1,2,"12/Sep/12 16:02","30/Nov/13 17:02","27/Oct/13 18:16"
PDFBOX-1413,PDFBOX,"Spaces replaced by é when exporting image",Bug,CLOSED,Major,Fixed,None,2.0.0,None,None,,"When exporting pdf to image, spaces are replaced with the é character.
And there are some other print issues... (I will attach an example)",0,"Andreas Lehmkühler","Johann Chaves",0,2,"12/Sep/12 16:15","17/Mar/16 19:06","09/Aug/13 15:38"
PDFBOX-1414,PDFBOX,"EXCEPTION_ACCESS_VIOLATION in fontmanager.dll",Bug,CLOSED,Minor,Fixed,"1.7.1, 1.8.0",2.0.0,PDModel,None,windows,"When converting the attached PDF to a PNG using PDFImageWriter.writeImage I receive an EXCEPTION_ACCESS_VIOLATION in fontmanager.dll. This is similar to PDFBOX-780 but using the PDF attached to that issue doesn't produce the error.
This error doesn't occur with 1.7 but I do get the warning "Could not parse predefined CMAP file for 'Adobe-Identity-UCS'".",0,"Andreas Lehmkühler","Simon Maskell",0,2,"21/Sep/12 09:54","17/Mar/16 19:07","25/Aug/13 16:55"
PDFBOX-1415,PDFBOX,"I have a 6-page PDF, but opening it with PdfBox shows only 5",Bug,CLOSED,Major,"Cannot Reproduce",1.7.1,None,"Swing GUI",None,"windows 7","I have a PDF document, with 6 pages. however, when i open it using PDFBox, and get num of pages, i see only 5.
i guess that the 6th page is different somehow - i have no idea how - but it makes PdfBox not to "see" it.
since the doc is sensitive, I will try to reproduce the similar problem with another doc and the upload it.",0,"Andreas Lehmkühler","Ohad R",0,2,"24/Sep/12 16:11","06/May/13 19:18","06/May/13 19:18"
PDFBOX-1417,PDFBOX,"StackOverflowError [COSDictionary.toString(COSDictionary.java:1418)]",Bug,CLOSED,Major,Fixed,1.6.0,1.7.1,None,None,,"The attached PDF document causes PDFBox 1.6.0 to fail with StackOverflowError.
Issue discovered with Solr 3.6.1 (using Tika->PDFBox to extract text from document).",0,"Andreas Lehmkühler","Øyvind Stegard",0,3,"28/Sep/12 10:48","22/Apr/13 20:22","03/Jan/13 17:58"
PDFBOX-1418,PDFBOX,"Improved font mapping",Improvement,CLOSED,Major,Fixed,1.7.1,1.8.0,PDModel,None,,"Depending on the environment PDFBox doesn't find all standard fonts using its own mapping",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"29/Sep/12 13:59","17/Apr/14 08:27","29/Sep/12 14:16"
PDFBOX-1419,PDFBOX,"PDField.setValue is not behave correctly",Bug,CLOSED,Major,Duplicate,1.7.0,2.0.0,"AcroForm, (1)",None,"java 1.6, windows","Use a template PDF file to write value into different fields (type of PDTextbox, PDCheckbox, PDChoiceField). The PDTextbox displays either very large font or not show anything. If click into the field, it displays correctly. Click outside the field, it reverts back to the wrong display. The same logic of code works well with iText library. The code similar to:
PDFTemplate = PDDocument.load("myTemplate.pdf");
PDDocumentCatalog docCatalog = PDFTemplate.getDocumentCatalog();
PDAcroForm acroForm = docCatalog.getAcroForm();
:
try
{ PDField pdField = acroForm.getField(field); if (pdField != null) pdField.setValue(value); }
catch(...){}
:",0,"Maruan Sahyoun","Joe Lee",1,6,"04/Oct/12 15:17","11/Mar/15 07:07","11/Mar/15 07:07"
PDFBOX-1420,PDFBOX,"Bullet points get interpreted at the letter "N"",Bug,CLOSED,Trivial,"Not A Problem",1.7.1,None,None,None,,"The PDF file is available at http://www.idea.int/publications/country/upload/12_recommendations-2.pdf",0,"Andreas Lehmkühler","Nicholas Cottrell",0,2,"07/Oct/12 20:03","13/Oct/12 16:17","13/Oct/12 16:17"
PDFBOX-1421,PDFBOX,"TextPosition.getX()returen 0 in case of rotation ==360",Bug,CLOSED,Trivial,Fixed,1.7.1,1.8.0,"Text extraction",None,,"some pdf file I try to exact text had a rotation==360 .
I can not understant the difference between rotation ==0 and rotation ==360,
But I find the TextPosition getX() in this case return 0, and then many word return worng position.
Please text this situation.",0,"Andreas Lehmkühler",PanQuanyi,0,2,"09/Oct/12 03:27","04/Aug/14 20:39","30/Jan/13 13:19"
PDFBOX-1422,PDFBOX,"PDFontFactory.createFont() return font which having no FontDescriptor and fontName can not be retrieved",Bug,CLOSED,Major,"Not A Problem",1.7.1,None,PDModel,None,,"in case of PDType0Font and PDCIDFontType0Font, PDFontFactory.createFont() return font not having FontDescriptor, PDResources which pushed into streamResourcesStack of PDFStreamEngine finaly generate TextPosition with member font not having FontDescriptor, and then font name cat not be retrieved.",0,"Andreas Lehmkühler",PanQuanyi,0,4,"09/Oct/12 12:51","30/Aug/14 19:15","01/Jun/14 18:07"
PDFBOX-1423,PDFBOX,""An error exists on this page. Acrobat may not display the page correctly."",Improvement,CLOSED,Major,Fixed,1.6.0,1.8.0,None,None,"windows 7, weblogic, jsp","after generate the pdf. Open it within Adobe Reader X has no problem, but if print it, a window pops up with "An error exits on this page. Acrobat may not display the page correctly. Please contact the person who created the PDF document to correct the problem", printed result looks ok.
It seems there is no such popup message on Adobe Reader 9.",0,"Andreas Lehmkühler",wentao,0,3,"09/Oct/12 21:01","23/Mar/13 12:56","06/Feb/13 18:55"
PDFBOX-1424,PDFBOX,"Wrong glyph (Persian) is used in extacted text instead of the original glyph (Persian) in PDF file",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,"Text extraction",None,"windows xp, java 1.6","Hi
I am very new to PDFBox and I am dealing with Persian PDF files. When I convert Persian PDF files using PDFBox-app, some Persian glyphs like م are displayed wrongly in the extracted text. For example, the word "هستم" in Persian is extracted as "هستن" and "من" in Persian is extracted as "هن". Also, the word "سلام" is extracted as "سالم". By the way, I have tested extracting text from a complete Persian PDF file with multiple pages; the result is disappointing. Actually, it is totally wrong. Please let me know if I should upload an example Persian PDF file.",0,"Andreas Lehmkühler","Ali Majdzadeh Kohban",0,2,"09/Oct/12 22:48","23/Mar/13 12:56","01/Nov/12 17:50"
PDFBOX-1425,PDFBOX,"Make PositionWrapper.getTextPosition public",Improvement,CLOSED,Major,Fixed,None,1.8.0,None,None,,"Method PositionWrapper.getTextPosition() is currently protected. The problem is that this limits the ability to extend/customize pdfbox.
For instance, suppose someone wants to override PDFTextStripper.isParagraphSeparation(PositionWrapper position, PositionWrapper lastPosition, PositionWrapper lastLineStartPosition, float maxHeightForLine):
This is intended, since isParagraphSeparation is 'protected'. However, in the subclass (which will be in a different package), it is forbidden to call position.getTextPosition(), which severly limits what can be done.
Could you please make PositionWrapper.getTextPosition() public?",0,"Timo Boehme","Daniel Bonniot de Ru",1,4,"10/Oct/12 10:57","23/Mar/13 12:56","18/Nov/12 13:55"
PDFBOX-1426,PDFBOX,"JVM crashes when trying to process the attached pdf's",Bug,CLOSED,Critical,Fixed,1.7.1,2.0.0,None,patch,windows,"#
A fatal error has been detected by the Java Runtime Environment:
#
EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x6d703bf9, pid=5384, tid=4788
#
JRE version: 6.0_18-b07
Java VM: Java HotSpot(TM) Server VM (16.0-b13 mixed mode windows-x86 )
Problematic frame:
C [fontmanager.dll+0x13bf9]
#
If you would like to submit a bug report, please visit:
http://java.sun.com/webapps/bugreport/crash.jsp
The crash happened outside the Java Virtual Machine in native code.
See problematic frame for where to report the bug.
#
--------------- T H R E A D ---------------
Current thread (0x6a057400): JavaThread "ajp-127.0.0.1-8009-11" daemon [_thread_in_native, id=4788, stack(0x6cf10000,0x6cf60000)]
siginfo: ExceptionCode=0xc0000005, reading address 0x00000010
Registers:
EAX=0x00000000, EBX=0x00000000, ECX=0x0000000a, EDX=0x69b1c6c8
ESP=0x6cf5e89c, EBP=0x6cf5e8b4, ESI=0x6aadfdd0, EDI=0x6aadfdd0
EIP=0x6d703bf9, EFLAGS=0x00010246
Top of Stack: (sp=0x6cf5e89c)
0x6cf5e89c: 00000000 6aadfdd0 636d6170 6aadfdd0
0x6cf5e8ac: 6d703d33 685e4130 6cf5e924 6d6f3ced
0x6cf5e8bc: 6aadfdd0 00000062 00000000 6cf5e920
0x6cf5e8cc: 6aadfdd0 685e4130 00000001 00000000
0x6cf5e8dc: 00000007 00000000 00000000 00000000
0x6cf5e8ec: 00000000 6a8a3840 00000000 00000000
0x6cf5e8fc: 6a8a3c98 00000000 00000000 00000000
0x6cf5e90c: 6a8a3838 00000000 00000000 00000000
Instructions: (pc=0x6d703bf9)
0x6d703be9: 75 51 57 68 70 61 6d 63 56 e8 6f fd ff ff 6a 00
0x6d703bf9: ff 70 10 ff 70 0c ff b6 88 00 00 00 ff b6 90 00
Stack: [0x6cf10000,0x6cf60000], sp=0x6cf5e89c, free space=13a6cf5e3d8k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C [fontmanager.dll+0x13bf9]
C [fontmanager.dll+0x3ced]
C [fontmanager.dll+0x3da3]
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j sun.font.FileFont.getGlyphImage(JI)J+0
J sun.font.FileFontStrike.getGlyphMetrics(IZ)Ljava/awt/geom/Point2D$Float;
J sun.font.FileFontStrike.getGlyphMetrics(I)Ljava/awt/geom/Point2D$Float;
J sun.font.StandardGlyphVector.initPositions()V
J sun.font.GlyphList.setFromGlyphVector(Lsun/java2d/loops/FontInfo;Ljava/awt/font/GlyphVector;FF)V
J sun.java2d.pipe.GlyphListPipe.drawGlyphVector(Lsun/java2d/SunGraphics2D;Ljava/awt/font/GlyphVector;FF)V
j sun.java2d.pipe.ValidatePipe.drawGlyphVector(Lsun/java2d/SunGraphics2D;Ljava/awt/font/GlyphVector;FF)V+17
J sun.java2d.SunGraphics2D.drawGlyphVector(Ljava/awt/font/GlyphVector;FF)V
j org.apache.pdfbox.pdmodel.font.PDSimpleFont.writeFont(Ljava/awt/Graphics2D;Ljava/awt/geom/AffineTransform;FFLjava/awt/font/GlyphVector;)V+63
j org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(Ljava/lang/String;[ILjava/awt/Graphics;FLjava/awt/geom/AffineTransform;FF)V+253
j org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(Lorg/apache/pdfbox/util/TextPosition;)V+436
J org.apache.pdfbox.util.PDFStreamEngine.processEncodedText([B)V
J org.apache.pdfbox.util.operator.ShowTextGlyph.process(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V
J org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/cos/COSStream;)V
j org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+20
j org.apache.pdfbox.util.PDFStreamEngine.processStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+43
j org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(Ljava/awt/Graphics;Lorg/apache/pdfbox/pdmodel/PDPage;Ljava/awt/Dimension;)V+80
j org.apache.pdfbox.pdmodel.PDPage.convertToImage(II)Ljava/awt/image/BufferedImage;+200
j org.apache.pdfbox.pdmodel.PDPage.convertToImage()Ljava/awt/image/BufferedImage;+6
j com.otgs.ecom.utils.PdfProcessing.getPageAsImage(I)Ljava/awt/image/BufferedImage;+29
j com.otgs.ecom.utils.ThumbnailGenerator.getPreviewForPDF([B)[B+21
j com.omc.ecom.customer.db.iphone.IAttachment.setThumbnail([B)V+59
j com.omc.ecom.customer.db.iphone.IAttachment.setImage([BZ)V+14
j com.omc.ecom.customer.db.iphone.IAttachment.setCompressImage([B)V+3
j com.omc.ecom.service.impl.UploadAttachService.importUploadAttachments(Lcom/otgs/ecom/base/dbaccess/UserInfo;IILcom/oreilly/servlet/MultipartRequest;Ljava/lang/String;)V+727
j com.otgs.ecom.web.ExpenseReports.Expenses.Attachments.UploadAttachController.uploadImport(Ljavax/servlet/http/HttpServletRequest;Lcom/otgs/ecom/base/dbaccess/UserInfo;II)V+75
j com.otgs.ecom.web.ExpenseReports.Expenses.Attachments.UploadAttachController.handleRequest(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)Lorg/springframework/web/servlet/ModelAndView;+319
j org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljava/lang/Object;)Lorg/springframework/web/servlet/ModelAndView;+6
j org.springframework.web.servlet.DispatcherServlet.doDispatch(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+279
j org.springframework.web.servlet.DispatcherServlet.doService(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+231
j org.springframework.web.servlet.FrameworkServlet.processRequest(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+111
j org.springframework.web.servlet.FrameworkServlet.doPost(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+3
j javax.servlet.http.HttpServlet.service(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V+139
j javax.servlet.http.HttpServlet.service(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+30
j org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+374
j org.apache.catalina.core.ApplicationFilterChain.doFilter(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V+101
j org.apache.catalina.core.StandardWrapperValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+778
J org.apache.catalina.core.StandardContextValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V
j org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+356
j org.jboss.web.tomcat.security.JaccContextValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+42
j org.apache.catalina.core.StandardHostValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+64
j org.apache.catalina.valves.ErrorReportValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+6
j org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+35
j org.apache.catalina.core.StandardEngineValve.invoke(Lorg/apache/catalina/connector/Request;Lorg/apache/catalina/connector/Response;)V+42
j org.apache.catalina.connector.CoyoteAdapter.service(Lorg/apache/coyote/Request;Lorg/apache/coyote/Response;)V+157
J org.apache.coyote.ajp.AjpAprProcessor.process(J)Z
j org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler.process(J)Lorg/apache/tomcat/util/net/AprEndpoint$Handler$SocketState;+39
j org.apache.tomcat.util.net.AprEndpoint$Worker.run()V+147
j java.lang.Thread.run()V+11
v ~StubRoutines::call_stub
--------------- P R O C E S S ---------------
Java Threads: ( => current thread )
0x68df6400 JavaThread "RMI RenewClean-[127.0.0.1:1098]" daemon [_thread_blocked, id=5140, stack(0x6e4f0000,0x6e540000)]
0x6857a400 JavaThread "JBoss System Threads(1)-76" daemon [_thread_blocked, id=2284, stack(0x6b6d0000,0x6b720000)]
0x6873dc00 JavaThread "RMI TCP Connection(679)-127.0.0.1" daemon [_thread_in_native, id=2268, stack(0x6ea40000,0x6ea90000)]
0x78095800 JavaThread "RMI TCP Connection(685)-127.0.0.1" daemon [_thread_in_native, id=4820, stack(0x6e9f0000,0x6ea40000)]
0x78095400 JavaThread "RMI TCP Connection(677)-127.0.0.1" daemon [_thread_in_native, id=2680, stack(0x6e9a0000,0x6e9f0000)]
0x69d4b400 JavaThread "RMI TCP Connection(689)-127.0.0.1" daemon [_thread_in_native, id=5688, stack(0x6e950000,0x6e9a0000)]
0x69502400 JavaThread "RMI TCP Connection(682)-127.0.0.1" daemon [_thread_in_native, id=332, stack(0x6e900000,0x6e950000)]
0x696e3400 JavaThread "RMI TCP Connection(683)-127.0.0.1" daemon [_thread_in_native, id=4372, stack(0x6e8b0000,0x6e900000)]
0x78043400 JavaThread "RMI TCP Connection(687)-127.0.0.1" daemon [_thread_in_native, id=4076, stack(0x6e860000,0x6e8b0000)]
0x696e3800 JavaThread "RMI TCP Connection(691)-127.0.0.1" daemon [_thread_in_native, id=5180, stack(0x6e630000,0x6e680000)]
0x6af8f400 JavaThread "RMI TCP Connection(695)-127.0.0.1" daemon [_thread_in_native, id=3800, stack(0x6e770000,0x6e7c0000)]
0x687af400 JavaThread "RMI TCP Connection(693)-127.0.0.1" daemon [_thread_in_native, id=4972, stack(0x6e720000,0x6e770000)]
0x78035800 JavaThread "RMI TCP Connection(694)-127.0.0.1" daemon [_thread_in_native, id=892, stack(0x6e680000,0x6e6d0000)]
0x6a628400 JavaThread "JBoss System Threads(1)-75" daemon [_thread_blocked, id=2596, stack(0x6e5e0000,0x6e630000)]
0x69a94800 JavaThread "JBoss System Threads(1)-73" daemon [_thread_blocked, id=4920, stack(0x6e540000,0x6e590000)]
0x69f2b800 JavaThread "JBoss System Threads(1)-72" daemon [_thread_blocked, id=4600, stack(0x6e220000,0x6e270000)]
0x69027400 JavaThread "JBoss System Threads(1)-71" daemon [_thread_blocked, id=1684, stack(0x6e0e0000,0x6e130000)]
0x780de400 JavaThread "RMI TCP Connection(697)-127.0.0.1" daemon [_thread_in_native, id=2360, stack(0x6e4a0000,0x6e4f0000)]
0x6824cc00 JavaThread "RMI TCP Connection(idle)" daemon [_thread_blocked, id=5736, stack(0x6e450000,0x6e4a0000)]
0x69770400 JavaThread "RMI TCP Connection(idle)" daemon [_thread_blocked, id=2404, stack(0x6e270000,0x6e2c0000)]
0x6a9aa800 JavaThread "JBoss System Threads(1)-70" daemon [_thread_blocked, id=3288, stack(0x6e180000,0x6e1d0000)]
0x685f1800 JavaThread "JBoss System Threads(1)-69" daemon [_thread_blocked, id=5460, stack(0x6e1d0000,0x6e220000)]
0x68246800 JavaThread "JBoss System Threads(1)-68" daemon [_thread_blocked, id=4708, stack(0x6e130000,0x6e180000)]
0x68ba2800 JavaThread "RMI TCP Connection(696)-127.0.0.1" daemon [_thread_in_native, id=3420, stack(0x6e6d0000,0x6e720000)]
0x69762000 JavaThread "ajp-127.0.0.1-8009-23" daemon [_thread_blocked, id=3120, stack(0x6dff0000,0x6e040000)]
0x66d20400 JavaThread "ajp-127.0.0.1-8009-22" daemon [_thread_blocked, id=5444, stack(0x6dfa0000,0x6dff0000)]
0x6898a800 JavaThread "EsamApiServer-3114" [_thread_in_native, id=1676, stack(0x6e400000,0x6e450000)]
0x68875c00 JavaThread "EsamApiServer-2805" [_thread_in_native, id=4384, stack(0x6e3b0000,0x6e400000)]
0x680c6800 JavaThread "EsamApiServer-2781" [_thread_in_native, id=2788, stack(0x6e360000,0x6e3b0000)]
0x68526400 JavaThread "EsamApiServer-2780" [_thread_in_native, id=5592, stack(0x6e310000,0x6e360000)]
0x68351400 JavaThread "EsamApiServer-2779" [_thread_in_native, id=5888, stack(0x6e2c0000,0x6e310000)]
0x6a247400 JavaThread "MultiThreadedHttpConnectionManager cleanup" daemon [_thread_blocked, id=2484, stack(0x6da00000,0x6da50000)]
0x68921800 JavaThread "ajp-127.0.0.1-8009-21" daemon [_thread_blocked, id=4896, stack(0x6e090000,0x6e0e0000)]
0x6a9a2400 JavaThread "ajp-127.0.0.1-8009-20" daemon [_thread_blocked, id=4792, stack(0x6e040000,0x6e090000)]
0x68969c00 JavaThread "Timer-6" [_thread_blocked, id=4588, stack(0x6daf0000,0x6db40000)]
0x68ca6400 JavaThread "ajp-127.0.0.1-8009-19" daemon [_thread_blocked, id=6048, stack(0x6daa0000,0x6daf0000)]
0x692b1400 JavaThread "ajp-127.0.0.1-8009-18" daemon [_thread_in_native, id=136, stack(0x6da50000,0x6daa0000)]
0x7948b400 JavaThread "EsamApiServer-1832" [_thread_in_native, id=4172, stack(0x6d9b0000,0x6da00000)]
0x67196400 JavaThread "EsamApiServer-1065" [_thread_in_native, id=5644, stack(0x6d7c0000,0x6d810000)]
0x6982b400 JavaThread "EsamApiServer-1064" [_thread_in_native, id=312, stack(0x6d750000,0x6d7a0000)]
0x68e54400 JavaThread "EsamApiServer-4998" [_thread_in_native, id=4760, stack(0x6d5a0000,0x6d5f0000)]
0x686fd400 JavaThread "EsamApiServer-4988" [_thread_in_native, id=2272, stack(0x6b680000,0x6b6d0000)]
0x6986c400 JavaThread "Thread-45" [_thread_in_native, id=3988, stack(0x6d670000,0x6d6c0000)]
0x68edd400 JavaThread "Connection listener 2" daemon [_thread_in_native, id=3652, stack(0x6d620000,0x6d670000)]
0x6909b800 JavaThread "AWT-Windows" daemon [_thread_in_native, id=1812, stack(0x6d550000,0x6d5a0000)]
0x69380400 JavaThread "Java2D Disposer" daemon [_thread_blocked, id=4676, stack(0x6d350000,0x6d3a0000)]
0x69e4d400 JavaThread "EsamApiServer-4933" [_thread_in_native, id=5236, stack(0x6d1a0000,0x6d1f0000)]
0x69ba0800 JavaThread "EsamApiServer-4931" [_thread_in_native, id=3156, stack(0x6d0f0000,0x6d140000)]
0x69c7c400 JavaThread "RMI Scheduler(0)" daemon [_thread_blocked, id=3680, stack(0x6d0a0000,0x6d0f0000)]
0x6a67f400 JavaThread "OOB-8,127.0.0.1:4869" [_thread_blocked, id=4468, stack(0x6b950000,0x6b9a0000)]
0x6908a400 JavaThread "EsamApiServer-4904" [_thread_in_native, id=4040, stack(0x6b900000,0x6b950000)]
0x69fadc00 JavaThread "OOB-7,127.0.0.1:4869" [_thread_blocked, id=4936, stack(0x6b8b0000,0x6b900000)]
0x671a0400 JavaThread "OOB-6,127.0.0.1:4869" [_thread_blocked, id=4568, stack(0x6b860000,0x6b8b0000)]
0x69436800 JavaThread "OOB-5,127.0.0.1:4869" [_thread_blocked, id=4152, stack(0x6b810000,0x6b860000)]
0x6a18e800 JavaThread "ajp-127.0.0.1-8009-17" daemon [_thread_blocked, id=5096, stack(0x6d150000,0x6d1a0000)]
0x68db8400 JavaThread "ajp-127.0.0.1-8009-16" daemon [_thread_blocked, id=4100, stack(0x6bbb0000,0x6bc00000)]
0x699a9400 JavaThread "ajp-127.0.0.1-8009-15" daemon [_thread_blocked, id=5632, stack(0x6bb60000,0x6bbb0000)]
0x69ac1400 JavaThread "ajp-127.0.0.1-8009-14" daemon [_thread_blocked, id=4212, stack(0x6d000000,0x6d050000)]
0x6931e400 JavaThread "ajp-127.0.0.1-8009-13" daemon [_thread_blocked, id=1916, stack(0x6cfb0000,0x6d000000)]
0x68c5f400 JavaThread "ajp-127.0.0.1-8009-12" daemon [_thread_blocked, id=5220, stack(0x6cf60000,0x6cfb0000)]
=>0x6a057400 JavaThread "ajp-127.0.0.1-8009-11" daemon [_thread_in_native, id=4788, stack(0x6cf10000,0x6cf60000)]
0x68cf9400 JavaThread "ajp-127.0.0.1-8009-10" daemon [_thread_blocked, id=4776, stack(0x6cec0000,0x6cf10000)]
0x66f2a400 JavaThread "ajp-127.0.0.1-8009-9" daemon [_thread_blocked, id=5972, stack(0x6ce70000,0x6cec0000)]
0x68430400 JavaThread "ajp-127.0.0.1-8009-8" daemon [_thread_in_native, id=3332, stack(0x6ce20000,0x6ce70000)]
0x689cb400 JavaThread "ajp-127.0.0.1-8009-7" daemon [_thread_blocked, id=1904, stack(0x6cdd0000,0x6ce20000)]
0x686ed800 JavaThread "ajp-127.0.0.1-8009-6" daemon [_thread_blocked, id=348, stack(0x6cd80000,0x6cdd0000)]
0x6957b400 JavaThread "ajp-127.0.0.1-8009-5" daemon [_thread_blocked, id=3424, stack(0x6cd30000,0x6cd80000)]
0x65b20800 JavaThread "ajp-127.0.0.1-8009-4" daemon [_thread_blocked, id=5988, stack(0x6cce0000,0x6cd30000)]
0x69c4bc00 JavaThread "ajp-127.0.0.1-8009-3" daemon [_thread_blocked, id=5904, stack(0x6cc90000,0x6cce0000)]
0x69c4b400 JavaThread "ajp-127.0.0.1-8009-2" daemon [_thread_blocked, id=4428, stack(0x6bc30000,0x6bc80000)]
0x6a706400 JavaThread "ajp-127.0.0.1-8009-1" daemon [_thread_blocked, id=5124, stack(0x65ee0000,0x65f30000)]
0x6604d400 JavaThread "ajp-127.0.0.1-8009-Acceptor-0" daemon [_thread_in_native, id=784, stack(0x6cc40000,0x6cc90000)]
0x6609e400 JavaThread "ajp-127.0.0.1-8009-CometPoller-7" daemon [_thread_blocked, id=4596, stack(0x6cbf0000,0x6cc40000)]
0x68699400 JavaThread "ajp-127.0.0.1-8009-CometPoller-6" daemon [_thread_blocked, id=5488, stack(0x6cba0000,0x6cbf0000)]
0x66e5f000 JavaThread "ajp-127.0.0.1-8009-CometPoller-5" daemon [_thread_blocked, id=3932, stack(0x6cb50000,0x6cba0000)]
0x69790800 JavaThread "ajp-127.0.0.1-8009-CometPoller-4" daemon [_thread_blocked, id=4540, stack(0x6cb00000,0x6cb50000)]
0x68ff2c00 JavaThread "ajp-127.0.0.1-8009-CometPoller-3" daemon [_thread_blocked, id=6116, stack(0x6cab0000,0x6cb00000)]
0x69d74400 JavaThread "ajp-127.0.0.1-8009-CometPoller-2" daemon [_thread_blocked, id=1412, stack(0x6ca60000,0x6cab0000)]
0x6a766400 JavaThread "ajp-127.0.0.1-8009-CometPoller-1" daemon [_thread_blocked, id=5876, stack(0x6ca10000,0x6ca60000)]
0x69421400 JavaThread "ajp-127.0.0.1-8009-CometPoller-0" daemon [_thread_blocked, id=1304, stack(0x6c9c0000,0x6ca10000)]
0x68836800 JavaThread "ajp-127.0.0.1-8009-Poller-7" daemon [_thread_in_native, id=3208, stack(0x6c970000,0x6c9c0000)]
0x68a40400 JavaThread "ajp-127.0.0.1-8009-Poller-6" daemon [_thread_in_native, id=2800, stack(0x6c920000,0x6c970000)]
0x68aa1400 JavaThread "ajp-127.0.0.1-8009-Poller-5" daemon [_thread_in_native, id=1776, stack(0x6c8d0000,0x6c920000)]
0x682f7800 JavaThread "ajp-127.0.0.1-8009-Poller-4" daemon [_thread_in_native, id=488, stack(0x6c480000,0x6c4d0000)]
0x66e64c00 JavaThread "ajp-127.0.0.1-8009-Poller-3" daemon [_thread_in_native, id=1800, stack(0x6c430000,0x6c480000)]
0x6a211400 JavaThread "ajp-127.0.0.1-8009-Poller-2" daemon [_thread_in_native, id=5668, stack(0x6c3e0000,0x6c430000)]
0x68bda400 JavaThread "ajp-127.0.0.1-8009-Poller-1" daemon [_thread_in_native, id=780, stack(0x6c390000,0x6c3e0000)]
0x6a20c400 JavaThread "ajp-127.0.0.1-8009-Poller-0" daemon [_thread_in_native, id=4976, stack(0x6c340000,0x6c390000)]
0x66037400 JavaThread "http-127.0.0.1-8080-Acceptor-0" daemon [_thread_in_native, id=964, stack(0x6c2f0000,0x6c340000)]
0x6921d400 JavaThread "http-127.0.0.1-8080-Sendfile-0" daemon [_thread_blocked, id=5556, stack(0x6c2a0000,0x6c2f0000)]
0x686ca800 JavaThread "http-127.0.0.1-8080-CometPoller-7" daemon [_thread_blocked, id=4440, stack(0x6c250000,0x6c2a0000)]
0x68c96400 JavaThread "http-127.0.0.1-8080-CometPoller-6" daemon [_thread_blocked, id=2024, stack(0x6c200000,0x6c250000)]
0x69f98800 JavaThread "http-127.0.0.1-8080-CometPoller-5" daemon [_thread_blocked, id=5788, stack(0x6c1b0000,0x6c200000)]
0x66ff9400 JavaThread "http-127.0.0.1-8080-CometPoller-4" daemon [_thread_blocked, id=4116, stack(0x6c160000,0x6c1b0000)]
0x68910400 JavaThread "http-127.0.0.1-8080-CometPoller-3" daemon [_thread_blocked, id=3884, stack(0x6c110000,0x6c160000)]
0x6a4f9400 JavaThread "http-127.0.0.1-8080-CometPoller-2" daemon [_thread_blocked, id=1052, stack(0x6c0c0000,0x6c110000)]
0x670abc00 JavaThread "http-127.0.0.1-8080-CometPoller-1" daemon [_thread_blocked, id=2892, stack(0x6c070000,0x6c0c0000)]
0x688b7000 JavaThread "http-127.0.0.1-8080-CometPoller-0" daemon [_thread_blocked, id=5928, stack(0x6c020000,0x6c070000)]
0x6a308400 JavaThread "http-127.0.0.1-8080-Poller-7" daemon [_thread_blocked, id=5892, stack(0x6bfd0000,0x6c020000)]
0x6a479400 JavaThread "http-127.0.0.1-8080-Poller-6" daemon [_thread_blocked, id=4064, stack(0x6bf80000,0x6bfd0000)]
0x687dd800 JavaThread "http-127.0.0.1-8080-Poller-5" daemon [_thread_blocked, id=1816, stack(0x6bd30000,0x6bd80000)]
0x68f9a400 JavaThread "http-127.0.0.1-8080-Poller-4" daemon [_thread_blocked, id=5380, stack(0x6bce0000,0x6bd30000)]
0x6a46f400 JavaThread "http-127.0.0.1-8080-Poller-3" daemon [_thread_blocked, id=4696, stack(0x6bc90000,0x6bce0000)]
0x69308800 JavaThread "http-127.0.0.1-8080-Poller-2" daemon [_thread_blocked, id=3072, stack(0x6bb10000,0x6bb60000)]
0x6a67fc00 JavaThread "http-127.0.0.1-8080-Poller-1" daemon [_thread_blocked, id=3836, stack(0x6bac0000,0x6bb10000)]
0x6a46fc00 JavaThread "http-127.0.0.1-8080-Poller-0" daemon [_thread_blocked, id=5228, stack(0x6ba70000,0x6bac0000)]
0x6a316800 JavaThread "Thread-5" [_thread_blocked, id=5192, stack(0x6ba20000,0x6ba70000)]
0x6a50a000 JavaThread "JBossLifeThread" [_thread_blocked, id=3444, stack(0x6b9d0000,0x6ba20000)]
0x66fe1400 JavaThread "EsamApiServer" [_thread_in_native, id=4572, stack(0x6b7c0000,0x6b810000)]
0x68b4c400 JavaThread "Thread-25" [_thread_blocked, id=5796, stack(0x6b770000,0x6b7c0000)]
0x685c0800 JavaThread "Thread-24" [_thread_blocked, id=4260, stack(0x6b720000,0x6b770000)]
0x693b5800 JavaThread "Thread-21" [_thread_blocked, id=2768, stack(0x6b630000,0x6b680000)]
0x694ba400 JavaThread "Timer-5" [_thread_blocked, id=4220, stack(0x6b5e0000,0x6b630000)]
0x6a0bb800 JavaThread "Thread-19" [_thread_blocked, id=5752, stack(0x6b590000,0x6b5e0000)]
0x697cbc00 JavaThread "Thread-18" [_thread_blocked, id=132, stack(0x6b540000,0x6b590000)]
0x68976400 JavaThread "OOB-4,127.0.0.1:4869" [_thread_blocked, id=3432, stack(0x6b4f0000,0x6b540000)]
0x68aafc00 JavaThread "OOB-3,127.0.0.1:4869" [_thread_blocked, id=5916, stack(0x6b4a0000,0x6b4f0000)]
0x66e81400 JavaThread "ConnectionValidator" daemon [_thread_blocked, id=3044, stack(0x6b450000,0x6b4a0000)]
0x69007c00 JavaThread "IdleRemover" daemon [_thread_blocked, id=1760, stack(0x6b400000,0x6b450000)]
0x69f33400 JavaThread "Thread-17" [_thread_blocked, id=2040, stack(0x6b3b0000,0x6b400000)]
0x68d85400 JavaThread "PipelineJobScheduler" [_thread_blocked, id=2560, stack(0x6b360000,0x6b3b0000)]
0x69fc1c00 JavaThread "Timer-4,127.0.0.1:4869" daemon [_thread_blocked, id=1944, stack(0x6b310000,0x6b360000)]
0x69d20c00 JavaThread "Timer-3,127.0.0.1:4869" daemon [_thread_blocked, id=3416, stack(0x6b2c0000,0x6b310000)]
0x68f63c00 JavaThread "OOB-2,127.0.0.1:4869" [_thread_blocked, id=5076, stack(0x6b270000,0x6b2c0000)]
0x68d6dc00 JavaThread "OOB-1,127.0.0.1:4869" [_thread_blocked, id=1732, stack(0x6b220000,0x6b270000)]
0x69efb400 JavaThread "Timer-2,127.0.0.1:4869" daemon [_thread_blocked, id=5072, stack(0x6b1d0000,0x6b220000)]
0x68f8bc00 JavaThread "UDP mcast,127.0.0.1:4869" [_thread_in_native, id=812, stack(0x6b180000,0x6b1d0000)]
0x69f35c00 JavaThread "UDP ucast,127.0.0.1:4869" [_thread_in_native, id=4092, stack(0x6b130000,0x6b180000)]
0x68845800 JavaThread "FD_SOCK server socket acceptor,null" daemon [_thread_in_native, id=3008, stack(0x6b0e0000,0x6b130000)]
0x69fcfc00 JavaThread "Timer-1,127.0.0.1:4869" daemon [_thread_blocked, id=4852, stack(0x6b090000,0x6b0e0000)]
0x68126400 JavaThread "Timer-4" [_thread_blocked, id=5760, stack(0x67eb0000,0x67f00000)]
0x696eb400 JavaThread "Timer-3" [_thread_blocked, id=2996, stack(0x67e60000,0x67eb0000)]
0x692b5400 JavaThread "Timer-2" [_thread_blocked, id=5680, stack(0x67e10000,0x67e60000)]
0x69684400 JavaThread "reaper:handler" daemon [_thread_blocked, id=384, stack(0x67dc0000,0x67e10000)]
0x68b14400 JavaThread "reaper:user" daemon [_thread_blocked, id=4636, stack(0x67d70000,0x67dc0000)]
0x691d1800 JavaThread "reaper:template" daemon [_thread_blocked, id=4264, stack(0x67d20000,0x67d70000)]
0x68f8b400 JavaThread "reaper:config" daemon [_thread_blocked, id=2852, stack(0x67cd0000,0x67d20000)]
0x68ead400 JavaThread "org.webmacro.util.ThreadScheduler" daemon [_thread_blocked, id=2148, stack(0x67c80000,0x67cd0000)]
0x68a62400 JavaThread "UILServerILService Accept Thread" [_thread_in_native, id=4968, stack(0x67c30000,0x67c80000)]
0x65cfb400 JavaThread "TimeoutFactory-0" daemon [_thread_blocked, id=4396, stack(0x67be0000,0x67c30000)]
0x68b15800 JavaThread "JCA PoolFiller" [_thread_blocked, id=2972, stack(0x67b90000,0x67be0000)]
0x68761400 JavaThread "Timer-1" daemon [_thread_blocked, id=1552, stack(0x67b40000,0x67b90000)]
0x66d8a400 JavaThread "HSQLDB Timer @1826ac5" daemon [_thread_blocked, id=2744, stack(0x679f0000,0x67a40000)]
0x6706e400 JavaThread "DefaultQuartzScheduler_QuartzSchedulerThread" [_thread_blocked, id=3308, stack(0x679a0000,0x679f0000)]
0x689b3400 JavaThread "DefaultQuartzScheduler_Worker-9" [_thread_blocked, id=3868, stack(0x67950000,0x679a0000)]
0x685a3400 JavaThread "DefaultQuartzScheduler_Worker-8" [_thread_blocked, id=680, stack(0x67900000,0x67950000)]
0x683af800 JavaThread "DefaultQuartzScheduler_Worker-7" [_thread_blocked, id=5336, stack(0x678b0000,0x67900000)]
0x68433800 JavaThread "DefaultQuartzScheduler_Worker-6" [_thread_blocked, id=3084, stack(0x677d0000,0x67820000)]
0x68751400 JavaThread "DefaultQuartzScheduler_Worker-5" [_thread_blocked, id=2676, stack(0x67780000,0x677d0000)]
0x68568800 JavaThread "DefaultQuartzScheduler_Worker-4" [_thread_blocked, id=3040, stack(0x67730000,0x67780000)]
0x66396400 JavaThread "DefaultQuartzScheduler_Worker-3" [_thread_blocked, id=1920, stack(0x676e0000,0x67730000)]
0x68601000 JavaThread "DefaultQuartzScheduler_Worker-2" [_thread_blocked, id=5676, stack(0x67690000,0x676e0000)]
0x69126400 JavaThread "DefaultQuartzScheduler_Worker-1" [_thread_blocked, id=1628, stack(0x67640000,0x67690000)]
0x68949800 JavaThread "DefaultQuartzScheduler_Worker-0" [_thread_blocked, id=2824, stack(0x675f0000,0x67640000)]
0x66e21800 JavaThread "WorkManager(2)-1" daemon [_thread_blocked, id=148, stack(0x675a0000,0x675f0000)]
0x69622400 JavaThread "Thread-6" daemon [_thread_blocked, id=2700, stack(0x67550000,0x675a0000)]
0x683b7400 JavaThread "JBossMQ Cache Reference Softner" daemon [_thread_blocked, id=2792, stack(0x67860000,0x678b0000)]
0x671d6400 JavaThread "ContainerBackgroundProcessor[StandardEngine[jboss.web]]" daemon [_thread_blocked, id=5196, stack(0x67500000,0x67550000)]
0x66f58400 JavaThread "SubscriptionWatchDog" [_thread_blocked, id=2776, stack(0x66a00000,0x66a50000)]
0x66d54c00 JavaThread "ServerSocketRefresh" daemon [_thread_blocked, id=3440, stack(0x669b0000,0x66a00000)]
0x66d1ac00 JavaThread "AcceptorThread#0:3873" [_thread_in_native, id=292, stack(0x66960000,0x669b0000)]
0x66da3c00 JavaThread "ServerSocketRefresh" daemon [_thread_blocked, id=4752, stack(0x66910000,0x66960000)]
0x662bb400 JavaThread "AcceptorThread#0:4446" [_thread_in_native, id=2764, stack(0x668c0000,0x66910000)]
0x66146800 JavaThread "PooledInvokerAcceptor#0-4445" [_thread_in_native, id=2572, stack(0x66870000,0x668c0000)]
0x66e88c00 JavaThread "RMI TCP Accept-4444" daemon [_thread_in_native, id=4312, stack(0x66820000,0x66870000)]
0x66e88400 JavaThread "Listener:4844" daemon [_thread_in_native, id=1896, stack(0x667d0000,0x66820000)]
0x66e72400 JavaThread "Thread-4" daemon [_thread_blocked, id=1084, stack(0x66780000,0x667d0000)]
0x66d09800 JavaThread "Thread-3" daemon [_thread_blocked, id=2872, stack(0x66730000,0x66780000)]
0x66c09400 JavaThread "Listener:4840" daemon [_thread_in_native, id=1948, stack(0x666e0000,0x66730000)]
0x660b7400 JavaThread "JBoss System Threads(1)-2" daemon [_thread_in_native, id=5172, stack(0x66690000,0x666e0000)]
0x662f2800 JavaThread "GC Daemon" daemon [_thread_blocked, id=4436, stack(0x66640000,0x66690000)]
0x662f2000 JavaThread "RMI Reaper" [_thread_blocked, id=3888, stack(0x665f0000,0x66640000)]
0x66eabc00 JavaThread "RMI TCP Accept-1098" daemon [_thread_in_native, id=1528, stack(0x665a0000,0x665f0000)]
0x661cfc00 JavaThread "JBoss System Threads(1)-1" daemon [_thread_in_native, id=3024, stack(0x66550000,0x665a0000)]
0x66dd6800 JavaThread "ScannerThread" daemon [_thread_blocked, id=3088, stack(0x66460000,0x664b0000)]
0x66c12400 JavaThread "Timer-0" daemon [_thread_blocked, id=5260, stack(0x66410000,0x66460000)]
0x002a8c00 JavaThread "DestroyJavaVM" [_thread_blocked, id=2228, stack(0x00640000,0x00690000)]
0x65b15800 JavaThread "Low Memory Detector" daemon [_thread_blocked, id=4988, stack(0x65e40000,0x65e90000)]
0x65b13400 JavaThread "CompilerThread1" daemon [_thread_blocked, id=1408, stack(0x65df0000,0x65e40000)]
0x65b0d800 JavaThread "CompilerThread0" daemon [_thread_blocked, id=3304, stack(0x65da0000,0x65df0000)]
0x65b0c000 JavaThread "Attach Listener" daemon [_thread_blocked, id=1480, stack(0x65d50000,0x65da0000)]
0x65b0a800 JavaThread "Surrogate Locker Thread (CMS)" daemon [_thread_blocked, id=1456, stack(0x65d00000,0x65d50000)]
0x623ad400 JavaThread "Finalizer" daemon [_thread_blocked, id=1320, stack(0x65ab0000,0x65b00000)]
0x623abc00 JavaThread "Reference Handler" daemon [_thread_blocked, id=2780, stack(0x65a60000,0x65ab0000)]
Other Threads:
0x623a9400 VMThread [stack: 0x65a10000,0x65a60000] [id=5344]
0x65b17800 WatcherThread [stack: 0x65e90000,0x65ee0000] [id=456]
VM state:not at safepoint (normal execution)
VM Mutex/Monitor currently owned by a thread: None
Heap
par new generation total 29504K, used 10015K [0x037f0000, 0x057f0000, 0x057f0000)
eden space 26240K, 26% used [0x037f0000, 0x03ed3a50, 0x05190000)
from space 3264K, 90% used [0x054c0000, 0x057a41e0, 0x057f0000)
to space 3264K, 0% used [0x05190000, 0x05190000, 0x054c0000)
concurrent mark-sweep generation total 991232K, used 569428K [0x057f0000, 0x41ff0000, 0x41ff0000)
concurrent-mark-sweep perm gen total 195336K, used 116938K [0x41ff0000, 0x4deb2000, 0x61ff0000)
Dynamic libraries:
0x00400000 - 0x00424000 C:\Java\jdk1.6.0_18\bin\java.exe
0x7c800000 - 0x7c8c3000 C:\WINDOWS\system32\ntdll.dll
0x77e40000 - 0x77f42000 C:\WINDOWS\system32\kernel32.dll
0x7d1e0000 - 0x7d27c000 C:\WINDOWS\system32\ADVAPI32.dll
0x77c50000 - 0x77cf0000 C:\WINDOWS\system32\RPCRT4.dll
0x76f50000 - 0x76f63000 C:\WINDOWS\system32\Secur32.dll
0x7c340000 - 0x7c396000 C:\Java\jdk1.6.0_18\jre\bin\msvcr71.dll
0x6db70000 - 0x6df9b000 C:\Java\jdk1.6.0_18\jre\bin\server\jvm.dll
0x77380000 - 0x77411000 C:\WINDOWS\system32\USER32.dll
0x77c00000 - 0x77c49000 C:\WINDOWS\system32\GDI32.dll
0x76aa0000 - 0x76acd000 C:\WINDOWS\system32\WINMM.dll
0x76290000 - 0x762ad000 C:\WINDOWS\system32\IMM32.DLL
0x71bc0000 - 0x71bc8000 C:\WINDOWS\system32\rdpsnd.dll
0x771f0000 - 0x77201000 C:\WINDOWS\system32\WINSTA.dll
0x77ba0000 - 0x77bfa000 C:\WINDOWS\system32\msvcrt.dll
0x71c40000 - 0x71c97000 C:\WINDOWS\system32\NETAPI32.dll
0x76b70000 - 0x76b7b000 C:\WINDOWS\system32\PSAPI.DLL
0x6d860000 - 0x6d86c000 C:\Java\jdk1.6.0_18\jre\bin\verify.dll
0x6d3e0000 - 0x6d3ff000 C:\Java\jdk1.6.0_18\jre\bin\java.dll
0x6d340000 - 0x6d348000 C:\Java\jdk1.6.0_18\jre\bin\hpi.dll
0x6d8a0000 - 0x6d8af000 C:\Java\jdk1.6.0_18\jre\bin\zip.dll
0x6d6c0000 - 0x6d6d3000 C:\Java\jdk1.6.0_18\jre\bin\net.dll
0x71c00000 - 0x71c17000 C:\WINDOWS\system32\WS2_32.dll
0x71bf0000 - 0x71bf8000 C:\WINDOWS\system32\WS2HELP.dll
0x71b20000 - 0x71b61000 C:\WINDOWS\System32\mswsock.dll
0x76ed0000 - 0x76efa000 C:\WINDOWS\system32\DNSAPI.dll
0x76f70000 - 0x76f77000 C:\WINDOWS\System32\winrnr.dll
0x76f10000 - 0x76f3e000 C:\WINDOWS\system32\WLDAP32.dll
0x76f80000 - 0x76f85000 C:\WINDOWS\system32\rasadhlp.dll
0x6d610000 - 0x6d619000 C:\Java\jdk1.6.0_18\jre\bin\management.dll
0x68000000 - 0x68035000 C:\WINDOWS\system32\rsaenh.dll
0x7c8d0000 - 0x7d0cf000 C:\WINDOWS\system32\SHELL32.dll
0x7d180000 - 0x7d1d2000 C:\WINDOWS\system32\SHLWAPI.dll
0x77420000 - 0x77523000 C:\WINDOWS\WinSxS\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.3790.4770_x-ww_05FDF087\comctl32.dll
0x664b0000 - 0x6650a000 C:\WINDOWS\system32\hnetcfg.dll
0x71ae0000 - 0x71ae8000 C:\WINDOWS\System32\wshtcpip.dll
0x66a50000 - 0x66a6c000 C:\jboss-4.2.3.GA\bin\native\libtcnative-1.dll
0x66a70000 - 0x66a95000 C:\jboss-4.2.3.GA\bin\native\libapr-1.dll
0x66aa0000 - 0x66ba7000 C:\jboss-4.2.3.GA\bin\native\LIBEAY32.dll
0x71bb0000 - 0x71bb9000 C:\WINDOWS\system32\WSOCK32.dll
0x66bb0000 - 0x66be2000 C:\jboss-4.2.3.GA\bin\native\SSLEAY32.dll
0x6d6e0000 - 0x6d6e9000 C:\Java\jdk1.6.0_18\jre\bin\nio.dll
0x6d840000 - 0x6d848000 C:\Java\jdk1.6.0_18\jre\bin\sunmscapi.dll
0x761b0000 - 0x76243000 C:\WINDOWS\system32\CRYPT32.dll
0x76190000 - 0x761a2000 C:\WINDOWS\system32\MSASN1.dll
0x76cf0000 - 0x76d0a000 C:\WINDOWS\system32\iphlpapi.dll
0x76cd0000 - 0x76ce9000 C:\WINDOWS\system32\MPRAPI.dll
0x76df0000 - 0x76e24000 C:\WINDOWS\system32\ACTIVEDS.dll
0x76dc0000 - 0x76de8000 C:\WINDOWS\system32\adsldpc.dll
0x76b80000 - 0x76bae000 C:\WINDOWS\system32\credui.dll
0x76a80000 - 0x76a92000 C:\WINDOWS\system32\ATL.DLL
0x77670000 - 0x777a9000 C:\WINDOWS\system32\ole32.dll
0x7d0e0000 - 0x7d16b000 C:\WINDOWS\system32\OLEAUT32.dll
0x76e30000 - 0x76e3c000 C:\WINDOWS\system32\rtutils.dll
0x7e020000 - 0x7e02f000 C:\WINDOWS\system32\SAMLIB.dll
0x770e0000 - 0x771e8000 C:\WINDOWS\system32\SETUPAPI.dll
0x6d7b0000 - 0x6d7b6000 C:\Java\jdk1.6.0_18\jre\bin\rmi.dll
0x6d1f0000 - 0x6d33a000 C:\Java\jdk1.6.0_18\jre\bin\awt.dll
0x73070000 - 0x73097000 C:\WINDOWS\system32\WINSPOOL.DRV
0x6b9a0000 - 0x6b9c4000 C:\Java\jdk1.6.0_18\jre\bin\jpeg.dll
0x6d6f0000 - 0x6d744000 C:\Java\jdk1.6.0_18\jre\bin\fontmanager.dll
0x6b040000 - 0x6b06f000 C:\Java\jdk1.6.0_18\jre\bin\cmm.dll
0x6d500000 - 0x6d523000 C:\Java\jdk1.6.0_18\jre\bin\dcpr.dll
0x762b0000 - 0x762f9000 C:\WINDOWS\system32\COMDLG32.DLL
VM Arguments:
jvm_args: -Xrs -Djava.library.path=C:\jboss-4.2.3.GA\bin\native;C:\Perl\site\bin;C:\Perl\bin;C:\Program Files\Support Tools\;C:\Program Files\Windows Resource Kits\Tools\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\system32\WindowsPowerShell\v1.0;C:\GSI-TOOLS\bin;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\VSShell\Common7\IDE\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;C:\Java\jdk1.6.0_18\bin; -Dprogram.name=run.bat -Xms1000m -Xmx1000m -Xrs -XX:PermSize=128m -XX:MaxPermSize=512m -XX:+UseConcMarkSweepGC -XX:+CMSPermGenSweepingEnabled -XX:+CMSClassUnloadingEnabled -XX:-ReduceInitialCardMarks -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000 -XX:CompileCommand=exclude,net/sf/saxon/event/ReceivingContentHandler,startElement -Djava.endorsed.dirs=C:\jboss-4.2.3.GA\lib\endorsed
java_command: org.jboss.Main
Launcher Type: SUN_STANDARD
Environment Variables:
JAVA_HOME=C:\Java\jdk1.6.0_18
PATH=C:\jboss-4.2.3.GA\bin\native;C:\Perl\site\bin;C:\Perl\bin;C:\Program Files\Support Tools\;C:\Program Files\Windows Resource Kits\Tools\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\system32\WindowsPowerShell\v1.0;C:\GSI-TOOLS\bin;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\VSShell\Common7\IDE\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;C:\Java\jdk1.6.0_18\bin;
OS=Windows_NT
PROCESSOR_IDENTIFIER=x86 Family 16 Model 2 Stepping 3, AuthenticAMD
--------------- S Y S T E M ---------------
OS: Windows Server 2003 family Build 3790 Service Pack 2
CPU:total 2 (4 cores per cpu, 1 threads per core) family 16 model 2 stepping 3, cmov, cx8, fxsr, mmx, sse, sse2, sse3, popcnt, mmxext, 3dnow, 3dnowext, lzcnt, sse4a
Memory: 4k page, physical 4193500k(1696908k free), swap 6115232k(3935444k free)
vm_info: Java HotSpot(TM) Server VM (16.0-b13) for windows-x86 JRE (1.6.0_18-b07), built on Dec 17 2009 13:29:37 by "java_re" with MS VC++ 7.1 (VS2003)
time: Wed Oct 10 16:01:50 2012
elapsed time: 8411 seconds",0,"Andreas Lehmkühler","Alejandro Cerdas",2,9,"10/Oct/12 21:43","17/Mar/16 19:07","04/Aug/13 09:50"
PDFBOX-1427,PDFBOX,"PDF page rotation is not working",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,PDModel,patch,ubuntu,"PDFToImage creates empty images when PDF with page rotation is provided as input. Rotation logic in PDPage is not correct. Because of this problem PDF contents are rendered outside the graphics area. Hence it creates empty images. Patch file is below. Tested on pdf http://eeweb.poly.edu/~yao/EE3414/image_filtering.pdf
---------------------------------------------------------------------
— /data/pdf/pdfbox/pdfbox-svn/trunk/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java 2012-10-14 08:45:34.275123749 +0530
+++ /data/pdf/pdfbox/pdfbox-1.7.1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java 2012-10-14 13:37:16.887054874 +0530
@@ -708,8 +708,13 @@
//TODO The following reduces accuracy. It should really be a Dimension2D.Float.
Dimension pageDimension = new Dimension( (int)widthPt, (int)heightPt );
BufferedImage retval = null;
float rotation = (float)Math.toRadians(findRotation());
if (rotation != 0)
+ int rotationAngle = findRotation();
+ //PDF spec does not say rotation angle should be within 360 degrees
+ //Restrict rotation to -360 to +360 degrees range.
+ rotationAngle = rotationAngle % 360;
+ float rotation = (float)Math.toRadians(rotationAngle);
+ //Flip the image horizontally only for +/-90 and +/-270 degree rotation
+ if ((rotationAngle % 180) != 0) { retval = new BufferedImage( heightPx, widthPx, imageType ); }
@@ -722,7 +727,26 @@
graphics.clearRect( 0, 0, retval.getWidth(), retval.getHeight() );
if (rotation != 0)
{
graphics.translate(retval.getWidth(), 0.0f);
+ int translateX = 0;
+ int translateY = 0;
+ switch(rotationAngle) { + case -270: + case 90: + translateX = retval.getWidth(); + break; + + case -90: + case 270: + translateY = retval.getHeight(); + break; + + case -180: + case 180: + translateX = retval.getWidth(); + translateY = retval.getHeight(); + break; + }
+ graphics.translate(translateX,translateY);
graphics.rotate(rotation);
}
graphics.scale( scaling, scaling );
---------------------------------------------------------------------",0,"Andreas Lehmkühler","Ravi Hegde",0,3,"14/Oct/12 08:30","23/Mar/13 12:56","14/Oct/12 12:38"
PDFBOX-1428,PDFBOX,"PDFBox fails to extract field values from FDF eform",Bug,CLOSED,Major,"Cannot Reproduce",1.6.0,None,AcroForm,None,"windows 7","PDFBox is unable to extract the values from the fields for the attached form; however the values can be clearly seen in acrobat, sumatra, pdfgears, etc.",0,"Andreas Lehmkühler","Patrick Nichols",0,3,"15/Oct/12 18:11","24/Oct/14 17:38","24/Oct/14 17:38"
PDFBOX-1431,PDFBOX,"Some pdfss created by ABBY trigger a NPE",Bug,CLOSED,Critical,Fixed,1.7.1,1.8.0,PDModel,None,,"I created this issue based on a git pull request of Gustavo Moreira
"PDFBox was throwing a NullPointerException when the PDF file did not provide the COSName.TYPE information. In a PDF created by ABBY (PDF version 1.7), this information is missing, but the Font SubType and the BaseFont still there, so the content can still be extracted correctly.
In PDFontFactory was just changed the Font information retrieve, a implemented a fallback for the missing information."",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"28/Oct/12 10:50","23/Mar/13 12:56","28/Oct/12 11:06"
PDFBOX-1432,PDFBOX,"PDF rotation problem",Bug,CLOSED,Major,Fixed,1.8.0,1.8.0,PDModel,None,ubuntu,"Rotation logic in org.apache.pdfbox.pdmodel.PDPage on line 721 is not right. Page width and height should be swapped only if the rotation is 90 degree or 270 degree. Page width and height should not be swapped for 0, 180 or 360 degree rotation. Condition on line 721 should be
if ((rotationAngle == 90) || (rotationAngle == 270))
Patch:
===================================================================
— PDPage.java (revision 1402957)
+++ PDPage.java (working copy)
@@ -718,7 +718,7 @@
{ rotationAngle -= 360; }
if (rotationAngle != 0)
+ if ((rotationAngle == 90) || (rotationAngle == 270)) { retval = new BufferedImage( heightPx, widthPx, imageType ); }
===================================================================",0,"Andreas Lehmkühler","Ravi Hegde",0,2,"28/Oct/12 15:55","23/Mar/13 12:56","01/Nov/12 13:53"
PDFBOX-1434,PDFBOX,"Font being changed after form field is set",Bug,CLOSED,Minor,Fixed,1.7.1,1.8.0,AcroForm,"fields font","windows xp, java 1.6","We have encounter a problem when using pdfbox.
We have a pdf form with fields and font set to Courier (please see attached pdf file PRP.pdf).
After running the program TEstbed1.java which tries to set the value of one of the fields, font was being changed to Helvetica (please see attached pdf file forms26916.pdf).
Is there any way we can set the values and retain the original font?",0,"Eric Leleu","Eugene Chang",0,3,"31/Oct/12 04:56","19/Jul/14 11:45","08/Nov/12 21:54"
PDFBOX-1435,PDFBOX,"text is obscured by the Images",Bug,CLOSED,Major,Fixed,1.7.1,2.0.0,"Swing GUI",None,,"text is obscured by the Images,and Images is showed in reversed color.",0,"Andreas Lehmkühler",huangchangan,0,3,"01/Nov/12 07:07","17/Mar/16 19:08","29/Sep/13 17:40"
PDFBOX-1436,PDFBOX,"Embedded font can't be read",Bug,CLOSED,Major,Duplicate,1.7.1,None,"Swing GUI",None,"windows , ubuntu","I have a pdf that has embedded fonts. When I load the file with the pdfbox-app-1.7.1.jar PDFReader I get the message below. When I look at the PDF the characters are not rendered properly. This works properly on PDF readers of the Ipad, iOS, and AdobeAcrobat windows.
Nov 02, 2012 10:53:21 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont
INFO: Can't read the embedded font HMKLBW+HelveticaNeue-Bold
Nov 02, 2012 10:53:22 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont
INFO: Using font Arial instead",0,"Andreas Lehmkühler","George Bradley",0,3,"02/Nov/12 15:21","05/Aug/13 10:59","03/Nov/12 15:12"
PDFBOX-1437,PDFBOX,"Title invalidly read in DocumentInformation",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,PDModel,None,,"The value returned by document.getDocumentInformation().getTitle() is invalid with the attached document.
The last character is badly deserialized.
The method returns
Microsoft Word - LA_LAN01-#230492-v1-j2-Zilker_-_Motion_for_Letters_RogatorÂ
Adobe reader proposes :
Microsoft Word - LA_LAN01-#230492-v1-j2-Zilker_-_Motion_for_Letters_Rogator…
with a HORIZONTAL ELLIPSIS",0,"Jeremias Maerki","Guillaume Bailleul",0,1,"03/Nov/12 07:49","29/May/14 10:14","29/May/14 10:14"
PDFBOX-1438,PDFBOX,"Problems with Image Extraction from PDF",Bug,CLOSED,Major,"Not A Problem",1.7.1,None,None,None,"windows xp","PDFBox don't extract images from pdf document correctly",0,"Andreas Lehmkühler","Christian Czech",0,3,"06/Nov/12 08:08","08/Dec/12 13:35","08/Dec/12 13:35"
PDFBOX-1439,PDFBOX,"Problems with Image Extraction from PDF",Improvement,CLOSED,Major,Fixed,1.7.1,1.8.0,None,None,"windows xp, java 1.6","PDBBox don't extract images from pdf document correctly",0,"Andreas Lehmkühler","Christian Czech",0,2,"06/Nov/12 08:47","02/May/13 02:29","18/Nov/12 15:30"
PDFBOX-1440,PDFBOX,"Garbled image from PDFToImage",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,None,None,"ubuntu, java","For the attached PDF-file, PDFToImage produces an incorrect jpg-file. The PDF file is generated by the scan-to-pdf-function of a Hewlett Packard Officejet Pro 8600, and all the pdf's created like this exhibit the same problem. command : java -jar pdfbox-app-1.7.1.jar PDFToImage scan.pdf",0,"Andreas Lehmkühler","Geert Rombouts",0,3,"06/Nov/12 15:03","23/Mar/13 12:56","07/Nov/12 21:11"
PDFBOX-1442,PDFBOX,"bar chart converted from PDF is totally a black area.",Bug,CLOSED,Major,Fixed,"1.7.1, (6)",2.0.0,Rendering,"shading shadingpatte",,"The bar charts converted from PDF is totally a black area. The code is as following:
                 
PDFImageWriter imageWriter = new PDFImageWriter();
boolean success = imageWriter.writeImage(document, imageFormat, password, startPage, endPage, outputPrefix, imageType, resolution);
if (!success)
{
  logger.error( "Error: no writer found for image format '" + imageFormat + "'" );
         System.exit(1);
}
I will attach the ppt and PNG files later",0,"Tilman Hausherr","James Zhou",1,4,"09/Nov/12 08:25","17/Mar/16 19:08","30/Aug/14 19:04"
PDFBOX-1443,PDFBOX,"Images are rendered blank",Bug,CLOSED,Major,Fixed,None,1.8.0,None,None,,"We are not processing the following segment correctly.. I have added the -> and command for clarity
q -> GSave
Q -> QRestore
q -> GSave
W -> ClipNonZeroRule
0 0 m -> MoveTo
612 0 l -> LineTo
612 792 l -> LineTo
0 792 l -> LineTo
h -> ClosePath
n -> EndPath
q -> GSave
612 0 0 792 0 0 cm ->Concatenate
/I13 Do -> Invoke
Q -> QRestore
Q -> QRestore
The problem is 'W' or ClipNonZeroRule. According to the spec 8.5.4
Although the clipping path operator appears before the painting operator, it shall not alter the clipping path at the point where it appears. Rather, it shall modify the effect of the succeeding painting operator. After the path has been painted, the clipping path in the graphics state shall be set to the intersection of the current clipping path and the newly constructed path.
About the n (EndPath) operator
The n operator (see Table 60) is a no-op path-painting operator; it shall cause no marks to be placed on the page, but can be used with a clipping path operator to establish a new clipping path. That is, after a path has been constructed, the sequence W n shall intersect that path with the current clipping path and shall establish a new clipping path.
Currently in ClipNonZeroRule.java and ClipEvenOddRule.java we do
drawer.setClippingPath(GeneralPath.WIND_NON_ZERO);
This applies the current path and resets.
I believe we should ...
drawer.setCurrentWindingRule(GeneralPath.WIND_NON_ZERO);
and
drawer.setCurrentWindingRule(GeneralPath.WIND_NON_ZERO);
and in PageDrawer.java add
int currentWindingRule = -1;
public void setCurrentWindingRule(int windingRule)
{ currentWindingRule=windingRule; }
public void setClippingWindingRule()
{
if(currentWindingRule == -1)
{ return; }
setClippingPath(currentWindingRule);
currentWindingRule=-1;
}
Then in EndPath.java
drawer.setClippingWindingRule();",0,"Andreas Lehmkühler","Dave Smith",0,2,"09/Nov/12 14:26","23/Mar/13 12:56","10/Nov/12 17:50"
PDFBOX-1445,PDFBOX,"/ImageMask true does not work. Patch included.",Bug,CLOSED,Major,Fixed,None,1.8.0,None,None,,"I have the following pdf...
10 0 obj
<<
/Type /Page
/MediaBox [ 0 0 612.0 792.0 ]
/Parent 3 0 R
/Resources << /XObject << /Obj4 4 0 R /Obj5 5 0 R /Obj6 6 0 R /Obj7 7 0 R >> /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >>
/Contents [ 8 0 R 9 0 R ]
>>
endobj
Which then draws 4 images. The first one is a "base" and then rest are image masks
9 0 obj
<< /Filter /FlateDecode /Length 121 >>
stream
q
612.00 0 0 792.00 0.00 0.00 cm
/Obj4 Do
Q
q
0.129 g
524.16 0 0 556.80 48.00 127.68 cm
/Obj5 Do
Q
q
0.302 g
220.80 0 0 398.40 48.00 286.08 cm
/Obj6 Do
Q
q
0.204 g
524.16 0 0 469.44 48.00 185.28 cm
/Obj7 Do
Q
endstream
endobj
4 0 obj
<< /Type /XObject /Subtype /Image /Width 1275 /Height 1650 /BitsPerComponent 8
/ColorSpace /DeviceGray /Filter [ /FlateDecode /DCTDecode ] /Length 50485 >>
stream
endstream
endobj
5 0 obj
<< /Type /XObject /Subtype /Image /Width 2184 /Height 2320 /BitsPerComponent 1
/ImageMask true /Filter /CCITTFaxDecode /DecodeParms << /K -1 /Columns 2184 >>
/Length 15580 >>
stream
etc ...
The current code simply treats the imagemask as an image. Since this is just a 1 bit image it has no Alpha channel it overwrites the existing image and we simply get the last image drawn.
In
org.apache.pdfbox.util.operator.pagedrawer.Invoke.java
method
public void process(PDFOperator operator, List<COSBase> arguments) throws IOException
after
if (awtImage == null)
{ LOG.warn("getRGBImage returned NULL"); return;//TODO PKOCH }
If you add the following code it fixes the problem. I can not provide the sample doc due to privacy reasons.
/**
Spec 8.9.6.2
If ImageMask is true then the image is one bit. Black means draw the current colour and white means use the colour on the current image (ie Mask).
Convert the map to an image with an Alpha channel so we can lay it on top
*/
if(image.getImageMask())
{
Color currentColour = drawer.getGraphicsState().getStrokingColor().getJavaColor();
final int onColour = 0xff000000 | currentColour.getRGB();
BufferedImage bia = new BufferedImage(awtImage.getWidth(),awtImage.getHeight(),BufferedImage.TYPE_INT_ARGB);
for(int y=0;y<awtImage.getHeight();y++)
Unknown macro: { for(int x=0;x<awtImage.getWidth();x++) { bia.setRGB(x, y, (awtImage.getRGB(x, y) & 0x00ffffff) == 0xffffff ? 0x00ffffff : onColour); } }
awtImage = bia;
}",0,"Andreas Lehmkühler","Dave Smith",0,2,"13/Nov/12 13:49","23/Mar/13 12:56","18/Nov/12 14:20"
PDFBOX-1446,PDFBOX,"PreflightDocument constructor ignores given PreflightConfiguration instance",Bug,CLOSED,Major,Fixed,1.8.0,None,Preflight,None,,"One of the constructor in PreflightDocument document, where custom PreflightConfiguration instance can be passed, does not set it to the internal class variable "config" and therefore ignores it. Here is the patch to fix this bug:
Index: PreflightDocument.java
===================================================================
— PreflightDocument.java (revision 1409245)
+++ PreflightDocument.java (working copy)
@@ -91,6 +91,7 @@
public PreflightDocument(COSDocument doc, Format format, PreflightConfiguration cfg) {
super(doc);
this.specification = format;
+ this.config = cfg;
if (this.config == null)
{ initConfiguration(format); }",0,"Eric Leleu",Petras,0,3,"14/Nov/12 19:05","06/Dec/12 20:16","06/Dec/12 20:15"
PDFBOX-1447,PDFBOX,"wasted work in PDFMarkedContentExtractor.processTextPosition()",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,None,"patch perfomance",,"The problem appears in version 1.7.1 and in revision 1409864. I
attached a one-line patch that fixes it.
In method "PDFMarkedContentExtractor.processTextPosition", the loop
over "sameTextCharacters" should break immediately after
"suppressCharacter" is set to "true". All the iterations after
"suppressCharacter" is set to "true" do not perform any useful work,
at best they just set "suppressCharacter" again to "true".
Method "processTextPosition" in class "PDFTextStripper" has a similar
loop, and this loop breaks immediately after "suppressCharacter" is
set to "true", just like in the proposed patch.",0,"Timo Boehme","Adrian Nistor",0,2,"15/Nov/12 18:49","23/Mar/13 12:56","18/Nov/12 14:26"
PDFBOX-1448,PDFBOX,"Printing based on the document orientation",Improvement,CLOSED,Major,"Won't Fix",1.7.1,None,PDModel,"horizontal orientati",,"We are using PDFBox in our current project to print a pdf file directly to an attached network printer. Printing PDF documents having only portrait pages within worked like a charm.
However we experienced problems with PDFs having LANDSCAPE pages defined, as the orientation is currently always defined by the printer service and not by the PDDocument. This may be desireable in some situations but undesirable in others. Printing PDFs with PORTRAIT and LANDSCAPE pages in one document may lead to strange print results as the landscape pages are truncated to a PORTRAIT width.
It would be good to have a possibility to change the mechanism how the orientation will be determined. This also would allow to fix the following bugs without breaking the current semantics:
PDFBOX-985
PDFBOX-819
PDFBOX-222",0,"Andreas Lehmkühler","Thorsten Hake",1,3,"19/Nov/12 13:31","23/Mar/13 13:05","03/Mar/13 14:59"
PDFBOX-1449,PDFBOX,"Preflight doesn't report on non-embedded font",Bug,CLOSED,Major,Fixed,1.8.0,1.8.0,Preflight,None,"windows xp","See the following file:
http://dl.dropbox.com/u/9523497/test_noembeddedfonts.pdf
This PDF uses (TrueType) fonts that are not embedded (Arial). However, Preflight does not report on this! (As a double-check I also analysed the file with Acrobat 9's Preflight module, which correctly identifies the problem.)
Additional info: I used build #562 (14-Nov-2012 23:05:44), preflight-1.8.0-20121114.230701-58-jar-with-dependencies.jar from the command line. (Strangely the all-in jar of the more recent build #563 doesn't seem to work at all on my system, but that's another story.)",0,"Eric Leleu","Johan van der Knijff",0,2,"21/Nov/12 17:21","23/Mar/13 12:56","22/Dec/12 15:02"
PDFBOX-145,PDFBOX,"PDDocumentInformation.getCreationDate() throws IOException",Bug,CLOSED,Major,"Not A Problem",None,None,Parsing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1456836
Originally submitted by nobody on 2006-03-23 02:26.
For some PDF documents, I get this exception when
calling PDDocumentInformation.getCreationDate() :
----------------------
java.io.IOException: Error converting date:#TÂ©0]4Â¨Ã¸Â¹}
3?W%bÃ!
at org.pdfbox.util.DateConverter.toCalendar
(DateConverter.java:237)
at org.pdfbox.util.DateConverter.toCalendar
(DateConverter.java:134)
at org.pdfbox.cos.COSDictionary.getDate
(COSDictionary.java:704)
at
org.pdfbox.pdmodel.PDDocumentInformation.getCreationDat
e(PDDocumentInformation.java:232)
-----------------------
but when I view those PDF docs with Acrobat Reader, it
has a valid, clean creation date ("Erstellt am:
07.12.2004 15:27:13"). It also shoes "1.4 (Acrobat
5.x) as the PDF version - so a quiet old and common
version.
Using PDFBox 0.7.2 with JDK 1.5.0_06.
[comment on SourceForge]
Originally sent by nobody.
Logged In: NO
I found the reason: this occurs on any PDF that is secured
with a password. I work around the problem by first
checking the document via
myPDDocument.isEncrypted();
if it is encrypted. If the result is true, I don't read the
creation/modification date. Perhaps a more intuitive
exception should be thrown, something like
DocumentEncryptedException
...",0,"Andreas Lehmkühler",Anonymous,0,1,"23/Mar/06 10:26","11/Nov/13 19:17","11/Nov/13 19:17"
PDFBOX-1451,PDFBOX,"Error in converting a pdf to image using convertToImage",Bug,CLOSED,Major,Duplicate,"1.5.0, (3)",None,Rendering,"shading shadingpatte",,"Hi,
I converted a pdf to image using
Class : PDPage
API : public BufferedImage convertToImage()
i obtained an image with the first line of the bulleted list on the right with strange character and:
with 1.5.0 version is missing the image on the top
with 1.7.1 i had a strange color issue.",0,"Andreas Lehmkühler","Emanuele Lombardi",0,4,"22/Nov/12 11:09","20/Jun/14 15:54","20/Jun/14 15:54"
PDFBOX-1452,PDFBOX,"Greek Pdfs print out wrong characters",Bug,CLOSED,Major,Fixed,"1.7.1, 1.8.0",2.0.0,None,"bug greek pi print s","windows 7, windows","This issue resembles the PDFBOX-770 bug which was fixed in version 1.5.0, however in case of PDFBOX-770 problem occurred while extracting the text, in my case
I have the same problem but while printing (silent print).
E.G. in Greek PDF
a) Greek letter π is printed as pi. "προσώπων" would become "piροσώpiων" on paper.
b) The Greek letter μ is printed as µ ... which is slightly different on paper as the proper μ.
c) I think there is also an issue with Ω...but I will confirm this later.
As an example PDF ..the same pdf as in case of PDFBOX-770 can be used. Unfortunately I cannot post the results as results are on paper...
So, I cannot print any Greek PDF, as it comes out unreadable...
Please address the issue, a fix might be somehow similar to 770's fix..though I couldn't find any reference what was the problem then in a first place...
Thanks in advance...
P.K.",0,"Andreas Lehmkühler","Plimmer Keen",0,3,"23/Nov/12 23:09","17/Mar/16 19:08","04/Aug/13 10:12"
PDFBOX-1453,PDFBOX,"NPE saving modified encrypted document",Bug,CLOSED,Major,Fixed,"1.8.7, (3)",1.8.10,"Crypto, Writing",None,,"I posted this on the mailing list but got no answer. I'm describing here some behaviors that are triggering NPE when saving a modified pdf document.
What I'm trying to do is to open an encrypted document, modify it, save it back (I attached my test project). The three tests I made they all end up with a NPE but they work if I turn on setAllSecurityToBeRemoved (and I don't want security to be removed).
First test:
1- input is a doc encrypted with owner pwd having the modify permission on.
2- The document is loaded and decrypted using owner pwd.
3- permissions.isOwnerPermission() is true which is correct
4- permissions.canModify() is true which is correct
5- modify the doc and save throws a NPE which is NOT correct
Second test
1- input is a doc encrypted with owner pwd having the modify permission on.
2- The document is loaded but not decrypted
3- permissions.isOwnerPermission() is true, why? I didn't provide any owner pwd I should not have owner permissions.
4- permissions.canModify() is true which is correct
5- modify the doc and save throws a NPE which is NOT correct
Third test
1- input is a doc encrypted with owner pwd having NO permission.
2- The document is loaded and decrypted using owner pwd.
3- permissions.isOwnerPermission() is true which is correct
4- permissions.canModify() is true, why? I can modify the doc because I have owner permission but the Modify should be off.
5- modify the doc and save throws a NPE which is NOT correct",0,"Andreas Lehmkühler","Andrea Vacondio",0,4,"26/Nov/12 19:31","23/Jul/15 06:35","30/Jun/15 18:08"
PDFBOX-1454,PDFBOX,"false reject of Pdf A1b?",Bug,CLOSED,Major,Fixed,1.8.0,1.8.0,"Preflight, (1)",None,"windows, java 1.6","using, http://pdfbox.apache.org/userguide/preflight.html , I get
<<The file C:\Users\Public\Documents\Pdf_A_Test.pdf is not valid, error(s) :
7.1 : Error on MetaData, Does not contain element>>
http://www.intarsys.de/pdfa-check claims it is valid",0,"Guillaume Bailleul","Ralf Hauser",0,2,"27/Nov/12 11:06","15/Sep/14 13:16","14/Dec/12 06:44"
PDFBOX-1456,PDFBOX,"wasted work in PublicKeySecurityHandler.prepareForDecryption()",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,None,"patch performance",,"The problem appears in version 1.7.1 and in revision 1414743. I
attached a one-line patch that fixes it. This problem and the
attached patch are similar the previously fixed PDFBOX-1447 and its
patch.
In method "PublicKeySecurityHandler.prepareForDecryption", the loop
over "recipCertificatesIt" should break immediately after
"foundRecipient" is set to "true" and "envelopedData" is set to
"ri.getContent(...)". All the iterations after "foundRecipient" is
set to "true" do not perform any useful work because the "if"
statement depends on "!foundRecipient".",0,"Andreas Lehmkühler","Adrian Nistor",0,2,"28/Nov/12 16:07","23/Mar/13 12:56","30/Nov/12 18:23"
PDFBOX-1458,PDFBOX,"wasted work in PDOptionalContentProperties.setGroupEnabled()",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,None,"patch performance",,"The problem appears in version version 1.7.1 and in revision 1414788.
I attached a three-line patch (on.diff) that fixes it. This problem
and the attached patch are similar the previously fixed PDFBOX-1447
and its patch.
In method "PDOptionalContentProperties.setGroupEnabled", the loop over
"on" should not be executed if "enable" is "true". When "enable" is
"true", all the iterations just compute "group" and "name", and then
discard them, because the "if" condition depends on "!enable".
Similarly, in the same method
"PDOptionalContentProperties.setGroupEnabled", the loop over "off"
should not be executed if "enable" is "false". I attached a separate
patch (off.diff) for the "off" loop.",0,"Andreas Lehmkühler","Adrian Nistor",0,2,"28/Nov/12 18:54","23/Mar/13 12:56","30/Nov/12 18:38"
PDFBOX-1459,PDFBOX,"wasted work in AbstractTestAction.valid()",Bug,CLOSED,Major,Fixed,None,None,None,"patch performance",,"The problem appears in revision 1414788. I attached a one-line patch
that fixes it. This problem and the attached patch are similar the
previously fixed PDFBOX-1447 and its patch.
In method "AbstractTestAction.valid", the loop over "errors" should
break immediately after "found" is set to "true". All the iterations
after "found" is set to "true" do not perform any useful work, at best
they just set "found" again to "true".",0,"Guillaume Bailleul","Adrian Nistor",0,1,"28/Nov/12 19:12","16/Dec/12 10:53","16/Dec/12 10:53"
PDFBOX-1460,PDFBOX,"wasted work in AbstractInvalidFileTester.validate()",Bug,CLOSED,Major,Fixed,1.7.1,None,None,"patch performance",,"The problem appears in version 1.7.1 and in revision 1414788. I
attached a two-line patch that fixes it. This problem and the
attached patch are similar the previously fixed PDFBOX-1447 and its
patch.
In method "AbstractInvalidFileTester.validate", the loop over
"result.getErrorsList()" should break immediately after "found" is set
to "true" if "outputResult" is null. All the iterations after "found"
is set to "true" do not perform any useful work when "outputResult" is
null, at best they just set "found" again to "true".",0,"Guillaume Bailleul","Adrian Nistor",0,1,"28/Nov/12 19:49","16/Dec/12 10:51","16/Dec/12 10:51"
PDFBOX-1463,PDFBOX,"Unreadable fonts on UNIX",Bug,CLOSED,Major,"Cannot Reproduce",None,None,Rendering,None,unix,"I'm converting PDFs to tif. The conversion is fine when run in Windows. When i run the same code in UNIX ,its converting with a font that is unreadable. I put some font ttf files in the classes path but that has not made any difference. Please help.",0,"Andreas Lehmkühler","Sindhu N Kashyap",0,5,"30/Nov/12 11:40","15/May/14 12:23","15/May/14 10:06"
PDFBOX-1464,PDFBOX,"unnecessary linear searches in "CFFParser.Format0FDSelect.getFd"",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,None,"patch performance",,"The problem appears in PDFBox 1.7.1 and in revision 1415855. I
attached a two-line patch that fixes it.
In method "CFFParser.Format0FDSelect.getFd", the linear search over
the map keys "keys" is unnecessary when the "Map charString" does not
contain the key. The attached patch first checks if the map contains
the key, which is a fast operation for a LinkedHashMap like
"charString".
Moreover, I think the linear search can be avoided altogether by
storing the indices directly in the Map (the type of the values would
change from byte[] to the pair <byte[],index>).",0,"Andreas Lehmkühler","Adrian Nistor",0,2,"30/Nov/12 23:36","23/Mar/13 12:56","02/Mar/13 11:59"
PDFBOX-1465,PDFBOX,"Preflight crashes on PDF",Bug,CLOSED,Major,Fixed,1.8.0,1.8.0,Preflight,None,"windows xp","Analysing the PDF below results in an exception in Preflight:
http://dl.dropbox.com/u/9523497/dccbagposter-ppt-120229172748-phpapp01.pdf
(Source: file originally downloaded from http://www.slideshare.net/jakkbl/dcc-bag-posterppt)
Additional info: I used build #562 (14-Nov-2012 23:05:44), preflight-1.8.0-20121114.230701-58-jar-with-dependencies.jar from the command line.",0,"Eric Leleu","Johan van der Knijff",0,2,"06/Dec/12 12:01","23/Mar/13 12:56","22/Dec/12 15:58"
PDFBOX-1468,PDFBOX,"Decrypting unencrypted strings",Improvement,CLOSED,Major,Fixed,1.7.1,1.8.0,PDModel,"decrypt encryption",,"I have received encrypted PDF which contains several string objects but not all of them are encrypted.
I am not sure whether it is or it is not compliant with pdf reference.
But I have created fix so pdfbox can handle this.
If string contains only chars between 32-127 then decryption is not necessary (I know, this is not true in 100% of cases but I think it is swallowable)
Some strings are encrypted:
/CreationDate(\222\202\376k\003\372\306\236(IP\327C\215\375k\357)
/ModDate(\222\202\376k\003\372\306\236(IP\327C\215\375k\357)
/Producer(\241\350\210\035\001\352\224\3219(0\247\006\333\2537\225\334\300\232\265)
Some are not:
/Registry(Adobe)
/Ordering(Identity)",0,"Andreas Lehmkühler","Juraj Lonc",0,2,"13/Dec/12 14:30","23/Mar/13 12:56","17/Dec/12 18:02"
PDFBOX-1469,PDFBOX,"[PATCH] PDPageContentStream incorrectly sets colors in CMYK color space",Bug,CLOSED,Major,Fixed,None,1.8.0,None,None,,"I have a program that reads graphic commands from a postscript file and draws a logo on existing PDF pages.
PDF commands are written using PDPageContentStream which works OK except when I pass colors in CMYK color space - in this case the colors are "off".
It appears that setStrokingColor(Color color) and setNonStrokingColor(Color color) set the magenta component wrong, they pass yellow instead.
Here is the problematic line. Notice the second argument, it should be colorComponents[1], not colorComponents[2]
  setStrokingColor( colorComponents[0], colorComponents[2], colorComponents[2], colorComponents[3] );
The patch and a unit test are attached.
Regards,
Yegor",0,"Andreas Lehmkühler","Yegor Kozlov",0,2,"14/Dec/12 13:13","23/Mar/13 12:56","16/Dec/12 12:10"
PDFBOX-147,PDFBOX,"Can't read Japanese fonts",Bug,CLOSED,Major,Fixed,None,1.5.0,"Text extraction",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1464488
Originally submitted by nobody on 2006-04-04 13:55.
When I try to run ExtractText, the output is garbage.
I'm running the latest PDFBox-0.7.3-dev-20060404 . I
run with parameters:
-encoding utf-8 jp.pdf jp.txt
Sourceforge won't let me upload a file, so here is a
URL:
http://www.denso.co.jp/ja/aboutdenso/download/pdf/corporate_guide.pdf
I've seen another discussion thread about this issue
too. Can you explain how to enable pdfbox to work with
japanese fonts? (Are there properties that need to be
set or additional resources needed?)
Domo arigato
sunfishy (at) gmail",0,"Andreas Lehmkühler",Anonymous,0,0,"04/Apr/06 20:55","30/Mar/11 18:01","30/Mar/11 18:00"
PDFBOX-1470,PDFBOX,"about attribute is serialized more than one time in XmpSerializer",Bug,CLOSED,Minor,Fixed,None,1.8.0,XmpBox,None,,,0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"16/Dec/12 10:19","23/Mar/13 12:56","16/Dec/12 10:25"
PDFBOX-1471,PDFBOX,"Parsing of xmp properties set in xml attributes is not done",Bug,CLOSED,Minor,Fixed,None,1.8.0,XmpBox,None,,"The attached xmp file is not parsed correctly, attributes are forgotten",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"16/Dec/12 10:20","23/Mar/13 12:56","16/Dec/12 10:23"
PDFBOX-1473,PDFBOX,"Incorrect handling of OpenType fonts",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,FontBox,None,,"There is embedded font in this PDF which pdfbox/fontbox does not handle properly.
This OpenType font contains CFF data.",0,"Andreas Lehmkühler","Juraj Lonc",0,2,"19/Dec/12 08:06","02/May/13 02:29","02/Mar/13 11:39"
PDFBOX-1474,PDFBOX,"PDDocument.decrypt does not throws InvalidPasswordException",Bug,CLOSED,Major,Fixed,"1.7.1, (3)","1.8.6, 2.0.0",Documentation,decrypt,,"PDDocument.decrypt does not throws InvalidPasswordException
The documentation say the method should throw "InvalidPasswordException" but it doest't i suggest either:
correct the Exception methods throws
or
correct the javadoc
The method for this version is:
/**
This will decrypt a document. This method is provided for compatibility reasons only. User should use
the new security layer instead and the openProtection method especially.
*
@param password Either the user or owner password.
*
@throws CryptographyException If there is an error decrypting the document.
@throws IOException If there is an error getting the stream data.
@throws InvalidPasswordException If the password is not a user or owner password.
*
*/
public void decrypt( String password ) throws CryptographyException, IOException, InvalidPasswordException
Unknown macro: { try { StandardDecryptionMaterial m = new StandardDecryptionMaterial(password); this.openProtection(m); document.dereferenceObjectStreams(); } catch(BadSecurityHandlerException e) { throw new CryptographyException(e); } }",0,"Tilman Hausherr","Josue Martinez Buenr",0,3,"19/Dec/12 23:18","22/Jun/14 14:34","11/Jun/14 13:46"
PDFBOX-1475,PDFBOX,"Exception thrown during rendering page if /DecodeParms specified indirectly (like [9 0 R]) in XObject/Image",Bug,CLOSED,Major,Fixed,"1.7.0, 1.7.1",1.8.0,PDModel,"DecodeParms Image XO",,"PROBLEM:
Exception is thrown during rendering TC11.pdf. Empty image is generated.
TEST:
java -jar pdfbox-app-1.7.1.jar PDFToImage -resolution 300 TC11.pdf
DETAILS:
There are 2 objects in TC11.pdf.
. . .
Object 7:
<<
/Type /XObject
/Subtype /Image
/Width 2496
/Height 3504
/BitsPerComponent 1
/ColorSpace /DeviceGray
/Filter [/CCITTFaxDecode]
/DecodeParms [9 0 R]
/Length 10 0 R
>>
. . .
Object 9:
<<
/Columns 2496
/Rows 3504
/K -1
/BlackIs1 false
>>
. . .
when rendering the page exception is thrown as the library doesn't resolve indirect reference to object 9 for /DecodeParms.
RESOLUTION:
I can specify what is to be changed in CCITTFaxDecoderFilter.java and PDCcitt.java to resolve the issue.",0,"Andreas Lehmkühler","Alexey Gavrilov",0,2,"20/Dec/12 13:28","23/Mar/13 12:56","26/Dec/12 14:28"
PDFBOX-1476,PDFBOX,"Isartor tests fails due to bad rdf:about handling",Bug,CLOSED,Major,Fixed,None,1.8.0,XmpBox,None,,"The rdf:about is sometimes considered as a property of the resource",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"22/Dec/12 08:40","23/Mar/13 12:56","22/Dec/12 08:42"
PDFBOX-1477,PDFBOX,"PDF/A file is declared invalid on windows and valid with linux",Bug,CLOSED,Major,Fixed,None,1.8.0,Preflight,None,"windows 7","The testing the attached file on windows, it is considered as an invalid PDF/A with that error :
The fileOPM_pdfa.pdf is not valid, error(s) :
1.1 : Body Syntax error, Second line must contains at least 4 bytes greater than 127
The same file is valid in a linux environment.
I think the problem comes from a defined charset in PreflightParser. The attached patch fixes the problem.",0,"Guillaume Bailleul","Guillaume Bailleul",0,1,"23/Dec/12 07:23","23/Mar/13 12:56","05/Jan/13 07:01"
PDFBOX-1478,PDFBOX,"Problem with printing landscape document",Bug,CLOSED,Major,Fixed,1.8.2,2.0.0,None,"CIDFont truetype",,"I am using pdfbox-1.6.0.jar,fontbox-1.6.0.jar,jempbox-1.6.0.jar and commons-logging-1.1.1.jar
when i want to printing landscape documents It printing as portrait document
Please tell me how can i solve this problem
Thanks",0,"Andreas Lehmkühler","Maho Rashad",0,2,"24/Dec/12 11:41","17/Mar/16 19:07","04/Aug/13 11:15"
PDFBOX-1480,PDFBOX,"PDFBox treats some DeviceRGB pdfs as DeviceGRAY",Bug,CLOSED,Major,"Not A Problem",1.7.1,None,None,None,,"Some PDF files are correctly processed by PDFBox as DeviceRGB and the font color can be retrieved. Other DeviceRGB files that can be viewed by Acrobat Reader as fonts with various colors are treated as DeviceGray by PDFBox. An example of creating such a file which is listed as DeviceGray is with Word 2010 and then saving as using the MinimumSize option. An example of creating a file which is recognized by PDFBox is to save Standard. I believe either case should be recognized as DeviceRGB",0,"Andreas Lehmkühler","Greg Werner",0,2,"26/Dec/12 16:29","27/Dec/12 14:51","27/Dec/12 14:51"
PDFBOX-1481,PDFBOX,"Ignore postscript code when parsing a type1 font",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,PDModel,Type1,,"Some (tex?-) fonts may contain optional postscript code which lead to a NumberFormatException.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"27/Dec/12 14:26","23/Mar/13 12:56","27/Dec/12 14:36"
PDFBOX-1482,PDFBOX,"Java color spaces returned by PDDeviceN do not take tint transformation into account and type mismatch",Bug,CLOSED,Major,Fixed,1.8.0,1.8.0,PDModel,None,"mac os x, java 1.7","A patch to fix this issue is provided. Be sure to review it... this is my first contribution.
I tried to solve jira issue PDFBOX-1058 (to contribute a bit) and tried to convert the file referenced in this ticket to images using standard utilities and I got lots of NullPointerExceptions.
1) These NPE occurs because the java color space returned by the PDDeviceN doesn't take the tint transformation function into account. When the toRGB method method of the color space (ColorSpaceCMYK for the pdf file linked to PDFBOX-1058) is called it returns null because the length of the array is not of the expected size. This occurs because the tint transformation function is not called. The provided patch fix this.
2) By debugging this, I also got CastException because I called get/setColorantName method that were declared to return list of COSBase. In reality they returned list of Strings. To avoid these kind of errors in the future, I also introduced generics in the COSArrayList data type. This is also provided in the patch.
The ticket PDFBOX-1058 is still not fully fixed by the patch. Colors still looks horrible on some parts. I'm working on it...
However, by applying the patch there is a clear quality improvement (xerox logo on the upper left part of the first page and wave effect in the middle of the first page).",0,"Andreas Lehmkühler","Olivier Ceulemans",0,2,"27/Dec/12 21:37","23/Mar/13 12:56","06/Jan/13 14:04"
PDFBOX-1483,PDFBOX,"java.util.zip.ZipException: unknown compression method",Bug,CLOSED,Major,"Not A Problem",1.7.1,None,None,None,,"Exception appeared when using PDFBox from a JRuby script. Same behaviour when processing the same offending PDF with PrintPage.java (in examples):
Dec 27, 2012 9:16:46 PM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Dec 27, 2012 9:16:46 PM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Dec 27, 2012 9:16:46 PM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Dec 27, 2012 9:16:46 PM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Dec 27, 2012 9:16:46 PM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Dec 27, 2012 9:16:46 PM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Dec 27, 2012 9:16:46 PM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Dec 27, 2012 9:16:46 PM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Dec 27, 2012 9:16:46 PM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Dec 27, 2012 9:16:46 PM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Exception in thread "main" java.io.IOException
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:138)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:301)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:221)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:156)
at org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:108)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:253)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:119)
at org.apache.pdfbox.examples.util.PrintPage.printPage(PrintPage.java:64)
at org.apache.pdfbox.examples.util.PrintPage.main(PrintPage.java:39)
Caused by: java.util.zip.DataFormatException: unknown compression method
at java.util.zip.Inflater.inflateBytes(Native Method)
at java.util.zip.Inflater.inflate(Inflater.java:238)
at java.util.zip.Inflater.inflate(Inflater.java:256)
at org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:169)
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:98)
... 10 more",0,"Andreas Lehmkühler","Manuel Aristaran",0,3,"28/Dec/12 00:17","17/Feb/14 04:10","20/Jan/13 15:20"
PDFBOX-1484,PDFBOX,"Exception when using Preflight validation on PDF/A 1b",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,Preflight,None,"windows 7, java 1.6","Exception in thread "main" java.lang.NumberFormatException: For input string: "readonly"
at java.lang.NumberFormatException.forInputString(Unknown Source)
at java.lang.Integer.parseInt(Unknown Source)
at java.lang.Integer.parseInt(Unknown Source)
at org.apache.pdfbox.preflight.font.util.Type1Parser.readCharStringElement(Type1Parser.java:276)
at org.apache.pdfbox.preflight.font.util.Type1Parser.parseCharStringArray(Type1Parser.java:259)
at org.apache.pdfbox.preflight.font.util.Type1Parser.parseEExecPart(Type1Parser.java:248)
at org.apache.pdfbox.preflight.font.util.Type1Parser.decodeAndParseEExecPart(Type1Parser.java:180)
at org.apache.pdfbox.preflight.font.util.Type1Parser.parse(Type1Parser.java:167)
at org.apache.pdfbox.preflight.font.descriptor.Type1DescriptorHelper.processFontFile1(Type1DescriptorHelper.java:134)
at org.apache.pdfbox.preflight.font.descriptor.Type1DescriptorHelper.processFontFile(Type1DescriptorHelper.java:109)
at org.apache.pdfbox.preflight.font.descriptor.FontDescriptorHelper.validate(FontDescriptorHelper.java:90)
at org.apache.pdfbox.preflight.font.SimpleFontValidator.processFontDescriptorValidation(SimpleFontValidator.java:76)
at org.apache.pdfbox.preflight.font.SimpleFontValidator.validate(SimpleFontValidator.java:53)
at org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.validate(FontValidationProcess.java:58)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:67)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:45)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:82)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:65)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:67)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:45)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:142)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:76)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:67)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:45)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:49)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:41)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:67)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:79)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:147)
at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:58)",0,"Eric Leleu","Claude Catherine",0,2,"31/Dec/12 10:25","24/Mar/13 14:44","20/Jan/13 15:56"
PDFBOX-1485,PDFBOX,"cannt read embedded fonts",Bug,CLOSED,Major,Duplicate,1.7.1,None,None,None,,"I am using pdfbox-1.7.1.jar,fontbox-1.7.1.jar,jempbox-1.7.1.jar and commons-logging-1.1.1.jar
the problem not in printing it self,
My pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont
INFO: Can't read the embedded font AAWTAD+Arial
26/12/2012 02:16:50 م org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont
INFO: Using font Arial instead
26/12/2012 02:16:51 م org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont
INFO: Can't read the embedded font AAWSAD+Arial
you got any idea to solve this problem
Please tell me how can i solve this problem
Thanks",0,"Andreas Lehmkühler","Maho Rashad",0,2,"02/Jan/13 08:39","04/Aug/13 12:10","04/Aug/13 12:10"
PDFBOX-1486,PDFBOX,"Extract Paragraph from pdf file using search string",Task,CLOSED,Major,Invalid,1.7.1,None,"Text extraction",documentation,windows,"I have working on text mining in pdf file using apache PDFBOX for past three months.
I am trying to extract the particular paragraph from pdf file using search string.
But I can’t extract the paragraph from pdf.
Is there any other methods to extract same.
kindly suggest me.",0,"Andreas Lehmkühler","Rajasekar Subramani",0,1,"03/Jan/13 06:14","15/Jan/13 11:46","15/Jan/13 11:46"
PDFBOX-1487,PDFBOX,"CLONE - Extract Paragraph from pdf file using search string",Task,CLOSED,Major,Duplicate,1.7.1,None,"Text extraction",documentation,windows,"I have working on text mining in pdf file using apache PDFBOX for past three months.
I am trying to extract the particular paragraph from pdf file using search string.
But I can’t extract the paragraph from pdf.
Is there any other methods to extract same.
kindly suggest me.",0,"Andreas Lehmkühler","Prakash Kumar Dubey",0,2,"05/Jan/13 16:58","06/Jan/13 13:00","06/Jan/13 13:00"
PDFBOX-1488,PDFBOX,"Add generics to the COSArrayList class",Improvement,CLOSED,Minor,Fixed,1.7.1,1.8.0,None,None,,"Add generics support to the COSArrayList class as proposed by Olivier Ceulemans (PDFBOX-1482)",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"06/Jan/13 13:26","23/Mar/13 12:56","06/Jan/13 14:01"
PDFBOX-1489,PDFBOX,"Maven Dependency not resolveable agains central",Bug,CLOSED,Minor,Fixed,None,1.8.0,None,None,svn,"pdfbox depends on ant-nodeps version 1.7.1, this version isn't in central, either change the version to 1.8.1 or add the Apache Release Repository (see https://repository.apache.org/content/repositories/releases/org/apache/ant/ant-nodeps/1.7.1/) to the parent pom.",0,"Andreas Lehmkühler","Christian Mahnke",0,2,"07/Jan/13 13:59","23/Mar/13 12:56","09/Mar/13 15:52"
PDFBOX-1490,PDFBOX,"pdf page => inline image not converted",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,Parsing,"Image XObject","java 1.6, windows 7","Some inline images from pdf page are be missed after converting page to image
extracts of the logs are:
[WARN] 2013-01-10 10:45:26,491 [main]
org.apache.pdfbox.util.operator.SetNonStrokingColor - Not supported
colorspace Indexed within operator scn
[ERROR] 2013-01-10 10:45:26,507 [main]
org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap -
java.lang.IndexOutOfBoundsException: Index: 12, Size: 12
java.lang.IndexOutOfBoundsException: Index: 12, Size: 12
at java.util.ArrayList.RangeCheck(ArrayList.java:547)
at java.util.ArrayList.get(ArrayList.java:322)
at org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)
at
org.apache.pdfbox.io.RandomAccessFileOutputStream.write(RandomAccessFileOutputStream.java:116)
at
org.apache.pdfbox.filter.RunLengthDecodeFilter.decode(RunLengthDecodeFilter.java:92)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:279)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:221)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:156)
at
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream(PDStream.java:214)
at org.apache.pdfbox.pdmodel.common.PDStream.getByteArray(PDStream.java:468)
at
org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:185)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:83)
at
org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)
at
org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at
org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at
org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:125)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:757)
.....
[WARN] 2013-01-10 10:45:26,883 [main]
org.apache.pdfbox.pdmodel.graphics.color.PDColorState - Unable to create
the color instance [0.0, 0.0, 0.0] in color space Indexed{ }; guessing
color ...
Interpretating as RGB
java.io.IOException: Not implemented
at
org.apache.pdfbox.pdmodel.graphics.color.PDIndexed.createColorSpace(PDIndexed.java:116)
at
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.getJavaColorSpace(PDColorSpace.java:85)
at
org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:180)
....
Full debug log messages are available under : http://pastebin.com/iMJS7guS
The converted image can be seen under http://postimage.org/image/kl0hfrk0b/
If more information is required, please let me know!
Output from "WriteDecodedDoc" not possible because
"java.lang.IndexOutOfBoundsException: Index: 12, Size: 12" has been
thrown...
Best Regards,
Sascha",0,"Andreas Lehmkühler","Sascha Fischer",0,2,"11/Jan/13 12:55","23/Mar/13 12:56","14/Jan/13 19:17"
PDFBOX-1491,PDFBOX,"Image with colour key masking triggers NPE",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,"Swing GUI",None,,"The pdf attached to PDFBOX-705 uses a color key masking which leads to a null pointer exception when rendering",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"13/Jan/13 10:26","23/Mar/13 12:56","13/Jan/13 10:40"
PDFBOX-1492,PDFBOX,"Add basic XFA extraction",Improvement,CLOSED,Minor,Fixed,None,1.8.0,AcroForm,None,,"Add a basic XFA extraction capability to PDXFA to support getting the data of dynamic XFA forms.",0,"Andreas Lehmkühler","Maruan Sahyoun",0,2,"13/Jan/13 19:01","02/May/13 02:30","18/Jan/13 06:33"
PDFBOX-1494,PDFBOX,"PDF box color distortion","New Feature",CLOSED,Major,Fixed,1.7.1,2.0.0,Rendering,"Grouping Transparenc","windows 7, java 1.6","Hi,
I have tried to convert pdf into image using pdfbox. image got converted but colors were distorted. same issue could be found in following link.
http://stackoverflow.com/questions/4523688/pdfbox-problem-with-converting-pdf-page-into-image
I also found out that this issue was fixed long back. Please see below for more details
https://issues.apache.org/jira/browse/PDFBOX-963?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel.",0,"John Hewson","Prashant Shukla",1,5,"15/Jan/13 11:08","17/Mar/16 19:08","11/Feb/14 18:14"
PDFBOX-1496,PDFBOX,"Can't add multiple form XObjects to a PDF - they become duplicated",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,"PDModel, (1)","LayerUtility, XObjec","ubuntu, java 1.6","I've been trying to paste multiple small PDFs into a big one as form XObjects. This image illustrates what I'm trying to do:
https://imageshack.us/photo/my-images/59/pdfsampleimagepasterigh.png/
The Test 1-3 boxes would be the little PDFs I want to insert. When I try to do this, I get this result:
https://imageshack.us/photo/my-images/15/pdfsampleimagepastewron.png/
The last form to be pasted is just duplicated three times. It seems that instead of adding multiple XObjects, I am just adding multiple references to a single XObject, and whenever I try to add another XObject it just overwrites the XObject that the form instances were referring to. It seems I can't insert multiple forms, just multiple references to a single one.",0,"Andreas Lehmkühler","Andrew Sengul",0,3,"18/Jan/13 08:02","23/Mar/13 12:56","03/Mar/13 11:15"
PDFBOX-1497,PDFBOX,"Preflight throws an exception on DeviceN validation",Bug,CLOSED,Minor,Fixed,1.8.0,1.8.0,Preflight,None,,"Preflight fails on the ColorSpace validation step if the DeviceN colorspace doesn't have an attributes array.
The getAttributes throws an Array OutOfBound exception.",0,"Eric Leleu","Eric Leleu",0,1,"20/Jan/13 16:27","23/Mar/13 12:56","20/Jan/13 16:35"
PDFBOX-1498,PDFBOX,"Index Out Of Bounds Exception while reading large PDF Document",Bug,CLOSED,Major,"Cannot Reproduce",None,None,None,None,,"I am getting java.lang.IndexOutOfBoundsException while reading large PDF document (800 mb).
Below is the full stack
Exception in thread "main" org.apache.pdfbox.exceptions.WrappedIOException
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:243)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1071)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1038)
at imageData.AddFooter.main(AddFooter.java:26)
Caused by: java.lang.IndexOutOfBoundsException: Index: 3377, Size: 3377
at java.util.ArrayList.RangeCheck(ArrayList.java:547)
at java.util.ArrayList.get(ArrayList.java:322)
at org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)
at org.apache.pdfbox.io.RandomAccessFileOutputStream.write(RandomAccessFileOutputStream.java:106)
at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)
at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)
at java.io.FilterOutputStream.close(FilterOutputStream.java:140)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSStream(BaseParser.java:606)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:566)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:187)
... 3 more",0,"Andreas Lehmkühler","Manoj Patel",0,5,"22/Jan/13 06:06","06/Aug/15 20:38","11/Jun/14 13:56"
PDFBOX-1499,PDFBOX,"The blank white page is converted with method pdPage.convertToImage();",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,None,None,,"The pdf is created by Multi-function copier with OCR.
When the PDF is scanned without OCR, the image can be generated.
When the PDF is scanned with OCR, the blank with Image is generated.",0,"Andreas Lehmkühler","Peter Chan",0,2,"24/Jan/13 10:39","23/Mar/13 12:56","12/Feb/13 17:25"
PDFBOX-1500,PDFBOX,"TextPosition instance return wrong position",Bug,CLOSED,Major,Duplicate,1.7.1,None,PDModel,None,,"I use PDFTextStripper to strip text from PDF.
but the TextPosition instance generated during the strip process return the wrong position.",0,"Andreas Lehmkühler",PanQuanyi,0,2,"28/Jan/13 05:21","30/Jan/13 16:40","30/Jan/13 16:40"
PDFBOX-1501,PDFBOX,"Width of the character "201" .. inconsistent with the width in the PDF dictionary.",Bug,CLOSED,Major,Fixed,None,1.8.0,None,None,,"I have downloaded the trunk version of PDFBox for PDF/A validation purposes.
The validation process fails with the following error :
3.1.6 : Invalid Font definition, Width of the character "201" in the font program "AEOQYB+Frutiger-Bold-ANSI"is inconsistent with the width in the PDF dictionary.
The same PDF file is considered as valid when using Acrobat Pro X
I used FontForge (as described in https://issues.apache.org/jira/browse/PDFBOX-1259) to check the width of the caracter and the value is correct 556. The same value is found in the PDF file.
When running in debug mode I noticed that the CharStringRenderer constructor is called with "false" as parameter, meaning that the charString is not Type1 (Acrobat reader says it is Type1).
When digging further, I found that in the handleCommandType2 method of CharStringRenderer does not update the width of the character because the following condition is not met
else if ("endchar".equals(name)) {
if (numbers.size() == 1 )
{ setWidth(numbers.get(0)); }
}
numbers has an array as value ([556, 171, 158, 69, 194]).
In the handleSequence method of CharStringHandler, the sequence value used to compute the "numbers " value is [556, 171, 158, 69, 194, [14]]
[14] being the endchar command.
If I change the above condition to
else if ("endchar".equals(name)) {
if (numbers.size() % 2 == 1 )
{ setWidth(numbers.get(0)); }
}
The PDF file is considered as valid ... Is there a bug in the code or in the validation process or in the PDF file ?
Why should there be a single character when the endchar command is met ?
The the technical note 5177 (16 march 2000) issued by Adode says that the correct "sequence and form of a Type 2 charstring program may be represented as:
w?
{hs* vs* cm* hm* mt subpath}
?
{mt subpath}
* endchar
Where:
w = width
hs = hstem or hstemhm command
vs = vstem or vstemhm command
cm = cntrmask operator
hm = hintmask operator
mt = moveto (i.e. any of the moveto) operators
subpath = refers to the construction of a subpath (one complete closed contour), which may include hintmask operators where appropriate.
and the following symbols indicate specific usage:
zero or more occurrences are allowed
? zero or one occurrences are allowed
+ one or more occurrences are allowed
{ } indicates grouping
The PDF file is attached to this mail and the Caracter 201 is Eacute.
Thanks for your help
Best regards",0,"Andreas Lehmkühler","rahee ghurbhurn",0,2,"28/Jan/13 08:33","23/Mar/13 12:56","03/Feb/13 16:09"
PDFBOX-1502,PDFBOX,"Not Extracting Text from PDF Document",Bug,CLOSED,Major,"Cannot Reproduce","0.8.0-incubator, (2)",None,"Text extraction",None,"mac os, java 1.7","PDDocument document = PDDocument.load(Inputstream);
PDFTextStripper stripper = new PDFTextStripper();
stripper.getText(document) is not returning some text content in the attached PDF Document . It is just returning the form fields but the values are empty . The bug is reproducible both in 1.8.0-Snapshot and 1.7.1 codebase.
Please help in resolving the issue",0,"Andreas Lehmkühler",deepak,0,5,"29/Jan/13 16:10","06/Jan/14 09:58","15/Jun/13 11:22"
PDFBOX-1504,PDFBOX,"Split document issue",Bug,CLOSED,Major,Fixed,1.7.1,1.8.0,None,None,,"I've seen a bug trying to split pages of a pdf document.
For example, I got a 5 pages pdf document and I try to create a document with pages 4 to 5.
I set startPage to 3 and endPage to 5 (also tried to set page number to 3) but it creates a document with pages 3 to 4 and a other one with page 5.
I analysed a little bit the problem and it looks like it comes from the value of pageNumber variable in Splitter.class.
This is how I solved it (rewriting 3 methods) :
@Override
protected void processPages(List pages) throws IOException {
Iterator iter = pages.iterator();
while( iter.hasNext() ) {
PDPage page = (PDPage)iter.next();
pageNumber++;
if (pageNumber >= getStartPage() && pageNumber <= getEndPage())
{ processNextPage( page ); }
else {
if (pageNumber > getEndPage())
{ break; }
}
}
}
@Override
protected void processNextPage( PDPage page ) throws IOException
{ createNewDocumentIfNecessary(); PDPage imported = currentDocument.importPage( page ); imported.setCropBox( page.findCropBox() ); imported.setMediaBox( page.findMediaBox() ); // only the resources of the page will be copied imported.setResources( page.getResources() ); imported.setRotation( page.findRotation() ); }
@Override
protected boolean isNewDocNecessary()
{ return (pageNumber % getSplitAtPage() == 0 && pageNumber != getEndPage()) || currentDocument == null; }",0,"Andreas Lehmkühler","Duarte Alexandre",0,2,"30/Jan/13 16:00","02/May/13 02:30","09/Mar/13 15:45"
PDFBOX-1505,PDFBOX,"[PATCH] CharStringRenderer does not render CharString data correctly for Type 2 CFF fonts",Bug,CLOSED,Minor,Fixed,2.0.0,1.8.0,FontBox,None,,"I have a requirement to render the characters from a OTF CFF font and to get the bounding box for each character. I initially tried to use the CharStringRenderer but found the bounding box data was very different to the actual characters. Because the renderer outputs the character as a GeneralPath, I was able to draw this to a bitmap and view it. What I found was that the characters were not being drawn correctly which was effecting the bounds. I will post an image and patch in a moment to show the issue and resolution I used.",0,"Andreas Lehmkühler","Robert Meyer",0,2,"31/Jan/13 15:01","23/Mar/13 12:56","03/Feb/13 15:23"
PDFBOX-1506,PDFBOX,"Incorrect visualization of PDF document via PageDrawer",Bug,CLOSED,Major,Fixed,"1.6.0, 1.7.1",2.0.0,FontBox,font,"windows 7","I tried to render page of my document via PageDrawer using method:
drawer.drawPage(g, page, drawDimension);
And got incorrect visualization of characters (see attachment), but if I use PDFTextStripperByArea, it extracts correct chars, problems in fonts.",0,"Andreas Lehmkühler","Alexander Stepanov",0,2,"03/Feb/13 12:23","17/Mar/16 19:06","11/Aug/13 15:21"
PDFBOX-1508,PDFBOX,"Extracting page causes incorrect clipping",Bug,CLOSED,Major,"Not A Problem",1.7.1,None,"Parsing, (1)",None,"windows 7, windows xp, windows","I have a compressed pdf from which i extract pages (each page will become an individual pdf file). The extracted pages are clipped incorrectly (text is cut), as opposed to original pdf that is not clipped. I traced it down to a missing mediabox attribute in the extracted pages, which exists in the original file as an attribute on all pages. Using the same file, but uncompressed, the extracted pages are not cut and the mediabox attribute is present.
The main code (without initializations and checks) used to load and extract pages is the following:
temp = new File("e:/temp.tmp");
rand = new RandomAccessFile(temp,"rw");
doc = PDDocument.loadNonSeq(file,rand);
PDPage page = (PDPage) doc.getPrintable(pageIndex);
PDDocument newDoc = new PDDocument();
newDoc.importPage(page);
newDoc.close();
doc.close();
rand.close();
temp.delete();",0,"Andreas Lehmkühler","Adina Toma",0,2,"05/Feb/13 13:24","21/Mar/13 09:58","09/Mar/13 15:40"
PDFBOX-151,PDFBOX,"Correct calculation of Type0Font size.","New Feature",CLOSED,Major,Duplicate,"0.7.0, 2.0.0",2.0.0,AcroForm,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1469146
Originally submitted by pedropuchalski on 2006-04-12 02:58.
Especially in org.pdfbox.pdmodel.interactive.form.
PDAppearance.calculateFontSize( PDFont pdFont,
PDRectangle boundingBox, List tokens, List daTokens )
method. I need it for correct insertion of data in pdf
form's fields in PDAppearance.setAppearanceValue(String
apValue). Soon I will upload some exemple files(I must
preper them first). And I'll try to do it by myself,
but it looks like hard thing to do",0,"Maruan Sahyoun",Anonymous,0,2,"12/Apr/06 09:58","17/Mar/16 19:07","03/Feb/15 22:24"
PDFBOX-1512,PDFBOX,"TextPositionComparator is not compatible with Java 7",Bug,CLOSED,Major,Fixed,"1.7.1, 2.0.0","1.8.8, 2.0.0","Text extraction",None,"java 1.7","The TextPostionCompartor causes the following exception running on Java 7: Unexpected RuntimeException from org.apache.tika.parser.ParserDecorator$1@9007fa2 Original cause: Comparison method violates its general contract!
I think the problem is with this check:
if ( yDifference < .1 ||
(pos2YBottom >= pos1YTop && pos2YBottom <= pos1YBottom) ||
(pos1YBottom >= pos2YTop && pos1YBottom <= pos2YBottom))
as it violates the contract requirement:
The implementor must also ensure that the relation is transitive: ((compare(x, y)>0) && (compare(y, z)>0)) implies compare(x, z)>0.
Finally, the implementor must ensure that compare(x, y)==0 implies that sgn(compare(x, z))==sgn(compare(y, z)) for all z.
Java 7 now is strict and throws exceptions when the contract is violated.",0,"Andreas Lehmkühler","Benjamin Papez",12,23,"07/Feb/13 09:36","27/Nov/15 23:12","12/Oct/14 13:11"
PDFBOX-1513,PDFBOX,"PDF signature improvements",Improvement,CLOSED,Minor,Fixed,1.7.1,1.8.0,"Parsing, (2)",None,,"Hallo,
i have some signing improvements and want to contribute it.
Changelog:
add ability to sign documents with xref streams (big thanks to A. Funk). This will significantly improve the signature creation, due to the fact that there are more and more documents with xref streams out there.
add ability to handle documents with hybrid xref (xref stream and table as fallback)
parsing incremental updated documents where the offsets of the xref entries doesn't match exactly the position of the object. The conflict solver tollerate objects that are +- 4 bytes out of the offset.
fix COSString parsing if there are malformed chars inside a hex string.
removed some confusing logging in the conflict solver
add ability to create and sign signature fields.
add ability to create pades signature timestamps (PAdES Part4)
improved the signature search and added new convenience methods to PDDocument.
add new methods to the PDSignature object (seed value dict)
add examples for signing pdf documents (just basic signatures, i try to add some for advanced signing with SignatureOptions and maybe a example for visual signing)
hope i don't forgot something.
All the changes are made on a pdfbox fork on github. A pull request will follow in a moment.
Best regards
Thomas",0,"Andreas Lehmkühler","Thomas Chojecki",0,2,"08/Feb/13 22:50","23/Mar/13 12:56","01/Mar/13 16:37"
PDFBOX-1514,PDFBOX,"Improved overlay cammand line tool","New Feature",CLOSED,Minor,Fixed,1.7.1,1.8.0,Utilities,Overlay,,"Balazs Jerk contributed a new command line tool providing an improved overlay functionality
http://markmail.org/message/6fzpeup7lordhyfq",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"10/Feb/13 16:59","23/Mar/13 12:56","10/Feb/13 17:25"
PDFBOX-1515,PDFBOX,"PDGraphicsState class receives null page argument leading to nullpointerexception",Bug,CLOSED,Critical,Fixed,1.7.1,1.8.1,"PDModel, (1)",None,"mac os x, ubuntu, windows, linux","workaround changes needed for PDGraphicsState constructor as reproduced below:
attached pdf file can be used to reproduce the exception
public PDGraphicsState(PDRectangle page) {
/*
TB - changes made here are a workaround which creates a default
GeneralPath assigned to currentClippingPath if the constructor
argument page is null. Probably a better remedy would be to ensure
that the page argument is not null or use a dedicated constructor if
page is null
*/
if (page != null) {
Dimension dimension = page.createDimension();
Rectangle rectangle = new Rectangle(dimension);
currentClippingPath = new GeneralPath(rectangle);
currentClippingPath = new GeneralPath(new Rectangle(page.createDimension()));
if (page.getLowerLeftX() != 0 || page.getLowerLeftY() != 0)
{ // Compensate for offset this.currentTransformationMatrix = this.currentTransformationMatrix.multiply(Matrix.getTranslatingInstance(-page.getLowerLeftX(), -page.getLowerLeftY())); }
} else
{ currentClippingPath = new GeneralPath(); }
}
Also, as a side effect of above workaround, made following change within PDFStreamEngine.processEncodedText:
/*
TB - needed to make change here, as we encounter here a knock on
effect of allowing null page arguments through in PDGraphicsState
constructor which creates a default GeneralPath assigned to
currentClippingPath. That workaround causes findMediaBox to return
null, so in that case we assign default values to pageHeight and
pageWidth here. Everything else seems to work as far as text
extraction is concerned.
*/
if (page.findMediaBox() != null) { pageHeight = page.findMediaBox().getHeight(); pageWidth = page.findMediaBox().getWidth(); }
else
{ pageHeight = 0; pageWidth = 0; }",0,"Andreas Lehmkühler","Tim Barrett",0,2,"12/Feb/13 09:31","10/Apr/13 17:10","06/Apr/13 10:11"
PDFBOX-1517,PDFBOX,"PDFSplit: split is set to one if no -split argument present",Bug,CLOSED,Minor,Fixed,None,1.8.0,None,None,,"Wiki http://pdfbox.apache.org/commandlineutilities/PDFSplit.html says that command
PDFSplit -startPage 5 -endPage 10 sample_with_13_pages.pdf
will provide a pdf containing all pages from 5 to 10 of the source pdf.
Instead it provides 5 pdf, each one page long.
From other point local variable startEndPageSet in org.apache.pdfbox.PDFSplit is never set.",0,"Andreas Lehmkühler",philpv,0,2,"13/Feb/13 14:05","02/May/13 02:30","14/Feb/13 17:56"
PDFBOX-1518,PDFBOX,"ClassCastException writing text to a page",Bug,CLOSED,Critical,Fixed,1.8.0,1.8.0,Writing,None,"windows, java 1.6","I switched from 1.7.1 to 1.8.0-SNAPSHOT. Following code did not work any longer:
@Test
public void testGenerateNewDocument() throws IOException, COSVisitorException {
PDDocument doc = null;
try
{ doc = new PDDocument(); PDPage page = new PDPage(); doc.addPage(page); PDFont font = PDType1Font.HELVETICA_BOLD; PDJpeg image = new PDJpeg(doc, getLogoInputStream() ); PDPageContentStream contentStream = new PDPageContentStream(doc, page, true, true); contentStream.beginText(); contentStream.setFont(font, 12); contentStream.moveTextPositionByAmount(100, 700); contentStream.drawString("Hello World!"); contentStream.endText(); contentStream.drawImage(image, 20, 20); contentStream.close(); doc.save( getWorkDirectory() + File.separator + "pdfbox-testGenerateNewDocument.pdf" ); }
finally {
if (doc != null)
{ doc.close(); }
}
}
java.lang.ClassCastException: org.apache.pdfbox.cos.COSName cannot be cast to java.lang.String
at org.apache.pdfbox.pdmodel.common.COSArrayList.convertStringListToCOSNameCOSArray(COSArrayList.java:364)
at org.apache.pdfbox.pdmodel.common.PDStream.setFilters(PDStream.java:300)
at org.apache.pdfbox.pdmodel.edit.PDPageContentStream.<init>(PDPageContentStream.java:258)
at org.apache.pdfbox.pdmodel.edit.PDPageContentStream.<init>(PDPageContentStream.java:159)
at tests.evaluation.pdfbox.PdfboxEvaluationTest.testGenerateNewDocument(PdfboxEvaluationTest.java:47)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:701)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:893)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1218)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
at org.testng.TestRunner.privateRun(TestRunner.java:768)
at org.testng.TestRunner.run(TestRunner.java:617)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
at org.testng.SuiteRunner.run(SuiteRunner.java:240)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:87)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
at org.testng.TestNG.run(TestNG.java:1022)
at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:109)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:202)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:173)",0,"Andreas Lehmkühler","Thomas Jodes",0,3,"14/Feb/13 16:17","23/Mar/13 12:56","16/Feb/13 13:01"
PDFBOX-1520,PDFBOX,"bug when reading embedded fonts",Bug,CLOSED,Major,Duplicate,1.7.1,None,None,None,,"Dear Sir
My pdf file has embedded fonts but all is Arial , the problem when some char is bold i got the following error in java console
org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont
INFO: Can't read the embedded font AAWTAD+Arial
26/12/2012 02:16:50 م org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont
INFO: Using font Arial instead
26/12/2012 02:16:51 م org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font getawtFont
INFO: Can't read the embedded font AAWSAD+Arial
you got any idea to solve this problem
thanks",0,"Andreas Lehmkühler","Maho Rashad",0,4,"16/Feb/13 10:56","18/Apr/16 05:38","17/Feb/13 10:37"
PDFBOX-1522,PDFBOX,"Some PDF files are causing exception (java.io.IOException: Error: Could not find font(COSName{F53.0}) in map=)",Bug,CLOSED,Minor,Fixed,1.7.1,1.8.0,Utilities,None,redhat,"I am using PDFBox 1.7.1 and when parsing some PDF files, it is throwing exceptions and it's filling the Tomcat log very quickly (100MB in few seconds). There was another bug filed related to this issue. I tried the patch supplied in that bug but the issue is still there. I want to mention that the text gets extracted successfully from the PDF. But it just throws a log of WARN messages in the logs. As a workaround, I have set the LOG level to ERROR to avoid those WARN messages.
Here is the problematic PDF file:
http://doratst.uark.edu/fedora/repository/default%3A1590/OBJ/Traveler20120822.pdf
Related bug:
https://issues.apache.org/jira/browse/PDFBOX-1359#comment-13584669
I am getting the following exception:
WARN 2013-02-22 14:41:19,519 (PDFStreamEngine) java.lang.NullPointerException
java.lang.NullPointerException
WARN 2013-02-22 14:41:19,519 (PDFStreamEngine) java.lang.NullPointerException
java.lang.NullPointerException
WARN 2013-02-22 14:41:19,519 (PDFStreamEngine) java.io.IOException: Error: Could not find font(COSName
{F53.0}) in map={F50.1=org.apache.pdfbox.pdmodel.font.PDType1Font@50246923, F51.0=org.apache.pdfbox.pdmodel.font.PDType1Font@672a1f0}
java.io.IOException: Error: Could not find font(COSName{F53.0}
) in map=
{F50.1=org.apache.pdfbox.pdmodel.font.PDType1Font@50246923, F51.0=org.apache.pdfbox.pdmodel.font.PDType1Font@672a1f0}
at org.apache.pdfbox.util.operator.SetTextFont.process(SetTextFont.java:57)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:556)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:270)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)
at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:67)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:556)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:270)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)
at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:67)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:556)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:270)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:448)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:372)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:328)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:247)
at dk.defxws.fedoragsearch.server.TransformerToText.getTextFromPDF(TransformerToText.java:335)
at dk.defxws.fedoragsearch.server.TransformerToText.getText(TransformerToText.java:194)
at dk.defxws.fedoragsearch.server.GenericOperationsImpl.getDatastreamText(GenericOperationsImpl.java:668)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.xalan.extensions.ExtensionHandlerJavaClass.callFunction(ExtensionHandlerJavaClass.java:399)
at org.apache.xalan.extensions.ExtensionHandlerJavaClass.callFunction(ExtensionHandlerJavaClass.java:438)
at org.apache.xalan.extensions.ExtensionsTable.extFunction(ExtensionsTable.java:220)
at org.apache.xalan.transformer.TransformerImpl.extFunction(TransformerImpl.java:473)
at org.apache.xpath.functions.FuncExtFunction.execute(FuncExtFunction.java:206)
at org.apache.xpath.Expression.executeCharsToContentHandler(Expression.java:311)",0,"Andreas Lehmkühler","Diwakar Timilsina",0,2,"22/Feb/13 20:51","23/Mar/13 12:56","01/Mar/13 17:21"
PDFBOX-1523,PDFBOX,"Manifest should support Specification entries",Improvement,CLOSED,Trivial,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",None,None,"java 1.7","The PDFBox's MANIFEST.MF has "Bundle-..." entries. It should (also) support the standard
Specification-Vendor:
Specification-Title:
Specification-Version:
Implementation-Vendor:
Implementation-Title:
Implementation-Version:
entries so that the standard Java API of Package can be used to access the info in Java code (e.g. via getSpecificationVersion(), getImplementationVersion(), ...).",0,"Andreas Lehmkühler",MH,0,3,"25/Feb/13 11:18","28/Mar/15 14:10","22/Jan/15 18:35"
PDFBOX-1528,PDFBOX,"rename org.apache.padaf.xmpbox to org.apache.xmpbox",Task,CLOSED,Minor,Fixed,1.7.1,1.8.0,XmpBox,None,,"Similar to the preflight package the xmpbox package should be renamed to org.apache.xmpbox",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"04/Mar/13 17:58","23/Mar/13 12:56","04/Mar/13 18:07"
PDFBOX-1530,PDFBOX,"Respect PDFBox coding rules in new modules",Task,CLOSED,Major,Fixed,None,1.8.0,"Preflight, (1)",None,,"Respect PDFBox coding rules in new modules",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"06/Mar/13 15:47","23/Mar/13 12:56","11/Mar/13 19:58"
PDFBOX-1531,PDFBOX,"Reaarange xmpbox and preflight maven modules",Task,CLOSED,Major,Fixed,1.7.1,1.8.0,None,None,,"The xmpbox and the preflight maven module shall be rearranged similar to the other parts of PDFBox. I'd like to do the following:
create one jar for both maven modules limited to the stuff of those packages (nothing to do for xmpbox)
create a new module similar to the app module, providing a standalone jar to be used for preflight",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"06/Mar/13 18:19","02/May/13 02:30","10/Mar/13 18:33"
PDFBOX-1533,PDFBOX,"When merging certain PDF's several odd looking empty pages occur in the result",Bug,CLOSED,Major,Fixed,"1.7.1, 1.8.4, 2.0.0","1.8.7, 2.0.0",Utilities,None,,"Unfortunately I cannot attach a input file for this case as it contains confidential customer data, but I'll try to explain the problem in depth so you hopefully are able to track it down.
When we merge certain PDF's with the PDFMergerUtility the result contains several empty pages at the end of the document. It seems like that only certain pdf versions are effected (i.p.: 1.5 (Acrobat 6.x)).
I tracked the problem down to the the following part in the appendDocument method of the PDFMergerUtility:
 //finally append the pages
        List<PDPage> pages = srcCatalog.getAllPages();
        Iterator<PDPage> pageIter = pages.iterator();
        while( pageIter.hasNext() )
        {
            PDPage page = pageIter.next();
            PDPage newPage =
                new PDPage( (COSDictionary)cloner.cloneForNewDocument( page.getCOSDictionary() ) );
            newPage.setCropBox( page.findCropBox() );
            newPage.setMediaBox( page.findMediaBox() );
            newPage.setRotation( page.findRotation() );
            destination.addPage( newPage );
        }
The problem is that call to srcCatalog.getAllPages(); returns for example 6 PDPage objects, but for the same input document, the call to source.getNumberOfPages() returns only 2. Thus we add 4 odd empty pages to the result document.
I hope this description is good enough to figure out the problem. Don't hesitate to ask for further details.",0,"John Hewson","Christian Connert",2,5,"07/Mar/13 08:28","19/Sep/14 14:40","08/Jul/14 18:30"
PDFBOX-1535,PDFBOX,"Extract text from PDF cause Nullpointer Exception in PDFStreamEngine.processEncodedText Method",Bug,CLOSED,Critical,Fixed,1.7.1,1.8.0,"Text extraction",None,"java 1.7","The xpdfbin-win-3.03 -> pdftotext.exe works fine with this pdf File.
Tried pdfbox Version 1.2.1 too, but same error.
[org.apache.pdfbox.util.PDFStreamEngine] java.lang.NullPointerException
java.lang.NullPointerException
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:357)
at org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:556)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:270)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:217)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:448)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:372)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:328)",0,"Andreas Lehmkühler",Alex,0,2,"08/Mar/13 15:38","23/Mar/13 12:56","09/Mar/13 14:24"
PDFBOX-1536,PDFBOX,"Improve the ExtractEmbeddedFiles example to deal with different kind of trees representing the embedded files",Improvement,CLOSED,Minor,Fixed,1.7.1,1.8.0,None,None,,"I found two different kinds of EmbeddedFile-Trees:
a root tree node containing all embedded files as names array and no kids
a root tree node containing the embedded files as kid nodes no names array",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"10/Mar/13 17:58","23/Mar/13 12:56","10/Mar/13 18:00"
PDFBOX-1538,PDFBOX,"Content of annotation not visible in image (converted from pdf)",Bug,CLOSED,Major,Fixed,1.7.1,1.8.1,None,None,,"pdPage.convertToImage converts pdf to image but content of annotation is missing",0,"Andreas Lehmkühler","Juraj Lonc",0,2,"11/Mar/13 14:58","10/Apr/13 17:10","24/Mar/13 13:44"
PDFBOX-1540,PDFBOX,"Add XML output option to preflight",Wish,CLOSED,Minor,Fixed,1.8.0,"1.8.3, 2.0.0",Preflight,"features request xml",,"As part of a recent SPRUCE hackathon (http://wiki.opf-labs.org/display/SPR/Home) we added XML output to preflight. It would be good if preflight was able to offer this sort of output by default. Example outputs from our code are here: https://github.com/petecliff/pdfeh/tree/master/sample_preflight_outputs Our XML output code is here: https://github.com/willp-bl/preflight-app-mod You might want to implement it your own way?
As an aside; we have a format corpus of test files here: https://github.com/openplanets/format-corpus Use of the files and contributions are encouraged!
Thanks",0,"Guillaume Bailleul","William Palmer",7,4,"13/Mar/13 11:02","30/Nov/13 17:02","18/Jun/13 09:46"
PDFBOX-1541,PDFBOX,"expected='endstream' actual='' failure to parse",Bug,CLOSED,Major,Fixed,1.7.1,"1.8.4, 2.0.0","Text extraction",None,"ubuntu, java 1.7","Following exception thrown when parsing attached PDF
Caused by: java.io.IOException: expected='endstream' actual='' org.apache.pdfbox.io.PushBackInputStream@2a789924
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSStream(BaseParser.java:597)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:575)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:187)",0,"Andreas Lehmkühler","Jinder Aujla",1,5,"14/Mar/13 20:32","31/Jan/14 06:46","08/Dec/13 13:12"
PDFBOX-1543,PDFBOX,"Remove the ReplaceString example",Improvement,CLOSED,Major,Fixed,1.7.1,2.0.0,Utilities,None,,"I'd like to remove the RepleceString example as it leads to the missunderstandingt that there is an easy way to replace any string in any pdf.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"19/Mar/13 14:03","17/Mar/16 19:07","08/Oct/13 16:55"
PDFBOX-1544,PDFBOX,"Not able to loadNonSeq document larger than 2GB",Bug,CLOSED,Major,Duplicate,1.7.1,None,"Parsing, (1)",None,,"When I try to open open a document larger than 2GB (I have test with a 21GB document) using the method PDDocument.loadNonSeq(). The PDFParser trigger me the following error:
Exception in thread "main" java.io.IOException: Error: Expected an integer type, actual='22580639698'
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1608)
at org.apache.pdfbox.pdfparser.PDFParser.parseStartXref(PDFParser.java:677)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:237)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:574)
at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1124)
at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1107)
the problem seems to come from BaseParser which try to return int type.",0,"Andreas Lehmkühler","Pierre Huttin",0,2,"20/Mar/13 16:25","04/Nov/13 18:08","04/Nov/13 18:08"
PDFBOX-1546,PDFBOX,"The document's page tree contains an invalid node",Bug,CLOSED,Major,"Not A Problem",1.7.1,None,PDModel,newbie,"windows 7, acrobat","After removing some pages and saving the PDDocument opening the document with adobe reader gives the following error.
The document's page tree contains an invalid node
The original document does not.",0,"Eric Leleu","Ken White",0,2,"22/Mar/13 06:59","19/Apr/13 16:05","19/Apr/13 16:05"
PDFBOX-1547,PDFBOX,"TextPosition.getX() and getY() do not work properly with CropBox",Bug,CLOSED,Major,Fixed,None,1.8.1,None,None,,"TextPosition.getX() and getY() are supposed to calculate position relative to upper left corner of page.
When PDF contains CropBox then these functions return incorrect values. CropBox is ignored.
Text is relative to CropBox coordinates but calculations are made only with pageWidth and pageHeight, and that is wrong.
"page" in function description means MediaBox or CropBox?",0,"Andreas Lehmkühler","Juraj Lonc",0,2,"22/Mar/13 13:09","10/Apr/13 17:10","27/Mar/13 19:00"
PDFBOX-1549,PDFBOX,"TTFSubFont generates bug-prone TTF sub fonts screwing some printers",Bug,CLOSED,Major,Fixed,1.8.0,1.8.1,FontBox,None,,"The extracted TTF fonts generated by TTFSubFont do not conform to the TrueType standard.
Most notably, the font checksum is calculated to an invalid value
among other more subtle issues. Users may experience a screwed up firmware of Minolta printers when such a file is printed via Adobe Reader and the Windows PostScript printer driver.
With the help of Microsoft's font validator tool, I have already been able to
fix most of these problems in my original code:
http://www.microsoft.com/typography/fontvalidator.mspx
A port of my patch to pdfbox is on the way, but it's quite cumbersome to port the patch to the pdfbox code. (tab vs. space, testcases needed...)",0,"Andreas Lehmkühler","Wolfgang Glas",0,2,"22/Mar/13 22:06","10/Apr/13 17:10","07/Apr/13 10:32"
PDFBOX-1550,PDFBOX,"Helv vs. Helvetica font names cause PDField.setValue to fail",Bug,CLOSED,Major,Fixed,1.8.0,2.0.0,AcroForm,Appearance,"mac os x","I have a PDF form using AcroForm that generates a "Don't know how to calculate the position for non-simple fonts" exception when calling setValue on a textbox field. After running it in a debugger, it appears the problem is that the font inside the AcroForm resources is named "Helv" but PDFBox gets "Helvetica" as the cosFontName on line 434 of PDAppearance.java. So then when it tries to get the font from the formResources on line 439 (formResources.getFonts().get( fontName ), it returns null because there is no "Helvetica" font, only "Helv". I changed the fontName variable's value to "Helv" in the debugger and that allowed setValue to complete without error.
Is this a problem with the form? I didn't see any way to fix it in Acrobat Pro's UI.",0,"Maruan Sahyoun","Wes Morgan",2,5,"24/Mar/13 17:19","17/Mar/16 19:08","03/Feb/15 23:10"
PDFBOX-1551,PDFBOX,"Merging PDFs with interactive forms results in a corrupt PDF",Bug,CLOSED,Major,Fixed,1.8.0,1.8.1,PDModel,None,,"Merging two PDFs with interactive form elements results in a corrupt PDF which can't be opened with Acrobat Reader.
The usecase works fine with PDFBox 1.7.1 (java -jar pdfbox-app-1.7.1.jar PDFMerger interactive_filled.pdf interactiveform_enabled.pdf out.pdf).
The usecase results in a corrupt PDF with PDFBox 1.8.0 (java -jar pdfbox-app-1.8.0.jar PDFMerger interactive_filled.pdf interactiveform_enabled.pdf out.pdf)",0,"Thomas Chojecki","Gerhard Temper",1,3,"25/Mar/13 08:28","10/Apr/13 17:10","07/Apr/13 10:54"
PDFBOX-1555,PDFBOX,"Javascript after %%EOF fails parsing",Bug,CLOSED,Major,"Won't Fix",1.8.0,None,Parsing,None,,"Hi
I was investigating a failure to parse and debugging the pdfbox code when I noticed in the PDF document that I can't forward at the end of the file this:
%%EOF^M
^M
^M
<script type="text/javascript">^M
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");^M
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));^M
</script>^M
<script type="text/javascript">^M
try {^M
var pageTracker = _gat._getTracker("UA-7429935-1");^M
pageTracker._trackPageview();^M
} catch(err) {}</script>^M
^M
^M
So the document ends.. but there is more content.. basically some javascript. What the parser does is it gets to
line 492 in org.apache.pdfbox.pdfparser.PDFParser
isEndOfFile get's set to true, but because it's not the end of the actual stream.. it continues this was a fix in PDFBOX-979.
Next time around in the loop it reads
<script type="text/javascript">
which I think it ignores.. then trys to read
var
twice as a number. Then blows up.. so I've playing around thinking of sensible thing to do. But worried that I might introduce some other issue. I assume this is legal structure for a PDFDocument. It opens fine in a viewer.",0,"Andreas Lehmkühler","Jinder Aujla",0,5,"28/Mar/13 22:37","12/Feb/15 18:06","12/Feb/15 18:06"
PDFBOX-1556,PDFBOX,"Saving a document containing a xfa form creates invalid pdf",Bug,CLOSED,Major,Fixed,1.8.0,1.8.1,AcroForm,None,,"When saving a PDDocument containing a PDXFA form the pdf file can no longer be opened by adobe acrobat or GNOME's evince document viewer.",0,"Thomas Chojecki","Jörn Horstmann",0,4,"02/Apr/13 10:06","10/Apr/13 17:10","07/Apr/13 10:54"
PDFBOX-1557,PDFBOX,"NonSequentialPDFParser incorrectly parsing document info",Bug,CLOSED,Minor,Fixed,1.8.0,1.8.1,Parsing,None,"mac os x, eclipse","When using the NonSequentialPDFParser, the PDDocumentInformation returned by getDocumentInformation() seems to contain all null entries, which does not occur when using the standard PDFParser. I have a large batch of PDF files which have random and strange issues that cause them to occasionally fail with the standard parser, so I was experimenting with the NonSequential parser and came across this issue.
I'll attempt to attach some test code & a test PDF file for which I can replicate the issue.",0,"Andreas Lehmkühler","Robert Bartlett-Schn",0,3,"03/Apr/13 21:40","20/May/13 10:14","07/Apr/13 11:17"
PDFBOX-1558,PDFBOX,"Unused PDSignature class should be removed",Bug,CLOSED,Minor,Fixed,1.8.0,1.8.1,PDModel,None,,"In 1.8.0, the uses of class org.apache.pdfbox.pdmodel.interactive.form.PDSignature have been replace with ....form.PFSignatureField, but the old ...form.PDSignature class still exists.
This can be confusing when upgrading to PDFBox 1.8.0 – code that tests for the presence of PDSignature instances will compile, but fail to work correctly. Removing the old PDSignature will give upgraders a more helpful compilation error.
The old ...form.PDSignature class should be removed or the new ...form.PDSignatureField should be renamed to completely replace it.",0,"Andreas Lehmkühler","Chuck Houpt",0,2,"04/Apr/13 14:46","10/Apr/13 17:10","07/Apr/13 10:53"
PDFBOX-1559,PDFBOX,"Error when using monospaced Fonts",Bug,CLOSED,Major,Fixed,1.8.0,1.8.1,None,None,"windows xp, eclipse","I'm trying to load some Ubuntu fonts in a PDF but I'm having problems with monospaced ones.
An small example:
--------------------------------------------------------------------------------------------
public class PDFTest
{
public static void main (String [] args) throws IOException
{
PDDocument document = null;
try
{ document = new PDDocument (); PDPage page = new PDPage (); document.addPage (page); PDFont font = PDTrueTypeFont.loadTTF (document, "D:\\UbuntuMono-R.ttf"); PDPageContentStream contentStream = new PDPageContentStream ( document, page); contentStream.beginText (); contentStream.setFont (font, 12); contentStream.moveTextPositionByAmount (100, 700); contentStream.drawString ("Hello World"); contentStream.endText (); contentStream.close (); document.save ("d:\\Hello World.pdf"); document.close (); }
catch (Exception e)
{ e.printStackTrace (); }
}
}
--------------------------------------------------------------------------------------------
Output:
--------------------------------------------------------------------------------------------
java.lang.ArrayIndexOutOfBoundsException: 5
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadDescriptorDictionary(PDTrueTypeFont.java:409)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:201)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:177)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:158)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:145)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:132)
at es.datisa.informes.test.PDF.PDFTest.main(PDFTest.java:21)
--------------------------------------------------------------------------------------------
Trying with other monospaced (like DejaVuSansMono.ttf from windows fonts) shows the same error. If I try with another Ubuntu Font (not mono) everything is ok.",0,"Andreas Lehmkühler","Juan Carlos Castilla",0,3,"06/Apr/13 15:01","10/Apr/13 17:10","06/Apr/13 16:03"
PDFBOX-1560,PDFBOX,"Migrate the PDFBox website to the ASF CMS",Task,CLOSED,Minor,Fixed,None,None,None,None,,"Issue to track the migration of the PDFBox website to the ASF CMS",0,"Maruan Sahyoun","Maruan Sahyoun",0,7,"07/Apr/13 15:45","31/May/13 11:23","30/May/13 16:32"
PDFBOX-1561,PDFBOX,"PDFBox throws exception with PDFTextStripper.getText",Bug,CLOSED,Major,Fixed,1.7.0,1.8.2,None,None,,"I am using the .NET port of PDFBox 1.7.0. Calling PDFTextStripper::getText throws exception
java.io.IOException: Not a number: +
with callstack
bei org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext()
bei org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext()
bei org.apache.pdfbox.util.PDFStreamEngine.processSubStream(COSStream )
bei org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDPage pdp, PDResources pdr, COSStream coss)
bei org.apache.pdfbox.util.PDFStreamEngine.processStream(PDPage pdp, PDResources pdr, COSStream coss)
bei org.apache.pdfbox.util.PDFTextStripper.processPage(PDPage pdp, COSStream coss)
bei org.apache.pdfbox.util.PDFTextStripper.processPages(List l)
bei org.apache.pdfbox.util.PDFTextStripper.writeText(PDDocument pdd, Writer w)
bei org.apache.pdfbox.util.PDFTextStripper.getText(PDDocument pdd)",0,"Andreas Lehmkühler","Markus Griesser",0,2,"08/Apr/13 11:53","02/Jun/13 13:35","18/Apr/13 20:49"
PDFBOX-1563,PDFBOX,"Could not parse predefined CMAP file for 'Adobe-WinCharSetFFFF-UCS2'",Bug,CLOSED,Major,"Won't Fix",1.8.1,None,"Text extraction",None,,,0,"Andreas Lehmkühler",huangchangan,0,3,"11/Apr/13 09:01","13/Apr/13 12:07","13/Apr/13 12:07"
PDFBOX-1564,PDFBOX,"Extending COSName to produce PDF/A with correct OutputIntents",Improvement,CLOSED,Minor,Fixed,1.8.2,"1.8.3, 2.0.0",None,None,,"Hello,
First of all, thanks for this tool, found it very useful.
Below some sample code to include (sRGB) ICC profile and corresponding
OutputIntents to the generated PDF/A. The produced PDF successfully
passes validation.
It would be nice to have the COSName' extension included in the next
release so we won't have to use a homemade build.
Regards,
Elyes
Extension in COSName (org.apache.pdfbox.cos)
public static final COSName OutputIntents = new COSName( "OutputIntents" );
public static final COSName OutputIntent = new COSName( "OutputIntent" );
public static final COSName DestOutputProfile = new COSName( "DestOutputProfile" );
Add new classes
public class OutputIntents implements COSObjectable {
private COSDictionary dictionary;
public OutputIntents(PDDocument doc, InputStream colorProfile) throws Exception
{ dictionary = new COSDictionary(); dictionary.setItem(COSName.TYPE, COSName.OutputIntent); dictionary.setItem(COSName.S, COSName.GTS_PDFA1); DestOutputProfile dop = new DestOutputProfile(doc,colorProfile, false); dop.configure(); dictionary.setItem(COSName.DestOutputProfile, dop); }
public COSBase getCOSObject() {
return dictionary;
}
public COSDictionary getDictionary()
{ return dictionary; }
public void setInfo( String value )
{ dictionary.setString("Info", value); }
public void setOutputCondition( String value )
{ dictionary.setString("OutputCondition", value); }
public void setOutputConditionIdentifier( String value )
{ dictionary.setString("OutputConditionIdentifier", value); }
public void setRegistryName( String value )
{ dictionary.setString("RegistryName", value); }
}
public class DestOutputProfile extends PDStream {
public DestOutputProfile(PDDocument document) {
super(document);
}
public DestOutputProfile(COSStream str) {
super(str);
}
public DestOutputProfile(PDDocument doc, InputStream str)
throws IOException {
super(doc, str);
}
public DestOutputProfile(PDDocument doc, InputStream str, boolean filtered)
throws IOException {
super(doc, str, filtered);
}
public void configure(){
try {
getStream().setFilters(COSName.FLATE_DECODE);
getStream().setInt( COSName.LENGTH, getByteArray().length );
getStream().setInt(COSName.N, 3);
addCompression();
}
catch (Exception e) {
e.printStackTrace();
System.exit(-1);
}
}
}
Sample code to include output intent
PDDocumentCatalog cat = doc.getDocumentCatalog();
COSDictionary root = (COSDictionary)cat.getCOSObject();
/* Here you have to download .icc profile */
InputStream colorProfile =
OutputIntents.class.getResourceAsStream("/test/color/sRGB.icc");
OutputIntents oi = new OutputIntents(doc, colorProfile);
oi.setInfo("sRGB IEC61966-2.1");
oi.setOutputCondition("sRGB IEC61966-2.1");
oi.setOutputConditionIdentifier("sRGB IEC61966-2.1");
oi.setRegistryName("http://www.color.org");
COSArray outputIntents = new COSArray();
outputIntents.add(oi);
root.setItem("OutputIntents", outputIntents);",0,"Guillaume Bailleul","Elyes Lehtihet",0,3,"12/Apr/13 10:02","21/Jan/15 19:52","08/Dec/13 14:40"
PDFBOX-1565,PDFBOX,"Add support for Lab color spaces","New Feature",CLOSED,Major,Fixed,1.8.2,1.8.2,PDModel,LabColorspace,,"PDFBox doesn't support Lab color spaces.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"13/Apr/13 14:09","07/Aug/13 07:22","13/Apr/13 14:17"
PDFBOX-1567,PDFBOX,"Error Opening PDF in Adobe Reader - The font 'HoneyScript-Light' contains bad /Widths.",Bug,CLOSED,Critical,Duplicate,1.7.0,None,"FontBox, (1)",None,"java, mac os, linux","The pdf created using PDFBOX 1.7.0 file contains errors when opening in Adobe Reader with error msg: "The font 'HoneyScript-Light' contains bad /Widths."
Created a new pdf file written with the below piece of code and tried to open it in Adobe Reader, while opening getting an error message- "The font 'HoneyScript-Light' contains bad /Widths." . This error is also occurring even while writing in existing pdf document.
I am using Adobe Reader Version 11.0.1. , even tried in 10.1.6. the same issue persist
PDDocument pdDocument = new PDDocument();
pdDocument.addPage(new PDPage());
BufferedImage bi = new BufferedImage(10, 10, 10);
Points point = new Points(300, 500);
@SuppressWarnings("unchecked")
List<PDPage> list = pdDocument.getDocumentCatalog().getAllPages();
PDPage pdPage = list.get(list.size() - 1);
String fontPathName = "HoneyScript-Light.ttf";
PDFont fonta = PDTrueTypeFont.loadTTF(pdDocument,
Sample.class.getClassLoader()
.getResource(fontPathName).openStream() );
PDJpeg ximage = new PDJpeg(pdDocument, bi);
PDPageContentStream contentStream = new PDPageContentStream(pdDocument,
pdPage, true, true);
contentStream.beginText();
contentStream.setFont(fonta,18);
contentStream.moveTextPositionByAmount(point.getX(), point.getY() - 10 );
contentStream.setNonStrokingColor(Color.black);
contentStream.drawString("Name: ");
contentStream.endText();
contentStream.close();
pdDocument.save("test/Test.pdf");
pdDocument.close();
The same has been tried with fonts such as MyriadSetText.ttf, Miama.ttf, Myriad.ttf.",0,"Andreas Lehmkühler","Harippriya Parameswa",0,2,"15/Apr/13 13:38","17/Apr/13 18:43","17/Apr/13 18:43"
PDFBOX-1569,PDFBOX,"Chinese, Korean - MultiByte Character displayed incorrectly",Bug,CLOSED,Blocker,Duplicate,"1.7.0, 1.8.0, 1.8.1",None,"FontBox, (1)","Asian Chinese Langua","java, mac os, linux","While trying using Chinese Character to write to a PDF, it Displays incorrectly. Sample Code tried .
Also tried with other TTF Files fireflysung.ttf,gbsn00lp.ttf, 金梅毛行书.TTF, SimSun.ttf . Have also tried Modifying the Encoding in PDTrueTypeFont.java loadTTF(PDDocument doc, InputStream stream) method.
PDDocument pdDocument = new PDDocument();
pdDocument.addPage(new PDPage());
BufferedImage bi = new BufferedImage(10, 10, 10);
Points point = new Points(300, 500);
@SuppressWarnings("unchecked")
List<PDPage> list = pdDocument.getDocumentCatalog().getAllPages();
PDPage pdPage = list.get(list.size() - 1);
String fontPathName = "sazanami-gothic.ttf";
PDFont fonta = PDTrueTypeFont.loadTTF(pdDocument,
Sample.class.getClassLoader()
.getResource(fontPathName).openStream() );
PDJpeg ximage = new PDJpeg(pdDocument, bi);
PDPageContentStream contentStream = new PDPageContentStream(pdDocument,
pdPage, true, true);
contentStream.beginText();
contentStream.setFont(fonta,18);
contentStream.moveTextPositionByAmount(point.getX(), point.getY() - 10 );
contentStream.setNonStrokingColor(Color.black);
contentStream.drawString("悲しい");
contentStream.endText();
contentStream.close();
pdDocument.save("test/Test.pdf");
pdDocument.close();
I also looked into other issues reported PDFBOX-1071, PDFBOX-1302 , PDFBOX-491, PDFBOX-696,PDFBOX-725",0,"Andreas Lehmkühler","Harippriya Parameswa",0,2,"17/Apr/13 07:35","18/Apr/13 19:26","18/Apr/13 19:26"
PDFBOX-157,PDFBOX,"never add documents when we don't create index",Bug,CLOSED,Minor,"Not A Problem",None,None,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1477554
Originally submitted by fanch444 on 2006-04-27 03:14.
If we want to reindex a Folder and we call the index
method of IndexFiles with the parameter create to
false, it doesn't add any documents. The problem is at
line 166 in
src.org.pdfbox.searchengine.lucene.IndexFiles (version
0.7.2)
The index method calls two times the same method with
same parameters: indexDocs(root, index, CREATE);
I think it should change the line 166 in
indexDocs(root, index, TRUE);
public void index( File root, boolean create, String
index )
{
try
{
Date start = new Date();
writer = new IndexWriter(index, new
StandardAnalyzer(), create);
writer.maxFieldLength = 1000000;
if (!create)
{ // delete stale docs deleting = true; indexDocs(root, index, create); }
indexDocs(root, index, create); //
add new docs
System.out.println("Optimizing index...");
writer.optimize();
writer.close();
Date end = new Date();
System.out.print(end.getTime() -
start.getTime());
System.out.println(" total milliseconds");
}
catch( Exception e )
{ e.printStackTrace(); }
}",0,"Andreas Lehmkühler",Anonymous,0,1,"27/Apr/06 10:14","31/Oct/13 11:05","31/Oct/13 11:05"
PDFBOX-1572,PDFBOX,"PDFBox ExtracText problems with "ª"",Improvement,CLOSED,Major,"Not A Problem",None,1.8.1,None,None,,"PDFBox have problems to detect ª in some PDF's.
Examples:
I have in my PDF: 1ª
When I extract text: P
I have in my PDF: 2ª
When I extract text: 22
I have in my PDF: 3ª
When I extract text: 32
and there are a lot of more examples related with "ª"",0,"Timo Boehme","Daniel Tizon",0,2,"19/Apr/13 09:25","19/Apr/13 11:15","19/Apr/13 11:15"
PDFBOX-1574,PDFBOX,"ImportFDF fails to do anything",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Utilities,FDF,"windows 7, acrobat, eclipse","I created a dead-simple PDF with form fields in Acrobat and generated an FDF file from it.
Tried to run ImportFDF on these files and the resulting file is totally blank.
Attached are the input files (1.pdf, 1_data.fdf), the result file (2.pdf) and the warnings ImportFDF generated.",0,"Andreas Lehmkühler","Gilad Denneboom",1,5,"21/Apr/13 22:11","13/Dec/14 14:15","02/Nov/14 13:19"
PDFBOX-1575,PDFBOX,"PDFTextStripper adds spaces after a detached words",Bug,CLOSED,Major,"Not A Problem",1.8.1,None,"Text extraction","pdfbox space whitesp",linux,"Hello dear developers,
I noticed that PDFTextStripper sometimes adds spaces after a completely detached words...
For example - if you make text extraction for attached file you will se that PDFTextStripper adds one space after words: "Qty " and "Unit Price " but not adds after "Description" and "Line Total".
I think this is a bug, because after words "Qty " and "Unit Price " should not be present the whitespace.
Can you please fix it?
(see attach)
Thank you very much,
Vitalie",0,"Andreas Lehmkühler","Vitalie Bureanu",0,2,"22/Apr/13 08:50","25/May/13 15:43","25/May/13 15:43"
PDFBOX-1576,PDFBOX,"StackOverflowError [COSDictionary.toString(COSDictionary.java:1418)]",Bug,CLOSED,Major,Fixed,"1.6.0, 1.7.1","1.8.3, 2.0.0","Swing GUI",None,,"I continue to get the Stackoverflow issue with PdfBox 1.7.1 with the attached PDF.",0,"Andreas Lehmkühler","Swati Swoboda",0,2,"22/Apr/13 20:22","30/Nov/13 17:02","07/Oct/13 18:11"
PDFBOX-1578,PDFBOX,"The English Words are shown as Symbols and wrongly displayed",Bug,CLOSED,Minor,"Not A Problem","1.7.0, 1.8.1",None,"FontBox, (1)",None,"java, mac os, linux","When i run the below piece of code in my server continuously it is creating the text with symbols and showing incorrect word.
String fontFile = "Monika.ttf";
String text="Hello";
float fontSize = 20;
Font font = null;
try
{ font = Font.createFont(Font.TRUETYPE_FONT, Sample.class.getClassLoader() .getResource(fontFile).openStream()); font = font.deriveFont(fontSize); }
catch (Exception e)
{ throw new IOException("could not load TrueTypeFont for file: " + fontFile, e); }
FontRenderContext fc = new FontRenderContext(null, true, true);
Rectangle2D bounds = font.getStringBounds(text, fc);
int width = (int) bounds.getWidth();
int height = (int) bounds.getHeight();
int maxWidth = 500;
int maxHeight = 50;
int minFontSize = 20;
while (width > (maxWidth - 2 *5)
height > (maxHeight - 2 * 5))
Unknown macro: { if (fontSize <= minFontSize) { break; } fontSize--; font = font.deriveFont(fontSize); bounds = font.getStringBounds(text, fc); width = (int) bounds.getWidth(); height = (int) bounds.getHeight(); }
int paddingWidth = 5;
int paddingHeight = 5;
BufferedImage buffer = null;
PDDocument doc = new PDDocument();
PDPage page = new PDPage(new PDRectangle(width + 2 * paddingWidth,
height + 2 * paddingHeight));
BufferedImage newBufferedImage = ImageIO.read(Sample.class
.getClassLoader()
.getResource(Sample.get("image.blue.background"))
.openStream());
PDJpeg newImage = new PDJpeg(doc, newBufferedImage);
PDFont pdffont = null;
try
{ pdffont = PDTrueTypeFont.loadTTF(doc, Sample.class.getClassLoader().getResource(fontFile).openStream()); }
catch (Exception e)
{ throw new IOException( "could not load PDTrueTypeFont for file: " + fontFile, e); }

PDPageContentStream stream = new PDPageContentStream(doc, page);
stream.drawImage(newImage, 0, 0);
stream.setNonStrokingColor(Color.BLACK);
stream.setStrokingColor(Color.BLACK);
stream.beginText();
stream.setFont(pdffont, fontSize);
stream.moveTextPositionByAmount(paddingWidth,
(float) (height / 2.5 + paddingHeight));
stream.drawString(text);
stream.endText();
stream.close();
buffer = page.convertToImage(BufferedImage.TYPE_INT_RGB,
94);
// Convert image image to PDXObjectImage
PDXObjectImage watermark = new PDJpeg(doc, buffer);
@SuppressWarnings("rawtypes")
List pages = doc.getDocumentCatalog().getAllPages();
Iterator iterator1 = pages.iterator();
PDPage page1=null;
while(iterator1.hasNext())
{ page1 = (PDPage) iterator1.next(); }
PDPageContentStream stream1 = new PDPageContentStream(doc, page1, true, true);
stream1.drawImage(watermark,50,60);
stream1.close();
ImageIO.write(buffer, "jpeg", new
File("/Users/test/"+"text.jpeg"));
doc.close();",0,"Andreas Lehmkühler","Harippriya Parameswa",0,3,"24/Apr/13 14:49","17/Jun/13 06:20","17/Jun/13 06:20"
PDFBOX-1580,PDFBOX,"Oracle JVM crashes because of embedded fonts.",Bug,CLOSED,Blocker,Fixed,"1.7.0, (3)",1.8.2,PDModel,"PatchAvailable Regre",linux,"Oracle's closed-source font rendering chokes on some fonts embedded in PDFs because their cmap data is either missing or invalid.
Using OpenJDK, no crashes were observed.
The JVM crashes right after attempting to draw a glyph vector using codepoints, which is called from within PDSimpleFont#drawString.
Versions of pdfbox prior to 1.7.0 did not crash.
The crashes look like this:
JRE 6:
JRE version: 6.0_45-b06
Java VM: Java HotSpot(TM) 64-Bit Server VM (20.45-b01 mixed mode linux-amd64 compressed oops)
Problematic frame:
C [libfontmanager.so+0x242c8] imaginary long double+0xd8
JRE 7:
JRE version: 7.0_21-b11
Java VM: Java HotSpot(TM) 64-Bit Server VM (23.21-b01 mixed mode linux-amd64 compressed oops)
Problematic frame:
C [libt2k.so+0x2e6b1] Compute_cmapClass_GlyphIndex+0x1
Since older versions of pdfbox did not crash, I tracked the problem down to a call to java.awt.Font#canDisplayUpTo(String) that has been moved in 1.7.0 from the top of PDSimpleFont#drawString down to a branch. Moving the call back up prevented the crash.
It looks like a call to java.awt.Font#canDisplay(int) initializes some internal data structures of Oracle's fontmanager, preventing the JVM crash.
As I have observed this crash only for fonts that have been processed through PDType0Font, I have added a fix there, which should save us some cycles and, more importantly, should not create new problems.
Oracle bug reports have been filed for both JRE 6 and 7, including a "minimal" test case:
Oracle JRE 6: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=9002077
Oracle JRE 7: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=9002078
There have been a few other bug reports mentioning a similar crash on other platforms, older JRE versions, e.g.: PDFBOX-1426, PDFBOX-1336.
The patch provided here might fix these bugs, too.",0,"Thomas Chojecki","Christian Kohlschütt",0,3,"26/Apr/13 15:00","02/Jun/13 13:35","30/Apr/13 20:15"
PDFBOX-1581,PDFBOX,"Add PDDocument.save(File) and PDDocument.loadNonSeq(InputStream, ...)",Improvement,CLOSED,Minor,Fixed,1.8.1,1.8.2,PDModel,None,,"This patch adds methods for saving a PDF to a File and parse from an InputStream using the non sequential parser. It also includes test cases for PDDocument save and load methods.",0,"Andreas Lehmkühler","Fredrik Kjellberg",1,3,"27/Apr/13 12:57","02/Jun/13 13:35","26/May/13 13:27"
PDFBOX-1583,PDFBOX,"wasted work in PDDocument.addSignature(...)",Bug,CLOSED,Major,Fixed,1.8.1,1.8.2,None,patch,,"The problem appears in version 1.8.1 and in revision 1476791. I
attached a one-line patch that fixes it. This problem is similar to
the already fixed PDFBOX-1447 and PDFBOX-1457.
In method "PDDocument.addSignature", the loop over "cosObjects" should
break immediately after "annotNotFound" and "sigFieldNotFound" are set
to "false". All the iterations after "annotNotFound" and
"sigFieldNotFound" are set to "false" do not perform any useful work
because the two "if" statements performing useful work depend on
"annotNotFound" and "sigFieldNotFound".",0,"Andreas Lehmkühler","Adrian Nistor",0,2,"28/Apr/13 16:29","02/Jun/13 13:35","28/Apr/13 16:50"
PDFBOX-1585,PDFBOX,"org.apache.pdfbox.util.PDFTextStripper.getText() causes thread to block indefinitely",Bug,CLOSED,Major,Fixed,1.8.1,"1.8.4, 2.0.0","Swing GUI, (1)",None,ubuntu,"URL of the problematic pdf file is http://www.redalyc.org/pdf/540/54017220.pdf
My program tries to extract the fulltext of the given pdf file in the following manner:
String fileName = "/home/sascha/testfile.pdf"                   // 1
PDDocument pdDoc = PDDocument.load(fileName, true); // 2
PDFTextStripper text = new PDFTextStripper();             // 3
String fullText = text.getText(pdDoc);                               // 4
The call in line 4 causes the thread to block indefinitely (runs now for more than two days without making any progress). The file is stored in a local file system (no network interaction occurs).
jstack indicates that the thread is not deadlocked:
"main" prio=10 tid=0x000000004187d800 nid=0x6ed8 runnable [0x00007f9e28e56000]
   java.lang.Thread.State: RUNNABLE
        at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
        at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
        - locked <0x00000007d73a84a0> (a java.io.BufferedInputStream)
        at java.io.FilterInputStream.read(FilterInputStream.java:66)
        at java.io.PushbackInputStream.read(PushbackInputStream.java:122)
        at org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:91)
        at org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString(BaseParser.java:1006)
        at org.apache.pdfbox.pdfparser.BaseParser.parseCOSString(BaseParser.java:808)
        at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:260)
        at org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)
        at org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)
        at org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)
        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:255)
        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
        at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:67)
        at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)
        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
        at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:67)
        at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)
        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
        at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
        at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
        at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:455)
        at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:379)
        at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:335)
        at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:254)
        at de.kobv.ked.extraction.FulltextExtraction.getFulltext(FulltextExtraction.java:65)
Any idea or advice on how to fix that problem? Is it possible to set up a timeout for the extraction operation?",0,"Andreas Lehmkühler","Sascha Szott",0,5,"29/Apr/13 09:41","31/Jan/14 06:46","06/Dec/13 21:05"
PDFBOX-1587,PDFBOX,"Update the dependency on Bouncy Castle to 1.48",Improvement,CLOSED,Major,Fixed,1.8.1,2.0.0,None,None,,"The recent versions of Bouncy Castle didn't preserve the binary compatibility and PDFBox doesn't compile against them.
This is an issue for the Debian project because the Bouncy Castle package has to be updated to 1.48 in order to fix a security issue. This update is going to break the PDFBox package.
Could you please update the dependency on Bouncy Castle? I'll attach the patch with the necessary changes.",0,"Thomas Chojecki","Emmanuel Bourg",0,3,"30/Apr/13 14:05","17/Mar/16 19:07","30/Apr/13 18:56"
PDFBOX-1589,PDFBOX,"Switch to java 1.6 as minimum requirement for PDFBox","New Feature",CLOSED,Major,Fixed,2.0.0,2.0.0,"FontBox, (4)",None,,"The PDFBox PMC/community decided to switch to java 1.6 as minimum requirement.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,4,"01/May/13 09:17","17/Mar/16 19:08","04/Dec/13 11:50"
PDFBOX-1590,PDFBOX,"Unify logging between preflight and other modules",Wish,CLOSED,Minor,Duplicate,None,2.0.0,Preflight,None,,"The preflight module is the only module using log4j (version 1).
It could be a good idea to remove it. There are really few uses of it in the product and it looks not used in a good way. It will be easy to remove.
On the other hand, we can discuss on the opportunity to use a logger implementation in pdfbox. IMO, we should not use a logger in the core pdfbox as it is a technical API. Maybe it could be used in top level elements of pdfbox (examples, main...).
Please vote and comment.",0,"Guillaume Bailleul","Guillaume Bailleul",0,5,"01/May/13 13:12","21/Jun/14 06:43","21/Jun/14 06:43"
PDFBOX-1591,PDFBOX,"Resources should implement java.io.closeable",Improvement,CLOSED,Trivial,Fixed,None,2.0.0,PDModel,None,,"All resources shoud implement the java.io.closable interface (http://docs.oracle.com/javase/7/docs/api/java/io/Closeable.html) which is available since Java 1.5.
I found this when looking at org.apache.pdfbox.pdmodel.PDDocument the close method already has the same signature it should have. Just the interface is missing.
Once the interface is implemented you can use the new try-with-resource added to Java 1.7.",0,"Thomas Chojecki","Stephan Wienczny",0,3,"01/May/13 22:49","17/Mar/16 19:07","30/May/13 23:52"
PDFBOX-1592,PDFBOX,"Addition of 'null' in COSString when extracting form fields",Bug,CLOSED,Major,Fixed,1.8.1,1.8.2,"Text extraction","carriage extraction ",,"When extracting from a PDF Form Document which has a Multi Line Text Box, if you have words separated by a CR, the extractor returns a 'null' in the extraction.",0,"Andreas Lehmkühler","Jinder Aujla",0,2,"02/May/13 23:22","02/Jun/13 13:35","07/May/13 18:18"
PDFBOX-1593,PDFBOX,"Adobe encrypted document doesn't parse correct (Acrobat 9 compatibility)",Bug,CLOSED,Major,Duplicate,1.8.1,None,Parsing,None,,"Trying to parse and receive some information from encrypted documents created with Adobe 9 with compatibility to Acrobat 9, cause an error while decrypting informations.
I tested documents with follow compatibility:
Acrobat 3 (40-bit RC4) -> works
Acrobat 5 & 6 (128-bit RC4) -> work
Acrobat 7 (128-bit AES) -> work
Acrobat 9 (256-bit AES) -> doesn't work
The follow error will be thrown.
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException
at java.lang.System.arraycopy(Native Method)
at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.computeEncryptedKey(StandardSecurityHandler.java:591)
at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.computeUserPassword(StandardSecurityHandler.java:628)
at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.isUserPassword(StandardSecurityHandler.java:812)
at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption(StandardSecurityHandler.java:213)
at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.decryptDocument(StandardSecurityHandler.java:154)
at org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1509)
at org.apache.pdfbox.pdmodel.PDDocument.decrypt(PDDocument.java:919)
at de.bos_bremen.pdftoolbox.testing.Test.main(Test.java:45)",0,"Thomas Chojecki","Thomas Chojecki",0,3,"07/May/13 08:10","07/May/13 09:41","07/May/13 09:41"
PDFBOX-1594,PDFBOX,"Add support for AES256 Encryption",Improvement,CLOSED,Major,Fixed,None,2.0.0,Crypto,AES256,,"Adobe 9 added support for AES 256 encryption. Further information is available at http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/adobe_supplement_iso32000.pdf (specially 3.5.1) or ISO 32000-2.",0,"John Hewson","Maruan Sahyoun",1,8,"07/May/13 09:40","21/Dec/18 13:23","23/Mar/14 18:07"
PDFBOX-1595,PDFBOX,"PDFMerger failed with the following exception: java.lang.NullPointerException",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Utilities,PDFMergerUtility,windows,"Merging 2 PDF documents leads to a null pointer exception:
From my point of view the PDF document misses the xref and startxref tag.
java -jar pdfbox-app-1.8.1.jar PDFMerger "bid.pdf" "2nd Testfile.pdf" output.pdf
Mai 08, 2013 12:52:03 PM org.apache.pdfbox.pdfparser.XrefTrailerResolver setTrailer
WARNING: Cannot add trailer because XRef start was not signalled.
Mai 08, 2013 12:52:03 PM org.apache.pdfbox.pdfparser.XrefTrailerResolver setStartxref
WARNING: Did not found XRef object at specified startxref position 0
PDFMerger failed with the following exception:
java.lang.NullPointerException
at org.apache.pdfbox.util.PDFMergerUtility.appendDocument(PDFMergerUtility.java:257)
at org.apache.pdfbox.util.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:188)
at org.apache.pdfbox.PDFMerger.merge(PDFMerger.java:68)
at org.apache.pdfbox.PDFMerger.main(PDFMerger.java:44)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:83)",0,"Andreas Lehmkühler","Ernst Eibensteiner",0,4,"08/May/13 10:57","13/Dec/14 14:15","30/Oct/14 21:37"
PDFBOX-1596,PDFBOX,"OverlayPDF logic should be moved into a library class",Improvement,CLOSED,Minor,Fixed,1.8.1,"1.8.6, 2.0.0",Utilities,None,,"We're finding that the OverlayPDF command line utility fixes problems observed when using the Overlay class. However, with the Overlay class we can operate it as a library call, but the OverlayPDF command line utility can't be, particularly given we work with PDDocuments.
I've just had someone copy the entire OverlayPDF class into one of our own and modify it to accept pre-loaded PDDocuments instead of filenames. It would be far more constructive to extract the core logic into a library class and have the CLI class drive it.
If we had a proper clone method it would be good to create a completely new PDDocument to serve as the new returned document instead of mutating the inputs too...",0,"Andreas Lehmkühler","James Green",0,2,"08/May/13 11:04","02/Jul/14 12:34","12/Jun/14 18:33"
PDFBOX-1597,PDFBOX,"PDOutlineItem can not use the function getDestination() to get the PDPageDestination.",Bug,CLOSED,Minor,"Not A Problem",1.8.1,None,PDModel,PDOutlineItem,eclipse,"The getDestination() returns null. i found that ,if i want to get the destination,i must use the function getAction() to get the COSDictionary,then to get the destination array,then creat destination by my self.
So the function getDestination() just use for a Manual destination,this is trouble me!",0,"Andreas Lehmkühler",FuzeSun,0,2,"09/May/13 06:36","10/May/13 06:33","10/May/13 06:30"
PDFBOX-1599,PDFBOX,"ConvertToImage gets ClassCastException with Checkboxes in PDFForm",Bug,CLOSED,Critical,Fixed,1.8.1,1.8.2,PDModel,patch,"windows, java 1.6","When creating an image from a PDF Form we get an CastCastException in:
Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSName cannot be cast to org.apache.pdfbox.cos.COSStream
at org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary.getNormalAppearance(PDAppearanceDictionary.java:103)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:140)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:781)
at org.apache.pdfbox.examples.util.Extraction$BarcodeLocator.getBarcode(Extraction.java:418)
at org.apache.pdfbox.examples.util.Extraction$BarcodeLocator.access$000(Extraction.java:379)
at org.apache.pdfbox.examples.util.Extraction.<init>(Extraction.java:103)
at org.apache.pdfbox.examples.util.Extraction.main(Extraction.java:138)
An further analysis shows that it seems to be related to checkboxes on the PDF Form. I fixed it temporarily using:
try
{ COSStream as = (COSStream)map.getDictionaryObject( asName ); actuals.put( asName.getName(), new PDAppearanceStream( as ) ); }
catch (ClassCastException ex)
{ System.err.println("Exception name: " + asName.getName()); }
in PDAppearanceDictionary.java.
Best regards
Jens",0,"Andreas Lehmkühler","Jens Vogt",0,2,"16/May/13 08:33","02/Jun/13 13:35","23/May/13 17:10"
PDFBOX-1600,PDFBOX,"COSDocument and PDDocument declare throws IOException when they don't",Task,CLOSED,Trivial,Fixed,"1.8.1, (3)","1.8.6, 2.0.0",Documentation,None,,"The doc for COSDocument() says it throws an IOException if there is an error creating the temp file. If you dig through the code a temp is never created, a value of null is assigned to tmpFile.
Upon fixing the COSDocument() constructor, the constructor for PDDocument will also not need to declare an IOException as a possible throws.",0,"Tilman Hausherr","Patrick Tucker",0,3,"16/May/13 18:27","22/Jun/14 14:34","09/Jun/14 00:08"
PDFBOX-1601,PDFBOX,"java.lang.IllegalArgumentException: Width (4032) and height (-2880) cannot be <= 0",Bug,CLOSED,Major,Fixed,1.8.1,1.8.2,None,None,centos,"We're using pdfbox-1.8.1.jar to convert PDF to JPGs.
Below is part of a stacktrace we see when converting a PDF of size 500Kb
java.lang.IllegalArgumentException: Width (4032) and height (-2880) cannot be <= 0
at java.awt.image.DirectColorModel.createCompatibleWritableRaster(Unknown Source)
at java.awt.image.BufferedImage.<init>(Unknown Source)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:752)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:115)
We use PDDocument.load(File). As suggested, we tried with loadNonSeq and also the non sequential form of load as below. Also tried it with a FileInputStream and File. All these forms of load gave us the same error.
—
raf = new RandomAccessFile(new File("/tmp/nonSeqPdfFile"), "rw");
document = PDDocument.load(new FileInputStream(inputFile), raf);
PDFImageWriter imageWriter = new PDFImageWriter();
success = imageWriter.writeImage(document, imageFormat, password, startPage, endPage, pdfWorkFilePrefix, imageType, resolution);",0,"Andreas Lehmkühler","Asmita Joshi",0,5,"16/May/13 21:12","11/Jun/13 17:09","18/May/13 11:02"
PDFBOX-1602,PDFBOX,"Erroneous values for TextPosition get{X,Y}[DirAdj]",Bug,CLOSED,Major,Fixed,1.8.0,1.8.2,None,None,,"Erroneous text positions for some of the characters in the attached PDF. Interestingly, it seems to happen with the characters belonging to the table.
Attachments: the offending PDF and the output of PrintTextLocations (notice X values much larger than the width of the cropbox and negative Y values)
Additionally, Poppler's pdftohtml seems to generate correct values for the same input.",0,"Andreas Lehmkühler","Manuel Aristaran",0,2,"16/May/13 23:57","02/Jun/13 13:35","19/May/13 12:02"
PDFBOX-1603,PDFBOX,"Regression in PDDocument.loadNonSeq ?",Bug,CLOSED,Major,Fixed,1.8.1,1.8.2,None,None,jruby,"Sometime ago I reported PDFBOX-1483, when I came across a PDF (attached to that issue) that couldn't be loaded with PDDocument.load but worked fine with PDDocument.loadNonSeq. The latter method worked with all the PDFs I tested.
Now (PDFBox-2.0.0-SNAPSHOT, just built from source) PDDocument.loadNonSeq is failing for all the PDFs that were previously working.
Sample traceback:
Java::JavaIo::IOException: Object must be defined and must not be compressed object: 13:0
org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1115)
org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1078)
org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:343)
org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:657)
org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1245)
org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1228)",0,"Andreas Lehmkühler","Manuel Aristaran",0,2,"19/May/13 18:11","02/Jun/13 13:35","23/May/13 16:31"
PDFBOX-1605,PDFBOX,"PDPropBuildDataDict: use COSName instead of COSString as name value",Bug,CLOSED,Major,Fixed,1.8.1,1.8.2,PDModel,None,,"Elyes Lehtihet reported a bug with the representation of the name value with the PDPropBuildDataDict class. According to the spec is has to be a named value instead of a string.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"20/May/13 18:07","15/Feb/16 09:26","20/May/13 18:09"
PDFBOX-1606,PDFBOX,"NonSequentialPDFParser produces garbage text in document info",Bug,CLOSED,Major,Fixed,1.8.1,"1.8.3, 2.0.0",Parsing,None,"windows 7, java 1.7","For some documents, NonSequentialPDFParser produces PDDocumentInformation with binary garbage in its fields (title/author/producer/etc). Invocation of PDDocumentInformation.getXXXDate() methods fails with "IOException:Error converting date" for those documents.
Classic PDFParser does not have problems with the same documents.",0,"Andreas Lehmkühler","Alex Alishevskikh",1,4,"22/May/13 07:26","20/Feb/14 20:39","09/Sep/13 17:18"
PDFBOX-1607,PDFBOX,"StringIndexOutOfBoundsException in PDFParser",Bug,CLOSED,Major,Fixed,1.8.1,"1.8.3, 2.0.0",Parsing,None,"windows 7, java 1.7","I have few test files parsed fine in PDFBox 1.7.1 but not in 1.8.1:
java.lang.StringIndexOutOfBoundsException: String index out of range: 2047
at java.lang.AbstractStringBuilder.deleteCharAt(AbstractStringBuilder.java:762)
at java.lang.StringBuilder.deleteCharAt(StringBuilder.java:258)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString(BaseParser.java:1000)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSString(BaseParser.java:808)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1241)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:558)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:188)",0,"Andreas Lehmkühler","Alex Alishevskikh",0,3,"22/May/13 12:27","15/Jan/14 11:19","28/Oct/13 17:49"
PDFBOX-1608,PDFBOX,"Rendering problem with Java 7 update 21",Bug,CLOSED,Major,Fixed,1.8.1,2.0.0,None,None,,"Since updating to Java 1.7.0_21 converting PDFs to images is not working as it did under prior versions of Java. I'm not sure what might be causing this, but I am attaching an example one page PDF and resulting converted images that shows the effect. Basically, for some PDFs the text is no longer rendering. The sample image output was from running the PDFToImage utility on the command line with two different versions of Java.
Console output from the PDFToImage is the same from both versions of Java:
May 22, 2013 10:52:37 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
WARNING: Changing font on < > from <BHHPND+Wingdings-Regular> to the default font
May 22, 2013 10:52:37 AM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFO: unsupported/disabled operation: BDC
May 22, 2013 10:52:37 AM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFO: unsupported/disabled operation: EMC
May 22, 2013 10:52:37 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont
INFO: Can't read the embedded font BHHPND+HelveticaNeue-Bold
May 22, 2013 10:52:38 AM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont getawtFont
INFO: Using font SansSerif.plain instead
Writing: C:\Users\jason.goodwin\Downloads\HoulihansVeggieMenu1.jpg",0,"Andreas Lehmkühler","Jason Goodwin",1,5,"22/May/13 16:06","17/Mar/16 19:08","11/Aug/13 11:05"
PDFBOX-1609,PDFBOX,"EXCEPTION_ACCESS_VIOLATION with PDF file and image conversion",Bug,CLOSED,Major,Fixed,1.8.1,1.8.2,None,None,,"Hello,
I do receive an unhandled exception during image conversion of the attached pdf file.
For image conversion i've used the PDFToImage.java example.
The pdf file has been created with Foxit PDF-Printer.
Every generated pdf file will crash the whole JRE, so my whole application crashes with the following trace.
The affected pdf file has been attached.
The error report file has been attached.
Hopefully this error can be handled that the JRE won't crash anymore.
Thanks
#
A fatal error has been detected by the Java Runtime Environment:
#
EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x720c2d77, pid=3532, tid=2620
#
JRE version: 7.0_21-b11
Java VM: Java HotSpot(TM) Client VM (23.21-b01 mixed mode windows-x86 )
Problematic frame:
C [t2k.dll+0x12d77]
#
Failed to write core dump. Minidumps are not enabled by default on client versions of Windows
#
An error report file with more information is saved as:
U:\Eclipse-Workspace\de.vlh.notes.tools\hs_err_pid3532.log
#
If you would like to submit a bug report, please visit:
http://bugreport.sun.com/bugreport/crash.jsp
The crash happened outside the Java Virtual Machine in native code.
See problematic frame for where to report the bug.
#",0,"Andreas Lehmkühler","Nico Prenzel",0,2,"23/May/13 09:52","02/Jun/13 13:35","25/May/13 15:23"
PDFBOX-161,PDFBOX,"java.util.EmptyStackException from PDFTextStripper.writeText",Bug,CLOSED,Minor,Fixed,None,"1.8.4, 2.0.0","Text extraction",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1483833
Originally submitted by gagravarr on 2006-05-08 07:05.
I'm using PDFBox 0.7.2. On a certain document
(http://www-wds.worldbank.org/external/default/WDSContentServer/IW3P/IB/2005/12/27/000160016_20051227181308/Rendered/PDF/E12860v10P096469EAs.pdf),
when I execute the following code:
PDFParser pdfParser = new PDFParser( docStream );
pdfParser.parse();
PDDocument pdfDocument = pdfParser.getPDDocument();
StringWriter textWriter = new StringWriter();
PDFTextStripper textStripper = new PDFTextStripper();
textStripper.writeText(pdfDocument, textWriter);
I get the following nasty stack trace from deep inside
PDFBox:
Exception in thread "main" java.util.EmptyStackException
at java.util.Stack.peek(Stack.java:79)
at java.util.Stack.pop(Stack.java:61)
at
org.pdfbox.util.operator.GRestore.process(GRestore.java:65)
at
org.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:
494)
at
org.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java
:207)
at
org.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:16
0)
at
org.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:355)
at
org.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:268
)
at
org.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:220)",0,"Andreas Lehmkühler",Anonymous,0,2,"08/May/06 14:05","21/Jul/14 15:21","11/Jan/14 13:55"
PDFBOX-1610,PDFBOX,"Corrupted result pdf when overlay one document with another one",Bug,CLOSED,Critical,Fixed,"1.6.0, 1.8.1",1.8.2,Utilities,None,,"When overlay one document with another one with
org.apache.pdfbox.Overlay
the result pdf is corrupted.",0,"Maruan Sahyoun","Paul Heinrich",0,3,"24/May/13 07:57","16/Jul/13 10:48","29/May/13 18:03"
PDFBOX-1611,PDFBOX,"Avoid IndexOutOfBoundsException when extracting the font matrix of a Type1 font",Bug,CLOSED,Major,Fixed,1.8.1,1.8.2,PDModel,None,,"The pdf attached to PDFBOX-1610 contains a Type1 font which triggers an IndexOutOfBoundsException when extracting the FontMatrix.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"26/May/13 16:01","02/Jun/13 13:35","26/May/13 16:08"
PDFBOX-1612,PDFBOX,"Avoid ArrayOutOfBoundsException when creating a PDPixelMap using an indexed colorspace",Bug,CLOSED,Major,Fixed,None,1.8.2,None,None,,"The pdf attached to PDFBOX-1610 triggers an ArrayOutOfBoundsException when creating a PDPixelMap using an indexed colorspace",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"26/May/13 17:54","02/Jun/13 13:35","26/May/13 17:58"
PDFBOX-1613,PDFBOX,"The ability to inject the time/random component into the COSWriter process to write a PDF document allows some advanced signature creation scenarios where the signature is generated on a separate server that does not hold the full PDF document.",Improvement,CLOSED,Minor,Fixed,1.8.1,"1.8.3, 2.0.0",Writing,security,,"I have developed a prototype server based signing service for the Swedish National eID infrastructure.
I'll skip the details, but I recently switched to PDFBox for the PDF signing process and it works great. However, I had to modify the COSWriter class to get this working.
I'm writing to check whether you would consider adding the functionality I need to future version of PDFBox.
The problem is the the signature service is just producing the signature, it is not trusted to handle the PDF document.
The government service having the PDF document signed is using PDFBox in a 2 step process.
1) To produce the SignedAttributes DER Object of the CMS signature to be created. This is the part that is hashed and signed by the signature service.
2) After receiving the signature and signature certs from the signature service, completing the PDF signature by delivering the complete PKCS#7 object to PDFBox using the externally generated signature value and certs.
There are probably a more pure way to handle this, but Since PDFBox allows me to create a signature interface that produces the SignedData. I found it to be the easiest way to run the signature process 2 times.
1st pass using dummy key and dummy certs. This only to obtain the SignedAttributes.
2nd pass by delivering a SignedData object that include the Signature value and certs produced by the signature service.
Now in order to do this, I have to control the random seed added by the COSWriter, or else the signature created by the signature service will not match the hash in the SignedAttributes produced in the second pass.
My modification is provided below.
I simply provided an extra input parameter to the write function where I can provide the long seed
I then added a backwards compatible write function where the long seed is current time.
By providing the same seed to pass 1 and pass 2, I can get the externally created signature to match the SignedAttributes produced in the first pass.
The write function below is identical to the original COSWriter function except that it takes the idTime value from the function input parameter instead of getting it from System.currentTimeMillis().
Modified functions of COSWriter:
/**
This will write the pdf document.
*
@param doc The document to write.
*
@throws COSVisitorException If an error occurs while generating the data.
*/
public void write(PDDocument doc) throws COSVisitorException { write(doc, System.currentTimeMillis()); }
/**
This will write the pdf document.
*
@param doc The document to write.
@param idTime The time seed used to generate the id
*
@throws COSVisitorException If an error occurs while generating the data.
*/
public void write(PDDocument doc, long idTime) throws COSVisitorException {
document = doc;
if (incrementalUpdate) { prepareIncrement(doc); }
// if the document says we should remove encryption, then we shouldn't encrypt
if (doc.isAllSecurityToBeRemoved())
{ this.willEncrypt = false; // also need to get rid of the "Encrypt" in the trailer so readers // don't try to decrypt a document which is not encrypted COSDocument cosDoc = doc.getDocument(); COSDictionary trailer = cosDoc.getTrailer(); trailer.removeItem(COSName.ENCRYPT); }
else {
SecurityHandler securityHandler = document.getSecurityHandler();
if (securityHandler != null) {
try
{ securityHandler.prepareDocumentForEncryption(document); this.willEncrypt = true; }
catch (IOException e)
{ throw new COSVisitorException(e); } catch (CryptographyException e) { throw new COSVisitorException(e); }
} else
{ this.willEncrypt = false; }
}
COSDocument cosDoc = document.getDocument();
COSDictionary trailer = cosDoc.getTrailer();
COSArray idArray = (COSArray) trailer.getDictionaryObject(COSName.ID);
if (idArray == null || incrementalUpdate) {
try {
//algorithm says to use time/path/size/values in doc to generate
//the id. We don't have path or size, so do the best we can
MessageDigest md = MessageDigest.getInstance("MD5");
md.update(Long.toString(idTime).getBytes("ISO-8859-1"));
COSDictionary info = (COSDictionary) trailer.getDictionaryObject(COSName.INFO);
if (info != null) {
Iterator<COSBase> values = info.getValues().iterator();
while (values.hasNext())
{ md.update(values.next().toString().getBytes("ISO-8859-1")); }
}
idArray = new COSArray();
COSString id = new COSString(md.digest());
idArray.add(id);
idArray.add(id);
trailer.setItem(COSName.ID, idArray);
} catch (NoSuchAlgorithmException e)
{ throw new COSVisitorException(e); } catch (UnsupportedEncodingException e) { throw new COSVisitorException(e); }
}
cosDoc.accept(this);
}
Finally. The way I use this in my signature process is by using this altered static function saveIncremental from the PDFDocument class.
Since this function is static, I just call this duplicated function instead of the one in the PDFDocument class.
Here I use my altered COSWriter (CsCOSWriter).
/**
Save the pdf as incremental. This method is a modification of the same
method of PDDcoument. This method use an altered COSWriter that allows
control over the time used to create the ID of the document. This way it
is possible to perform two consecutive signature generation passes that
produce the same document hash.
*
@param doc The document being written with signature creation
@param input An input file stream of the document being written
@param output An output file stream for the result document
@param idTime The time in milliseconds from Jan 1st, 1970 GMT when the
signature is created. This time is also used to calculate the ID of the
document.
@throws IOException if something went wrong
@throws COSVisitorException if something went wrong
*/
public static void saveIncremental(PDDocument doc, FileInputStream input, OutputStream output, long idTime) throws IOException, COSVisitorException {
//update the count in case any pages have been added behind the scenes.
doc.getDocumentCatalog().getPages().updateCount();
CsCOSWriter writer = null;
try { // Sometimes the original file will be missing a newline at the end // In order to avoid having %%EOF the first object on the same line // as the %%EOF, we put a newline here. If there's already one at // the end of the file, an extra one won't hurt. PDFBOX-1051 output.write("\r\n".getBytes()); writer = new CsCOSWriter(output, input); writer.write(doc, idTime); writer.close(); }
finally
Unknown macro: { if (writer != null) { writer.close(); } }
}",0,"Thomas Chojecki","Stefan Santesson",0,3,"28/May/13 23:26","30/Nov/13 17:02","30/May/13 23:53"
PDFBOX-1614,PDFBOX,"Digitally sign PDFs without file system access",Improvement,CLOSED,Major,"Not A Problem",1.8.1,None,Signing,None,,"Hi I'm using pdfbox-1.8.1 to digitally sign PDFs.
I find the sample below to handle it.
But in this example I have to use a FileInputStream however I want to do it only through streams (without any file system access). I tried to extends FileInputStream to deal with it but I failed. Any tips for me about that problem ?
Thanks.
File outputDocument = new File("resources/signed" + document.getName());
FileInputStream fis = new FileInputStream(document);
FileOutputStream fos = new FileOutputStream(outputDocument);
int c;
while ((c = fis.read(buffer)) != -1)
{ fos.write(buffer, 0, c); }
fis.close();
fis = new FileInputStream(outputDocument);
// load document
PDDocument doc = PDDocument.load(document);
// create signature dictionary
PDSignature signature = new PDSignature();
signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE); // default filter
// subfilter for basic and PAdES Part 2 signatures
signature.setSubFilter(PDSignature.SUBFILTER_ADBE_PKCS7_DETACHED);
signature.setName("signer name");
signature.setLocation("signer location");
signature.setReason("reason for signature");
// the signing date, needed for valid signature
signature.setSignDate(Calendar.getInstance());
// register signature dictionary and sign interface
doc.addSignature(signature, this);
// write incremental (only for signing purpose)
doc.saveIncremental(fis, fos);",0,"Thomas Chojecki","Thierry Boschat",1,9,"29/May/13 08:43","17/Apr/15 21:44","29/Mar/14 17:38"
PDFBOX-1615,PDFBOX,"Color map not correctly copied when PDF file is split",Bug,CLOSED,Major,Fixed,1.8.1,1.8.2,"PDModel, (1)",None,"windows 7, jvm","A customer has a pdf file which we split (pdfbox.util.Splitter) for inclusion in a document. When I split the file using the PDFSplit tool, the same problem occurs.
On some pages, the color map appears to be altered such that background and text are rendered in different colors (yellow/lilac instead of white/blackish). The PDF the customer supplies is probably a scanned document but the metadata claims it is created using PDF-XChange Viewer 2.5.195.0.
The odd thing is that only a subset of pages are affected in a consistent fashion.
I can supply the original PDF file on request for you to look at.",0,"Andreas Lehmkühler","Tom Taylor",0,4,"29/May/13 12:47","02/Jun/13 13:35","29/May/13 18:01"
PDFBOX-1617,PDFBOX,"Null pointer exception",Bug,CLOSED,Major,Fixed,1.8.1,"1.8.3, 2.0.0",Preflight,None,redhat,"jasper.pdf :: Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.preflight.font.container.Type1Container.getFontProgramWidth(Type1Container.java:73)
at org.apache.pdfbox.preflight.font.container.FontContainer.checkGlyphWith(FontContainer.java:115)
at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validText(ContentStreamWrapper.java:372)
at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validStringDefinition(ContentStreamWrapper.java:264)
at org.apache.pdfbox.preflight.content.ContentStreamWrapper.checkShowTextOperators(ContentStreamWrapper.java:203)
at org.apache.pdfbox.preflight.content.ContentStreamWrapper.processOperator(ContentStreamWrapper.java:180)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validPageContentStream(ContentStreamWrapper.java:75)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateContent(SinglePageValidationProcess.java:174)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:83)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:49)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:56)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:45)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
at org.apache.pdfbox.preflight.Validator_A1b.runSimple(Validator_A1b.java:158)
at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:125)",0,"Eric Leleu","William Fausser",0,3,"29/May/13 18:23","30/Nov/13 17:02","11/Jun/13 19:46"
PDFBOX-1618,PDFBOX,"Split PDF file to single page files, some files are inflated in size",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",Utilities,None,"windows 7, jvm","A PDF file is split into single pages for inclusion within another document (pdfbox.utils.Splitter within our code but same phenomenon observed when splitting using command line PDFSplit tool). Som of the pages are almost as large as the original file which causes performance problems for our customers.
Again, I have a sample pdf to attach.",0,"Andreas Lehmkühler","Tom Taylor",4,11,"30/May/13 08:36","28/Mar/15 14:10","22/Dec/14 17:09"
PDFBOX-162,PDFBOX,"font spacing",Bug,CLOSED,,Fixed,None,0.8.0-incubator,"Swing GUI",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1485049
Originally submitted by nobody on 2006-05-09 14:29.
In the last line of the drawString method of
org.pdfbox.pdmodel.font.PDTrueTypeFont.java, the locations are casted
to int's. This produces undesireable results when displaying a pdf.
Removing the cast, produces more pleasant-looking font spacing.",0,"Jukka Zitting",Anonymous,0,0,"09/May/06 21:29","21/Oct/09 09:52","18/Nov/08 01:44"
PDFBOX-1621,PDFBOX,"Add setModifiedDate(Calendar c) to PDAnnotation",Improvement,CLOSED,Minor,Fixed,1.8.2,"1.8.11, 2.0.0",PDModel,"Annotations Calendar",,"Currently, the setModifiedDate method takes a String object as its input parameter, but this string must be formatted in the PDF ISO Date format, which is not documented and is confusing.
My proposal is to make it more consistent with the setCreationDate method and change the input parameter to Calendar, and add a function that converts that Calendar object into a properly formatted string. The method that takes a String as input can be left for compatibility purposes, but the javadoc should be adjusted to show what type of string should be used.",0,"Tilman Hausherr","Gilad Denneboom",0,4,"03/Jun/13 13:18","18/Jan/16 12:01","23/Nov/15 19:05"
PDFBOX-1622,PDFBOX,"TextNormalize init not thread-safe, may lead to infinite loop",Bug,CLOSED,Major,Fixed,1.0.0,"1.8.3, 2.0.0",Utilities,None,,"TextNormalize fills a static HashMap (DIACHASH) from a method (populateDiacHash) called by the TextNormalize constructor.
If the constructor is called from two different threads at the same time, then the HashMap may be written by two concurrent threads which may and will cause infinite loops.
We see the CPU at 100% and jstack shows 4 threads all stuck at:
"Thread-2" prio=10 tid=0x00007f6e94499000 nid=0x347 runnable [0x00007f6e925d6000]
java.lang.Thread.State: RUNNABLE
at java.util.HashMap.put(HashMap.java:391)
at org.apache.pdfbox.util.TextNormalize.populateDiacHash(TextNormalize.java:82)
at org.apache.pdfbox.util.TextNormalize.<init>(TextNormalize.java:41)
at org.apache.pdfbox.util.PDFTextStripper.<init>(PDFTextStripper.java:193)
A patch to fix this is attached, it just moves the initialization to a static block.
Please apply to the 1.8.3 and 2.0.0 branches.",0,"Andreas Lehmkühler","Florent Guillaume",0,2,"04/Jun/13 17:12","30/Nov/13 17:02","09/Aug/13 18:27"
PDFBOX-1624,PDFBOX,"Alphacomposite with Rule 6 not supported",Bug,CLOSED,Major,"Not A Problem",1.8.1,None,PDModel,None,"windows 7","While fetching images from pdf files, getting error got as "Alphacomposite with Rule 6 not supported".
Image extracted from pdf file is a blank image.",0,"Andreas Lehmkühler",Kiran,0,2,"05/Jun/13 10:47","15/Jun/13 12:41","15/Jun/13 12:41"
PDFBOX-1625,PDFBOX,"java.lang.IndexOutOfBoundsException at writing PDF file",Bug,CLOSED,Minor,Fixed,1.8.2,"1.8.4, 2.0.0",Writing,None,"linux, java 1.7","I got this error:
i will just recreate a document with pages 1-6.
Exception in thread "main" java.io.IOException: org.apache.pdfbox.exceptions.COSVisitorException: java.lang.IndexOutOfBoundsException: Index: 115, Size: 0
at de.back2heaven.pdf.model.TargetDocumuent.save(TargetDocumuent.java:56)
at de.back2heaven.pdf.model.Document.prozess(Document.java:76)
at de.back2heaven.pdf.model.Document.main(Document.java:56)
Caused by: org.apache.pdfbox.exceptions.COSVisitorException: java.lang.IndexOutOfBoundsException: Index: 115, Size: 0
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1354)
at org.apache.pdfbox.cos.COSStream.accept(COSStream.java:217)
at org.apache.pdfbox.cos.COSObject.accept(COSObject.java:206)
at org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:525)
at org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:435)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1122)
at org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:552)
at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1501)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1324)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1305)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1292)
at de.back2heaven.pdf.model.TargetDocumuent.save(TargetDocumuent.java:54)
... 2 more
Caused by: java.lang.IndexOutOfBoundsException: Index: 115, Size: 0
at java.util.ArrayList.rangeCheck(ArrayList.java:604)
at java.util.ArrayList.get(ArrayList.java:382)
at org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)
at org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:235)
at java.io.BufferedInputStream.read1(BufferedInputStream.java:275)
at java.io.BufferedInputStream.read(BufferedInputStream.java:334)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1337)
... 13 more",0,"Guillaume Bailleul","Jens Kapitza",0,4,"05/Jun/13 11:36","20/Nov/14 18:11","15/Jan/14 21:35"
PDFBOX-1627,PDFBOX,"Exception in thread "main" java.lang.NullPointerException",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0","PDModel, (1)",None,redhat,"This file is not a PDF/A by any means, but NullPointer's out with out error messages.
php-5.4.8/ext/fileinfo/tests/resources/test.pdf :: Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject.createXObject(PDXObject.java:131)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateGraphicObjects(SinglePageValidationProcess.java:145)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:78)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:49)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:56)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:45)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
at org.apache.pdfbox.preflight.Validator_A1b.runSimple(Validator_A1b.java:158)
at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:125)",0,"Eric Leleu","William Fausser",0,3,"05/Jun/13 14:08","30/Nov/13 17:02","05/Jun/13 20:16"
PDFBOX-1628,PDFBOX,"Type 3 Fonts are not processed by PDPage.createImage",Bug,CLOSED,Major,Fixed,1.8.1,2.0.0,PDModel,Type3,,"PDType3Font does not fetch the correct charprocs entry for a character.
When that is corrected, one finds that Type3StreamParser is incomplete and cannot process the charprocs stream.",0,"Andreas Lehmkühler","Fred Hansen",0,2,"05/Jun/13 17:11","17/Mar/16 19:08","18/Jul/13 15:31"
PDFBOX-1629,PDFBOX,"Null PointerException",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",Preflight,None,redhat,"./HYperlink_withmarks.pdf :: Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.preflight.font.Type0FontValidator.processCMapAsStream(Type0FontValidator.java:257)
at org.apache.pdfbox.preflight.font.Type0FontValidator.checkCMapEncoding(Type0FontValidator.java:211)
at org.apache.pdfbox.preflight.font.Type0FontValidator.checkEncoding(Type0FontValidator.java:188)
at org.apache.pdfbox.preflight.font.Type0FontValidator.validate(Type0FontValidator.java:77)
at org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.validate(FontValidationProcess.java:62)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:49)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:89)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:68)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:49)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:158)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:77)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:49)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:56)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:45)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
at org.apache.pdfbox.preflight.Validator_A1b.runSimple(Validator_A1b.java:158)
at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:125)",0,"Eric Leleu","William Fausser",0,3,"06/Jun/13 14:13","30/Nov/13 17:02","06/Jun/13 19:54"
PDFBOX-163,PDFBOX,"IOException: expected='/' actual='e'-101",Bug,CLOSED,Minor,Fixed,None,1.7.0,Parsing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1485485
Originally submitted by sajitjacob on 2006-05-10 04:06.
Get the following exception when loading a PDF
created by ImageMagick
Exception in thread "main" java.io.IOException:
expected='/' actual='e'-101
org.pdfbox.io.PushBackInputStream@9
at
org.pdfbox.pdfparser.BaseParser.parseCOSName
(BaseParser.java:774)
at
org.pdfbox.pdfparser.BaseParser.parseCOSDictionary
(BaseParser.java:217)
at
org.pdfbox.pdfparser.BaseParser.parseDirObject
(BaseParser.java:910)
at org.pdfbox.pdfparser.PDFParser.parseObject
(PDFParser.java:432)
at org.pdfbox.pdfparser.PDFParser.parse
(PDFParser.java:176)
at org.pdfbox.pdmodel.PDDocument.load
(PDDocument.java:579)
at org.pdfbox.pdmodel.PDDocument.load
(PDDocument.java:549)
at org.pdfbox.ExtractImages.extractImages
(ExtractImages.java:124)
at org.pdfbox.ExtractImages.main
(ExtractImages.java:74)
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1485485&file_id=177454
pages-000.pdf (application/pdf), 17898 bytes
ImageMagick created pdf
[comment on SourceForge]
Originally sent by francois248.
Logged In: YES
user_id=1606233
Hi,
I am facing the same problem when upgrating a tools that
produce PDF file.
I can send a test case too if needed.
Is there a workaround to avoid it?
FranÃ§ois",0,"Timo Boehme",Anonymous,0,1,"10/May/06 11:06","21/May/12 22:51","21/May/12 22:51"
PDFBOX-1630,PDFBOX,"An interesting Exception error",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",Preflight,None,redhat,"./Non-PFDA/a7060f.pdf :: Exception in thread "main" org.apache.pdfbox.preflight.exception.ValidationException: Failed while validating
at org.apache.pdfbox.preflight.process.MetadataValidationProcess.validate(MetadataValidationProcess.java:154)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
at org.apache.pdfbox.preflight.Validator_A1b.runSimple(Validator_A1b.java:158)
at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:125)
Caused by: org.apache.pdfbox.preflight.exception.ValidationException: Cannot treat Document Information CreationDate property
at org.apache.pdfbox.preflight.metadata.SynchronizedMetaDataValidation.formatAccessException(SynchronizedMetaDataValidation.java:525)
at org.apache.pdfbox.preflight.metadata.SynchronizedMetaDataValidation.analyzeCreationDateProperty(SynchronizedMetaDataValidation.java:352)
at org.apache.pdfbox.preflight.metadata.SynchronizedMetaDataValidation.validateMetadataSynchronization(SynchronizedMetaDataValidation.java:482)
at org.apache.pdfbox.preflight.process.MetadataValidationProcess.validate(MetadataValidationProcess.java:82)
... 5 more
Caused by: java.io.IOException: Error converting date:ÃªÃÂ·Âµ{Ã¡ÃŠmÃ‘Ã€ËœhÅ‚â€ Ã
at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:294)
at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:168)
at org.apache.pdfbox.cos.COSDictionary.getDate(COSDictionary.java:797)
at org.apache.pdfbox.pdmodel.PDDocumentInformation.getCreationDate(PDDocumentInformation.java:210)
at org.apache.pdfbox.preflight.metadata.SynchronizedMetaDataValidation.analyzeCreationDateProperty(SynchronizedMetaDataValidation.java:347)
... 7 more",0,"Eric Leleu","William Fausser",0,3,"07/Jun/13 12:41","30/Nov/13 17:02","27/Jun/13 19:59"
PDFBOX-1631,PDFBOX,"Group Exception",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",Preflight,None,redhat,"./ex13AAA.pdf :: Exception in thread "main" org.apache.pdfbox.preflight.exception.ValidationException: The Group dictionary hasn't Group as Type value
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:193)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:72)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:49)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:158)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:77)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:49)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:56)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:45)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
at org.apache.pdfbox.preflight.Validator_A1b.runSimple(Validator_A1b.java:158)
at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:125)
Caused by: org.apache.pdfbox.preflight.exception.ValidationException: The Group dictionary hasn't Group as Type value
at org.apache.pdfbox.preflight.xobject.XObjFormValidator.checkGroup(XObjFormValidator.java:129)
at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:72)
at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:49)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:184)
... 14 more",0,"Eric Leleu","William Fausser",0,3,"07/Jun/13 12:54","30/Nov/13 17:02","23/Jun/13 08:46"
PDFBOX-1632,PDFBOX,"Exception with validation",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",Preflight,None,redhat,"./pdfbox-1.5.0/pdfbox/target/test-classes/input/simple-openoffice.pdf :: Exception in thread "main" org.apache.pdfbox.preflight.exception.ValidationException: Unable to process an element if it is null.
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:47)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:158)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:77)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:49)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:56)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:45)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
at org.apache.pdfbox.preflight.Validator_A1b.runSimple(Validator_A1b.java:158)
at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:125)",0,"Eric Leleu","William Fausser",0,4,"07/Jun/13 13:54","30/Nov/13 17:02","23/Jun/13 08:45"
PDFBOX-1633,PDFBOX,"DateConverter needs to work",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",Utilities,None,java,"Most of the tests for org/apache/pdfbox/util/DateConverter.java in src/test/java/org/apache/pdfbox/util/TestDateUtil.java have been commented out. DateConverter was broken.
The attached patch fixes the problems. Extensive comments document the problems. Here's a copy:
/* the former version of DateConverter had these bugs:
- In toISO8601 the conversion from millis to minutes was with 1000/1000;
should have been 1000/60.
- PDFBox-402 was not completely implemented. The calendar fields in the
POTENTIAL_FORMATS are shared among threads. Hence we must create new
SimpleThreadFormats for each test. (Or synchronize somehow).
- Some formats with hh did not have an a field. I changed them to HH.
these questionable features:
- A timezone with neither plus sign nor minus is assumed to be minus.
This seems wrong, but I have not changed it.
- toCalendar() returned a value in the default Locale.
PDF files do not have locales (I think) and even if they do
there is no reason to assume the Java default.
I have switched to Locale.ENGLISH which was already assumed
in the date formats and toString.
and these infelicities:
- Constants 60 and 1000 appeared.
- zeroAppend was not used where applicable.
In one case it was inapplicable only because TimeZone.getOffset
was suspected of returning a long. It does not.
- Manually computed constants were used to in date.substring
thus reducing flexibility and maintainability.
- The TimeZone name reported by toCalendar was always "Unknown"
It is easy enough to compute a name.
- Time zones were not accepted with most of the alternate parsing formats.
The new code allows a timezone after any format.
*/",0,"Andreas Lehmkühler","Fred Hansen",1,3,"09/Jun/13 05:46","30/Nov/13 17:02","11/Nov/13 18:52"
PDFBOX-1635,PDFBOX,"Exception on saving document",Bug,CLOSED,Major,Duplicate,1.8.2,None,None,None,ubuntu,"I am performing some operations on pdf documents such as merging, spliting, reordering (pages). I am currently encountering some issues when attempting to save the newly modified pdf file.
A simplified test case (extract the first 5 pages from a pdf into a new pdf) is:
@Test
public void testPdfBox2() throws Exception {
PDDocument returnDocument = new PDDocument();
String outputFilename = "/tmp/testpdfreorder.pdf";
List<Integer> pages = Arrays.asList(1, 2, 3, 4, 5);
try {
// get/load current document
PDDocument currentPdf = PDDocument.load(new File("/tmp/hibernate_reference.pdf"));
// get the current pages of the document
@SuppressWarnings("unchecked")
List<PDPage> currentDocumentPages = currentPdf.getDocumentCatalog().getAllPages();
for (Integer currentPage : pages)
{ returnDocument.importPage(currentDocumentPages.get(currentPage - 1)); }
currentPdf.close();
} finally
{ returnDocument.save(outputFilename); returnDocument.close(); }
}
The problem is caused in the above code by calling currentPdf.close() before the returnDocument.save has been called. This looks very similar to this issue PDFBOX-1586 which is marked as "fixed" in 1.8.2, but in my opinion it is not.
The stacktrace I am currently getting is:
org.apache.pdfbox.exceptions.COSVisitorException: java.lang.IndexOutOfBoundsException: Index: 72, Size: 0
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1354)
at org.apache.pdfbox.cos.COSStream.accept(COSStream.java:217)
at org.apache.pdfbox.cos.COSObject.accept(COSObject.java:206)
at org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:525)
at org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:435)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1122)
at org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:552)
at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1501)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1324)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1305)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1292)
at com.test.PdfBoxTest.testPdfBox2(PdfBoxTest.java:72)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.IndexOutOfBoundsException: Index: 72, Size: 0
at java.util.ArrayList.RangeCheck(ArrayList.java:547)
at java.util.ArrayList.get(ArrayList.java:322)
at org.apache.pdfbox.io.RandomAccessBuffer.seek(RandomAccessBuffer.java:84)
at org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read1(BufferedInputStream.java:258)
at java.io.BufferedInputStream.read(BufferedInputStream.java:317)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1337)
... 34 more",0,"Guillaume Bailleul","Andrew Dale",0,2,"11/Jun/13 07:09","01/Aug/13 11:56","01/Aug/13 11:56"
PDFBOX-1637,PDFBOX,"Faulty documentation of PDStream.getInputStreamAsString()",Bug,CLOSED,Trivial,Fixed,1.8.2,2.0.0,Documentation,documentation,,"In the documentation of the method getInputStreamAsString() in PDStream it says: "Uses the default system encoding." Although in the code ISO-8859-1 is used correctly #PDFBOX-945",0,"Maruan Sahyoun","Dominic Tubach",0,2,"12/Jun/13 09:31","17/Mar/16 19:08","10/Feb/14 11:22"
PDFBOX-1638,PDFBOX,"PDCcitt doesn't use color space",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",PDModel,None,,"The method getRGBImage() in PDCcitt doesn't use a possible color space to decode the image leading to wrong colors.",0,"Andreas Lehmkühler","Dominic Tubach",0,3,"12/Jun/13 10:08","30/Nov/13 17:02","18/Aug/13 16:38"
PDFBOX-1639,PDFBOX,"Infinite loop with PDFParser used by tika.",Bug,CLOSED,Major,Fixed,"1.7.1, 1.8.2, 2.0.0","1.8.3, 2.0.0",Parsing,None,,"Hi,
I encountered an issue in a production environment that cause a disk full error.
Tika uses the PDFParser with the "forceParsing" boolean set to true in order to continue the parsing even if an error occurs.
Two PDFs have an object number greater than the max int value so the readInt() method fails.
Due to the "forceParsing" boolean, the parser try to go to the next object but it can't because on error the readInt method backtrack the read bytes and so
the "skipToNextObj" method does nothing and we try to parse the same object indefinitely...
The COSObjectKey object already uses a long as object numder, so we should read a long instead of an integer during the parsing process using a "readLong" method to manage too large objects numbers.
Are you agreed with that ?
BR,
Eric",0,"Eric Leleu","Eric Leleu",0,4,"12/Jun/13 22:01","30/Nov/13 17:02","16/Jun/13 12:28"
PDFBOX-1640,PDFBOX,"space in pdf",Task,CLOSED,Critical,"Not A Problem",1.8.2,None,"Swing GUI",None,"windows 7","in my pdf i have white space between columns, in earlier versions of pdfbox, white space used to get printed as empty line in the text file, however in the latest version the same is remove.
please check",0,"Andreas Lehmkühler",amit,0,2,"15/Jun/13 07:49","16/Jun/13 14:23","16/Jun/13 11:03"
PDFBOX-1642,PDFBOX,"NPE when parsing XMP schema definition with "closed Choice" value type",Bug,CLOSED,Major,Fixed,"1.8.2, (2)","1.8.10, 2.0.0","Preflight, (1)",None,,"If PDF/A file includes custom metadata and its extension schema description containing the type "closed Choice of Text", PDF/A validation using Preflight fails with NPE. The extract from stack trace:
java.lang.NullPointerException
at org.apache.xmpbox.xml.PdfaExtensionHelper.populateSchemaMapping(PdfaExtensionHelper.java:214)
at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:193)
at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:106)
at org.apache.pdfbox.preflight.process.MetadataValidationProcess.validate(MetadataValidationProcess.java:66)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
...
It appears, that org.apache.xmpbox.xml.PdfaExtensionHelper#transformValueType() method does not consider "closed" or "open" directives for "Choice" value type in property definition.",0,"Tilman Hausherr",Petras,0,3,"17/Jun/13 11:58","23/Jul/15 06:35","25/May/15 15:22"
PDFBOX-1643,PDFBOX,"Check for missing validation processes does not work properly in Preflight",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",Preflight,None,,"org.apache.pdfbox.preflight.PreflightConfiguration#getInstanceOfProcess(String) method is supposed to return a validator instance for given process name. If process is not found (is not set in PreflightConfiguration) and errorOnMissingProcess flag is set, an exception should be thrown. If that flag is not set, an instance of NOP validator (org.apache.pdfbox.preflight.process.EmptyValidationProcess class) is returned.
Unfortunatelly there is no way to unconfigure (i.e. disable) specific validation process in PreflightConfiguration. Though it contains the methods #replacePageProcess(String, Class) and #replaceProcess(String, Class), if null is given as the second parameter specifying validation class, then #getInstanceOfProcess(String) method fails with NPE instead of expected behavior for missing validation process.",0,"Eric Leleu",Petras,0,3,"17/Jun/13 15:29","30/Nov/13 17:02","23/Jun/13 09:13"
PDFBOX-1644,PDFBOX,"Wasted work in XMPSchema.merge()",Bug,CLOSED,Major,Fixed,1.8.2,None,XmpBox,"patch perfomance",,"The problem appears in version 1.8.2 and in revision 1493964. I
attached a two-line patch that fixes it. This problem and the
attached patch are similar the previously fixed PDFBOX-1456,
PDFBOX-1457, and PDFBOX-1583, and their patches.
In method "org.apache.xmpbox.schema.XMPSchema.merge", the loops over
"itNewValues" and "itActualEmbeddedProperties" should break
immediately after "alreadyPresent" is set to "true". All the
iterations after "alreadyPresent" is set to "true" do not perform any
useful work because the only side effect is:
"((ArrayProperty)tmpEmbeddedProperty).getContainer().addProperty(tmpNewValue);",
which is executed only when "if (!alreadyPresent)" is "true", i.e., it
is never executed once "alreadyPresent" is set to "true" because
"alreadyPresent" cannot become "false" again.",0,"Guillaume Bailleul","Adrian Nistor",0,1,"17/Jun/13 23:17","08/Feb/14 19:01","18/Jun/13 11:01"
PDFBOX-1645,PDFBOX,"[PATCH] Improved the accuracy of the bounding box for each rendered CFF glyph",Improvement,CLOSED,Major,Later,1.8.2,2.0.0,FontBox,None,,"In a previous patch to the CharStringRenderer class, I resolved the rendering issues and added a method to retrieve the bounding box for a CFF glyph. This utilized the GeneralPath.getBounds() method to retrieve it's bounding box. Unfortunately it was found that the method uses the control points of the bezier curves instead of the actual lines and was not very accurate. I have therefore added several new methods to calculate the correct extents of the glyph so that now it matches that of the measurements found in tools like FontForge.
As a side note, there are several checks which were originally added in my patch which were unfortunately removed relating to the number of arguments provided with an operator. I have one Adobe Font (Adobe Heiti Standard - CID-Keyed OTF) which has one or more glyphs which trip up on this and cause an Array index out of Bounds exception. Each glyph renders correctly even though this issue occurs and therefore would be grateful if these could be left in. I have re-added these checks back with the patch I am about to add.",0,"Andreas Lehmkühler","Robert Meyer",2,4,"19/Jun/13 08:40","09/Feb/14 23:27","09/Feb/14 23:27"
PDFBOX-1646,PDFBOX,"[PATCH] Add method for retrieving CFF bounding box from CFFFont class with slight refactoring and optimization.",Improvement,CLOSED,Major,Later,1.8.2,None,FontBox,None,,"I have added a method to the CFFFont class to retrieve the bounding box for a character determined by an SID as well as retrieving a name. I have also slightly modified the existing code so that each sid mapping can be retrieved now using the SID as the key from a map. From looking around there are several examples of where iterative loops are used using the original mapping array:
CFFFontROS.java:165
CFFParser.java:876
I haven't changed those locations yet, but they can be made in a separate patch which should boost performance.
There was a small bit of refactoring done as well just because I now retrieve a renderer from two locations. These patches are part of adding OTF CFF support to Apache FOP.",0,"Andreas Lehmkühler","Robert Meyer",2,4,"19/Jun/13 09:46","20/Jan/14 18:22","20/Jan/14 17:40"
PDFBOX-1648,PDFBOX,"FontBox can't load CMaps with no spaces between tokens",Improvement,CLOSED,Minor,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",FontBox,"patch test",,"FontBox (tested versions 1.7.0 and 1.8.2) can't load CMap entries if they're not properly separated by whitespace making it problematic to extract the text from such PDFs. Test case and a proposed patch attached. The patch is tiny but in case it matters: it is in public domain, no credit necessary, please feel free to relicence it as you see fit.",0,"Andreas Lehmkühler","Max Gilead",1,4,"24/Jun/13 14:08","13/Dec/14 14:15","23/Nov/14 17:02"
PDFBOX-165,PDFBOX,"Embbed File problem",Bug,CLOSED,Minor,Duplicate,None,None,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552833&aid=1486424
Originally submitted by nobody on 2006-05-11 04:25.
Hello,
I'm trying to embbed several PDF files (1.6- with XFA
form inside) in a single PDF container (1.6 - with XFA
form inside).
The first time, if I embbed a PDF file with PDFBox and
reopen later the resulted file in Acrobat, all works good.
File1 + Attachment1 + Attachment2-->File2
File 2 contains Attachment1 + Attachment2 --> OK
But if I retry to attach an additional attachment to
the previous resulted file, if I reopen the generated
PDF in Acrobat, Acrobat can open it (with a warning -
"Le type de paramtre fourni par la procédure PDS est
incorrect" - Sorry, I have a french version), but the
content that is openned is the one from the first
previous first attachment I made (Attachment1) and not
the content contained in the main PDF (File1).
File2+ Attachment 3 --> File 3 corrupted PDF file .
File3 show the content of attachment 1 and contains
Attachment 2 and Attachement 3.
Is this a bug or does I make someting false?
The File is about 500Kb, so I cannot attached this to
this message.
Denis Pilet
dpilet@iware.ch
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
sorry for the delay in the response, I believe this is
fixed in CVS but not yet released, please give that version
a try and let me know if you are still having an issue.
http://www.pdfbox.org/dist
Ben",0,"Andreas Lehmkühler",Anonymous,0,0,"11/May/06 11:25","12/Feb/11 18:59","07/Dec/10 06:38"
PDFBOX-1651,PDFBOX,"PDFBox doesn't read the permission bits correct. PDDocument.getCurrentAccessPermission().canPrint() is allways returning true irrespective of the document print permissions",Bug,CLOSED,Major,Fixed,1.7.1,"1.8.9, 2.0.0",PDModel,None,"windows 7, JDeveloper","PDDocument.getCurrentAccessPermission().canPrint() is allways returning true irrespective of the document print permissions",0,"Andreas Lehmkühler","kuchi bhargav",0,4,"25/Jun/13 15:31","28/Mar/15 14:10","24/Jan/15 17:14"
PDFBOX-1653,PDFBOX,"Fix pdfbox eating up big chunks of memory for identical CID mappings",Bug,CLOSED,Critical,Fixed,"1.8.1, 1.8.2, 2.0.0","1.8.3, 2.0.0",FontBox,PatchAvailable,,"pdfbox currently handles the PDF beginbfrange command (which creates a character mapping for a range of CIDs to Unicode characters) in a very inefficient way.
If a PDF document contains a range of CID 0 to CID 65535 with a mapping offset of 0 (which translates to "CID values map 1:1 to Unicode characters", pdfbox would nevertheless map each and every CID.
There apparently are PDFs with a lot of these 0-65535 mappings, and such a single PDF may cause an OutOfMemoryError.
This patch detects zero-offset ranges and basically just skips them from an explicit mapping.
There is some special handling for the space character included in the patch, which might or might not be relevant.",0,"Andreas Lehmkühler","Christian Kohlschütt",0,2,"27/Jun/13 22:49","30/Nov/13 17:02","31/Aug/13 12:35"
PDFBOX-1655,PDFBOX,"Wasted work (or incorrect behavior) in PDCIDFontType2Font.readCIDToGIDMapping",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",PDModel,"patch performance",,"The problem appears in version 1.8.2 and in revision 1497941. I
attached a two-line patch (patch.diff) that fixes it.
In method "PDCIDFontType2Font.readCIDToGIDMapping", the loop:
"for(int offset = 0;offset < numberOfInts;offset++)"
keeps overriding "cid2gid[index]" with "getCodeFromArray(mapAsBytes,
offset, 2)", where "index" does not change in the loop ("index" is
always "0"). Therefore, only the last written value is visible out of
the loop and all the previous writes and iterations are not necessary.
The patch iterates from the end of the loop and breaks the first time
when "cid2gid[index]" is set. The code can be further simplified, but
I leave it like this to make the patch easy to follow.
My patch preserves the original code behavior, but note that the
original code (not the patch) may be incorrect to start with: maybe
the code is not supposed to keep overriding "cid2gid[index]" (with
"index" never changing in the loop, with value "0" all the time), but
rather to also change "index". Maybe the code was supposed to be
something like "cid2gid[index++]".",0,"Andreas Lehmkühler","Adrian Nistor",0,2,"28/Jun/13 23:28","30/Nov/13 17:02","22/Jul/13 17:33"
PDFBOX-1657,PDFBOX,"glyph contours missing",Bug,CLOSED,Minor,Fixed,1.8.2,"1.8.3, 2.0.0",FontBox,None,windows,"In class GlyphTable, method initData, contours are not set
if offset of glyph is the same as offset of previous glyph:
// don't repeat glyphs
if (currentOffset == offsets[i])
{ continue; }
Should be changed to:
// don't repeat glyphs
if (currentOffset == offsets[i])
{ glyphs[i] = glyphs[i-1]; continue; }",0,"Andreas Lehmkühler","Kurt Leistentritt",0,2,"01/Jul/13 18:21","30/Nov/13 17:02","17/Jul/13 17:52"
PDFBOX-1658,PDFBOX,"TTC fonts not supported for substitution",Bug,CLOSED,Major,Fixed,"1.7.0, 2.0.0",2.0.0,Rendering,features,"windows 7","Issue: The character position is seen wrong in some cases in PDFReader.
Description: The character position (coordinate) seems irregular in PDFReader. Please refer the link below for input PDF
"http://www.city.yotsukaido.chiba.jp/shisei/jigyoshamuke/nyusatsu/nyusatsu/teishi.files/simeiteisi12.4.pdf"
1. Open this pdf both in PDFReader and Adobe Reader.
2. Consider the input characters 「102269 工事成績」
3. Some character positions are seen incorrectly. For example, the x coordinate of the character "工" is between the digit "1" and "0".",0,"John Hewson","remya nair",0,3,"04/Jul/13 09:38","17/Mar/16 19:08","09/Apr/15 18:58"
PDFBOX-1659,PDFBOX,"Preflight 2.0.0 doesn't properly identify PDFs with encryption",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,Preflight,None,"windows 7","For PDFs that contain encryption, Preflight 2.0.0 now returns the following error code/message:
1.0 : Syntax error
Here's an example file:
https://github.com/openplanets/format-corpus/raw/master/pdfCabinetOfHorrors/encryption_nocopy.pdf
Previous versions would give more specific info in such cases (e.g. 1.4.2 / Trailer Syntax error, The trailer dictionary contains Encrypt).
The other 'encyption_' files below show the same behavior:
https://github.com/openplanets/format-corpus/tree/master/pdfCabinetOfHorrors",0,"Eric Leleu","Johan van der Knijff",0,3,"11/Jul/13 15:16","17/Mar/16 19:08","30/Oct/13 20:03"
PDFBOX-1660,PDFBOX,"Error 6.2.4 results in description that looks more like the one belonging to 6.2.3",Bug,CLOSED,Minor,Fixed,None,2.0.0,Preflight,None,"windows 7","Analyzing the following PDF with Preflight:
https://github.com/openplanets/format-corpus/raw/master/pdfCabinetOfHorrors/webCapture.pdf
One of the reported errors is:
<error count="1">
<code>6.2.4</code>
<details>Action is forbidden, "A" must not be used in a Field dictionary</details>
</error
But the description in the 'details' element doesn't really match what I see here:
http://svn.apache.org/repos/asf/pdfbox/trunk/preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java
/**
A widget annotation linked with a form field shall not have any action
*/
String ERROR_ACTION_FORBIDDEN_WIDGET_ACTION_FIELD = "6.2.4";
But it does look similar to this:
/**
Additional action entry is forbidden in a form field object
*/
String ERROR_ACTION_FORBIDDEN_ADDITIONAL_ACTIONS_FIELD = "6.2.3";
So it looks like a slight mix-up (error code linked to wrong description).",0,"Eric Leleu","Johan van der Knijff",0,3,"15/Jul/13 13:29","17/Mar/16 19:08","30/Oct/13 19:56"
PDFBOX-1662,PDFBOX,"The Example RemoveAllText does not remove text from certain pdf",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","2.0.5, (1)",Utilities,None,"windows xp, java 1.6","The Example RemoveAllText does not remove text from certain pdf",0,"Andreas Lehmkühler","Paul Heinrich",0,3,"16/Jul/13 08:31","25/Mar/17 18:13","27/Dec/16 12:04"
PDFBOX-1663,PDFBOX,"Hello World using a TrueType font ArrayIndexOutOfBoundsException",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",None,None,"windows 7, netbeans","The small example “Hello World using a TrueType font” on the pdfbox website does not work when selecting the Windows font “cour.ttf” (Courier New). It works with the non-fixed width fonts that I have tried (Arial, Albertus, Bookman Old Style, Garamond, Palatino, Segoe UI) and it works with Lucida Console, a fixed width font, but not Courier New.
This is the error:
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 5
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadDescriptorDictionary(PDTrueTypeFont.java:418)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:201)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:177)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:158)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:145)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:132)
at pdfbox_ttf_test.Main.main(Main.java:31)
To me this is the same error as PDFBOX-1335, except maybe it is still not fixed for all fonts.
I am using Windows 7 SP1 32-bit, pdfbox 1.8.2., NetBeans IDE 6.9.1
This is my source:
----------------------- <snip> -------------------------
/*
To change this template, choose Tools | Templates
and open the template in the editor.
*/
package pdfbox_ttf_test;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;
import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
import org.apache.pdfbox.exceptions.COSVisitorException;
import java.io.IOException;
/**
*
@author Duncan
*/
public class Main {
/**
@param args the command line arguments
*/
public static void main(String[] args) throws IOException, COSVisitorException { // TODO code application logic here PDDocument document = new PDDocument(); PDPage page = new PDPage(); document.addPage( page ); // Create a new font object by loading a TrueType font into the document PDFont font = PDTrueTypeFont.loadTTF(document, "C:\\Windows\\Fonts\\cour.ttf"); // Start a new content stream which will "hold" the to be created content PDPageContentStream contentStream = new PDPageContentStream(document, page); // Define a text content stream using the selected font, moving the cursor and drawing the text "Hello World" contentStream.beginText(); contentStream.setFont( font, 12 ); contentStream.moveTextPositionByAmount( 100, 700 ); contentStream.drawString( "Hello World" ); contentStream.endText(); // Make sure that the content stream is closed: contentStream.close(); // Save the results and ensure that the document is properly closed: document.save( "Hello World.pdf"); document.close(); }
}
-------------------------- <end snip> -----------------------------",0,"Andreas Lehmkühler","Duncan Horrocks",0,2,"16/Jul/13 14:49","30/Nov/13 17:02","10/Aug/13 12:09"
PDFBOX-1665,PDFBOX,"Replace external glyphlist.txt with our onw implementation",Improvement,CLOSED,Major,Fixed,"1.8.2, 2.0.0",2.0.0,PDModel,glyphlist,,"According to the header of glyphlist.txt Adobe encourages people to use the content of the file to create their own implementation of the glyphlist:
Permission is hereby granted, free of charge, to any person obtaining a
copy of this documentation file, to create their own derivative works
from the content of this document to use, copy, publish, distribute,
sublicense, and/or sell the derivative works, and to permit others to do
the same, provided that the derived work is not represented as being a
copy or version of this document.
To get rid of the external dependency we should follow that advise and create our own class providing the information of the glyphlist.txt",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"17/Jul/13 17:27","17/Mar/16 19:07","17/Jul/13 17:35"
PDFBOX-1666,PDFBOX,"Missing StemV font descriptor entry when embedding AFM fonts",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Writing,"easyfix patch",,"When embedding an AFM font the StemV field is missing in the PDF which renders it not PDF/A-1b compliant.
As the StemV value is not included in AFM files it seems to be OK to simply set it to 0. A quick test in Firefox, Chrome, OSX Preview and Acrobat Reader indicates having StemV set to 0 does not impact font rendering in any obvious way. FOP computes StemV from other values stored in PFM files but the fields are optional so can't be relied upon [1] (hence results are often 0 anyway) and Word [2] and iOS [3] seem to use 0 by default.
Verified in SVN trunk 1504502 (2013.07.18)
[1] http://xmlgraphics.apache.org/fop/1.1/fonts.html
[2] http://tracker.luatex.org/view.php?id=32
[3] http://blog.nomzit.com/2010/08/18/annoying-bug-in-quartz-pdfcontext-font-handling/ – just a link to a iOS-originating PDF dissected, nothing to do with the bug the article is about",0,"John Hewson","Max Gilead",0,2,"18/Jul/13 15:53","17/Mar/16 19:08","03/Feb/15 19:22"
PDFBOX-1671,PDFBOX,"Error printing document java.lang.ArrayIndexOutOfBoundsException: 346",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"FontBox, (1)",None,,"Hello
I'm trying to print PDF using pdfbox (2.0.0) with fontbox (2.0.0) but unsuccessfully.
I think there is problem with font substitution.
I'm attaching pdf file, log, and source code.",0,"Andreas Lehmkühler","Lukas Vasek",0,2,"24/Jul/13 14:14","17/Mar/16 19:07","24/Jul/13 21:11"
PDFBOX-1672,PDFBOX,"Some characteres are missing after print thru PDFBox",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"FontBox, (1)",None,,"Hello,
I'm trying to print document (source and pdffile are attached in issue https://issues.apache.org/jira/browse/PDFBOX-1671 ), but after printin some characters are missing.
It's mainly character ž which you can find for examle in last cell of document.
I don't know if this is bug or if this is not supported by PDFBox.
Thanks",0,"Andreas Lehmkühler","Lukas Vasek",0,3,"25/Jul/13 09:48","17/Mar/16 19:06","10/Sep/13 16:43"
PDFBOX-1674,PDFBOX,"Preflight doesn't correctly parse PDF if obj identifier not followed by line terminator",Bug,CLOSED,Minor,Fixed,2.0.0,"1.8.3, 2.0.0",Preflight,None,"windows 7","For some test files on the Adobe Acrobat Engineering website, Preflight output looks like this:
<preflight name="Disney-Flash.pdf">
<executionTimeMS>210</executionTimeMS>
<isValid type="">false</isValid>
<errors count="3">
<error count="1">
<code>1.0</code>
<details>Syntax error, Expected pattern 'obj but missed at character 'o'</details>
</error>
<error count="1">
<code>1.2.1</code>
<details>Body Syntax error, Expected pattern 'obj but missed at character 'o'</details>
</error>
<error count="1">
<code>1.2.1</code>
<details>Body Syntax error, Single space expected</details>
</error>
</errors>
</preflight>
Which suggests that Preflight doesn't correctly parse the objects. This is confirmed by a look at some of the offending PDFs in a hex editor, which reveals that the object identifiers in them are not terminated by any EOL character(s). AFAIK this is allowed in both PDF and PDF/A-1. More details + links to test files here ('Multimedia' table and below):
http://www.openplanetsfoundation.org/blogs/2013-07-25-identification-pdf-preservation-risks-sequel",0,"Eric Leleu","Johan van der Knijff",0,5,"26/Jul/13 14:17","19/Nov/14 06:12","18/Aug/13 13:28"
PDFBOX-1675,PDFBOX,"Preflight : improve error information",Task,CLOSED,Minor,Fixed,1.8.2,2.0.0,Preflight,None,,"Preflight should :
have more userfriendly error details
provide a way to ignore some errors",0,"Tilman Hausherr","Eric Leleu",0,6,"28/Jul/13 16:33","17/Mar/16 19:06","04/Feb/15 19:19"
PDFBOX-1676,PDFBOX,"Could not initialize class org.apache.pdfbox.pdmodel.font.PDType0Font",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,PDModel,None,"java 1.7, windows 7","I update pdfbox to latest from svn trunk.
Now i get error "Could not initialize class org.apache.pdfbox.pdmodel.font.PDType0Font" when calling method DPage.convertToImage(BufferedImage.TYPE_INT_RGB, 96).
In 1.8.2 i don't get this error but get error that embeded font could not read.",0,"Andreas Lehmkühler",Pro,0,2,"29/Jul/13 13:17","05/Aug/13 10:58","05/Aug/13 10:58"
PDFBOX-1678,PDFBOX,"Convert to image problem",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,"windows 7, java 1.7","I build maven repo for pdfbox 2.0 version from git.
I need convert pdf to image.
In pdf used font Arial from windows but i get not readable image.",0,"Andreas Lehmkühler",Pro,0,4,"05/Aug/13 09:09","17/Mar/16 19:07","23/Sep/13 16:22"
PDFBOX-1679,PDFBOX,"java.io.IOException: Error: Expected an integer type, actual='f'",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.4, 2.0.0",None,None,"windows xp","This was mentioned in PDFBOX-490 with a different problem, and there were similar issues that were closed for failure to bring an example. The file can be found at http://www.lavasurfer.com/100akerpathology.pdf
java.io.IOException: Error: Expected an integer type, actual='f'
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1640)
at org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber(BaseParser.java:1612)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseXrefObjStream(NonSequentialPDFParser.java:459)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:359)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:700)
at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1254)
at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1237)
at pdfboxpageimageextraction.ExtractImages.doPdf(ExtractImages.java:83)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:67)
My call is
document = PDDocument.loadNonSeq(new File(pdfFilename), null);",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"05/Aug/13 11:25","31/Jan/14 06:46","04/Jan/14 17:58"
PDFBOX-1680,PDFBOX,"PDFTextStripper returns garbage characters",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,"Text extraction",None,"windows xp","This code
PDDocument document = PDDocument.loadNonSeq(new File(pdfFilename), null);
PDFTextStripper pdfTextStripper = new PDFTextStripper("UTF-8");
pdfTextStripper.setStartPage(1);
pdfTextStripper.setEndPage(999);
System.out.println(pdfTextStripper.getText(document));
returns this text when used with the file mentioned in PDFBOX-1436 :
===
Downloads Stack
Welcome to Mac OS X Snow Leopard.
The Dock in Snow Leopard
includes Stacks, which you
can use to quickly access
MYLX\LU[S`\ZLKÄSLZHUK
applications right from
the Dock.
Stacks are simple to create. Just drag any folder to
the right side of the Dock and it becomes a stack.
Click a stack and it springs from the Dock in either
HMHUVYHNYPK;VVWLUHÄSLPUHZ[HJRJSPJR[OL
ÄSLVUJL
Mac OS X Snow Leopard includes three premade
stacks called Documents, Downloads, and Applications
@V\VWLULK[OPZÄSLMYVT[OL+V^USVHKZZ[HJR
The Downloads stack captures all of your Internet
downloads and puts them in one convenient location.
Files you download in Safari, Mail, and iChat go
YPNO[PU[V[OL+V^USVHKZZ[HJR>OLUHÄSLÄUPZOLZ
KV^USVHKPUN[OLZ[HJRUV[PÄLZ`V\I`IV\UJPUNHUK
W[Z[OLUL^ÄSLYPNO[VU[VWZVP[»ZLHZ`[VÄUK
Stacks automatically display their contents in a fan or a
grid based on the number of items in the stack. You
can also view the stack as a list. If you prefer one style
over the other, you can set the stack to always open in
that style.
:[HJRZPU[LSSPNLU[S`ZOV^[OLTVZ[YLSL]HU[P[LTZÄYZ[
or you can set the sort order so that the items you care
about most always appear at the top of the stack. To
customize a stack, position the pointer over the stack
icon and hold down the mouse button until a menu
appears. Choose the settings you want from the menu.
;VYLTV]LHÄSLMYVT
a stack, just open
the stack and drag the
item out to where you
^HU[P[;VKLSL[LHÄSL
move it to the Trash.
0UMHJ[^OLU`V\»YL
done reading this
document, feel free
to throw it out.
Documents Downloads Applications
TM and © 2009 Apple Inc. All rights reserved.
===
The garbage characters are the same that were solved by the change in PDFBOX-490, so its probably a similar cause.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"06/Aug/13 09:33","06/Aug/13 09:52","06/Aug/13 09:52"
PDFBOX-1681,PDFBOX,"java.lang.IllegalArgumentException: Color parameter outside of expected range: Red",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.3, 2.0.0",PDModel,None,,"When calling page.convertToImage() for a pdf file from the ghostscript installation, I get this stack trace:
06.08.2013 11:46:52.086 WARN [main] org.apache.pdfbox.pdmodel.graphics.color.PDColorState:244 - Unable to create the color instance [74.0, 0.0, 0.0] in color space Lab{ }; guessing color ...
Color interpolation failed; using black instead
java.lang.IllegalArgumentException: Color parameter outside of expected range: Red
java.lang.IllegalArgumentException: Color parameter outside of expected range: Component 0
at java.awt.Color.<init>(Color.java:538)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:190)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:121)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:216)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:485)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:529)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:258)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:205)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:141)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:781)
at pdfboxpageimageextraction.ExtractImages.doPdf(ExtractImages.java:118)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:67)
The file is rendered, but the color of the third text is incorrect.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"06/Aug/13 10:05","30/Nov/13 17:02","09/Aug/13 16:04"
PDFBOX-1685,PDFBOX,"Verify interpretation of rdf:about for PDF/A",Task,CLOSED,Minor,Fixed,None,"1.8.4, 2.0.0",Preflight,None,,"There was a discussion about handling rdf:about for PDF/A validation on the PDF Associations mailing list which I'm allowed to share:
<snip>
In this case we have a PDF with an XMP metadata stream containing two
<rdf:RDF> entries, one with rdf:about set to a blank string, the other with
it set to a UUID. The PDF/A specification (ISO-19005-1:2005(E) para 6.7.2)
simply says that the stream must conform to the "XMP specification 2004
revision" which reads (p21):
The rdf:about attribute on the rdf:Description element is a required
attribute that identifies the resource whose metadata this XMP describes.
The value of this attribute must follow URI syntax and may be either:
● an empty string (as in the example above), which means that the XMP is
physically local to the resource being described. Applications must rely on
knowledge of the file format to correctly associate the XMP with the
resource.
● a unique instance ID that is generated every time a file is saved. The
next section gives guidelines for creating instance IDs.
The XMP packet must describe a single entity, and my reading of the above
is a combination of empty-string and a unique UUID can meet this
requirement - this is how both our software and Acrobat X and XI behave.
However it's ambiguous, and this clause was revised in the 2012 revision
(ISO 16684-1:2011(E) para 7.4) to this:
If the XMP data model has an AboutURI (6.1, “XMP packets”), that same URI
shall be the value of an rdf:about attribute in each top-level
rdf:Description element. Otherwise, the rdf:about attributes for all top-
level rdf:Description elements shall be present with an empty value. The
rdf:about attribute shall not be used in more deeply nested rdf:Description
elements.
For compatibility with very early XMP usage, it is recommended that XMP
readers tolerate a missing rdf:about attribute and treat it as present with
an empty value. It is also recommended that XMP readers tolerate a mix of
empty and non-empty rdf:about values, as long as all non-empty values are
identical.
Which means that an empty string and a unique UUID are technically
incorrect, but it's recommended they be tolerated for compatibility
purposes.
</snip>
I might be good to check our interpretation as
<snip
BFO and Acrobat X and XI think this is valid, PDFBox and
pdf-tools.com online validator lean the other and classify this document
as invalid.
</snip>
to see if we should change our interpretation. If there is new input on the pdfa.org mailinglist I'll capture it here too.",0,"Eric Leleu","Maruan Sahyoun",0,4,"07/Aug/13 15:41","31/Jan/14 06:46","27/Nov/13 21:18"
PDFBOX-1687,PDFBOX,"add dispose() in pdfbox\pdmodel\PDPage.convertToImage()",Improvement,CLOSED,Trivial,Fixed,2.0.0,"1.8.3, 2.0.0",PDModel,None,,"I suggest to add these two lines at the end of pdfbox\pdmodel\PDPage.convertToImage()
drawer.dispose();
graphics.dispose();
This would speed up cleanup after rendering. (Alternatively, delete the PageDrawer.dispose() function, because it is never used)",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"09/Aug/13 18:28","30/Nov/13 17:02","25/Aug/13 14:40"
PDFBOX-1688,PDFBOX,"File with embedded subset renders no text",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"(Tested with the version of today, revision 1512392)
The attached file has two embedded font subsets; when rendering no text appears at all.
See also PDFBOX-1391.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"09/Aug/13 19:07","17/Mar/16 19:08","11/Aug/13 15:13"
PDFBOX-1689,PDFBOX,"Partial failure to render PDF",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.6, 2.0.0",Rendering,None,,"The attached file has several issues when rendering:
The long "-" symbol replaced (top right, after "Reiseart: gültig für alle Reisearten")
The € (euro) symbol replaced (top right, after "maximaler Reisepreis: ")
The square (on win7) or bullet (on XP) symbol is replaced with a sum symbol
The whole text is not rendered in the same font than in acrobat reader",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"10/Aug/13 10:10","22/Jun/14 14:34","27/May/14 19:15"
PDFBOX-1690,PDFBOX,"Add description to embedded file",Improvement,CLOSED,Major,Fixed,"1.8.2, 1.8.3, 2.0.0","1.8.3, 2.0.0",PDModel,None,,"PDF documents can contain file attachments. But at the moment, we can't add descriptions of file attachments.",0,"Andreas Lehmkühler","vakhtang koroghlishv",0,2,"10/Aug/13 18:49","30/Nov/13 17:02","03/Nov/13 16:01"
PDFBOX-1691,PDFBOX,""Foreign" characters are not rendered",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,"windows xp, windows 7, java 1.7","In the attached file (from page 3 of the pdf file), the letters ä, ö and ü are not rendered.
I am using the version of last weekend.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"12/Aug/13 10:23","17/Mar/16 19:07","05/Jan/14 15:44"
PDFBOX-1692,PDFBOX,"java.lang.OutOfMemoryError: Java heap space",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0","Text extraction",None,"windows 7","Hello,
I have a problem with text extraction.
The problem is not enough memory in VM during the text extraction!
My Code:
String pdfFile = "D:\testfolder\test1fd9a_test.pdf"; //size of file 168 KB
PDDocument document = PDDocument.load(pdfFile, true);
PDFTextStripper stripper = null;
try {
stripper = new PDFTextStripper();
stripper.setSortByPosition(true);
stripper.writeText(document, outputWriter);
} catch () {
}
You get an error:
java.lang.OutOfMemoryError: Java heap space",0,"Andreas Lehmkühler","Christian Czech",1,4,"12/Aug/13 16:16","30/Nov/13 17:02","01/Sep/13 11:01"
PDFBOX-1694,PDFBOX,"Bug in org.apache.pdfbox.io.Ascii85InputStream",Bug,CLOSED,Major,Fixed,1.7.1,"1.8.3, 2.0.0",None,Ascii85Decode,,"Method 'org.apache.pdfbox.io.Ascii85InputStream.read()' has bug when reading final set of char that are not modulo-4.
Test file="www.mzweb.com.br/grupobimbo/web/arquivos/Bimbo_Historia_20070409_Esp.pdf".
On page#0 there is a dictionary "323 0 obj << /Length 1492 /Filter [/Ascii85Decode /FlateDecode]>>"
Last set of bytes to decode is "%f" or 0x25, 0x66
Ascii85InputStream pads this to "%f~!!" and correctly generates the final byte 0x0f.
Including the '~' end-of-data char in the padding is a major bug.
If the final padding were "%f!!!", the final byte decoded would be 0x0e (which is wrong).
The correct padding is the 'u' char, or "%fuuu" (See http://en.wikipedia.org/wiki/Ascii85)
This is a quick fix.
The PDF files for corporate website "Grupo Bimbo" include lots of examples using Ascii85Decode/",0,"Andreas Lehmkühler","Peter Costello",0,4,"14/Aug/13 00:22","30/Nov/13 17:02","25/Aug/13 12:54"
PDFBOX-1695,PDFBOX,"Improve pdfbox tests",Improvement,CLOSED,Minor,Fixed,"1.8.2, 2.0.0",2.0.0,None,"tdd test-driven test",,"I'd like to improve the tests for rendering.
org/apache/pdfbox/util/TestPDFToImage.java is disabled in pdfbox\pom.xml . This has been disabled since 2009 ?! So I enabled it here.
The subdir "rendering" is missing in pdfbox\target\test-output for these tests
When a test fails because the rendered image is not identical, no detailed message appears on the console. It appears only in pdfbox.log and not on the console.
this is because of the settings in
pdfbox\src\test\resources\logging.properties
If this is on purpose, please change the texts in pdfbox\src\test\java\org\apache\pdfbox\util*.java from
"One or more failures, see test log for details"
to
"One or more failures, see test logfile 'pdfbox.log' for details"
I wanted to attach a PDF with ccitt g4 compression and its rendering created with the 1.8.2 version, but it doesn't work out, seems that CIB generates files that can be rendered properly with 1.8.2. However I attach the TIFF g4 file, and a JBIG2 test file from it. I don't have access to a Xerox WorkCentre (enter jbig2 in google news ) so I used a free service, so there's a watermark.
It should be included into
pdfbox\src\test\resources\input\rendering
I have created the image myself and I give it into the public domain.
If my suggestion is accepted, it would be nice if people could create files that fail in current versions or have failed in old versions, and release these files to the public domain, so that they can be added to the tests.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"14/Aug/13 18:09","17/Mar/16 19:08","14/Oct/14 08:43"
PDFBOX-1696,PDFBOX,"Bug in org.apache.pdfbox.io.Ascii85OutputStream",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.3, 2.0.0",None,None,,"There's a bug in ASCII85OutputStream.java in
public final void write(byte[] b,int off, int sz)
The effect of the bug is that buffers with length < 3 produce no output. Fix:
after
if(count < 3)
{
add this line:
flushed = false;
better: delete the whole function and let the superclass handle it. I doubt that the current implementation saves much time.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"16/Aug/13 13:29","30/Nov/13 17:02","25/Aug/13 12:46"
PDFBOX-1698,PDFBOX,"Remove the print and the convertToImage stuff from PDPage and PDDocument",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,"Swing GUI, (1)",None,,"Move the printing/convertToImage stuff from PDPage and PDDocument to the PDPageable class to remove/reduce all the AWT-stuff from the PDFBox-core classes.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"17/Aug/13 13:04","17/Mar/16 19:08","18/Aug/13 15:05"
PDFBOX-1699,PDFBOX,"Problem with generate jpg from pdf",Bug,CLOSED,Major,Fixed,1.8.2,2.0.0,Writing,None,windows,"When converting jpg from pdf (using WriteImage) whitespaces in text are replaced by digt "w" or "y".",0,"Andreas Lehmkühler",Rafal,0,3,"19/Aug/13 12:38","19/Aug/13 17:11","19/Aug/13 16:56"
PDFBOX-1700,PDFBOX,"TTF Font fails to load",Bug,CLOSED,Minor,Duplicate,1.8.1,None,PDModel,newbie,"ubuntu, java 1.7","Array index out of bounds attempting to load true type font. Statement that failed is...
PDTrueTypeFont.loadTTF(document, "/usr/share/fonts/truetype/liberation/LiberationMono-Regular.ttf");
Error is
java.lang.ArrayIndexOutOfBoundsException: 5 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadDescriptorDictionary(PDTrueTypeFont.java:418)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:201)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:177)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:158)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:145)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:132)
... Please accept apologies if this is a user error. Font file is as installed by Ubuntu, exists and is viewable. Changing the file name produces 'no such file or directory', as expected, so pretty sure it has found the file.",0,"Andreas Lehmkühler","John Hamilton",0,2,"20/Aug/13 13:41","20/Aug/13 15:41","20/Aug/13 15:41"
PDFBOX-1702,PDFBOX,"Performance improvement in PDPageContentStream.drawString",Improvement,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",Writing,None,,"There is a simple way of improving the performance of drawString by replacing
string.writePDF( buffer );
appendRawCommands( new String( buffer.toByteArray(), "ISO-8859-1"));
appendRawCommands( SPACE );
with
string.writePDF( buffer );
appendRawCommands( buffer.toByteArray() );
appendRawCommands( SPACE );
as the appendRawCommands(String) simple does a appendRawCommands(str.getBytes( "ISO-8859-1" ));
Therefore this optimization should spare the String creation as well as the conversion back to a byte array.",0,"Andreas Lehmkühler","Philip Helger",0,2,"22/Aug/13 13:34","30/Nov/13 17:02","25/Aug/13 16:20"
PDFBOX-1706,PDFBOX,"Reading PDF documents that contain special characters (e.g. €) cause warning and invalid parse result",Bug,CLOSED,Major,"Cannot Reproduce","1.8.2, 2.0.0",None,"Text extraction",patch,windows,"When trying to call stripper.getText on the PDF file http://www.edi-energy.de/files2/EDI@Energy%20UTILMD%205.1_20130401.pdf, PDFBox 1.8.2 emits the following warning:
08:48:20,222 WARN PDFStreamEngine:567 - java.io.IOException: Error: Could not find font(COSName
{F7}) in map={F1=org.apache.pdfbox.pdmodel.font.PDTrueTypeFont@676825b5, F2=org.apache.pdfbox.pdmodel.font.PDTrueTypeFont@547e97d8}
java.io.IOException: Error: Could not find font(COSName{F7}
) in map=
{F1=org.apache.pdfbox.pdmodel.font.PDTrueTypeFont@676825b5, F2=org.apache.pdfbox.pdmodel.font.PDTrueTypeFont@547e97d8}
at org.apache.pdfbox.util.operator.SetTextFont.process(SetTextFont.java:57)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:455)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:379)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:335)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:254)
Interestingly, PDFBox 2.0 emits a different warning that calls out the problem more precisely:
Aug 27, 2013 9:35:30 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont extractToUnicodeEncoding
SEVERE: Error: Could not load embedded ToUnicode CMap
Aug 27, 2013 9:35:30 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont getSpaceWidth
SEVERE: Can't determine the width of the space character using 250 as default
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.getSpaceWidth(PDSimpleFont.java:406)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:343)
at org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:62)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:529)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:258)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:205)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:455)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:379)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:335)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:254)
We could trace the problem down to reading pages that contain special characters (e.g. €). In the referenced PDF document, pages that do not contain special characters (e.g. €) do not cause the above mentioned warning. The text parts in the document that cause the warning do not get parsed correctly. The parse result contains byte rubbish.
Adobe reader displays the entire document correctly.
The following snippet should serve as a repro:
package com.regiocom.bpo.mig;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import org.apache.pdfbox.pdfparser.PDFParser;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.util.PDFTextStripper;
import org.apache.pdfbox.util.Splitter;
public class Repro {
public Repro() {
try
{ stripper = new PDFTextStripper(); }
catch (IOException e)
{ e.printStackTrace(); }
}

// use this PDF as input: http://www.edi-energy.de/files2/EDI@Energy%20UTILMD%205.1_20130401.pdf
public void run(String pdfFile) {

PDDocument[] documents = loadAndSplitFile(pdfFile, 1);

for(PDDocument document : documents) { parse(document); }
}

private PDDocument[] loadAndSplitFile(String pdfFile, int splitPage) {

List<PDDocument> documents;
Splitter splitter = new Splitter();
PDFParser parser;

try {
parser = new PDFParser(new FileInputStream(new File(pdfFile)));
parser.parse();

PDDocument doc = parser.getPDDocument();

splitter.setSplitAtPage(splitPage);

documents = splitter.split(doc);

doc.close();

return documents.toArray(new PDDocument[]{});
} catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); }
return null;
}
private void parse(PDDocument pdfFile) {
try
{ stripper.getText(pdfFile); }
catch (IOException e)
{ e.printStackTrace(); }
}
private PDFTextStripper stripper;
}",0,"Andreas Lehmkühler","Robert Neumann",1,4,"27/Aug/13 08:16","18/Dec/14 11:02","18/Dec/14 11:02"
PDFBOX-1707,PDFBOX,"Add dispose() when done with graphics",Improvement,CLOSED,Minor,Fixed,"1.8.3, 2.0.0","1.8.4, 2.0.0",None,None,,"Please add dispose() in
pdfbox\filter\JBIG2Filter.java
pdfbox\pdmodel\graphics\xobject\PDXObjectImage.java
as recommended by javadoc. Patches are attached.
I've also added @override at some places. The problem is that not having it brings an additional yellow bar in netbeans at the right. Which prevents seeing the more important bars.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"27/Aug/13 14:09","31/Jan/14 06:46","01/Sep/13 17:36"
PDFBOX-1708,PDFBOX,"IndexOutOfBoundsException on convertToImage with an embedded Fax-Image",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.5, 2.0.0","PDModel, (1)","CCITTFaxDecode ccitt",,"PDPage.convertToImage brings me this stacktrace:
java.lang.IndexOutOfBoundsException: offset + length > bit count
at org.apache.pdfbox.io.ccitt.PackedBitArray.setBits(PackedBitArray.java:108)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream.writeRun(CCITTFaxG31DDecodeInputStream.java:184)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream.access$400(CCITTFaxG31DDecodeInputStream.java:29)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$RunLengthTreeNode.execute(CCITTFaxG31DDecodeInputStream.java:375)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream.decodeLine(CCITTFaxG31DDecodeInputStream.java:165)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream.read(CCITTFaxG31DDecodeInputStream.java:98)
at java.io.InputStream.read(InputStream.java:163)
at java.io.FilterInputStream.read(FilterInputStream.java:116)
at org.apache.pdfbox.io.ccitt.FillOrderChangeInputStream.read(FillOrderChangeInputStream.java:45)
at java.io.FilterInputStream.read(FilterInputStream.java:90)
at org.apache.pdfbox.io.IOUtils.copy(IOUtils.java:68)
at org.apache.pdfbox.filter.CCITTFaxDecodeFilter.decode(CCITTFaxDecodeFilter.java:114)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:295)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:237)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:172)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDCcitt.getRGBImage(PDCcitt.java:155)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:83)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:125)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:781)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:712)
at de.rekers.ui.table.YDateianlageTable$4.doInBackground(YDateianlageTable.java:740)
at de.rekers.ui.table.YDateianlageTable$4.doInBackground(YDateianlageTable.java:1)
at javax.swing.SwingWorker$1.call(SwingWorker.java:277)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at javax.swing.SwingWorker.run(SwingWorker.java:316)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:662)
The document is partially rendered. The document is created by our fax software. Acrobat Reader shows the document without an error.
Thanks in advance!
Martin",0,"Tilman Hausherr","Martin Withake",1,3,"27/Aug/13 14:36","02/May/14 06:12","26/Mar/14 17:16"
PDFBOX-1712,PDFBOX,"Images Extraction",Bug,CLOSED,Major,"Not A Problem",1.8.2,None,None,None,"windows 7, java","Hi,
it seems I have 2 identical PDF Documents. But I can't extract images from both.
Can you help me?
Thanks
Christian",0,"Andreas Lehmkühler","Christian Czech",0,3,"02/Sep/13 16:01","03/Sep/13 12:49","03/Sep/13 05:26"
PDFBOX-1713,PDFBOX,"[PATCH] Bullet character not rendered",Bug,CLOSED,Major,Fixed,"1.8.5, 2.0.0","1.8.6, 2.0.0",Rendering,None,,"See attached file. In WinAnsiEncoding, any unused code greater than 040 maps to the bullet character.
The attached patch takes that into account to render characters that don't use the standard encoding for bullet.",0,"Andreas Lehmkühler","Vincent Hennebert",0,4,"04/Sep/13 10:27","22/Jun/14 14:34","24/May/14 12:53"
PDFBOX-1714,PDFBOX,"Merging PDFs results in java.io.IOException: expected='R' actual='0'",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",PDModel,None,,"Merging attached files results in a PDF which isn't processable by PDFBox.
Merging or editing the resulting PDF results in an exception: java.io.IOException: expected='R' actual='0'
D:\pdfboxtest>java -jar pdfbox-app-1.8.2.jar PDFMerger doc1.pdf doc2.pdf result.pdf
D:\pdfboxtest>java -jar pdfbox-app-1.8.2.jar PDFMerger result.pdf doc2.pdf result2.pdf
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Invalid dictionary, found: 'e' but expected: '/'
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Bad Dictionary Declaration org.apache.pdfbox.io.PushBackInputStream@7a4b35d5
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Invalid dictionary, found: 'e' but expected: '/'
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Invalid dictionary, found: 'e' but expected: '/'
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Bad Dictionary Declaration org.apache.pdfbox.io.PushBackInputStream@7a4b35d5
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Invalid dictionary, found: 'e' but expected: '/'
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Bad Dictionary Declaration org.apache.pdfbox.io.PushBackInputStream@7a4b35d5
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Invalid dictionary, found: 'e' but expected: '/'
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Bad Dictionary Declaration org.apache.pdfbox.io.PushBackInputStream@7a4b35d5
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Invalid dictionary, found: 'e' but expected: '/'
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Bad Dictionary Declaration org.apache.pdfbox.io.PushBackInputStream@7a4b35d5
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Invalid dictionary, found: 'e' but expected: '/'
Sep 05, 2013 8:18:48 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary
WARNING: Invalid dictionary, found: 'e' but expected: '/'
PDFMerger failed with the following exception:
java.io.IOException: expected='R' actual='0' org.apache.pdfbox.io.PushBackInputStream@7a4b35d5
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:233)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:349)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1236)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:559)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:188)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1192)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1159)
at org.apache.pdfbox.util.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:181)
at org.apache.pdfbox.PDFMerger.merge(PDFMerger.java:68)
at org.apache.pdfbox.PDFMerger.main(PDFMerger.java:44)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:83)",0,"Andreas Lehmkühler","Gerhard Temper",0,4,"05/Sep/13 06:25","30/Nov/13 17:02","23/Nov/13 14:24"
PDFBOX-1716,PDFBOX,"PDDocument.getNumberOfPages() return 0 for certain PDF document",Bug,CLOSED,Major,"Not A Problem",1.8.2,None,Parsing,None,,"Sample document(https://issues.apache.org/jira/secure/attachment/12430914/FormI-9-English.pdf) can be found here https://issues.apache.org/jira/browse/PDFBOX-578. Looks the NPE issue fix in that work item https://issues.apache.org/jira/browse/PDFBOX-578 is a work around.
When I try to extract the text content from /FormI-9-English.pdf , when I call PDDocument.getNumberOfPages(), this method return 0 which makes the extraction of the text content impossible:
InputStream in = <PDF InputStream>
PDFParser parser = new PDFParser(content);
PDFTextStripper pdfStripper = null;
String parsedText = null;
parser.parse();
cosDoc = parser.getDocument();
pdfStripper = new PDFTextStripper();
pdDoc = new PDDocument(cosDoc);
for(int i=1; i<= pdDoc.getNumberOfPages(); i++)
{ // pdDoc.getNumberOfPages() return 0, which is incorrect }
Note:
1. This problem is found in the PDFBox latest version 1.8.2
2. I didn't which component to file this defect, so please assign to the correct component if needed, Thanks",0,"Andreas Lehmkühler",Tom,0,4,"12/Sep/13 09:29","28/Oct/13 18:00","28/Oct/13 18:00"
PDFBOX-1717,PDFBOX,"Rendering to image has misplaced characters",Bug,CLOSED,Major,Duplicate,1.8.2,2.0.0,Writing,None,"mac os, java 1.7","Slashes in png generation are mis-placed. They do not show up in the wrong position on the original PDF. The are offset by many pixels to the right in the png that is generated.
I simply exported with this command:
java -jar pdfbox-app-1.8.2.jar PDFToImage -imageType png -resolution 300 -color bilevel pdfbox_test2.pdf
Unfortunately I can't use PDFBox to export PDF to image if it doesn't place the characters in the right place.",0,"Andreas Lehmkühler","David Oliver",0,2,"14/Sep/13 20:06","14/Sep/13 21:56","14/Sep/13 21:56"
PDFBOX-1718,PDFBOX,"wrong glyphs displayed",Bug,CLOSED,Major,Fixed,None,2.0.0,None,None,,"java -jar app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage -imageType png /tmp/input.pdf
The resulting image has wrong glyphs for attached example file. Tested with trunk. I think further work is needed in TTFGlyph2D.",0,"Andreas Lehmkühler","Luis Bernardo",0,3,"16/Sep/13 08:51","17/Mar/16 19:08","23/Sep/13 16:20"
PDFBOX-1719,PDFBOX,"NPE while signing PDF - acroform without fields",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",PDModel,None,,"Trying to sign a document that has already an AcroForm but no fields cause a NullPointerException.",0,"Thomas Chojecki","Thomas Chojecki",0,2,"16/Sep/13 09:52","26/Jan/17 15:55","16/Sep/13 14:41"
PDFBOX-1720,PDFBOX,"BouncyCastle 1.49: ambigous constructor usage",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"pdfbox\pdmodel\encryption\PublicKeySecurityHandler.java:
EnvelopedData env = new EnvelopedData(null, derset, encryptedcontentinfo, null);
is ambigous if one would use the latest (1.49) version of bouncycastle and doesn't compile. One has to choose one of the two constructors by setting a type for the last "null". Looking at the constructor for 1.48, the solution would be:
Solution:
EnvelopedData env = new EnvelopedData(null, derset, encryptedcontentinfo, (ASN1Set) null);",0,"Thomas Chojecki","Tilman Hausherr",0,2,"17/Sep/13 05:55","17/Mar/16 19:06","17/Sep/13 09:10"
PDFBOX-1722,PDFBOX,"PDF conversion to image crashes the JVM because PDFBOX dont find the font and getFontDescriptor",Bug,CLOSED,Major,Duplicate,1.8.2,None,FontBox,None,"windows 8, jboss, java","some pdf files crashes the JVM during conversion to image with the following message :
#
A fatal error has been detected by the Java Runtime Environment:
#
EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x0000000060d07697, pid=6488, tid=8628
#
JRE version: 7.0_25-b17
Java VM: Java HotSpot(TM) 64-Bit Server VM (23.25-b01 mixed mode windows-amd64 compressed oops)
Problematic frame:
C [t2k.dll+0x17697]
#
Failed to write core dump. Minidumps are not enabled by default on client versions of Windows
#
If you would like to submit a bug report, please visit:
http://bugreport.sun.com/bugreport/crash.jsp
The crash happened outside the Java Virtual Machine in native code.
See problematic frame for where to report the bug.
#
j org.apache.pdfbox.pdmodel.font.PDSimpleFont.writeFont(Ljava/awt/Graphics2D;Ljava/awt/geom/AffineTransform;FFLjava/awt/font/GlyphVector;)V+63
j org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(Ljava/lang/String;[ILjava/awt/Graphics;FLjava/awt/geom/AffineTransform;FF)V+253
j org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(Lorg/apache/pdfbox/util/TextPosition;)V+436
j org.apache.pdfbox.util.PDFStreamEngine.processEncodedText([B)V+709
j org.apache.pdfbox.util.operator.ShowTextGlyph.process(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V+162
j org.apache.pdfbox.util.PDFStreamEngine.processOperator(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V+35
j org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/cos/COSStream;)V+126
j org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+20
j org.apache.pdfbox.util.PDFStreamEngine.processStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+43
j org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(Ljava/awt/Graphics;Lorg/apache/pdfbox/pdmodel/PDPage;Ljava/awt/Dimension;)V+80
j org.apache.pdfbox.pdmodel.PDPage.convertToImage(II)Ljava/awt/image/BufferedImage;+310
j com.portal.cq.util.PDFUtils.getPdfPagesAsImages(Ljava/lang/String;)Ljava/util/List;+116
j com.portal.cq.thread.CompiladorDeDocumentosRunnable.run()V+24
j java.lang.Thread.run()V+11
v ~StubRoutines::call_stub
so i tried to resolve de PDFont with the bellow code:
document = PDDocument.load("\\\\192.168.1.8\\clientes\\NEWSPACE\\IN\\ControleQualidade\\INTERFILE
3032152_5.pdf");
PDFont font = PDTrueTypeFont.loadTTF(document, new File("//192.168.1.8/clientes/font/arial.ttf"));
@SuppressWarnings("unchecked")
List<PDPage> pages = document.getDocumentCatalog().getAllPages();
int j = 1;
for (PDPage page : pages) {
Map<String, PDFont> maps = page.getResources().getFonts();
Set<String> chaves = maps.keySet();
Font f = null;
for (String chave : chaves) {
if (chave != null) {
if (maps.get(chave).getFontDescriptor() != null)
{ f = FontManager.getAwtFont(maps.get(chave) .getFontDescriptor().getFontName()); }
else
{ page.getResources().getFonts().put(chave, font); sb.append(i+j+".png com problemas \n"); }
}
}
BufferedImage convertedImage = page.convertToImage(BufferedImage.TYPE_BYTE_BINARY, RESOLUTION_DEFAULT);
saveImageToRepository(i, j, convertedImage);
j++;
if (isNegativeImage(convertedImage))
{ bImages.add(invertNegativeImage(convertedImage)); }
else
{ bImages.add(convertedImage); }
}
but in the end it change all my documents
with a log:
WARNING: Changing font on <> from <Arial> to the default font
Set 19, 2013 3:19:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
i'll attached de result of this
how i can solve this?",0,"Andreas Lehmkühler","Paulo R C Mello Juni",0,2,"19/Sep/13 18:36","23/Sep/13 16:34","23/Sep/13 16:34"
PDFBOX-1724,PDFBOX,"Method createColorModel not implemented for PDCalGray",Bug,CLOSED,Minor,Fixed,1.8.2,2.0.0,Rendering,None,,"The method createColorModel is not implemented for the class PDCalGray - when called, it throws an IOException:
 /**
     * Create a Java colorspace for this colorspace.
     *
     * @return A color space that can be used for Java AWT operations.
     *
     * @throws IOException If there is an error creating the color space.
     */
protected ColorSpace createColorSpace() throws IOException
    {
        throw new IOException( "Not implemented" );
    }
The exception thrown is catched elsewhere (by an aspect?) but it leads to an ugly stacktrace in the logfile .. :
2013-09-24 09:32:11,858 ERROR - PDPixelMap : java.io.IOException: Not implemented
java.io.IOException: Not implemented
 at org.apache.pdfbox.pdmodel.graphics.color.PDCalGray.createColorModel(PDCalGray.java:114)
 at ...
 at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:781)
....",0,"John Hewson","Mark Hansohm",0,4,"24/Sep/13 08:13","17/Mar/16 19:07","27/May/14 07:21"
PDFBOX-1725,PDFBOX,"Character rendered at wrong position",Bug,CLOSED,Minor,Fixed,2.0.0,"1.8.4, 2.0.0",None,regression,,"There is a regression produced by one of the (otherwise successful) changes of this weekend / monday. When rendering the file of PDFBOX-1608, one character is at the wrong position. It is the star below the text "tuscan white bean salad", somewhat in the middle of the image, below the green text "soups and side salad". (the second "vegan modification" in that section) That star is too much on the left. This worked fine on monday before the changes.
To be sure that it isn't because of my own non committed changes, I checked out a "clean" 2.0 version and copied the pdf file in the pdfbox\src\test\resources\input\rendering directory and looked at the pdfbox\target\test-output directory.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"24/Sep/13 16:01","31/Jan/14 06:46","24/Sep/13 16:28"
PDFBOX-1727,PDFBOX,"Content outside the MediaBox should not be rendered",Bug,CLOSED,Major,Fixed,"1.8.2, 2.0.0",2.0.0,Rendering,None,,"From the PDF spec ( http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PDF32000_2008.pdf page 628):
"The crop, bleed, trim, and art boxes shall not ordinarily extend beyond the boundaries of the media box. If they do, they are effectively reduced to their intersection with the media box."
The attached file has the following characteristics:
MediaBox: [18.0,20.592,630.0,812.88]
CropBox: [0.0,0.0,648.0,1043.0]
TrimBox: [0.0,0.0,648.0,1043.0]
BleedBox: [0.0,0.0,648.0,1043.0]
In Adobe Reader, the "Do Not Print" section above the MediaBox does not display, but when using pdfbox it does.",0,"Tilman Hausherr","Jake Robb",0,3,"24/Sep/13 18:47","17/Mar/16 19:07","14/Oct/14 16:42"
PDFBOX-1728,PDFBOX,"Error while extracting Text",Task,CLOSED,Major,"Not A Problem",1.8.2,None,"Text extraction",None,"windows 7","While extracting text from pdf getting error INFO: unsupported/disabled operator: EI",0,"Andreas Lehmkühler",amit,0,2,"26/Sep/13 16:29","27/Sep/13 05:29","27/Sep/13 05:29"
PDFBOX-1729,PDFBOX,"java.util.zip.DataFormatException: incorrect header check",Bug,CLOSED,Minor,"Cannot Reproduce",2.0.0,None,Parsing,None,"windows xp, widnows 7","After parsing the file from PDFBOX-1606 with the "old" parser, and doing RenderUtil.convertToImage() I get this:
27.09.2013 16:56:06.685 ERROR [main] org.apache.pdfbox.filter.FlateFilter:134 - FlateFilter: stop reading corrupt stream due to a DataFormatException
27.09.2013 16:56:06.691 ERROR [main] org.apache.pdfbox.filter.FlateFilter:134 - FlateFilter: stop reading corrupt stream due to a DataFormatException
27.09.2013 16:56:06.692 ERROR [main] org.apache.pdfbox.filter.FlateFilter:134 - FlateFilter: stop reading corrupt stream due to a DataFormatException
27.09.2013 16:56:06.692 ERROR [main] org.apache.pdfbox.filter.FlateFilter:134 - FlateFilter: stop reading corrupt stream due to a DataFormatException
IOException for file PDFBOX-1606.pdf
27.09.2013 16:56:06.693 ERROR [main] org.apache.pdfbox.filter.FlateFilter:134 - FlateFilter: stop reading corrupt stream due to a DataFormatException
java.io.IOException
27.09.2013 16:56:06.693 ERROR [main] org.apache.pdfbox.filter.FlateFilter:134 - FlateFilter: stop reading corrupt stream due to a DataFormatException
27.09.2013 16:56:06.693 ERROR [main] org.apache.pdfbox.filter.FlateFilter:134 - FlateFilter: stop reading corrupt stream due to a DataFormatException
27.09.2013 16:56:06.694 ERROR [main] org.apache.pdfbox.filter.FlateFilter:134 - FlateFilter: stop reading corrupt stream due to a DataFormatException
27.09.2013 16:56:06.694 ERROR [main] org.apache.pdfbox.filter.FlateFilter:134 - FlateFilter: stop reading corrupt stream due to a DataFormatException
27.09.2013 16:56:06.695 ERROR [main] org.apache.pdfbox.filter.FlateFilter:134 - FlateFilter: stop reading corrupt stream due to a DataFormatException
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:136)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:317)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:237)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:170)
at org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:108)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:219)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:199)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:153)
at org.apache.pdfbox.util.RenderUtil.renderPage(RenderUtil.java:221)
at org.apache.pdfbox.util.RenderUtil.convertToImage(RenderUtil.java:185)
at org.apache.pdfbox.util.RenderUtil.convertToImage(RenderUtil.java:143)
at pdfboxpageimageextraction.ExtractImages.doPdf(ExtractImages.java:162)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:98)
Caused by: java.util.zip.DataFormatException: incorrect header check
at java.util.zip.Inflater.inflateBytes(Native Method)
at java.util.zip.Inflater.inflate(Inflater.java:259)
at java.util.zip.Inflater.inflate(Inflater.java:280)
at org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:167)
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:96)
... 13 more
It does not happen when I use the nonSequential parser. I don't really care much about this, except that I can't use the file for tests because these use the "old" parser. I therefore suggest:
1) @deprecate the load() call
2) change TestImageIOUtils.java so that it uses the loadNonSeq call",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"27/Sep/13 15:09","07/Feb/14 10:24","27/Oct/13 17:22"
PDFBOX-1730,PDFBOX,"Image in PDF has extremely different colors when rendered",Bug,CLOSED,Minor,Fixed,None,"1.8.3, 2.0.0",None,None,"windows 7","Page 5 of the attached PDF file has a truck, which is rendered in very different colors. Apparently this image isn't embedded. RenderUtil.convertToImage() was called with only one parameter, i.e. the default image type was used.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"27/Sep/13 17:52","10/Jan/14 13:40","29/Sep/13 15:29"
PDFBOX-1733,PDFBOX,"Rectangles have one rounded edge in rendered image only",Bug,CLOSED,Minor,Fixed,2.0.0,"1.8.4, 2.0.0",None,None,"windows xp, widnows 7","The file test-landscape2.pdf of the pdfbox tests has two rectangles, but when rendering each one has a rounded edge at the top left. There is no such edge in the acrobat viewer.
A debug shows that the cap property of the stroke property of the java graphics object is set to CAP_ROUND which produces this effect.
In the pdf, there is this line:
6 w 8 M 1 J
The "1 J" means "round cap"
http://www.verypdf.com/document/pdf-format-reference/pg_0219.htm
http://www.verypdf.com/document/pdf-format-reference/pg_0216.htm
So I'm not even sure if this is a bug in pdfbox or a bug in the acrobat viewer. Does anyone here use a different viewer?",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"01/Oct/13 20:25","31/Jan/14 06:46","02/Jan/14 12:26"
PDFBOX-1734,PDFBOX,"ImageIoUtil.WriteImage doesn't work with tiff images",Improvement,CLOSED,Minor,Fixed,None,"1.8.5, 2.0.0",Rendering,tiff,"windows xp, widnows 7","ImageIoUtil.WriteImage brings an I/O error exception when trying to write a tiff file. Debugging shows that the cause is "Bits per sample must be 1 for RLE compression!". This means that the compression used (the first one of the following list, returned by writerParams.getCompressionTypes() ) is only allowed for bitonal images.
CCITT RLE
CCITT T.4
CCITT T.6
LZW
JPEG
ZLib
PackBits
Deflate
EXIF JPEG
After correcting this, the next problem was that tiff images didn't have the proper resolutions. I added that too. Yes it uses the com.sun.* classes; however there is no other way. Even apache xmlgraphics uses them, although in a very different way than I do
https://svn.apache.org/repos/asf/xmlgraphics/commons/tags/commons-1_3_1/src/java/org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter.java
writeImage() has a parameter "int imageType" which is never used. Why?",0,"Tilman Hausherr","Tilman Hausherr",0,4,"01/Oct/13 20:40","02/May/14 06:12","24/Feb/14 02:58"
PDFBOX-1735,PDFBOX,"Convert page pdf to image",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",None,"JPEG2000 JPXDecode","widnows 8","I'm in the fight to perfectly convert a PDF to an image.
But the stacktrace below breaks my application!
—
Out 02, 2013 3:22:35 PM org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap getRGBImage
SEVERE: Something went wrong ... the pixelmap doesn't contain any data.
Out 02, 2013 3:22:35 PM org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNING: getRGBImage returned NULL
Out 02, 2013 3:22:35 PM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFO: unsupported/disabled operation: i
—
I really need to fix this problem in order to succeed in converting
You know why this error occurs?
You know how I can fix this error?
is some dependence of my environment that i forgot? or a failure of PDFBox framewor ?
Follow my code below:
—
public static List<BufferedImage> getPdfPagesAsImages(String pdfPath, int i)
throws FileNotFoundException, IOException {
List<BufferedImage> bImages = new ArrayList<BufferedImage>();
File f = new File(pdfPath);
if (f.exists()) {
int resolution = 185;
PDDocument pdfDocument = null;
pdfDocument = PDDocument.loadNonSeq(f, null);
if (pdfDocument != null) {
@SuppressWarnings("unchecked")
List<PDPage> pages = (List<PDPage>) pdfDocument
.getDocumentCatalog().getAllPages();
int j = 1;
for (PDPage p : pages) {
System.out.println(j);
BufferedImage convertedImage = p.convertToImage(
BufferedImage.TYPE_INT_BGR , resolution);
saveImageToRepository(i, j, convertedImage);
j++;
if (isNegativeImage(convertedImage))
{ bImages.add(invertNegativeImage(convertedImage)); }
else
{ bImages.add(convertedImage); }
}
System.out.println(pdfPath +" sucess");
}
pdfDocument.close();
}else
{ System.out.println(pdfPath +" nao existe"); }
return bImages;
}
private static void saveImageToRepository(int i, int j,
BufferedImage convertedImage) throws IOException
{ File outputfile = new File("C:/Desenvolvimento/bkp/convertido/" + i + j+ ".png"); ImageIO.write(convertedImage, "png", outputfile); }
—
I create a list of images
these images are saved to be loaded in the browser later on a JSF component.
Thank you!",0,"Andreas Lehmkühler","Paulo R C Mello Juni",0,4,"02/Oct/13 19:46","30/Nov/13 17:02","03/Oct/13 13:54"
PDFBOX-1736,PDFBOX,"I need urgently to extract text color from pdf file",Task,CLOSED,Critical,"Not A Problem",1.8.2,None,"Swing GUI, (1)","Java pdfbox","windows 7, java 1.7,  netbeans","I am working now in project to convert pdf to html format, I am using pdfbox to extract text from pdf , by using TextPosition class in pdfbox I extracted text, font,size,coordinates and others but i didn't find any method to get text color!!,
I don't know why??
I did many search and many attempts about this issue but I didn't find any solution!
please need urgent reply because it is very urgent issue.
Thanks,
Mohammeي",0,"Andreas Lehmkühler","Mohammed Mostafa",0,3,"03/Oct/13 08:14","28/Oct/13 17:54","28/Oct/13 17:54"
PDFBOX-1737,PDFBOX,"Skip whitespaces when resolving a XRef",Bug,CLOSED,Major,Fixed,"1.8.2, 2.0.0","1.8.3, 2.0.0",Parsing,None,,"Oleg Krechowetzki reported an issue with the non sequential parser via private mail. He provided a working solution and a test pdf which can't be attached due to privacy reasons.
The following exception occurs when parsing the pdf in question using the non sequential parser:
Caused by: java.io.IOException: Error: Expected a long type, actual='xref'
at org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1668)
at org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber(BaseParser.java:1598)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseXrefObjStream(NonSequentialPDFParser.java:458)",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"03/Oct/13 12:51","30/Nov/13 17:02","03/Oct/13 12:55"
PDFBOX-1738,PDFBOX,"PDF with parsing IOException",Improvement,CLOSED,Major,Fixed,"1.8.2, 2.0.0","1.8.8, 2.0.0",Parsing,RepairMode,"windows, java 1.6","when extract a content from a pdf file, after getting this error, the process hang!
java.io.IOException: Error: Could not find font(COSName
{Fabc21}
) in map=
{Fabc19=org.apache.pdfbox.pdmodel.font.PDTrueTypeFont@a0dcd9, Fabc2=org.apache.pdfbox.pdmodel.font.PDType1Font@1d5550d, Fabc3=org.apache.pdfbox.pdmodel.font.PDTrueTypeFont@c21495, Fabc1=org.apache.pdfbox.pdmodel.font.PDTrueTypeFont@14b7453}
at org.apache.pdfbox.util.operator.SetTextFont.process(SetTextFont.java:57)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:529)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:258)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:205)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:455)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:379)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:335)",0,"Andreas Lehmkühler","James Zou",0,4,"03/Oct/13 19:24","13/Dec/14 14:14","20/Oct/14 17:14"
PDFBOX-1739,PDFBOX,"Load document error for two RegisSTAR documents",Improvement,CLOSED,Minor,Fixed,"1.8.2, (3)","1.8.6, 2.0.0","Text extraction",None,"windows 8, java 1.7","Hello,
I've the problem during load PDF document.
My code:
String input = "D:\\documents
1c890.pdf";
PDDocument document = null;
try {
document = PDDocument.load(input);
...
} catch (Exception e) {
}
error message: Error: Expected an integer type, actual='n'",0,"Tilman Hausherr","Christian Czech",0,3,"07/Oct/13 11:22","22/Jun/14 14:34","26/May/14 10:08"
PDFBOX-1740,PDFBOX,"Umlaut not rendered correctly in TTF composite glyph",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"FontBox, (1)",None,"windows xp, widnows 7","The dots above the "U" in the attached file are not rendered correctly. From looking at the points array, I think that the cause is NOT the calculation of the shape path itself (PDFBOX-1435), it must be before, i.e. the calculation of the point coordinates that are used later for the shapes, done in GlyfCompositeDescript.getXCoordinate() or even deeper.
The X coordinates from the "U" are between 80 and 640. The X coordinates of the two dots are between 406 and 587, i.e. the two dots are at the right:
points:
Point(547,-729,onCurve,)
Point(640,-729,onCurve,)
Point(640,-217,onCurve,)
Point(640,-107,,)
Point(487,23,,)
Point(359,23,onCurve,)
Point(229,23,,)
Point(80,-106,,)
Point(80,-217,onCurve,)
Point(80,-729,onCurve,)
Point(173,-729,onCurve,)
Point(173,-217,onCurve,)
Point(173,-138,,)
Point(274,-59,,)
Point(359,-59,onCurve,)
Point(447,-59,,)
Point(547,-143,,)
Point(547,-217,onCurve,endOfContour)
Point(510,-881,onCurve,)
Point(510,-777,onCurve,)
Point(406,-777,onCurve,)
Point(406,-881,onCurve,endOfContour)
Point(587,-881,onCurve,)
Point(587,-777,onCurve,)
Point(483,-777,onCurve,)
Point(483,-881,onCurve,endOfContour)
The font can be found here:
http://ftp.gnu.org/gnu/freefont/freefont-ttf-20120503.zip",0,"Tilman Hausherr","Tilman Hausherr",1,3,"07/Oct/13 16:43","17/Mar/16 19:08","19/Feb/15 17:52"
PDFBOX-1741,PDFBOX,"[PATCH] Text should be in italic but is rendered upright",Bug,CLOSED,Major,Fixed,None,2.0.0,None,None,,"See attached PDF. The embedded font has a FontMatrix with skew values to make the font look italic. It's not taken into account by PDFBox.
In PageDrawer and CFFGlyph2D there are a lot of manual modifications of the y coordinate to convert from the PDF coordinate system to AWT. This can be avoided by applying an initial transform to the Graphics2D instance. That allows to simplify the code quite a bit.",0,"Andreas Lehmkühler","Vincent Hennebert",1,4,"07/Oct/13 17:58","17/Mar/16 19:08","26/Oct/13 11:31"
PDFBOX-1742,PDFBOX,"type1CFont font with null encoding",Bug,CLOSED,Major,Fixed,"1.8.3, 2.0.0",2.0.0,PDModel,None,,"The file from PDFBOX-427 does not display the bullets (near "diff" in the right column)
Through debugging I found out:
The glyph code to be rendered is 183. That code doesn't exist in the font, however a code 116 exists, and it came from an "sid" code (CFFGlyph2D constructor). A mapping of the name ("bullet") through the nameToCode table isn't done because encoding is null.
PDSimpleFont.determineEncoding() sets a null encoding
PDType1Font.determineEncoding() sets a "good" encoding based on getAFM()
(both called from constructor)
getAFM() gets an encoding table that includes codetoname/nametocode 183 <=> bullet
Later, due to having a FontFile3, a new type1CFont is created with the external file, but with no encoding.
The following change in PDType1Font.java works for me (first line is the existing line):
if (type1CFont.getFontEncoding() == null && getFontEncoding() != null) //TH
{
    LOG.info("Encoding of Type1CFont '" + type1CFont.getBaseFont() + "' is null, trying Type1Font encoding");
    type1CFont.setFontEncoding(getFontEncoding());
    }
Another improvement is the fat dash (at the beginning of "--use-merge-history" at the bottom of the mid column.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"08/Oct/13 17:05","17/Mar/16 19:08","19/Jan/14 11:12"
PDFBOX-1743,PDFBOX,"OutOfMemoryError in fontbox",Bug,CLOSED,Major,Fixed,None,"1.8.3, 2.0.0","FontBox, (1)","CFF OTF",,"When trying to index a pdf document in solr, pdfbox (fontbox) throws java.lang.OutOfMemoryError: Java heap space exception
This is the stack trace:
SEVERE: Full Import failed:java.lang.RuntimeException: java.lang.RuntimeException: org.apache.solr.handler.dataimport.DataImportHandlerException:
java.lang.OutOfMemoryError: Java heap space at org.apache.solr.handler.dataimport.DocBuilder.execute(DocBuilder.java:273)
at org.apache.solr.handler.dataimport.DataImporter.doFullImport(DataImporter.java:382) at
org.apache.solr.handler.dataimport.DataImporter.runCmd(DataImporter.java:448) at org.apache.solr.handler.dataimport.DataImporter$1.run(DataImporter.java:429)
Caused by: java.lang.RuntimeException: org.apache.solr.handler.dataimport.DataImportHandlerException:
java.lang.OutOfMemoryError: Java heap space at org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:413)
at org.apache.solr.handler.dataimport.DocBuilder.doFullDump(DocBuilder.java:326) at org.apache.solr.handler.dataimport.DocBuilder.execute(DocBuilder.java:234)
... 3 more
Caused by: org.apache.solr.handler.dataimport.DataImportHandlerException: java.lang.OutOfMemoryError:
Java heap space at org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:542)
at org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:411) ... 5
more
Caused by: java.lang.OutOfMemoryError: Java heap space at org.apache.fontbox.cff.IndexData.initData(IndexData.java:95)
at org.apache.fontbox.cff.CFFParser.readIndexData(CFFParser.java:152) at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:103)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:322) at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:104)
at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:162) at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:92)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:203) at org.apache.pdfbox.util.PDFStreamEngine.getFonts(PDFStreamEngine.java:604)
at org.apache.pdfbox.util.operator.SetTextFont.process(SetTextFont.java:54) at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268) at
org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235) at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:455) at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:379)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:335) at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:66)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:153) at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:242)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:242) at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:120)
at org.apache.solr.handler.dataimport.TikaEntityProcessor.nextRow(TikaEntityProcessor.java:127)
at org.apache.solr.handler.dataimport.EntityProcessorWrapper.nextRow(EntityProcessorWrapper.java:243)
at
org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:472) ... 6 more",0,"Andreas Lehmkühler","Stanea Paul",0,4,"09/Oct/13 06:35","30/Nov/13 17:02","09/Oct/13 18:08"
PDFBOX-1744,PDFBOX,"Be resilient to PDFs with missing version info",Improvement,CLOSED,Minor,Fixed,1.8.2,"1.8.3, 2.0.0",Parsing,None,"intellij, mac os x","Proposed addition to 1.8.2 -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java -> parseHeader() to default the PDF version to 1.4 in situations where it is missing (yes, there really are docs out there like this!).
This prevents an exception caused from a negative substring offset calculation: "String index out of range: -3"
I have floated the question on the users@pdfbox.apache.org mailing list (10th October 2013) and it was suggested I default the PDF version to 1.4 in this scenario. I have tested it locally and it works (apparently PDFBox doesn't take the version number into account anyway).
Now over to you guys to decide if this is a good idea or not in the wider scope.
Should you give the green light, I attach:
1) a sample file which causes the exception
2) a patch file
3) patching instructions.
My goal is text extraction, even on broken files (if possible).",0,"Andreas Lehmkühler","Chris Bamford",0,2,"10/Oct/13 11:27","30/Nov/13 17:02","28/Oct/13 18:13"
PDFBOX-1745,PDFBOX,"PDF generated with PDFMergerUtility error out when opening.",Bug,CLOSED,Blocker,"Not A Problem",1.8.2,None,Utilities,None,,"Two pdf files - pdf_1 and pdf_2, after merged by PDFMergerUtility,
pdf_1 + pdf_2: error out when opening the merged pdf, when browsing down to the pdf_2 part.
pdf_2 + pdf_1: works.
This issue is different than PDFBOX-515. for this problem, pdf is gernerated in both way, but when opening, get errors.",0,"Andreas Lehmkühler","Ken Liu",0,3,"10/Oct/13 20:55","23/Nov/13 14:35","23/Nov/13 14:35"
PDFBOX-1746,PDFBOX,"Need help for inserting image in a textbox",Bug,CLOSED,Major,"Not A Problem",None,None,None,newbie,linux,"Hi sir,
i had a requirement in a existing pdf,i have a textbox ,in that text box i need to add a image ,But how i need how to get coordinates of a text box and to add image based upon that coordinates i am using PDFbOx java.",0,"Andreas Lehmkühler",ramanujam,0,2,"12/Oct/13 12:18","12/Oct/13 12:59","12/Oct/13 12:59"
PDFBOX-1749,PDFBOX,"Out of memory exception when parsing TTF file",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",FontBox,None,ubuntu,"When parsing the attached TTF file with fontbox, I get an OutOfMemoryError (heap space) when parsing via an input stream. If I parse via a File, fontbox seems to never return.",0,"Andreas Lehmkühler","Erik Hetzner",0,5,"14/Oct/13 23:49","30/Nov/13 17:02","26/Oct/13 09:32"
PDFBOX-1750,PDFBOX,"PDTextbox and PDAnnotationWidget are not correct initialized from it's own constructor .",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.9, 2.0.0",AcroForm,"AcroForm Widget",,"I find 2 Bugs in interactive.form, And I have resolved this 2 Bug. Here are the Code
1. I want make new Textbox in pdf. It always failed because the type flag “COSName.FT,="Tx"” never be set in the constructor.
The PDTextbox can only be correct initialized from COSDictionary.( That is only initialized from exist pdf file) .
I fixed this by add “getDictionary().setName(COSName.FT, "Tx");” in the constructor of PDTextbox.
Maybe it’s not right place, but works in my project.
public PDTextbox( PDAcroForm theAcroForm )
{
super( theAcroForm );
getDictionary().setName(COSName.FT, "Tx");
}
public PDTextbox( PDAcroForm theAcroForm, COSDictionary field)
{ super( theAcroForm, field); getDictionary().setName(COSName.FT, "Tx"); }
2. Same Bug in PDAnnotationWidget. Only the default constructor initialize the type flag “COSName.SUBTYPE,= "Widget"”.
But the default constructor were never be used. So I must use the PDAnnotationWidget to initialize the new PDTextbox, like blow.
PDAnnotationWidget Widget = new PDAnnotationWidget();
PDTextbox textBox = new PDTextbox(acroForm,Widget.getDictionary());
Otherwise I got an empty PDAnnotationWidget from PDTextbox .getWidget().
Something not correct in PDField .getWidget().
If the the PDField create from user(not read from exist pdf file), the getWidget cannot get an correct initialized PDAnnotationWidget. The COSName.SUBTYPE will never be set.
Maybe the similar Bug in the whole org.apache.pdfbox.pdmodel.interactive.form: the COSDictionary of element are not initialized when user create it manually (Typical to insert new acroform element).
I hope that I can give something help to this opensource Project.
Could you check this and fix in next Version?",0,"Maruan Sahyoun","chen zhenyu",0,4,"17/Oct/13 15:13","28/Mar/15 14:10","11/Mar/15 07:41"
PDFBOX-1751,PDFBOX,"Signing external signed document again with pdfbox, break the document.",Bug,CLOSED,Major,Duplicate,"1.8.0, 1.8.1, 1.8.2",None,Signing,"security signature","windows 8","1/ I sign a file using this method
public static void signByPdfbox(
File inputPDF,
File outputPDF,
KeyStore ks,
String password)
throws IOException, UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, COSVisitorException, SignatureException
{ PDDocument inputDoc = PDDocument.load(inputPDF); PADESSigner signer = new PADESSigner(ks, password); signer.setSignatureName("Hello1"); signer.setSignatureReason("Why noy"); signer.setSignatureLocation("Curacao"); signer.setSignatureContactInfo("david.keller.fr@gmail.com"); signer.signPDF(inputDoc, outputPDF); }
2/ I resign the same file using the same method and in acrobat reader I have this error : SignDict/Contents illegal data
I have googelized it, and I found only old topics for iText lib.
I have tried the same with iText 5.X, and double signatures works",0,"Thomas Chojecki","David KELLER",0,2,"21/Oct/13 17:44","08/Feb/14 19:01","14/Nov/13 22:04"
PDFBOX-1753,PDFBOX,"The font gets gibbrish when adding a line of text to an existing PDF with a table",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",PDModel,None,"windows 7","When trying to add a line to the existing PDF document with a table the table headers appear gibberish.
the table header used to be PMITS Asset ID and after adding the header it reads as: 3 0 , 7 6 $ V V H W. some gibberish characters. Here is my code:
// the document
PDDocument doc = null;
try
{
doc = PDDocument.load( file );
List allPages = doc.getDocumentCatalog().getAllPages();
//PDFont font = PDType1Font.HELVETICA_BOLD;
for( int i=0; i<allPages.size(); i++ )
{ PDPage page = (PDPage)allPages.get( i ); PDRectangle pageSize = page.findMediaBox(); PDPageContentStream contentStream = new PDPageContentStream(doc, page, true, true,true); PDFont font = PDType1Font.TIMES_ROMAN; float fontSize = 15.0f; contentStream.beginText(); // set font and font size contentStream.setFont( font, fontSize); contentStream.moveTextPositionByAmount(700, 1150); contentStream.drawString( message); contentStream.endText(); //contentStream. contentStream.close();}
doc.save( outfile );
}
finally
{
if( doc != null )
{ doc.close(); }
}
}
Stack overflow has a lot of discussion about this issue and explained by user MLK
http://stackoverflow.com/questions/19322553/adding-header-to-existing-pdf-file-using-pdfbox
I am not sure how to attache the test PDF to this issue.",0,"Andreas Lehmkühler","Anita Kulkarni",0,3,"22/Oct/13 14:55","30/Nov/13 17:02","26/Oct/13 09:41"
PDFBOX-1754,PDFBOX,"Preflight doesn't detect JavaScript for some PDFs",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,Preflight,javascript,"windows 7","I just did another round of testing with the Adobe Acrobat Engineering PDFs (using revision 1530740 of Preflight). Some of these files contain JavaScript, but this is not picked up by Preflight. Three examples:
http://acroeng.adobe.com/Test_Files/classic_multimedia//Disney-Flash.pdf
http://acroeng.adobe.com/Test_Files/classic_multimedia//Service%20Form_media.pdf
http://acroeng.adobe.com/Test_Files/classic_multimedia//Trophy.pdf
Both Adobe Acrobat's Preflight component and an additional check with a Hex editor confirm that these files do actually contain JavaScript.
PS: great to see the improvements in the latest version of Preflight!
PPS: the full results for all the files in my test dataset are here, just in case anyone finds this useful:
http://wiki.opf-labs.org/display/TR/Analysis+of+Acrobat+Engineering+PDFs+with+Acrobat+Preflight+and+Apache+Preflight
Cheers,
Johan
Edit from Tilman Hausherr, the other useful link to your work is
http://openpreservation.org/knowledge/blogs/2013/07/25/identification-pdf-preservation-risks-sequel/",0,"Tilman Hausherr","Johan van der Knijff",0,4,"23/Oct/13 11:55","17/Mar/16 19:08","05/Dec/14 19:17"
PDFBOX-1756,PDFBOX,"ClassCastException CosString cannot be cast to COSName",Bug,CLOSED,Minor,Fixed,1.8.2,"1.8.6, 2.0.0",Parsing,None,"ubuntu, windows 7, java 1.6","Opening and saving a PDF causes this exception in 1.8.2:
Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSString cannot be cast to org.apache.pdfbox.cos.COSName
at org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:507)
at org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:435)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1122)
at org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:552)
at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1501)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1324)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1305)
The PDF is here: http://digitalcorpora.org/corp/nps/files/govdocs1/008/008677.pdf
Code to reproduce the exception:
PDFParser parser = new PDFParser(new FileInputStream(new File("008677.pdf")));
parser.parse();
File temp = File.createTempFile("temp-", ".pdf");
parser.getPDDocument().save(temp);
parser.getDocument().close();",0,"Tilman Hausherr","William Palmer",0,3,"24/Oct/13 10:49","13/Oct/15 09:16","27/May/14 12:10"
PDFBOX-1757,PDFBOX,"Errors parsing/extracting text from a PDF",Bug,CLOSED,Minor,"Not A Problem",1.8.2,None,Parsing,None,"ubuntu, windows 7, java 1.6","I am trying to extract text from PDFs. Extracting text from the test file http://digitalcorpora.org/corp/nps/files/govdocs1/020/020747.pdf causes exceptions to be thrown.
The first:
Exception in thread "main" java.lang.RuntimeException: java.io.IOException: Value is not an integer: 636121514401477526485946144
at org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:187)
at org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:194)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:255)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:455)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:379)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:335)
Caused by: java.io.IOException: Value is not an integer: 636121514401477526485946144
at org.apache.pdfbox.cos.COSNumber.get(COSNumber.java:104)
at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:351)
at org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:46)
at org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:182)
Code to cause above exception:
PDFTextStripper ts = new PDFTextStripper();
PrintWriter out = new PrintWriter(new FileWriter(new File ("020747.txt")));
PDDocument doc = PDDocument.load(new File("020747.pdf").toURI().toURL(), true);
ts.setForceParsing(true);
ts.writeText(doc, out);
Using the following code causes a different exception until org.apache.pdfbox.baseParser.pushBackSize is increased (only tested 1024768). After it is increased I get basically the same exception as above
PrintWriter out = new PrintWriter(new FileWriter(new File("020747.txt")));
PDFParser parser = new PDFParser(new FileInputStream(new File("020747.pdf")));
parser.parse();
PDFTextStripper ts = new PDFTextStripper();
ts.setForceParsing(true);
ts.writeText(parser.getPDDocument(), out);",0,"Timo Boehme","William Palmer",0,3,"24/Oct/13 12:45","05/Nov/13 11:36","04/Nov/13 10:58"
PDFBOX-1758,PDFBOX,"Preflight doesn't report Filespec dictionary that refers (indirectly) to an EmbeddedFile entry in some cases",Bug,CLOSED,Minor,Fixed,2.0.0,"1.8.3, 2.0.0",Preflight,None,"windows 7","File:
http://acroeng.adobe.com/Test_Files/file_attachments//non_PDF_ACRO___FileAttachment.pdf(http://acroeng.adobe.com/Test_Files/file_attachments//non_PDF_ACRO___FileAttachment.pdf)
This document contains a Filespec dictionary that refers (indirectly) to an EmbeddedFile entry:
1219 0 obj
<<
/Type /Filespec
/F (index.pdx)
>>
endobj
Refers to:
1231 0 obj
<<
/F (index.pdx)
/Type /F
/EF << /F 1232 0 R >>
>>
endobj
Which refers to:
1232 0 obj
<< /Filter [ /FlateDecode ] /Length 497 /Type /EmbeddedFile
/Params << /CheckSum <5086e4cbb19fe27f3c0a9a1ba731ffb6>/Size 908
/CreationDate (D:20030115022333)
/ModDate (D:20010910104344)>> >>
stream
...
endstream
endobj
Because of this I would expect error 1.2.9 (Body Syntax error, EmbeddedFile entry is present in a FileSpecification dictionary) here, but this is not reported by Preflight.",0,"Eric Leleu","Johan van der Knijff",0,4,"24/Oct/13 13:11","30/Nov/13 17:02","03/Nov/13 14:55"
PDFBOX-176,PDFBOX,"PDFMergerUtility exception using .NET",Bug,CLOSED,Minor,"Won't Fix",None,None,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1506092
Originally submitted by sajitjacob on 2006-06-14 07:37.
Invalid Refereance exception using build PDFBox-0.7.3-
dev-20060614 against ikvm-0.28.0.0.
The following C# code causes an Invalid Referance
exception somewhere in the PDFBox DLL
PDFMergerUtility pdfMerger = new PDFMergerUtility();
pdfMerger.addSource(sTo);
pdfMerger.addSource(sFrom);
pdfMerger.setDestinationFileName(sNew);
pdfMerger.mergeDocuments();
Note: As downloaded ./external was missing
bouncycastle and lucene-demo jars
Roy.
[comment on SourceForge]
Originally sent by oisincvera.
Logged In: YES
user_id=1794616
Originator: NO
Following code in VB.NET causes same error when
With pdfMerger
'Set output destination
.setDestinationFileName(outputFileFullName)
'Looping thru the file list and add source to the mergeing documents
For i As Integer = 0 To fileCount - 1 Step 1
.addSource(pdfFileList(1))
Next i
'Merge the document
.mergeDocuments()
End With",0,"Andreas Lehmkühler",Anonymous,0,1,"14/Jun/06 14:37","31/Oct/13 11:14","31/Oct/13 11:14"
PDFBOX-1760,PDFBOX,"Regressions 28 Oct 2013",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,regression,"windows xp","There are some regressions that have happened within the last month, maybe within the last weekend.
bugzilla886049.pdf: the shapes at the top and at the bottom are different
PDFBOX-1735.pdf: the JPEG2000 image is now at the bottom of the image, before it was 5mm above the border
www.google.de-PDFBOX-1295.pdf: the google chrome icon is missing
PDFBOX-1452.pdf: the yellow question mark is missing",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"28/Oct/13 20:04","17/Mar/16 19:06","30/Nov/13 16:59"
PDFBOX-1761,PDFBOX,"java.lang.StringIndexOutOfBoundsException: String index out of range: 2047",Bug,CLOSED,Minor,Duplicate,1.8.2,None,Parsing,None,"java 1.6","Using code samples provided in PDFBOX-1757 using load() and loadNonSeq() gives the following exception(s) for the test file:
-http://digitalcorpora.org/corp/nps/files/govdocs1/447/447403.pdf
java.lang.StringIndexOutOfBoundsException: String index out of range: 2047
at java.lang.AbstractStringBuilder.deleteCharAt(AbstractStringBuilder.java:770)
at java.lang.StringBuilder.deleteCharAt(StringBuilder.java:263)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString(BaseParser.java:1000)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSString(BaseParser.java:808)
-using loadnonseq
java.lang.StringIndexOutOfBoundsException: String index out of range: 2047
at java.lang.AbstractStringBuilder.deleteCharAt(AbstractStringBuilder.java:770)
at java.lang.StringBuilder.deleteCharAt(StringBuilder.java:263)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString(BaseParser.java:1000)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSString(BaseParser.java:808)",0,"Andreas Lehmkühler","William Palmer",0,2,"29/Oct/13 14:39","15/Jan/14 11:19","15/Jan/14 11:19"
PDFBOX-1763,PDFBOX,"Exception caused by "Invalid ICC Profile Data"",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.4, 2.0.0",Preflight,icc,"windows 7","Sometimes Preflight raises the exception "Invalid ICC Profile Data". Some example files that produce this problem are:
http://acroeng.adobe.com/Test_Files/fonts//printtestfont_nonopt.pdf
http://acroeng.adobe.com/Test_Files/fonts//printtestfont_opt.pdf
http://www.math.uakron.edu/~dpstory/tutorial/pdfmarks/links.pdf
I also checked these files with Acrobat's Preflight function, which reports ICC profiles that are either not valid or that follow the ICC profile 4.0 version or newer (which are only allowed in PDF 1.5 onward). It would be nice if Preflight would report these errors without raising an exception.",0,"Eric Leleu","Johan van der Knijff",0,3,"29/Oct/13 16:19","31/Jan/14 06:46","30/Oct/13 20:35"
PDFBOX-1764,PDFBOX,"PDFBox takes ages to render page 2 of the attached PDF",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.3, 2.0.0",None,None,"mac os x","For some reason, page 2 of this PDF document takes ages to render, while all other pages work fine.",0,"Andreas Lehmkühler","Valerio Santinelli",0,3,"31/Oct/13 11:12","30/Nov/13 17:02","02/Nov/13 13:46"
PDFBOX-1765,PDFBOX,"Null pointer exception in PDFToImage",Bug,CLOSED,Major,Fixed,1.8.2,2.0.0,None,None,windows,"java -jar pdfbox-app-1.8.2.jar PDFToImage e:\Specifications\png-1.0.pdf
(http://3-t.com/pub/png/spec/1.0/png-1.0.pdf)
causes multiple instances of NPE when processing page 13. Probably associated with superscript text because the line is then missing from the output image. Problems affects both jpg and png output and with nonSeq.
org.apache.pdfbox.util.PDFStreamEngine processOperator
WARNING: java.lang.NullPointerException
java.lang.NullPointerException
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:210)
at org.apache.pdfbox.pdmodel.font.Type3StreamParser.createImage(Type3StreamParser.java:59)
at org.apache.pdfbox.pdmodel.font.PDType3Font.createImageIfNecessary(PDType3Font.java:80)
at org.apache.pdfbox.pdmodel.font.PDType3Font.drawString(PDType3Font.java:102)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:496)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:125)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:781)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:133)
at org.apache.pdfbox.PDFToImage.main(PDFToImage.java:244)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:96)",0,"Andreas Lehmkühler","Phil Goddard",0,3,"01/Nov/13 10:14","17/Mar/16 19:08","01/Nov/13 10:47"
PDFBOX-1766,PDFBOX,"[PATCH] Visible Signature using PDFbox","New Feature",CLOSED,Critical,Fixed,1.8.2,"1.8.3, 2.0.0","PDModel, (1)","patch signature visu",,"In order to sign document with visible signature we have very bad solution at the moment: passing a PDF as an InputStream that serves as a template for the appearance settings is very inconvenient. So, Now Everything is well and fixed! You only set image with location, zoom, width, height, and etc, and everything will be added automatically. I've just already done this, and I will upload my patches too. I have wrote example too, in order to see how to use it. Everything is easy!",0,"Thomas Chojecki","vakhtang koroghlishv",0,3,"01/Nov/13 15:23","17/Dec/15 18:23","15/Nov/13 15:29"
PDFBOX-1768,PDFBOX,"cannot build last source code",Bug,CLOSED,Major,Fixed,"1.8.3, 2.0.0","1.8.3, 2.0.0",Signing,None,"windows 8, eclipse","When i run pdfbox ant build.xml I have this issue :
[javac] D:_sources\eclipse_legalbox\pdfbox\pdfbox\src\main\java\org\apache\pdfbox\pdmodel\encryption\PDEncryptionManager.java:46: warning: [deprecation] PDStandardEncryption in org.apache.pdfbox.pdmodel.encryption has been deprecated
[javac] registerSecurityHandler( PDStandardEncryption.FILTER_NAME, PDStandardEncryption.class );
[javac] ^
[javac] D:_sources\eclipse_legalbox\pdfbox\pdfbox\src\main\java\org\apache\pdfbox\pdmodel\encryption\PublicKeySecurityHandler.java:391: error: incompatible types
[javac] ASN1Primitive derobject = asn1inputstream.readObject();
[javac] ^
[javac] required: ASN1Primitive
[javac] found: DERObject
[javac] D:_sources\eclipse_legalbox\pdfbox\pdfbox\src\main\java\org\apache\pdfbox\pdmodel\encryption\PublicKeySecurityHandler.java:407: error: cannot find symbol
[javac] return contentinfo.toASN1Primitive();
[javac] ^
[javac] symbol: method toASN1Primitive()
[javac] location: variable contentinfo of type ContentInfo",0,"Andreas Lehmkühler","David KELLER",0,2,"01/Nov/13 19:49","30/Nov/13 17:02","02/Nov/13 15:07"
PDFBOX-1769,PDFBOX,"Fix crash on invalid xref",Wish,CLOSED,Major,Fixed,1.8.2,"1.8.4, 2.0.0",Parsing,None,,"Need to search for a correct xref start address
Example file:
http://digitalcorpora.org/corp/nps/files/govdocs1/020/020747.pdf
Exception in thread "main" java.io.IOException: Error: Expected an integer type, actual='ref'
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1622)
Using the code:
PDFTextStripper ts = new PDFTextStripper();
PrintWriter out = new PrintWriter(new FileWriter(new File (pFile+".txt")));
RandomAccess scratchFile = new RandomAccessFile(File.createTempFile("pdfbox-", ".tmp"), "rw");
PDDocument doc = PDDocument.loadNonSeq(new File(pFile), scratchFile)
ts.setForceParsing(true);
ts.writeText(doc, out);
Related: PDFBOX-1757",0,"Andreas Lehmkühler","William Palmer",0,4,"04/Nov/13 11:07","31/Jan/14 06:46","20/Dec/13 08:08"
PDFBOX-1770,PDFBOX,"ExtractText gets all "?" when pdf 's font is instance of PDType1Font",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.4, 2.0.0","Text extraction",None,,"ExtractText gets all "?" when font is instanceof PDType1Font and subtype is type1CFont and fontEncoding is null.",0,"Andreas Lehmkühler",Sean.Sun,1,4,"05/Nov/13 02:04","31/Jan/14 06:46","04/Jan/14 17:39"
PDFBOX-1771,PDFBOX,"Cannot render FOP pdf with subsetted OTF CFF for both standard and CID-Keyed fonts",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,"windows xp","See attachments, pdf is from FOP-2252.",0,"John Hewson","Tilman Hausherr",0,1,"06/Nov/13 18:33","17/Mar/16 19:08","30/Aug/14 13:04"
PDFBOX-1773,PDFBOX,"Regression? Type 3 Fonts are not processed by RenderUtil.convertToImage",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,Type3,"windows xp","I have a (confidential) PDF file that I wanted to check and it comes up mostly empty. It has type3 fonts. Luckily, I found two closed issues (PDFBOX-31 and PDFBOX-1628) with test images that render mostly empty.",0,"Andreas Lehmkühler","Tilman Hausherr",0,4,"07/Nov/13 11:21","17/Mar/16 19:06","30/Nov/13 17:25"
PDFBOX-1776,PDFBOX,"Print pdf with font embedded(SimSun TrueType(CID) Identity-H)",Bug,CLOSED,Major,Fixed,1.8.2,2.0.0,FontBox,None,"windows 7, tomcat, java 1.6","Hello,
Can you please help me on the issue as below?
[Issue]
print PDF file witch has font embedded subset.
I am trying to use PDFBOX 1.8.2 to print PDF file.
When I use printJob.print() to print PDF file, I got the error like this:
<2013/11/08 11:14:53 org.apache.pdfbox.filter.FlateFilter decode
fatal: FlateFilter: stop reading corrupt stream due to a DataFormatException>
And I checked the property of the PDF file and it's like below:
[Font]
SimSun(embedded subset)
type: TrueType(CID)
enconding: Identity-H
Here is my java Code:
[Code]
PDDocument document = PDDocument.load( pdfFileName );
PrinterJob printJob = PrinterJob.getPrinterJob();
printJob.setJobName(new File(pdfFileName).getName());
if(printerName != null )
{
PrintService[] printService = PrinterJob.lookupPrintServices();
boolean printerFound = false;
for(int i = 0; !printerFound && i < printService.length; i++)
{
if(printService[i].getName().indexOf(printerName) != -1)
{ printJob.setPrintService(printService[i]); printerFound = true; }
}
}
printJob.setPageable(new PDPageable(document, printJob));
if( silentPrint || printJob.printDialog())
{ printJob.print(); }
I'm sorry, i can't find the way to attatch the pdf file.
Is it possible for PDFBOX 1.8.2 to print pdf properly?
what about PDFBOX 2.0?
Thanks in advance.
Regards",0,"Andreas Lehmkühler","Jin Gang",1,3,"11/Nov/13 12:10","17/Mar/16 19:08","01/Dec/13 13:17"
PDFBOX-1777,PDFBOX,"memory leak in org.apache.pdfbox.cos.COSDocument",Bug,CLOSED,Minor,Fixed,1.8.2,"1.8.4, 2.0.0",Parsing,patch,"windows 7, netbeans","org.apache.pdfbox.cos.COSDocument.close() does not close the streams and causing therefore a growing memory leak. Supposed fix:
public void close() throws IOException {
// if (!closed) {
// scratchFile.close();
// if (tmpFile != null)
{ // tmpFile.delete(); // }
// closed = true;
// }
// begin Robert Scharpf
closed = true;
if (scratchFile != null) {
try
{ scratchFile.close(); }
catch (Exception e) {
}
}
scratchFile = null;
if (tmpFile != null) {
try
{ tmpFile.delete(); }
catch (Exception e) {
}
}
tmpFile = null;
List<COSObject> list = getObjectsByType(COSName.OBJ_STM);
if (list != null) {
for (COSObject objStream : list)
{ COSStream stream = (COSStream) objStream.getObject(); stream.close(); }
}
// end Robert Scharpf
}",0,"Andreas Lehmkühler","Robert Scharpf",0,3,"11/Nov/13 13:06","31/Jan/14 06:46","22/Dec/13 18:55"
PDFBOX-1778,PDFBOX,"Rounding issue in generated PDF file",Bug,CLOSED,Critical,Fixed,1.8.3,"1.8.3, 2.0.0","PDModel, (1)",None,,"We have PDF file which was signed by some other application.
When we try to sign it with PDFbox, previous revision is damaged.
We did some investigations and found such problem:
(question on stackoverflow is here: http://stackoverflow.com/questions/19903884/pdf-document-is-modified-by-another-revision/19905271?noredirect=1#19905271 )
Some PDF tags are changed in new revisions.
For example values of following tags:
/WhitePoint
/Gamma
/Matrix
are changed from values like this: 0.9505
to values like this: 0.9505000114
We think this is problem of converting float/double inside COSFloat.
Following code just opens and saves PDF file and this operation changes values of mentioned text:
public void saveTo(String sourceFile, String destFile) throws Exception{
PDDocument doc = PDDocument.load(new FileInputStream(sourceFile));
doc.save(new FileOutputStream(destFile));
}",0,"Andreas Lehmkühler","vakhtang koroghlishv",1,5,"11/Nov/13 16:53","30/Nov/13 17:02","17/Nov/13 18:36"
PDFBOX-1780,PDFBOX,"previous revision is damaged after signing",Bug,CLOSED,Critical,Fixed,1.8.2,"1.8.3, 2.0.0","Parsing, (2)",None,,"Ihave PDF file which was signed by some other application. When I try to sign it with PDFbox, previous revision is damaged. I have discussion at stackoverflow, with Michael Klink.
http://stackoverflow.com/questions/19903884/pdf-document-is-modified-by-another-revision/19905271?noredirect=1#19905271
when we see some changes merely was structural. Some changes was just rounding problem - PDFBOX-1778.
When I test, problem of damaged signature was caused from structural change [when there must be direct reference, there was indirect reference and etc..]
So we solve that problem. I will upload damaged PDF document, fixed pdf, and the patch too.",0,"Andreas Lehmkühler","vakhtang koroghlishv",0,3,"13/Nov/13 11:20","14/Dec/15 08:44","14/Nov/13 17:28"
PDFBOX-1782,PDFBOX,"Add getMaxLength() and setMaxLength() methods to PDTextbox",Improvement,CLOSED,Trivial,Fixed,1.8.2,"1.8.3, 2.0.0",AcroForm,"acroform form improv",,"Basically, this would be a handy way of getting or setting the (int) value of the MaxLen property, which represents the maximum number of characters a text field can contain (documented in table 229 of PDF 32000-1:2008). Also, it would be nice if "MaxLen" could be added as a constant to COSName to facilitate this.",0,"Andreas Lehmkühler","Gilad Denneboom",0,2,"19/Nov/13 21:01","30/Nov/13 17:02","24/Nov/13 14:31"
PDFBOX-1784,PDFBOX,"Update parent pom/rat plugin version",Improvement,CLOSED,Minor,Fixed,1.8.2,2.0.0,None,None,,"The used versions of the apache parent pom and the rat plugin is quiet old and should be updated.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"24/Nov/13 15:16","17/Mar/16 19:08","24/Nov/13 15:18"
PDFBOX-1785,PDFBOX,"Print the chinese character",Bug,CLOSED,Major,Duplicate,1.8.2,None,FontBox,None,java,"I have scenario like this,
We are planning to write a pdf using the pdfbox jar, we are facing the issue of passing the chinese character but it fails and it will display as "?".
Please help me out of this.
Thanks, Sivaraman",0,"Andreas Lehmkühler","Sivaraman PJ",0,3,"26/Nov/13 10:15","02/Jan/14 17:11","02/Jan/14 17:11"
PDFBOX-1786,PDFBOX,"font.getWidths empty for an embedded Type0 font",Bug,CLOSED,Major,"Not A Problem",1.8.2,None,None,None,,"`getWidths` returns an empty array for the font identified as DDBADO+Calibri on the attached PDF.
Is this expected behaviour?
Thanks.
Manuel Aristarán",0,"Andreas Lehmkühler","Manuel Aristaran",0,2,"27/Nov/13 01:34","01/Dec/13 13:15","01/Dec/13 13:15"
PDFBOX-1789,PDFBOX,"NullPointerException at PDPageContentStream.setFont",Bug,CLOSED,Critical,Fixed,1.8.3,"1.8.4, 2.0.0",PDModel,None,,"Using pdfbox 1.8.3 I get a NullPointerException in PDPageContentStream.setFont (java.lang.NullPointerException at org.apache.pdfbox.pdmodel.edit.PDPageContentStream.setFont(PDPageContentStream.java:322).
I create a new "PDPageContentStream" object with "resetContext = true". In the constructor of PDPageContentStream the variable "resources" gets initialized. As a result of "resetContext = true" PDPageContentStream::close is called. In the "close" method now "resources" gets null. A following call to "PDPageContentStream::setFont" fails because resources is null.",0,"Andreas Lehmkühler","Gerhard Temper",0,2,"02/Dec/13 12:47","04/Dec/13 10:33","03/Dec/13 19:30"
PDFBOX-1790,PDFBOX,"NPE during PDTrueTypeFont.loadTTF() on Mac TrueType font lacking Windows-platformID CMAPEncodingEntry",Bug,CLOSED,Critical,Fixed,1.8.2,2.0.0,Writing,None,"mac os, java 1.6","I'm attempting to embed a TrueType font using PDFBox, on the Mac, using PDTrueType.loadTTF( PDDocument, InputStream, Encoding ).
For TrueType fonts originating from Windows (e.g., Tahoma) this works.
For TrueType fonts originating from the Mac (e.g., Apple Chancery), a NullPointerException is thrown.
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadDescriptorDictionary(PDTrueTypeFont.java:409)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:201)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:177)
I stepped through the code in a debugger. The method PDTrueTypeFont.loadDescriptorDictionary() loops through the cmap table for the font, looking for a cmap with platform ID 3 (Windows), and sets the variable unimap only if one is found. After that loop, the variable unimap is dereferenced without checking for null.
Some Mac TrueType fonts have platform IDs 0 (Unicode) and 1 (Mac), but not 3 (Windows).
At the least, a null check seems required. But more desirable would be support for Mac TrueType fonts.
Am I missing something, or should I enter a bug?
Example problem font:
Apple Chancery (Included with OS)
Details:
PDFBox version: 1.8.2 [Have not yet tested with 1.8.3, which was released a few days ago]
Platform: Mac
Java 6
Font platform IDs: 0, 1",0,"John Hewson","Andrew Thomas",1,4,"02/Dec/13 16:25","17/Mar/16 19:07","19/Dec/14 19:21"
PDFBOX-1791,PDFBOX,"Type3 glyphs with partial black background",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,Type3,,"The file from PDFBOX-1628 is rendered with a black background.",0,"John Hewson","Tilman Hausherr",1,3,"03/Dec/13 07:55","17/Mar/16 19:07","20/Feb/14 17:39"
PDFBOX-1793,PDFBOX,"Failure to extract custom encoded text",Bug,CLOSED,Minor,Duplicate,1.8.3,None,"Text extraction",None,,"PDFBox extracts a binary garble from this file. Adobe Reader does the same. Linux's pdftotext extracts text fairly well. I suspect there's a custom font/encoding node that isn't being processed, but I could be wrong.",0,"Andreas Lehmkühler","Tim Allison",0,3,"03/Dec/13 16:37","04/Dec/13 11:00","04/Dec/13 11:00"
PDFBOX-1794,PDFBOX,"Rendering Problem with Type 3 Fonts",Bug,CLOSED,Major,Fixed,"1.8.3, 2.0.0","1.8.4, 2.0.0",None,type3,"windows 7, windows xp","The attached file does not render correctly.
(This is the same problem mentioned in PDFBOX-1773, but this time its not from my employer. I was able to find a tool (qpdf) to create an uncompressed PDF file and this way to remove my customer#)",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"03/Dec/13 23:04","22/Apr/15 16:56","03/Jan/14 17:59"
PDFBOX-1798,PDFBOX,"Performance problem with PDDocument.saveIncremental (when signing document)",Improvement,CLOSED,Major,Fixed,"1.8.3, 2.0.0","1.8.8, 2.0.0","Signing, Writing","patch performance",,"Performance problem in class COSWriter:
Constructor of COSWriter takes 2 args:
COSWriter(OutputStream os, FileInputStream is)
method saveIncremental in class PDDocument:
saveIncremental(FileInputStream input, OutputStream output)
It create COSWriter with this args. If I pass FileInputStream into saveIncremental then signing the document goes quite a long time.
If you pass BufferedInputStream, the signing speed is increases. But alas, this is not possible, because the parameters of the method saveIncremental does not allow to do this.",0,"Tilman Hausherr","Dmytro Karimov",0,5,"06/Dec/13 16:51","20/Sep/18 06:48","31/Oct/14 10:56"
PDFBOX-1799,PDFBOX,"NullPointerException when constructing a PDJPeg using a BufferedImage",Bug,CLOSED,Major,Fixed,1.8.3,"1.8.4, 2.0.0",Utilities,None,windows,"In pdfbox 1.8.2 and 1.8.3, the constructor of PDJPeg class that takes a BufferedImage throws java.lang.NullPointerException:
BufferedImage bi = ImageIO.read(this.getClass().getClassLoader().getResourceAsStream("images/icon.png"));
PDJpeg icon = new PDJpeg(pdf, bi);
The stack trace is:
java.lang.NullPointerException
at org.apache.pdfbox.util.ImageIOUtil.addResolution(ImageIOUtil.java:211)
at org.apache.pdfbox.util.ImageIOUtil.createMetadata(ImageIOUtil.java:204)
at org.apache.pdfbox.util.ImageIOUtil.writeImage(ImageIOUtil.java:158)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg.createImageStream(PDJpeg.java:171)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg.<init>(PDJpeg.java:133)
The culprit is in this method in the ImageIOUtil:
private static IIOMetadata createMetadata(RenderedImage image, ImageWriter imageWriter,
ImageWriteParam writerParams, int resolution)
{ ..... IIOMetadata meta = imageWriter.getDefaultImageMetadata( type, writerParams ); return (addResolution(meta, resolution) ? meta : null); }
One of the JPG image writer in our environment is com.sun.media.imageioimpl.plugins.jpeg.CLibJPEGImageWriter, its implementation of getDefaultImageMetadata() returns null:
public IIOMetadata getDefaultImageMetadata(ImageTypeSpecifier imageType, ImageWriteParam param)
{ return null; }
this causes the NullPointerException at the first line of the addResolution() method:
if (!meta.isReadOnly() && meta.isStandardMetadataFormatSupported())
I suggest that null checks be added at the following places:
1. ImageIOUtil.addResolution():
if (!meta.isReadOnly() && meta.isStandardMetadataFormatSupported())
==>
if (meta != null && meta.isReadOnly() && meta.isStandardMetadataFormatSupported())
2. ImageIOUtil.writeImage():
IIOMetadata meta = createMetadata( image, imageWriter, writerParams, resolution);
imageWriter.setOutput( output );
imageWriter.write( null, new IIOImage( image, null, meta ), writerParams );
foundWriter = true;
==>
IIOMetadata meta = createMetadata( image, imageWriter, writerParams, resolution);
if (meta != null)
{ imageWriter.setOutput( output ); imageWriter.write( null, new IIOImage( image, null, meta ), writerParams ); foundWriter = true; }",0,"Andreas Lehmkühler","Puhong You",0,4,"06/Dec/13 20:42","31/Jan/14 06:46","13/Jan/14 18:12"
PDFBOX-1801,PDFBOX,"xmp serializer does not generate valid xml for structured types",Bug,CLOSED,Trivial,Fixed,1.8.3,2.0.0,XmpBox,None,,"The prefix and field value of structured elements are not serialized in a good way:
sometimes empty string
sometimes using the inner properties namespace",0,"Guillaume Bailleul","Guillaume Bailleul",0,0,"08/Dec/13 14:44","17/Mar/16 19:08","08/Dec/13 14:46"
PDFBOX-1802,PDFBOX,"COSDictionary in COSArray setDirect(true) but dic written indirect",Bug,CLOSED,Major,Fixed,1.8.2,"1.8.4, 2.0.0",Writing,"cosarray setdirect",,"COSDictionary dic = new COSDictionary();
dic.setDirect(true);
dic.setItem...
COSArray array = new COSArray();
array.setDirect(true);
array.add(dic);
Dictionary in array is indirect.",0,"Andreas Lehmkühler","Cedomir Suljagic",0,3,"09/Dec/13 08:31","31/Jan/14 06:46","12/Jan/14 16:31"
PDFBOX-1804,PDFBOX,"PDFTextStripper Issue related to word positions not correctly being parsed",Bug,CLOSED,Major,Fixed,1.8.3,"1.8.4, 2.0.0","Text extraction",None,,"I found in a PDF I was pulling text from by using a custom PDFTextStripper subclass that overrides writeString(String text, List<TextPosition> textPositions) that i was getting the wrong textPositions that were not lined up with the text. I found that the test position of all “words” in a line always come over as the “last” text positions of the last word in the line. I found the issue in the PDFTextStripper class
So here is the Code Issue:
/**
Used within {@link #normalize(List, boolean, boolean)} to handle a {@link TextPosition}.
* @return The StringBuilder that must be used when calling this method.
*/
private StringBuilder normalizeAdd(LinkedList<WordWithTextPositions> normalized,
StringBuilder lineBuilder, List<TextPosition> wordPositions, TextPosition text)
{
if (text instanceof WordSeparator)
{ normalized.add(createWord(lineBuilder.toString(), wordPositions)); lineBuilder = new StringBuilder(); wordPositions.clear(); }
else
{ lineBuilder.append(text.getCharacter()); wordPositions.add(text); }
return lineBuilder;
}


When the normalizeAdd method, you create a new word passing the wordPositions. A reference to the wordPositions is stored in the new WordWithTextPositions in the normalized linked list, but in the next line, you clear(). Since the last wordPositions was passed as a reference, the wordPositions is cleared in the WordWithTextPositions you just created.

Soo, i would suggest you do the following:
/**
* Used within {@link #normalize(List, boolean, boolean)}
to handle a
{@link TextPosition}
.
@return The StringBuilder that must be used when calling this method.
*/
private StringBuilder normalizeAdd(LinkedList<WordWithTextPositions> normalized,
StringBuilder lineBuilder, List<TextPosition> wordPositions, TextPosition text)
Unknown macro: { if (text instanceof WordSeparator) { normalized.add(createWord(lineBuilder.toString(), new ArrayList<TextPosition>(wordPositions))); lineBuilder = new StringBuilder(); wordPositions.clear(); } else { lineBuilder.append(text.getCharacter()); wordPositions.add(text); } return lineBuilder; }",0,"Andreas Lehmkühler","Andy Phillips",1,4,"09/Dec/13 14:44","31/Jan/14 06:46","02/Jan/14 09:24"
PDFBOX-1808,PDFBOX,"PDFTextStripper.getText - hight memory usage",Bug,CLOSED,Critical,Fixed,"1.8.2, 1.8.3","1.8.4, 2.0.0","Text extraction",performance,"windows 7","Hello,
i'm trying to extract text from pdfs but i can find that the PDFTextStripper use a lot of memory.
With a pdf that have 2676 pages (for a 4.6Mo size) it use 1.5Go memory.
I also constat that the memory is'nt free after the getText method is called.
You can see my code bellow:
double virgule = Math.pow(10, 2);
System.out.println("START - Total memory (Mo): " + Math.round((Runtime.getRuntime().totalMemory()/1000000) * virgule) / virgule);
PDDocument cd = PDDocument.load(file);
System.out.println("PDDocument getNumberOfPages - Nombre de pages: " + cd.getNumberOfPages());
System.out.println("PDDocument load - Total memory (Mo): " + Math.round((Runtime.getRuntime().totalMemory()/1000000) * virgule) / virgule);
String pdfText = "";
try{
PDFTextStripper stripper = new PDFTextStripper();
pdfText = stripper.getText(cd);
System.out.println("PDFTextStripper getText - Total memory (Mo): " + Math.round((Runtime.getRuntime().totalMemory()/1000000) * virgule) / virgule);
stripper.resetEngine();
stripper = null;
System.out.println("PDFTextStripper resetEngine - Total memory (Mo): " + Math.round((Runtime.getRuntime().totalMemory()/1000000) * virgule) / virgule);
}
finally{
if( cd!=null )
{ cd.close(); cd = null; System.out.println("PDDocument close - Total memory (Mo): " + Math.round((Runtime.getRuntime().totalMemory()/1000000) * virgule) / virgule); }
}
retour = new TextField(fieldName, pdfText, Field.Store.NO);
System.out.println("TextField - Total memory (Mo): " + Math.round((Runtime.getRuntime().totalMemory()/1000000) * virgule) / virgule);
And the result into my output window:
START - Total memory (Mo): 95.0
PDDocument getNumberOfPages - Nombre de pages: 2676
PDDocument load - Total memory (Mo): 121.0
PDFTextStripper getText - Total memory (Mo): 757.0
PDFTextStripper resetEngine - Total memory (Mo): 757.0
PDDocument close - Total memory (Mo): 757.0
TextField - Total memory (Mo): 757.0
pdfText - Total memory (Mo): 757.0
I also try to call System.gc() but the memory use is the same.",0,"Andreas Lehmkühler","Guyenot Jeremy",0,7,"11/Dec/13 13:50","10/May/15 13:37","26/Jan/14 18:48"
PDFBOX-1810,PDFBOX,"PDFToImage: Image of pdf is resized and drawn multiple times at top of output image",Bug,CLOSED,Major,Fixed,"1.8.2, 1.8.3, 2.0.0","1.8.4, 2.0.0",PDModel,None,"debian, java 1.7","Hi,
all the pdfs created with simple scan (https://launchpad.net/simple-scan) are not correctly converted into images.
A single page is resized and drawn multiple times at the top of the output image.
Using the pdfbox app on windows with the newest orcale java 7 causes a java heap error.",0,"Andreas Lehmkühler","Frederik Bertling",1,3,"13/Dec/13 20:37","07/Jan/15 19:10","07/Jan/15 19:10"
PDFBOX-1811,PDFBOX,"java.io.IOException: Object at offset does not end with 'endobj'",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.5, 2.0.0",Parsing,None,"windows xp, widnows 7","I get this exception with the file amyuni2_05d__pdf1_3_acro4x.pdf (it was once part of the project, now no more, but it can still be found on the web):
java.io.IOException: Object (48:0) at offset 161333 does not end with 'endobj'.
This is true, the "endobject" is indeed missing in that file. However the content of endObjectKey is 49 0 obj, i.e. the start of a new object.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Dec/13 16:58","11/Oct/14 13:18","22/Feb/14 14:03"
PDFBOX-1812,PDFBOX,"Illegal characters in XML output",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.4, 2.0.0",Preflight,"characters utf-8 xml","windows 7, ubuntu","When running Preflight in XML mode, the latest Preflight version (I used the JAR from build #747) sometimes produces output that contains characters that are illegal in XML. This can cause unexpected behavior if such files are further processed with tools that expect well-formed XML. See attached PDFs, which all result in illegal characters in the description of a 1.0 Syntax error, Error: Expected a long type. Output of older versions of Preflight didn't contain these illegal characters; instead they would give something like actual='/O', actual='Pages'. etc. So I suppose this must have been caused by a fairly recent change.
See attachments below.",0,"Andreas Lehmkühler","Johan van der Knijff",0,3,"17/Dec/13 12:20","09/Feb/14 18:33","15/Jan/14 06:47"
PDFBOX-1813,PDFBOX,"Stack overflow error in Main (no output file produced)",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,"windows 7","When I analyse attached PDF with Preflight, it crashes with "Exception in thread "main" java.lang.StackOverflowError". Using the xml option this exception is not wrapped in an exceptionThrown element, but no output is produced at all.
To put this in perspective: the offending PDF is part of a dataset of 15,000 PDFs, and it was the only one resulting in this behaviour, so it doesn't look like a common error.",0,"Andreas Lehmkühler","Johan van der Knijff",0,2,"17/Dec/13 12:52","17/Mar/16 19:06","30/Jun/14 18:46"
PDFBOX-1814,PDFBOX,"In some cases PDPage converttoimage is extremely slow",Bug,CLOSED,Major,Fixed,1.8.3,2.0.0,Rendering,None,"windows, linux, unix, java 1.6,  java 1.7","I convert hundreds of documents with an average of some seconds per page. One type of documents takes several minutes per page.
It is not linked to the size of the document: I extracted one page and generated the image on its own.
It is not linked to the fonts, because I have the same content in another document (A6 format instead of A4), and there I don't have a problem.",0,"John Hewson","lieven vanlerberghe",1,8,"17/Dec/13 21:18","17/Mar/16 19:06","23/Feb/14 21:02"
PDFBOX-1815,PDFBOX,"Suggestion: close files in COSStream",Improvement,CLOSED,Minor,Fixed,2.0.0,"1.8.4, 2.0.0",None,None,,"Close file objects in COSStream.java to improve gc, see attached patch",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"18/Dec/13 18:23","31/Jan/14 06:46","20/Dec/13 08:36"
PDFBOX-1816,PDFBOX,"Report context of preflight errors",Improvement,CLOSED,Major,Done,2.0.0,2.0.0,Preflight,None,,"Thank you for the great tool! I was delighted to find pdfbox's preflight, and use it to gradually fix the issues of PDF/A compliancy in pdfLaTeX (and ghostscript) generated documents.
However I needed the context of the errors, which is currently not reported in most of the messages. At least the byte offset is nearly always at hand, and often the object itself, which makes it easy to include them.
I changed this for the messages which occurred to me (I can supply a patch), but it would be nice to have this for all errors.",0,"Guillaume Bailleul","Florian Breitwieser",0,2,"18/Dec/13 21:08","17/Mar/16 19:42","21/Jun/14 08:21"
PDFBOX-1817,PDFBOX,"Justification of text in pdf",Wish,CLOSED,Critical,Invalid,None,None,None,Justification,java,"Is it possible to justify text in pdf using PDFBOX????",0,"Andreas Lehmkühler","NEHA SINGH",0,2,"19/Dec/13 11:17","20/Dec/13 08:22","20/Dec/13 08:22"
PDFBOX-1818,PDFBOX,"Push back buffer is full error",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.4, 2.0.0",Preflight,None,"windows 7","Attached PDFs result in "1.0 Syntax error, Push back buffer is full", without any further output with the latest Preflight version. Older versions don't give this error, and provide more detailed miscellaneous output. I came across this while running Preflight on a dataset of 15,000 PDFs, and quite a number seem to be affected by this.
Like https://issues.apache.org/jira/browse/PDFBOX-1812, this is something that appears to have gone wrong quite recently (possibly commit r1549022 again?), as it used to work correctly in recent October commits.
Again I included output files for both the current and the older (October) builds.",0,"Andreas Lehmkühler","Johan van der Knijff",0,2,"19/Dec/13 14:18","31/Jan/14 06:46","06/Jan/14 10:55"
PDFBOX-182,PDFBOX,TestPublicKeyEncryption.java,Bug,CLOSED,Minor,"Cannot Reproduce",None,None,PDModel,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1517226
Originally submitted by nobody on 2006-07-04 15:27.
Hello,
if I start the Example, i got the following
error-message (with j2sdk1.4.2_12 and Adobe
Acrobat 7.0):
org.pdfbox.exceptions.COSVisitorException:
Unsupported keysize or algorithm parameters
at org.pdfbox.pdfwriter.COSWriter.write
(COSWriter.java:1019)
at org.pdfbox.pdmodel.PDDocument.save
(PDDocument.java:735)
at org.pdfbox.pdmodel.PDDocument.save
(PDDocument.java:716)
at
test.pdfbox.encryption.TestPublicKeyEncryption.testPro
tectionError(TestPublicKeyEncryption.java:132)
at
sun.reflect.NativeMethodAccessorImpl.invoke0(Native
Method)
at sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at junit.framework.TestCase.runTest
(TestCase.java:154)
at junit.framework.TestCase.runBare
(TestCase.java:127)
at junit.framework.TestResult$1.protect
(TestResult.java:106)
at junit.framework.TestResult.runProtected
(TestResult.java:124)
at junit.framework.TestResult.run
(TestResult.java:109)
at junit.framework.TestCase.run
(TestCase.java:118)
at junit.framework.TestSuite.runTest
(TestSuite.java:208)
at junit.framework.TestSuite.run
(TestSuite.java:203)
at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner
.runTests(RemoteTestRunner.java:478)
at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner
.run(RemoteTestRunner.java:344)
at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner
.main(RemoteTestRunner.java:196)",0,"Andreas Lehmkühler",Anonymous,0,1,"04/Jul/06 22:27","31/Oct/13 11:18","31/Oct/13 11:18"
PDFBOX-1820,PDFBOX,"Suggestion: close streams in PDIndex and PDJpeg",Improvement,CLOSED,Minor,Fixed,2.0.0,"1.8.4, 2.0.0",None,None,,"Close streams to improve gc, see attached patches",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"23/Dec/13 11:29","31/Jan/14 06:46","05/Jan/14 16:16"
PDFBOX-1821,PDFBOX,"Parsing (extracting content) a single 5Mb pdf file takes 3minutes",Bug,CLOSED,Major,"Not A Problem",None,None,None,None,"windows 7","When I try to extract the attached pdf-file with the following code:
...
PDFTextStripper stripper = new PDFTextStripper();
OutputStream os = null;
Writer writer = null;
PDDocument document = null;
File file = new File( "takes3mins.pdf" );
...
document = PDDocument.load(file );
File outFile = new File("c:/tmp/gugus.txt");
os = new FileOutputStream(outFile);
writer = new OutputStreamWriter(os);
stripper.writeText(document, writer);
...
it takes approx 3minutes. Opening it in AcrobatReader in a few seconds.",0,"Andreas Lehmkühler","Clemens Wyss",0,3,"23/Dec/13 15:10","31/Dec/13 11:44","31/Dec/13 11:44"
PDFBOX-1822,PDFBOX,"Signature byte range is Invalid",Bug,CLOSED,Blocker,Fixed,"1.8.3, 1.8.4, 2.0.0",2.0.0,Signing,None,,"On person send me a unsigned PDF document. He wanted to sign it. When I try to sign it (using pad box), I have some problem.
After signing adobe reader tells me "The signature byre range is invalid".
I will attach original and signed document.
I think, it is PDF box parser error. another signature libraries sign document very well. I'm searching the problem at the moment, in order to fix it.",0,"Andreas Lehmkühler","vakhtang koroghlishv",1,10,"24/Dec/13 12:30","07/Sep/16 17:39","02/Mar/15 11:58"
PDFBOX-1823,PDFBOX,"Apache PDFBox 1.6.0 TextStripper not able to recognise characters having "Frutiger LT - 45" fonts",Bug,CLOSED,Major,"Not A Problem",1.6.0,None,FontBox,newbie,"java 1.6","When i tried to extract contents from PDF's I am successfully able to extract all text with PDFBox API but getting trouble with fonts having 'Frutiger' style. For these i am getting squared Boxes in place of characters.
It seems PDFBox FontBox supports only 14 UTF characters set And none of them is Frutiger style fonts.
If anybody please can suggest something. That would be of great help. I am in urgent need of the solution.",0,"Andreas Lehmkühler","Chitrang Natu",0,3,"01/Jan/14 10:38","03/Jan/14 08:41","02/Jan/14 16:09"
PDFBOX-1824,PDFBOX,"[PATCH] CFF fonts render wrong glyphs",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,patch,,"I've found three very closely related CFF encoding issues in v2.0.0 when using PDFToImage.
Problem 1
---------
Look a line 7 of the poem, it should be "And the mouldering dust that years have made"
but instead says "Afld the fioulderiflg dust that years have fiade"
The CFF font is asseumed to use CIDs but it does not if its not a ROS font.
Therefore we add a check for CFF ROS class.
Patch 1 fixes this.
Problem 2
---------
Look at line 3 "of right shoice" should be "of right choice".
Likewise on line 2 of the 2nd paragraph "And a staunsh" should be "And a staunch",
the st and ch ligatures are incorrect.
This is because the font is an CFF ROS CID Font and the glyphs for the st and ch ligatures
both have no name. The CFF format achieves this by using SIDs beyond the size of the string
index, which map to .notdef. So there is a unique SID for each glyph, but not a unique name.
Unfortuntely, PDFBox assumes that Type 1 fonts have glyphs with unique names, and this
assumtion appears throughout the codebase. Because a glyph name and a SID perform essentially
the same role, I recommend a simple solution to the problem: when an SID beyond the size of
the string index is encounteted, instead of mapping it to .notdef it should be mapped to
a new name with the prefix "SID" for example mapping SID 409 to the name "SID409". That way
each glyph will have a unique name, which is what PDFbox assumes.
Patch 2 fixes this.
Problem 3
---------
Look at line 2, "That creepeth oÉer ruins old!" the word "o'er" is incorrectly rendered
as "oÉer". This is because the Encoding entry in the PDF maps code 201 from "Eacute" in the
base encoding to "quoteright", but this is being ignored by PDFBox.
In the CFFGlyph2D constructor PDFBox examines the font's built-in charset. When the name
"quoteright" is encountered it is looked up in the PDF Encoding (i.e. nameToCode) where
it is changed to code 201. Thus code 201 is associated with the "quoteright" glyph in the
codeToGlyph map. This is correct.
However, later when the "Eacute" glyph is encountered, its built-in charset code is also
201 (which is standard) and so the codeToGlyph map entry is overwritten, resulting in
code 201 being associated with the "Eacute" glyph.
The solution is to build the codeToGlyph map in a strict order: first populate it with the
font's built-in charset, then the PDF Encoding overwrites any entries which it defines.
Patch 3 fixes this (and also replaces patch 2)",0,"Andreas Lehmkühler","John Hewson",0,3,"02/Jan/14 08:29","17/Mar/16 19:08","04/Jan/14 13:39"
PDFBOX-1825,PDFBOX,"[PATCH] Many pdfbox tests are never run",Bug,CLOSED,Major,Fixed,"1.8.3, 2.0.0",2.0.0,None,"patch test",,"The pdfbox tests are run via the TestAll.java which simply adds all the other tests to the test suite. However, the TestAll.java has not been kept up to date, so there are 13 tests which are not run, these are as follows:
/util
TestTextStripperPerformance [FAILS]
TestPDFToImage
TestPDFText2HTML
PageExtractorTest
/pdmodel/graphics/color
PDColorStateTest
/pdmodel/font
TestTTFParser
PDSimpleFontTest
/pdfparser
TestPDFParser [FAILS]
TestNonSequentialPDFParser
ConformingPDFParserTest
/encryption
TestPublicKeyEncryption [FAILS]
/cos
TestCOSBase
TestCOSNumber
I presume that TestAll.java is a legacy file, as Maven is used in all the other sub-projects to run any tests named Test**.java, the solution is propose is:
1. delete AllTests.java
2 .the patch changes pom.xml to run Test**.java files automatically
3. the patch fixes bugs in the TestImageIOUtils and TestTextStripperPerformance tests which threw exceptions because their output folder did not exist
4. the patch disables the TestPDFToImage and TestPublicKeyEncryption which are broken, I will open two new issues for fixing these tests",0,"Andreas Lehmkühler","John Hewson",0,3,"02/Jan/14 21:55","17/Mar/16 19:06","11/Jan/14 11:34"
PDFBOX-1826,PDFBOX,"how do you use chinese font",Bug,CLOSED,Major,Invalid,None,None,None,None,,,0,"Andreas Lehmkühler",shaowen,0,2,"03/Jan/14 01:03","03/Jan/14 10:28","03/Jan/14 10:28"
PDFBOX-1827,PDFBOX,"Broken Link",Bug,CLOSED,Major,Fixed,1.8.3,None,Documentation,features,,"http://pdfbox.apache.org/commandlineutilities/ExtractText.html link is broken.",0,"Maruan Sahyoun",gunasilan,0,3,"03/Jan/14 09:01","17/Mar/16 19:26","10/Feb/14 12:30"
PDFBOX-1828,PDFBOX,"Remove not needed CMaps",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"PDFBox comes with a lot of CMaps. According to the PDF specification not all of them are needed. Those CMaps should be removed to reduce the size of the jar.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"03/Jan/14 12:00","17/Mar/16 19:08","03/Jan/14 15:21"
PDFBOX-1829,PDFBOX,"PDF Extract Image Pixelmap Issue",Bug,CLOSED,Major,Fixed,"1.6.0, 1.8.3","1.8.4, 2.0.0",None,None,,"Hello everyone,
In our current project we are using pdfbox version 1.6.0 as part of an integrated media management solution. When extracting the first page of PDFs, we encounter a certain error for some of the files. The error log looks as follows:
2013-12-20 10:09:14,471 WARN org.apache.pdfbox.util.operator.pagedrawer.SHFill : java.io.IOException: Not Implemented
java.io.IOException: Not Implemented
at org.apache.pdfbox.pdfviewer.PageDrawer.SHFill_Radial(PageDrawer.java:493)
at org.apache.pdfbox.pdfviewer.PageDrawer.SHFill(PageDrawer.java:415)
at org.apache.pdfbox.util.operator.pagedrawer.SHFill.process(SHFill.java:58)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:551)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at net.sourceforge.openutils.mgnlmedia.media.types.impl.DocumentTypeHandler.createPdfPreview(DocumentTypeHandler.java:141)
at net.sourceforge.openutils.mgnlmedia.media.types.impl.DocumentTypeHandler.onPostSave(DocumentTypeHandler.java:96)
at net.sourceforge.openutils.mgnlmedia.media.dialog.LayerDialogMVC.onPostSave(LayerDialogMVC.java:152)
at info.magnolia.module.admininterface.DialogMVCHandler.save(DialogMVCHandler.java:236)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at info.magnolia.cms.servlets.MVCServletHandlerImpl.execute(MVCServletHandlerImpl.java:121)
at info.magnolia.cms.servlets.MVCServlet.doPost(MVCServlet.java:125)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at info.magnolia.cms.filters.ServletDispatchingFilter.doFilter(ServletDispatchingFilter.java:123)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.filters.CompositeFilter.doFilter(CompositeFilter.java:67)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.VirtualUriFilter.doFilter(VirtualUriFilter.java:70)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.cache.executor.Bypass.processCacheRequest(Bypass.java:58)
at info.magnolia.module.cache.executor.CompositeExecutor.processCacheRequest(CompositeExecutor.java:66)
at info.magnolia.module.cache.filter.CacheFilter.doFilter(CacheFilter.java:153)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.i18n.I18nContentSupportFilter.doFilter(I18nContentSupportFilter.java:76)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.RangeSupportFilter.doFilter(RangeSupportFilter.java:84)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.security.BaseSecurityFilter.doFilter(BaseSecurityFilter.java:60)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.security.SecurityCallbackFilter.doFilter(SecurityCallbackFilter.java:86)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.security.LogoutFilter.doFilter(LogoutFilter.java:93)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.templatingkit.filters.SiteMergeFilter.doFilter(SiteMergeFilter.java:99)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.extendedtemplatingkit.filters.MultiSiteFilter.doFilter(MultiSiteFilter.java:100)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MultiChannelFilter.doFilter(MultiChannelFilter.java:83)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.security.auth.login.LoginFilter.doFilter(LoginFilter.java:93)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.enterprise.registration.RegistrationFilter.doFilter(RegistrationFilter.java:52)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.filters.CosMultipartRequestFilter.doFilter(CosMultipartRequestFilter.java:91)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.devicedetection.filter.DeviceDetectionFilter.doFilter(DeviceDetectionFilter.java:73)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.ContentTypeFilter.doFilter(ContentTypeFilter.java:102)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.ContextFilter.doFilter(ContextFilter.java:131)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.CompositeFilter.doFilter(CompositeFilter.java:67)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.SafeDestroyMgnlFilterWrapper.doFilter(SafeDestroyMgnlFilterWrapper.java:108)
at info.magnolia.cms.filters.MgnlFilterDispatcher.doDispatch(MgnlFilterDispatcher.java:67)
at info.magnolia.cms.filters.MgnlMainFilter.doFilter(MgnlMainFilter.java:108)
at info.magnolia.cms.filters.MgnlMainFilter.doFilter(MgnlMainFilter.java:94)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)
at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:190)
at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:291)
at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:776)
at org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:705)
at org.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.java:898)
at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:690)
at java.lang.Thread.run(Thread.java:662)
After upgrading to version 1.8.3 of PDFBox, we got the following error message:
2014-01-03 16:09:48,500 ERROR .apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap: Something went wrong ... the pixelmap doesn't contain any data.
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.graphics.xobject.CompositeImage.createMaskedImage(CompositeImage.java:86)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.applyMasks(PDXObjectImage.java:154)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg.getRGBImage(PDJpeg.java:282)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:83)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:125)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:801)
at net.sourceforge.openutils.mgnlmedia.media.types.impl.DocumentTypeHandler.createPdfPreview(DocumentTypeHandler.java:141)
at net.sourceforge.openutils.mgnlmedia.media.types.impl.DocumentTypeHandler.onPostSave(DocumentTypeHandler.java:96)
at net.sourceforge.openutils.mgnlmedia.media.dialog.LayerDialogMVC.onPostSave(LayerDialogMVC.java:152)
at info.magnolia.module.admininterface.DialogMVCHandler.save(DialogMVCHandler.java:236)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at info.magnolia.cms.servlets.MVCServletHandlerImpl.execute(MVCServletHandlerImpl.java:121)
at info.magnolia.cms.servlets.MVCServlet.doPost(MVCServlet.java:125)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at info.magnolia.cms.filters.ServletDispatchingFilter.doFilter(ServletDispatchingFilter.java:123)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.filters.CompositeFilter.doFilter(CompositeFilter.java:67)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.VirtualUriFilter.doFilter(VirtualUriFilter.java:70)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.cache.executor.Bypass.processCacheRequest(Bypass.java:58)
at info.magnolia.module.cache.executor.CompositeExecutor.processCacheRequest(CompositeExecutor.java:66)
at info.magnolia.module.cache.filter.CacheFilter.doFilter(CacheFilter.java:153)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.i18n.I18nContentSupportFilter.doFilter(I18nContentSupportFilter.java:76)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.RangeSupportFilter.doFilter(RangeSupportFilter.java:84)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.security.BaseSecurityFilter.doFilter(BaseSecurityFilter.java:60)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.security.SecurityCallbackFilter.doFilter(SecurityCallbackFilter.java:86)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.security.LogoutFilter.doFilter(LogoutFilter.java:93)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.templatingkit.filters.SiteMergeFilter.doFilter(SiteMergeFilter.java:99)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.extendedtemplatingkit.filters.MultiSiteFilter.doFilter(MultiSiteFilter.java:100)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MultiChannelFilter.doFilter(MultiChannelFilter.java:83)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.cache.filter.GZipFilter.doFilter(GZipFilter.java:75)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.security.auth.login.LoginFilter.doFilter(LoginFilter.java:93)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.enterprise.registration.RegistrationFilter.doFilter(RegistrationFilter.java:52)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.UnicodeNormalizationFilter.doFilter(UnicodeNormalizationFilter.java:90)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.CosMultipartRequestFilter.doFilter(CosMultipartRequestFilter.java:91)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.devicedetection.filter.DeviceDetectionFilter.doFilter(DeviceDetectionFilter.java:73)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.ContentTypeFilter.doFilter(ContentTypeFilter.java:102)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.ContextFilter.doFilter(ContextFilter.java:131)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.CompositeFilter.doFilter(CompositeFilter.java:67)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.SafeDestroyMgnlFilterWrapper.doFilter(SafeDestroyMgnlFilterWrapper.java:108)
at info.magnolia.cms.filters.MgnlFilterDispatcher.doDispatch(MgnlFilterDispatcher.java:67)
at info.magnolia.cms.filters.MgnlMainFilter.doFilter(MgnlMainFilter.java:108)
at info.magnolia.cms.filters.MgnlMainFilter.doFilter(MgnlMainFilter.java:94)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
at java.lang.Thread.run(Thread.java:724)
2014-01-03 16:09:48,504 ERROR org.apache.pdfbox.util.operator.pagedrawer.Invoke : java.lang.NullPointerException
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.graphics.xobject.CompositeImage.createMaskedImage(CompositeImage.java:86)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.applyMasks(PDXObjectImage.java:154)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg.getRGBImage(PDJpeg.java:282)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:83)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:554)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:125)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:801)
at net.sourceforge.openutils.mgnlmedia.media.types.impl.DocumentTypeHandler.createPdfPreview(DocumentTypeHandler.java:141)
at net.sourceforge.openutils.mgnlmedia.media.types.impl.DocumentTypeHandler.onPostSave(DocumentTypeHandler.java:96)
at net.sourceforge.openutils.mgnlmedia.media.dialog.LayerDialogMVC.onPostSave(LayerDialogMVC.java:152)
at info.magnolia.module.admininterface.DialogMVCHandler.save(DialogMVCHandler.java:236)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at info.magnolia.cms.servlets.MVCServletHandlerImpl.execute(MVCServletHandlerImpl.java:121)
at info.magnolia.cms.servlets.MVCServlet.doPost(MVCServlet.java:125)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at info.magnolia.cms.filters.ServletDispatchingFilter.doFilter(ServletDispatchingFilter.java:123)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.filters.CompositeFilter.doFilter(CompositeFilter.java:67)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.VirtualUriFilter.doFilter(VirtualUriFilter.java:70)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.cache.executor.Bypass.processCacheRequest(Bypass.java:58)
at info.magnolia.module.cache.executor.CompositeExecutor.processCacheRequest(CompositeExecutor.java:66)
at info.magnolia.module.cache.filter.CacheFilter.doFilter(CacheFilter.java:153)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.i18n.I18nContentSupportFilter.doFilter(I18nContentSupportFilter.java:76)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.RangeSupportFilter.doFilter(RangeSupportFilter.java:84)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.security.BaseSecurityFilter.doFilter(BaseSecurityFilter.java:60)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.security.SecurityCallbackFilter.doFilter(SecurityCallbackFilter.java:86)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.security.LogoutFilter.doFilter(LogoutFilter.java:93)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.templatingkit.filters.SiteMergeFilter.doFilter(SiteMergeFilter.java:99)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.extendedtemplatingkit.filters.MultiSiteFilter.doFilter(MultiSiteFilter.java:100)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MultiChannelFilter.doFilter(MultiChannelFilter.java:83)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.cache.filter.GZipFilter.doFilter(GZipFilter.java:75)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:85)
at info.magnolia.cms.security.auth.login.LoginFilter.doFilter(LoginFilter.java:93)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.enterprise.registration.RegistrationFilter.doFilter(RegistrationFilter.java:52)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.UnicodeNormalizationFilter.doFilter(UnicodeNormalizationFilter.java:90)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.CosMultipartRequestFilter.doFilter(CosMultipartRequestFilter.java:91)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.module.devicedetection.filter.DeviceDetectionFilter.doFilter(DeviceDetectionFilter.java:73)
at info.magnolia.cms.filters.OncePerRequestAbstractMgnlFilter.doFilter(OncePerRequestAbstractMgnlFilter.java:61)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.ContentTypeFilter.doFilter(ContentTypeFilter.java:102)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.ContextFilter.doFilter(ContextFilter.java:131)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.MgnlFilterChain.doFilter(MgnlFilterChain.java:83)
at info.magnolia.cms.filters.CompositeFilter.doFilter(CompositeFilter.java:67)
at info.magnolia.cms.filters.AbstractMgnlFilter.doFilter(AbstractMgnlFilter.java:91)
at info.magnolia.cms.filters.SafeDestroyMgnlFilterWrapper.doFilter(SafeDestroyMgnlFilterWrapper.java:108)
at info.magnolia.cms.filters.MgnlFilterDispatcher.doDispatch(MgnlFilterDispatcher.java:67)
at info.magnolia.cms.filters.MgnlMainFilter.doFilter(MgnlMainFilter.java:108)
at info.magnolia.cms.filters.MgnlMainFilter.doFilter(MgnlMainFilter.java:94)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
at java.lang.Thread.run(Thread.java:724)
I will include one of the affected PDF files.
Thank you very much for your help in advance.
Jonas",0,"Andreas Lehmkühler","Jonas Mende",0,2,"03/Jan/14 15:25","31/Jan/14 06:46","16/Jan/14 06:35"
PDFBOX-1830,PDFBOX,"Grey background rectangle rendered at different position",Bug,CLOSED,Minor,Fixed,2.0.0,"1.8.4, 2.0.0",None,None,,"The grey background rectangle is larger in the rendered image than in the pdf.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"04/Jan/14 11:12","07/Apr/14 15:20","04/Jan/14 13:31"
PDFBOX-1831,PDFBOX,"[PATCH] Fix: "Foreign" characters are not rendered",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,"Breaking-Change patc",,"This is a patch to fix PDFBOX-1691, I've opened it as its own issue because it's quite a large patch.
The issue it fixes is that the Type 1 "seac" command was not implemented. Seac is a command which draws a composite glyph from two other glyphs. This requires that the Type 1 renderer has access to any of the other rendered glyphs in a CFFFont, which is why this patch is non-trivial. The major change is that the CharStringRenderer has been refactored into a new Type1CharString class and the CharStringConverter has been refactored into a new Type2CharString class. A lot of code has been moved around, but overall this is a conservative patch, as most of the code has not changed significantly.
As well as the patch, there are 3 new files:
+ fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java
+ fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java
+ fontbox/src/main/java/org/apache/fontbox/encoding/StandardEncoding.java
and two deleted files:
fontbox/src/main/java/org/apache/fontbox/cff/CharStringRenderer.java
fontbox/src/main/java/org/apache/fontbox/cff/CharStringConverter.java",0,"Andreas Lehmkühler","John Hewson",0,3,"05/Jan/14 05:16","17/Mar/16 19:08","05/Jan/14 15:42"
PDFBOX-1833,PDFBOX,"BaseParser tidy up",Improvement,CLOSED,Minor,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"Tidy up logic (should not change the parsing result)
Character.isWhitespace(c) is the only point wich may have site effects (but i assume there is no File-Seperator in parseCOSHexString)
so this should pass as it passes befor.",0,"Tilman Hausherr","Jens Kapitza",0,4,"05/Jan/14 13:13","13/Dec/14 14:15","11/Oct/14 21:28"
PDFBOX-1834,PDFBOX,"Remove old Overlay implementation",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"The old overlay source will be removed as we have a new and better implementation (see PDFBOX-1514)",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"05/Jan/14 16:54","17/Mar/16 19:07","05/Jan/14 16:57"
PDFBOX-1837,PDFBOX,"PDDocument.save(String) doesn't correctly save digital signatures",Bug,CLOSED,Blocker,"Not A Problem",1.8.3,None,PDModel,None,,"After digitally signing a PDF, if I save it with PDDocument.save(String), Adobe Reader reports the signature as invalid. The same doesn't happen if the PDF is saved with PDDocument.saveIncremental(FileInputStream, OutputStream).",0,"Thomas Chojecki","Álison Fernandes",0,2,"08/Jan/14 09:52","08/Feb/14 23:12","08/Jan/14 10:12"
PDFBOX-1838,PDFBOX,"PDDocument.saveIncremental should receive an InputStream instead of FileInputStream",Improvement,CLOSED,Blocker,Duplicate,1.8.3,None,PDModel,None,java,"I'm manipulating a PDF in a servlet, all of the manipulation must be done in memory. Unfortunately, the FileInputStream requirement in PDDocument.saveIncremental(FileInputStream,OutputStream) blocks me from achieving my desired implementation, as the server receives the PDF file in an InputStream.
I believe that the main reason PDDocument is implemented like that is that COSWritter forces it to.
This is a blocker improvement because PDDocument.save(...), although it supports saving to an OutputStream (which I need), it doesn't correctly save a digitally signed pdf.
For others with the same problem, to bypass this I'm currently saving a temporary file that is created using the following utility method described here: http://stackoverflow.com/a/16028522/859738",0,"Thomas Chojecki","Álison Fernandes",0,2,"08/Jan/14 09:56","08/Feb/14 23:12","08/Jan/14 10:21"
PDFBOX-1839,PDFBOX,"PDFImageWriter default BufferedImage type makes output colors look poor",Improvement,CLOSED,Minor,Fixed,None,"1.8.4, 2.0.0",None,None,"windows xp, java 1.7","The default imageType for PDFImageWriter.writeImage() is 8, which is TYPE_USHORT_565_RGB. I suggest to use TYPE_INT_RGB instead. The current default might create a poor user experience.
I also suggest that the type and the resolution ("screen resolution or 96 if not detected") be added to the javadoc.
Finally, the variable "imageType" is used with two different meanings in that file: once as a string for the format, once as int for the BufferedImage type.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"09/Jan/14 15:16","31/Jan/14 06:46","11/Jan/14 11:00"
PDFBOX-1840,PDFBOX,"Automatically load isartor for preflight tests",Improvement,CLOSED,Trivial,Fixed,"1.8.11, (2)","1.8.12, 2.0.0",Preflight,Isartor,,"Provide some modification in pom and create a new test class for isartor validation.
By default, the isartor testing will be skipped.
Use -Dskip.external.resources=false in command line to run them",0,"Tilman Hausherr","Guillaume Bailleul",0,2,"11/Jan/14 09:23","17/Mar/16 19:06","11/Feb/16 17:20"
PDFBOX-1841,PDFBOX,"irregular NPE In ImageIOUtils.addResolution",Bug,CLOSED,Major,Duplicate,1.8.3,None,Utilities,None,"java 1.7, linux","We're having an issue with PDFBox within out test suite where it sometimes throws an NPE and sometimes does not.
Background
We have a PDF File within our test suite that has JBIG2 encoded images. We have the JAI and JAI-ImageIO extensions installed with JAVA, but do not have a JBIG2 extension installed as discussed in PDFBOX-1067 as we need to keep with an Apache 2.0 license and cannot include the GPL3.0 jbig2-imageio.
Issue
Our issue, to be clear is not that we cannot handle the JBIG2 encoded images, but instead, that we're sometimes getting NPEs thrown by the system and sometimes not. (which makes it seem like it's possibly a race condition).
The NPE we're seeing is:
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,752 0    [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{q}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,762 10   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Q}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,762 10   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{q}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,763 11   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,763 11   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,763 11   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{622}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,765 13   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{800}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,766 14   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{re}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,766 14   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{W}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,766 14   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{n}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,769 17   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{q}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,769 17   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{622.8001}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,770 18   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,770 18   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,770 18   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{800.6401}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,770 18   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,772 20   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,772 20   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{cm}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,772 20   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{Im1}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,778 26   [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Do}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,806 54   [main ] (PDPixelMap.java:309) org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap - ColorModel: IndexColorModel: #pixelBits = 1 numComponents = 3 color space = java.awt.color.ICC_ColorSpace@3b568fbc transparency = 1 transIndex   = -1 has alpha = false isAlphaPre = false
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,808 56   [main ] (Invoke.java:93) org.apache.pdfbox.util.operator.pagedrawer.Invoke - imageWidth: 1730  imageHeight: 2224
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,874 122  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Q}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,874 122  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{3}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,875 123  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tr}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,875 123  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,875 123  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,875 123  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,876 124  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.7233}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,876 124  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,876 124  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,876 124  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,877 125  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{137.14}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,877 125  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{572.41}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,877 125  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,877 125  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT1}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,878 126  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:32 DEBUG 2014-01-11 16:24:32,878 126  [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:33 DEBUG 2014-01-11 16:24:33,774 1022 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{The }
build 11-Jan-2014 16:24:33 DEBUG 2014-01-11 16:24:33,775 1023 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:33 INFO  2014-01-11 16:24:33,994 1242 [main ] (PDTrueTypeFont.java:474) org.apache.pdfbox.pdmodel.font.PDTrueTypeFont - Using font Serif.bold instead
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,033 1281 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,033 1281 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,038 1286 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,038 1286 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,038 1286 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0396}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,038 1286 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,039 1287 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,039 1287 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,039 1287 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,039 1287 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,039 1287 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{208.37}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,040 1288 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{572.41}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,040 1288 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,040 1288 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,047 1295 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,048 1296 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,048 1296 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Archeology }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,048 1296 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,079 1327 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,080 1328 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,080 1328 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,080 1328 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,080 1328 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,083 1331 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,083 1331 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{38.8128}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,084 1332 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,084 1332 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,084 1332 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,084 1332 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{139.29}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,085 1333 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{514.45}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,085 1333 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,085 1333 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,085 1333 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,088 1336 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,089 1337 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{of }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,091 1339 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 INFO  2014-01-11 16:24:34,093 1341 [main ] (PDTrueTypeFont.java:474) org.apache.pdfbox.pdmodel.font.PDTrueTypeFont - Using font Serif.plain instead
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,098 1346 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,107 1355 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,108 1356 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,108 1356 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,108 1356 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0191}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,108 1356 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,108 1356 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,111 1359 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,111 1359 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,112 1360 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,112 1360 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{178.71}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,112 1360 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{514.45}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,112 1360 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,113 1361 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,113 1361 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,113 1361 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,113 1361 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Lake }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,115 1363 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,117 1365 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,120 1368 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,120 1368 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,120 1368 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,120 1368 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0213}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,121 1369 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,121 1369 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,121 1369 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,121 1369 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,121 1369 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{35.1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,122 1370 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{260.4579}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,122 1370 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{514.45}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,122 1370 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,122 1370 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,122 1370 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,123 1371 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,123 1371 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Mead }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,123 1371 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,125 1373 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,125 1373 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,126 1374 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,126 1374 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,126 1374 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0223}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,126 1374 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,127 1375 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,127 1375 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,127 1375 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,127 1375 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,127 1375 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{137.39}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,128 1376 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{456.13}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,128 1376 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,128 1376 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,128 1376 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,128 1376 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,129 1377 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{National }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,129 1377 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,132 1380 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,132 1380 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,133 1381 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,133 1381 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,133 1381 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0138}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,133 1381 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,133 1381 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,134 1382 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,134 1382 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,134 1382 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,134 1382 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{269.8112}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,134 1382 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{456.13}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,135 1383 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,135 1383 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,135 1383 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,135 1383 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,135 1383 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Recreation }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,136 1384 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,139 1387 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,141 1389 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,142 1390 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,142 1390 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,142 1390 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,142 1390 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,142 1390 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.9266}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,143 1391 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,143 1391 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,143 1391 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{32.6}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,143 1391 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{137.81}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,143 1391 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{404.29}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,144 1392 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,144 1392 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,144 1392 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,144 1392 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,144 1392 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Area }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,145 1393 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,153 1401 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,159 1407 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{24.4513}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,160 1408 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,161 1409 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,161 1409 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,161 1409 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{136.75}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,161 1409 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{319.68}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,161 1409 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,162 1410 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,162 1410 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,162 1410 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,162 1410 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{An }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,162 1410 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,164 1412 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,164 1412 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,164 1412 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,165 1413 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,165 1413 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0234}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,165 1413 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,165 1413 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,165 1413 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,166 1414 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,166 1414 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,166 1414 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{173.11}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,166 1414 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{319.68}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,166 1414 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,167 1415 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,171 1419 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,171 1419 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,172 1420 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Assessment }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,172 1420 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,176 1424 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,179 1427 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,179 1427 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,180 1428 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,180 1428 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.023}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,180 1428 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,180 1428 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,180 1428 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,181 1429 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,181 1429 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,181 1429 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{132.2302}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,181 1429 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{94.689}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,181 1429 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,182 1430 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,182 1430 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,182 1430 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,182 1430 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{National }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,182 1430 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,189 1437 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,189 1437 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,189 1437 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,194 1442 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,194 1442 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.7968}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,195 1443 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{222.01}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,196 1444 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{94.68}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,196 1444 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,196 1444 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,196 1444 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,196 1444 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,197 1445 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Park }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,197 1445 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,199 1447 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,203 1451 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,203 1451 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,204 1452 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,204 1452 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.004}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,204 1452 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,204 1452 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,204 1452 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,205 1453 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,205 1453 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,205 1453 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{273.89}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,205 1453 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{94.68}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,205 1453 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,206 1454 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,206 1454 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,206 1454 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,206 1454 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Service }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,206 1454 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,209 1457 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,215 1463 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,215 1463 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,216 1464 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,216 1464 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{-0.035}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,216 1464 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,216 1464 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{21.2481}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,216 1464 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,217 1465 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,217 1465 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,217 1465 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{131.37}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,217 1465 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,217 1465 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,218 1466 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,218 1466 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,218 1466 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,218 1466 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{U. }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,218 1466 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,220 1468 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,223 1471 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,223 1471 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,224 1472 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,224 1472 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{-0.035}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,224 1472 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,224 1472 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{21.9974}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,224 1472 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,225 1473 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,225 1473 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,225 1473 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{154.03}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,225 1473 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,225 1473 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,226 1474 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,226 1474 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,226 1474 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,226 1474 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{S. }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,231 1479 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,233 1481 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,233 1481 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,233 1481 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,233 1481 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,233 1481 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,234 1482 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,234 1482 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.7742}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,234 1482 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,234 1482 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,234 1482 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,235 1483 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{178.08}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,235 1483 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,235 1483 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,235 1483 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,235 1483 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,236 1484 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,236 1484 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Department }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,236 1484 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,245 1493 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,245 1493 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,245 1493 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,245 1493 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,246 1494 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,246 1494 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,246 1494 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{25.4579}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,246 1494 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,250 1498 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,251 1499 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,251 1499 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{306.47}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,251 1499 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,251 1499 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,251 1499 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,252 1500 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,252 1500 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,252 1500 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{of }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,252 1500 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,254 1502 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,254 1502 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,254 1502 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,254 1502 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,254 1502 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.0373}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,255 1503 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,259 1507 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,259 1507 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,263 1511 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,263 1511 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,263 1511 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{332.58}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,263 1511 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,263 1511 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,264 1512 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,264 1512 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,264 1512 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,264 1512 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{the }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,264 1512 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,266 1514 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,266 1514 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,270 1518 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,270 1518 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{BT}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,270 1518 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{0.05}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,275 1523 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,275 1523 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.5584}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,276 1524 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,276 1524 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,276 1524 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{23.4}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,276 1524 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{369.19}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,276 1524 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSFloat{69.13}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,277 1525 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tm}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,277 1525 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSName{TT2}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,277 1525 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{1}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,277 1525 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tf}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,277 1525 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSString{Interior }
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,278 1526 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tj}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,281 1529 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: COSInt{0}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,281 1529 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Tc}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,282 1530 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{ET}
build 11-Jan-2014 16:24:34 DEBUG 2014-01-11 16:24:34,282 1530 [main ] (PDFStreamEngine.java:260) org.apache.pdfbox.util.PDFStreamEngine - processing substream token: PDFOperator{Q}
build 11-Jan-2014 16:24:34 INFO  2014-01-11 16:24:34,282 1530 [main ] (PDFImageWriter.java:135) org.apache.pdfbox.util.PDFImageWriter - Writing: /home/bamboo/current/temp/TDAR-TRUNK3-JOB1/pia-09-lame-1980-small1.jpg
build 11-Jan-2014 16:24:34 ERROR 2014-01-11 16:24:34,291 1539 [main ] (PDFJBIG2TestCase.java:55) org.tdar.utils.PDFJBIG2TestCase - encountered NPE
build 11-Jan-2014 16:24:34 java.lang.NullPointerException
build 11-Jan-2014 16:24:34  at org.apache.pdfbox.util.ImageIOUtil.addResolution(ImageIOUtil.java:211)
build 11-Jan-2014 16:24:34  at org.apache.pdfbox.util.ImageIOUtil.createMetadata(ImageIOUtil.java:204)
build 11-Jan-2014 16:24:34  at org.apache.pdfbox.util.ImageIOUtil.writeImage(ImageIOUtil.java:158)
build 11-Jan-2014 16:24:34  at org.apache.pdfbox.util.ImageIOUtil.writeImage(ImageIOUtil.java:114)
build 11-Jan-2014 16:24:34  at org.apache.pdfbox.util.ImageIOUtil.writeImage(ImageIOUtil.java:81)
build 11-Jan-2014 16:24:34  at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:136)
build 11-Jan-2014 16:24:34  at org.tdar.utils.PDFJBIG2TestCase.testJBIG2(PDFJBIG2TestCase.java:50)
build 11-Jan-2014 16:24:34  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
build 11-Jan-2014 16:24:34  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
build 11-Jan-2014 16:24:34  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
build 11-Jan-2014 16:24:34  at java.lang.reflect.Method.invoke(Method.java:606)
build 11-Jan-2014 16:24:34  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
build 11-Jan-2014 16:24:34  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
build 11-Jan-2014 16:24:34  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
build 11-Jan-2014 16:24:34  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
build 11-Jan-2014 16:24:34  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
build 11-Jan-2014 16:24:34  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
build 11-Jan-2014 16:24:34  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
build 11-Jan-2014 16:24:34  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
build 11-Jan-2014 16:24:34  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
build 11-Jan-2014 16:24:34  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
build 11-Jan-2014 16:24:34  at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
build 11-Jan-2014 16:24:34  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
build 11-Jan-2014 16:24:34  at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
build 11-Jan-2014 16:24:34  at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
build 11-Jan-2014 16:24:34  at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
build 11-Jan-2014 16:24:34  at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
build 11-Jan-2014 16:24:34  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
build 11-Jan-2014 16:24:34  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
build 11-Jan-2014 16:24:34  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
build 11-Jan-2014 16:24:34  at java.lang.reflect.Method.invoke(Method.java:606)
build 11-Jan-2014 16:24:34  at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2(ReflectionUtils.java:208)
build 11-Jan-2014 16:24:34  at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:156)
build 11-Jan-2014 16:24:34  at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:82)
build 11-Jan-2014 16:24:34  at org.apache.maven.plugin.surefire.InPluginVMSurefireStarter.runSuitesInProcess(InPluginVMSurefireStarter.java:82)
build 11-Jan-2014 16:24:34  at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:942)
build 11-Jan-2014 16:24:34  at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:822)
build 11-Jan-2014 16:24:34  at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:720)
build 11-Jan-2014 16:24:34  at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:106)
build 11-Jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
build 11-Jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
build 11-Jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
build 11-Jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
build 11-Jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
build 11-Jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
build 11-Jan-2014 16:24:34  at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
build 11-Jan-2014 16:24:34  at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:317)
build 11-Jan-2014 16:24:34  at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:152)
build 11-Jan-2014 16:24:34  at org.apache.maven.cli.MavenCli.execute(MavenCli.java:555)
build 11-Jan-2014 16:24:34  at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:214)
build 11-Jan-2014 16:24:34  at org.apache.maven.cli.MavenCli.main(MavenCli.java:158)
build 11-Jan-2014 16:24:34  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
build 11-Jan-2014 16:24:34  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
build 11-Jan-2014 16:24:34  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
build 11-Jan-2014 16:24:34  at java.lang.reflect.Method.invoke(Method.java:606)
build 11-Jan-2014 16:24:34  at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
build 11-Jan-2014 16:24:34  at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
build 11-Jan-2014 16:24:34  at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
build 11-Jan-2014 16:24:34  at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
build 11-Jan-2014 16:24:34 Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 2.664 sec <<< FAILURE! - in org.tdar.utils.PDFJBIG2TestCase
build 11-Jan-2014 16:24:34 testJBIG2(org.tdar.utils.PDFJBIG2TestCase)  Time elapsed: 2.438 sec  <<< FAILURE!
build 11-Jan-2014 16:24:34 java.lang.AssertionError: encountered NPE in proccessing JBIG2 file
build 11-Jan-2014 16:24:34  at org.junit.Assert.fail(Assert.java:88)
build 11-Jan-2014 16:24:34  at org.tdar.utils.PDFJBIG2TestCase.testJBIG2(PDFJBIG2TestCase.java:56)
build 11-Jan-2014 16:24:34 
I'm attaching the PDF that's causing the issue.",0,"Andreas Lehmkühler","adam brin",0,4,"11/Jan/14 23:26","13/Jan/14 21:38","13/Jan/14 21:38"
PDFBOX-1844,PDFBOX,"[PATCH] Parser for Type 1 Fonts",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,"Breaking-Change patc",,"This patch adds a parser for Type 1 fonts to FontBox and makes use of it in PDFBox for rendering Type 1 glyphs. This should fix various issues with the JVM crashing and rendering fonts incorrectly.
It was necessary to modify Type1CharStringParser to handle the `callothersubr` command and correctly handle subroutines. Likewise, Type1CharString was modified to support "flex".
This patch does not remove the AWT fallback for non-embedded and standard 14 fonts because an entirely new fallback system is needed and suitable fonts will need to be shipped as part of PDFBox. This needs to be discussed on the mailing list and/or in follow-on issue.
Note: To keep this patch small I have not replaced any of the existing ad-hoc Type 1 parsing code in PDType1Font and preflight. Those classes retain their original code which can be replaced in subsequent patches/refactoring. I can open follow-on issues for these.
~~~
As well as the patch, the these files were added:
+ /pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/font/Type1Glyph2D.java
+ /fontbox/src/main/java/org/apache/fontbox/encoding/CustomEncoding.java
+ /fontbox/src/main/java/org/apache/fontbox/type1/Token.java
+ /fontbox/src/main/java/org/apache/fontbox/type1/Type1CharStringReader.java
+ /fontbox/src/main/java/org/apache/fontbox/type1/Type1Font.java
+ /fontbox/src/main/java/org/apache/fontbox/type1/Type1Lexer.java
+ /fontbox/src/main/java/org/apache/fontbox/type1/Type1Mapping.java
+ /fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java
And this file was removed:
/pdfbox/src/main/java/org/apache/pdfbox/pdfviewer/font/CFFGlyph2D.java",0,"Andreas Lehmkühler","John Hewson",0,3,"14/Jan/14 01:21","17/Mar/16 19:07","17/Jan/14 19:11"
PDFBOX-1845,PDFBOX,"PDDocument.load() give Error: Expected a long type at offset 1633",Bug,CLOSED,Blocker,Fixed,"1.8.0, 2.0.0","1.8.6, 2.0.0",Parsing,"JPEG2000 JPG2000","windows 8","I run this simple program with the file in attachment (scanned OCR document from Nuance Omnipage 18)
public static void main(String[] args)
throws Exception
{ System.out.println("Start SplitFileTest..."); String path = "D:\\test\\batch\\scan_manual\\courrier\\david.keller\\"; String pdfFile = path + "14 01 2014.pdf"; FileInputStream pdfInputStream = new FileInputStream(pdfFile); PDDocument pdDocument = PDDocument.load(pdfInputStream); List<PDPage> pages = pdDocument.getDocumentCatalog().getAllPages(); pdfInputStream.close(); }
And with the 1.8.0 version I have this error :
java.io.IOException: Error: Expected an integer type, actual='12977[373'
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1622)
at org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse(PDFObjectStreamParser.java:100)
at org.apache.pdfbox.cos.COSDocument.dereferenceObjectStreams(COSDocument.java:604)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:226)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1187)
And I have just builded the 2.0.0 from the last code source and I have this error :
java.io.IOException: Error: Expected a long type at offset 1633
at org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1682)
at org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse(PDFObjectStreamParser.java:100)
at org.apache.pdfbox.cos.COSDocument.dereferenceObjectStreams(COSDocument.java:663)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:244)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1101)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1069)",0,"Tilman Hausherr","David KELLER",0,3,"14/Jan/14 12:59","22/Dec/14 17:23","04/May/14 10:25"
PDFBOX-1846,PDFBOX,"NonSequentialPDFParser Error",Bug,CLOSED,Major,"Not A Problem",1.8.4,None,Parsing,None,,"What happens when you have a document and there is many NULL-s (p.s it is zeros in byte) at the end of the document? Someone send me document like this. It was created by one software.
No Problem.... Then I try to parse it... and we have one problem:
Exception in thread "main" java.io.IOException: Missing end of file marker '%%EOF'
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.getStartxrefOffset(NonSequentialPDFParser.java:619)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:329)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:767)
I'm attaching sample document, Image, and fixing patch.",0,"Timo Boehme","vakhtang koroghlishv",0,2,"14/Jan/14 16:41","08/Feb/14 23:12","14/Jan/14 16:50"
PDFBOX-1847,PDFBOX,"TSA Time Signature",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Signing,None,,"When we was signing document, we was using time from our time. For more security we can use Time Stamp server.
"Trusted timestamping is the process of securely keeping track of the creation and modification time of a document. Security here means that no one — not even the owner of the document — should be able to change it once it has been recorded provided that the timestamper's integrity is never compromised."(wiki)",0,"John Hewson","vakhtang koroghlishv",0,3,"15/Jan/14 11:46","17/Mar/16 19:06","12/Dec/14 22:17"
PDFBOX-1848,PDFBOX,"Time Stamp Document Level Sigature",Improvement,CLOSED,Major,Fixed,2.0.0,"2.0.9, (1)",Signing,None,,"We need TSA Document Level signature modulo too!
At the moment we sign document with our certificate. But... sometimes we need to sign document with TSA too. This is important part of signing. Sometimes this is very very very important- for instance when we will implement PAdES 4 profile this module will be essential. without that Document Secure Store will not work
I'm working on this improvement. I'will finish this soon. It's almost done. I only must add some java docs, and might be I change architect design and etc..
So, please assign this it to me I will upload patch as soon as possible",0,"Tilman Hausherr","vakhtang koroghlishv",3,8,"15/Jan/14 14:40","24/Mar/18 09:41","06/Mar/18 19:19"
PDFBOX-1849,PDFBOX,"Isartor test 6-3-5-t01-fail-a does not return the expected error code",Bug,CLOSED,Major,Fixed,None,2.0.0,"FontBox, (1)",Isartor,,"A modification on fonts handling during december 2013 or January 2014 made an isartor test not detecting the expected error.
This test (6-3-5-t01-fail-a) should detect missing glyph but now detect metrics issues",0,"Guillaume Bailleul","Guillaume Bailleul",0,1,"15/Jan/14 21:55","17/Mar/16 19:08","21/Jan/14 20:06"
PDFBOX-185,PDFBOX,"StreamCorruptedException in LZWFilter",Bug,CLOSED,Minor,Duplicate,None,None,Parsing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1525971
Originally submitted by nobody on 2006-07-20 08:43.
Hello,
I get a StreamCorruptedException in LZWFilter.decode
when I'm reading the Adobe-TIFF6.0 description (121
pages) file. It's a pitty but it's never more available
online. I tried to attach it, but it has ~400kb. If
anyone need's it I can mail it. I am successfull
loading it by the ICEpdf-package and Acrobat. Please
Help! ijyama@web.de",0,"Andreas Lehmkühler",Anonymous,0,0,"20/Jul/06 15:43","27/Oct/11 05:32","27/Oct/11 05:32"
PDFBOX-1851,PDFBOX,"[PATCH] Improved CMYK color space conversion",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,None,"Breaking-Change colo",,"This is a patch to resolve a long-standing issue with CMYK color spaces. DeviceCMYK is a device-dependent color space and so should always be associated with an ICC color profile. In Acrobat the default profile is "U.S. Web Coated (SWOP) v2", which unfortunately is only available from Adobe under a non-free license.
I've modified PDDeviceCMYK to use an ICC color profile rather than a hardcoded transform, this allows the user to use their own profile. I've included "ISO Coated v2 300% (basICColor)" as the default profile, which is from OpenICC http://www.freedesktop.org/wiki/OpenIcc/ProfilePackages/ redistributed under the zlib license. This color space is an open alternative to a version produced by ECI which is highly recommended as a generic CMYK profile.
Note: Using ICC profiles is a huge improvement on the matrix-based transform used by Xpdf, Poppler, MuPDF, etc.
This patch requires the following file to be deleted:
pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/ColorSpaceCMYK.java",0,"Andreas Lehmkühler","John Hewson",0,3,"18/Jan/14 07:45","17/Mar/16 19:06","19/Jan/14 11:40"
PDFBOX-1852,PDFBOX,"[PATCH] Alternative patch to speed up TestImageIOUtils",Improvement,CLOSED,Minor,Fixed,"1.8.3, 2.0.0",2.0.0,None,"patch test",,"This is an alternative to the PDFBOX-1850 patch to speed up TestImageIOUtils.
Rather than using multi-threading, this patch reduces the scope of the TestImageIOUtils test. The purpose of TestImageIOUtils is to check thatImageIOUtils can write jpeg, bmp and wbmp files without throwing an exception. Looking at the mailing list archive http://mail-archives.apache.org/mod_mbox/pdfbox-commits/201112.mbox/%3C20111218154622.3EE76238899C@eris.apache.org%3E we can see that the original issue was that the JPEG compression configuration broke BMP writing. It is therefore sufficient to convert only a single PDF file to each of the output formats in order to test this.
The test is not quite so simple though, as TestImageIOUtils is also used for processing embedded images in PDF files and so needs to be tested on appropriate PDF files, this is not something that the current test suite was actually doing. I've therefore added some test PDF files containing PNGs, JPEGs, and pixmaps. These are from libharu https://github.com/libharu/libharu and are under the ZLIB/LIBPNG license.
Because TestImageIOUtils now only needs to be run on three files it takes around 2sec on my machine rather than over 30sec.",0,"Andreas Lehmkühler","John Hewson",0,3,"18/Jan/14 08:21","17/Mar/16 19:07","06/Feb/14 06:45"
PDFBOX-1854,PDFBOX,"Include AFM files for Core 14 fonts",Improvement,CLOSED,Minor,Fixed,"1.8.3, 2.0.0",2.0.0,None,None,,"I noticed that the build process for PDFBox includes downloading the core 14 AFM files however they are under an Apache-compatible license (see LEGAL-35) so can be included directly in the source tree.",0,"Andreas Lehmkühler","John Hewson",0,3,"19/Jan/14 02:52","17/Mar/16 19:07","20/Jan/14 19:19"
PDFBOX-1857,PDFBOX,"Attachment damages singature",Bug,CLOSED,Blocker,Duplicate,"1.8.3, 1.8.4, 2.0.0",None,"Parsing, (4)",None,,"I have PDF document.
1) Adobe reader reads document well.
2) I sign document (using pdfbox-examples) and everything is well
3) Then I try to attach file to original PDF (Code is written in the pdfbox web page - in the cookBook).
4) Adobe reader reads attached document well. everything is well.
5) Now I have document with attachment.
6) I try to sign that document (I mean document with attachment). And I have 2 problem:
First:
when I open document, Adobe reader tells me that signature byte range is invalid.
Second:
when I try to close document (I mean to close adobe reader), Adobe reader tells me that:
Do you want to save changes to "original[with-attachment][signed]" before closing?",0,"Thomas Chojecki",jack,0,3,"21/Jan/14 11:46","08/Feb/14 23:12","22/Jan/14 08:27"
PDFBOX-1859,PDFBOX,"ClassCastException for unknown destination type",Bug,CLOSED,Major,Fixed,"1.8.3, 1.8.8, 1.8.9",1.8.9,PDModel,None,,"Trying to read the outlines failed for the attached document.
import java.io.IOException;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination;
import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem;
import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode;

public class TestPDDestination {

 public static void main(String[] args) throws IOException {
  PDDocument doc = PDDocument.load("Speisepläne.pdf");
  traverse(doc.getDocumentCatalog().getDocumentOutline());
  doc.close();
 }
 
 static void traverse(PDOutlineNode node) throws IOException {
  if (node instanceof PDOutlineItem) {
   PDDestination dst = ((PDOutlineItem) node).getDestination();
   /**
    * throws java.lang.ClassCastException: org.apache.pdfbox.cos.COSFloat cannot be cast to org.apache.pdfbox.cos.COSName,
    * but should be something like a PDPageXYZDestination!
    */
   System.out.println(dst);
  }
  for (PDOutlineItem child = node.getFirstChild(); child != null; child = child.getNextSibling()) {
   traverse(child);
  }
 }
}",0,"Tilman Hausherr","Hendrik Lescak",0,3,"22/Jan/14 11:01","28/Mar/15 14:10","04/Feb/15 21:07"
PDFBOX-1860,PDFBOX,"HTML converter escapes formatting close tags",Bug,CLOSED,Minor,Fixed,1.8.3,"1.8.5, 2.0.0","Text extraction",None,,"Bug introduced by PDFBOX-1213 in 1.8.3 for HTML style information.
Bold style tags are opened correctly, but the close tags are html-escaped.
~/work/pdfbox ((1.8.3))$ java -jar app/target/pdfbox-app-1.8.3.jar ExtractText -html -nonSeq -console pdftest.pdf 
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html><head><title>1725.PDF</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body>
<div style="page-break-before:always; page-break-after:always"><div><p>E:\M55\!\1725.fm 2003-01-01 18:15 P Tagg, IPM, University of Liverpool
</p>
<p><b>A VERY SMALL PDF FILE
&lt;/b&gt;</p>
<p><b>A VERY SMALL PDF FILE
&lt;/b&gt;</p>
<p><b>A VERY SMALL PDF FILE
&lt;/b&gt;</p>
<p><b>A VERY SMALL PDF FILE
&lt;/b&gt;</p>
<p><b>A VERY SMALL PDF FILE
&lt;/b&gt;</p>
<p><b>A VERY SMALL PDF FILE&lt;/b&gt;</p>

</div></div>
</body></html>",0,"Andreas Lehmkühler","Cheng Leong",0,2,"22/Jan/14 21:46","02/May/14 06:12","31/Jan/14 18:50"
PDFBOX-1861,PDFBOX,"Line is incorrectly dashed",Bug,CLOSED,Minor,Fixed,2.0.0,"1.8.4, 2.0.0",None,None,"windows 7","The line in the attached page should be dashed differently than it is in the rendering.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"23/Jan/14 06:38","19/Feb/14 19:29","19/Feb/14 19:29"
PDFBOX-1862,PDFBOX,"Incomplete signature creation (regression in 1.8.3 with PDFBOX-1780)",Bug,CLOSED,Major,Fixed,1.8.3,"1.8.4, 2.0.0","Signing, Writing",None,,"I got a document, which do not look special but after the PDFBOX-1780 patch, signing breaks and only a small footprint was written into the document.
The changes made with the patch PDFBOX-1780 in the COSWriter, cause this problem for me.",0,"Andreas Lehmkühler","Thomas Chojecki",0,2,"23/Jan/14 13:41","31/Jan/14 06:46","26/Jan/14 18:14"
PDFBOX-1864,PDFBOX,"Non-embedded fonts not detected (or are they?)",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,font,"windows 7","The following 2 PDFs use some fonts that are not embedded (at least that's what Acrobat Preflight is telling me):
http://acroeng.adobe.com/Test_Files/fonts//embedded_fonts.pdf
http://acroeng.adobe.com/Test_Files/fonts//text_images_pdf1.2.pdf
Running both files through Preflight I do see some font-related errors, but I don't see any occurrence of error 3.1.3, which is the specific error that I would expect here. Or perhaps this isn't this the unique error code for detecting non-embedded fonts?
Related side note: in "PreflightConstants.java" the description of 3.1.3 reads:
Error on the "Font File x" in the Font Descriptor
Which suggests it may be more generic than non-embedded fonts alone. But maybe this is not the case? (For myself I've only seen this error with an associated message like "Invalid Font definition, FontFile entry is missing from FontDescriptor for TimesNewRomanPSMT".)",0,"Tilman Hausherr","Johan van der Knijff",0,4,"24/Jan/14 15:12","17/Mar/16 19:07","22/Nov/14 15:27"
PDFBOX-1865,PDFBOX,"RenderUtil - rendering blank pages as images from PDF",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Parsing, Utilities",None,"windows 7, java 1.7","When I'm trying to render images from pdf, it's rendering only blank pages.
I can see in log this warnings:
I 24, 2014 7:19:47 ODP. org.apache.pdfbox.pdfparser.NonSequentialPDFParser initialParse
WARNING: PDF file 'c:\nv_big_document.pdf' does not allow extracting content.
I 24, 2014 7:19:47 ODP. org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNING: Can't find the XObject for 'Xf1'
I 24, 2014 7:19:47 ODP. org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNING: Can't find the XObject for 'Xf2'
I 24, 2014 7:19:47 ODP. org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNING: Can't find the XObject for 'Xf3'
I 24, 2014 7:19:47 ODP. org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNING: Can't find the XObject for 'Xf4'
I 24, 2014 7:19:47 ODP. org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNING: Can't find the XObject for 'Xf5'
I 24, 2014 7:19:47 ODP. org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNING: Can't find the XObject for 'Xf6'
I 24, 2014 7:19:47 ODP. org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNING: Can't find the XObject for 'Xf7'
I 24, 2014 7:19:47 ODP. org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNING: Can't find the XObject for 'Xf8'
For reading document I'm using PDDocument.loadNonSeq() method.",0,"Andreas Lehmkühler","Lukas Vasek",0,3,"24/Jan/14 18:22","17/Mar/16 19:07","27/Jan/14 18:41"
PDFBOX-1869,PDFBOX,"Implementation for ShadingType 1",Sub-task,CLOSED,Minor,Fixed,2.0.0,"1.8.5, 2.0.0",PDModel,None,,"Here's an implementation for function based shading and 4 sample files. The implementation is rather simple. The real work is done in the function, see subtask. I'm using a reverse transformation of the two matrices so that getRaster() gets the "pure" values. The implementation works on two test images and fails on two. I believe that the cause for the two it fails is the problem I had with Type 4 and 5. I also noticed (when debugging) that for FUNSH01.pdf, my implementation always gets the same matrices despite that its 4 different areas in that page.
(Don't get confused by the name "asy-latticeshading.pdf", its not type 5 lattice shading)",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"29/Jan/14 18:46","02/May/14 06:12","02/Feb/14 14:42"
PDFBOX-1870,PDFBOX,"PDFunctionType0 incorrect",Sub-task,CLOSED,Minor,Fixed,2.0.0,"1.8.5, 2.0.0",PDModel,None,,"Type 0 (Sampled) Functions are described in 3.9.1 of the pdf spec and basically, its cheating: there's an n-dimensional grid of values ("samples") and the function shall return these values or something in-between.
PDFunctionType0 has two bugs:
1) it does not do any interpolation. The function interpolate() is called several times, but only adjust values between ranges etc, not to calculate the color between 2^n samples - that part is "outputValues[i] = (outputValuesPrevious[i] + outputValuesNext[i]) / 2". The spec does not tell much, only that "Interpolation is used to determine output values from the nearest surrounding values in the sample table". I have done a linear/bilinear interpolation implementation for 1D/2D inputs. I did not do an interpolation implementation for 3D and higher, because its unclear whether this is actually used. Instead, I return random values.
2) the sample bits are not collected correctly, the current code ignores the leftover bits when a row is done. The spec tells us "Successive values are adjacent in the bit stream; there is no padding at byte boundaries". Luckily, that one is easy to correct, three lines must be moved up. Alternatively, one might use the bit-io lib I mention in PDFBOX-615.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"29/Jan/14 18:54","02/May/14 06:12","02/Feb/14 13:48"
PDFBOX-1871,PDFBOX,"Content appears a few px higher when rasterizing PDF",Bug,CLOSED,Major,Fixed,1.8.3,2.0.0,Rendering,None,,"PDFBox seems to be off by a little bit vertically when you rasterize a PDF. This is in comparison to both Adobe's PDF library and many other PDF viewers such as Chrome's and the one in OS X.
I've attached an example PDF where there's some text with a green rectangle around it. The rectangle is has about 2x as much space above it compared to below it, but in PDFBox's raster, the rectangle is closer to the top than is is to the bottom.
This is obvious at 300 dpi but at 96 dpi it's hard to tell for sure. Anecdotally, I've noticed that when rendering text at about 74 dpi, PDFBox seems to be off by about 1px.
I've attached both a PDFBox raster and one made with Adobe's PDF library for comparison.
java -jar pdfbox-app-1.8.3.jar PDFToImage -imageType PNG -resolution 300 -color rgba test-text-alignment-textbox.pdf",0,"Tilman Hausherr","Jon Wu",0,3,"29/Jan/14 22:54","17/Mar/16 19:07","17/Feb/15 19:40"
PDFBOX-1872,PDFBOX,"PDMetadata.exportXMPMetadata fails when Metadata has encrypted stream",Bug,CLOSED,Minor,Fixed,1.8.3,"1.8.7, 2.0.0","JempBox, (1)",None,solaris,"When the Metadata is encoded with the Crypt filter, exportMetadata() fails to parse the XML. My guess is that PDDocumentCatalog.getMetadata() gives PDMetadata the raw stream, instead of the filtered one. Then PDMetadata.exportXMPMetadata() calls XMPMetadata.load(), which cannot parse the encrypted stream.
While I cannot post the document (proprietary), the outline shown by PDFDebugger goes like this:
Root:Dictionary(Catalog)
+ AcroForm:Dictionary
Metadata:Stream(Metadata:XML)
Filter:Array
o [0] Crypt
o Length:6302
o Subtype:XML
o Type:Metadata",0,"Andreas Lehmkühler","Pat Hickey",0,3,"30/Jan/14 22:23","19/Sep/14 14:40","28/Jun/14 11:48"
PDFBOX-1874,PDFBOX,PDFTextStripper.isParagraphSeparation(...),Bug,CLOSED,Minor,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0","Text extraction",patch,eclipse,"PDFTextStripper.isParagraphSeparation(...) seems to have an issue with how it finds Y text indentation.
PROBLEM:
I believe the issue is due to precision in the the following logic:
            float yGap = Math.abs(position.getTextPosition().getYDirAdj()-
                    lastPosition.getTextPosition().getYDirAdj());
            float xGap = (position.getTextPosition().getXDirAdj()-
                    lastLineStartPosition.getTextPosition().getXDirAdj());

            if(yGap > (getDropThreshold()*maxHeightForLine))
            {
                        result = true;
yGap has a precision to 1000th+, while (getDropThreshold()*maxHeightForLine) has a precision to 100,000th. Resulting in the following comparison (example):
16.018 > 16.018005
which evaluates to "True". However 16.018 > 16.018 would evaluate to "False".
EFFECT OF THE PROBLEM:
every line in the output is marked as "isParagraphStart = true" and "writeParagraphEnd() ... = true".
I.E.
NEW_LINE
PARAGRAPH_START PDFBox has been designed to represent PDF documents using familiar object-oriented paradigms. The data NEW_LINE
contained in a PDF document is a collection of basic object types: arrays, booleans, dictionaries, numbers,|||NEW_LINE|||
PARAGRAPH_END NEW_LINE
PARAGRAPH_START strings and binary streams. PDFBox captures these basic object types in the org.pdfbox.cos package (the NEW_LINE
COS Model). While it's possible to create any desired interactions with a PDF document using only these|||NEW_LINE|||
PARAGRAPH_END NEW_LINE
In the source PDF these lines appear as such:
"PDFBox has been designed to represent PDF documents using familiar object-oriented paradigms. The data
contained in a PDF document is a collection of basic object types: arrays, booleans, dictionaries, numbers,
strings and binary streams. PDFBox captures these basic object types in the org.pdfbox.cos package (the
COS Model). While it's possible to create any desired interactions with a PDF document using only these"
MY WORKAROUND:
NOTE: there is a small performance hit with this workaround.
  float yGap = Math.abs(position.getTextPosition().getYDirAdj()
  - lastPosition.getTextPosition().getYDirAdj());
 
  DecimalFormat df = new DecimalFormat("#.00");
  float yGapTruncated = Float.valueOf(df.format(yGap));
 
  float newYVal = Float.valueOf(df.format(getDropThreshold()
  * maxHeightForLine));",0,"Andreas Lehmkühler","Yuri Burrows",0,3,"31/Jan/14 15:39","28/Mar/15 14:10","21/Dec/14 16:06"
PDFBOX-1876,PDFBOX,"Incorrect color for DeviceN type 4 shading object",Bug,CLOSED,Major,Fixed,"1.8.4, 2.0.0","1.8.5, 2.0.0",Rendering,None,,"Thanks to the fix in pdfbox-1442, I was able to get the ch14.pdf file rendered. However the colors are incorrect. On page 13, the colors black and red in the triangle are switched. (The same error is on page 1, 15 and 20 but these take forever to render). I suspect a bug in the shadingTinttransform.eval() function.
I don't think its a bug in the shading interpolation code, because then there would have been lots of visible triangles in the spheres and donuts on the other pages where its not just a single triangle.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"02/Feb/14 19:45","02/May/14 06:12","05/Mar/14 20:42"
PDFBOX-1877,PDFBOX,"Radial Shading (type 3) fails Ghent Workgroup tests",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.5, 2.0.0",Rendering,"JDK1.7 shading shadi","windows 7","GWG 6.0 test: the black rectangle around the circle is missing
GWG 6.1 test: The rectangles are there but shouldn't be. Plus, the second type 3 shading has wrong colors. (Maybe same problem as in PDFBOX-1876 ?)",0,"Tilman Hausherr","Tilman Hausherr",0,3,"02/Feb/14 21:03","02/May/14 06:12","26/Feb/14 20:50"
PDFBOX-188,PDFBOX,"doesn't convert properly russian characters",Bug,CLOSED,Minor,"Cannot Reproduce",None,None,"Text extraction",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1537323
Originally submitted by amashtakov on 2006-08-09 04:44.
Hi,
I've tried to extract text from attached PDF using
both stable release PDFBox-0.7.2 and recent nightly
build PDFBox-0.7.3-dev-20060809 and the following code
snipped:
// 1. parse document
PDFParser parser = new PDFParser(is);
parser.parse();
cos = parser.getDocument();
// 2. extract text
PDFTextStripper stripper = new PDFTextStripper();
String text = stripper.getText(new PDDocument(cos));
// 3. dump output
FileOutputStream os = new FileOutputStream("file.txt");
OutputStreamWriter ow = new
OutputStreamWriter(os, "UTF-8");
ow.write(text);
ow.flush();
Despite of russian contents of original PDF, the
output file doesn't contain any "valid" russian
character(s).
I've also tried to convert the same PDF with the
foolabs-xpdf tool - the output contains valid
UTF-8 russian text.
PS: I couldn't attach file because of sourcecforge
size limit. (the size is ~545K). Is it possible
to pass it to dev. team ?",0,"Andreas Lehmkühler",Anonymous,0,2,"09/Aug/06 11:44","16/Mar/13 15:24","14/Mar/13 11:22"
PDFBOX-1882,PDFBOX,"Negative array size exception when reading a string from a OTF font",Bug,CLOSED,Major,Fixed,1.8.4,"1.8.5, 2.0.0",FontBox,None,,,0,"Andreas Lehmkühler","Robert Meyer",0,3,"04/Feb/14 16:33","02/May/14 06:12","05/Feb/14 17:54"
PDFBOX-1883,PDFBOX,"Avoid StringIndexOutOfBoundsException in DateConverter",Bug,CLOSED,Trivial,Duplicate,1.8.4,None,PDModel,easyfix,,"Passing an empty string to parseDate can result in an ArrayIndexOutOfBoundsException.
Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 0
at java.lang.String.charAt(Unknown Source)
at org.apache.pdfbox.util.DateConverter.parseDate(DateConverter.java:680)
at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:808)
at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:780)
at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:754)
at org.apache.pdfbox.cos.COSDictionary.getDate(COSDictionary.java:797)
at org.apache.pdfbox.pdmodel.PDDocumentInformation.getCreationDate(PDDocumentInformation.java:210)
at org.apache.tika.parser.pdf.PDFParser.extractMetadata(PDFParser.java:170)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:142)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:242)
I can't share the triggering document, but I'll submit patch with test case shortly.",0,"Andreas Lehmkühler","Tim Allison",0,3,"04/Feb/14 18:08","20/Apr/14 12:28","20/Apr/14 12:28"
PDFBOX-1884,PDFBOX,"Avoid NPE when encountering null PDComplexFileSpecification",Bug,CLOSED,Minor,Fixed,1.8.4,"1.8.5, 2.0.0",None,None,,"In some pdfs in the wild, PDComplexFileSpecification can be null. It would be great if we could skip those files that don't have any contents and not throw an NPE.",0,"John Hewson","Tim Allison",0,3,"04/Feb/14 18:33","02/May/14 06:12","06/Mar/14 22:13"
PDFBOX-1885,PDFBOX,"Add reference to ECM REWOO Scope",Improvement,CLOSED,Trivial,Fixed,None,None,Documentation,None,,"Hello,
we, REWOO Technologies AG, are a software company in Germany and provide the Enterprise Content Managment product REWOO Scope which uses the pdfbox library to read and index PDF documents. We would like to ask to be added to your reference page http://pdfbox.apache.org/references.html as suggested on that page.
Suggested text for the reference page:
Project name: ECM REWOO Scope
Project link: http://www.rewoo.de
License: Commercial
Project description: REWOO Scope is an Enterprise Content Management (ECM) software to organize, structure and consolidate enterprise data. pdfbox is an integral part to read and index PDF documents.
Thank you in advance
Best greetings from Karlsruhe, Germany",0,"Andreas Lehmkühler","Rewoo Technologies A",0,2,"05/Feb/14 09:21","27/Feb/14 09:35","24/Feb/14 11:49"
PDFBOX-1889,PDFBOX,"Remove the ConvertColorspace class",Improvement,CLOSED,Major,Fixed,None,2.0.0,None,"Breaking-Change modu",,"The ConvertColorspace class doesn't do what a possible user might expect. It simply tries to exchange all setStrokingColor/setNonStrokingColor calls using RGB values with calls using CMYK values. It doesn't convert images or colorspaces itself.
To avoid misunderstandings I'm going to remove the class.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"06/Feb/14 11:19","17/Mar/16 19:07","07/Feb/14 16:05"
PDFBOX-189,PDFBOX,"NPE in COSDictionaryMap.put",Bug,CLOSED,Minor,"Cannot Reproduce",None,None,AcroForm,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1538596
Originally submitted by jfnieto on 2006-08-11 03:28.
When importing FDF fields in a PDF file, I get a
NullPointerException in COSDictionaryMap.
I'm just starting with PDFBox. I use it to create final
PDF files merging a PDF with an FDF file. In most
cases, it works fine, but with a couple of PDF files I
get this error.
I have done a little program to import a sample FDF
into all "template" PDFs. I only get the NPE with two
of them. The source of this test is attached to this
message.
The exception trace:
java.lang.NullPointerException
at
org.pdfbox.pdmodel.common.COSDictionaryMap.put(COSDictionaryMap.java:
120)
at
org.pdfbox.pdmodel.interactive.form.PDAppearance.getFontAndUpdateReso
urces(PDAppearance.java:447)
at
org.pdfbox.pdmodel.interactive.form.PDAppearance.setAppearanceValue(P
DAppearance.java:275)
at
org.pdfbox.pdmodel.interactive.form.PDVariableText.setValue(PDVariabl
eText.java:145)
at
org.pdfbox.pdmodel.interactive.form.PDField.importFDF(PDField.java:31
9)
at
org.pdfbox.pdmodel.interactive.form.PDAcroForm.importFDF(PDAcroForm.j
ava:132)
at TestPDF.importFDF(TestPDF.java:44)
at TestPDF.test(TestPDF.java:28)
at TestPDF.main(TestPDF.java:60)
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1538596&file_id=188647
TestPDF.java (application/octet-stream), 1363 bytes
Test: Import a FDF into a group of PDF files
[comment on SourceForge]
Originally sent by jfnieto.
Logged In: YES
user_id=393901
I'm playing with the PDFBox code. If I insert a check in the
put method of COSDictionaryMap to avoid the NPE, then I get
errors when saving() the final document:
java.lang.NullPointerException
at
org.pdfbox.cos.COSStream.getFilteredStream(COSStream.java:153)
at
org.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:936)
at org.pdfbox.cos.COSStream.accept(COSStream.java:218)
at
org.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:449)
at
org.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:382)
at
org.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:794)
at
org.pdfbox.cos.COSDocument.accept(COSDocument.java:390)
at
org.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1089)
at
org.pdfbox.pdmodel.PDDocument.save(PDDocument.java:611)
at
org.pdfbox.pdmodel.PDDocument.save(PDDocument.java:592)
at GenPDF.importFDF(GenPDF.java:25)
at GenPDF.main(GenPDF.java:43)",0,"Andreas Lehmkühler",Anonymous,1,1,"11/Aug/06 10:28","31/Oct/13 11:26","31/Oct/13 11:26"
PDFBOX-1890,PDFBOX,"Merge PdfDecompressor and WriteDecodedDoc",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,None,modularization,,"The ccommandline tools PdfDecompressor and WriteDecodedDoc should be merged as both are more or less doing the same.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"06/Feb/14 11:23","17/Mar/16 19:07","08/Feb/14 16:35"
PDFBOX-1891,PDFBOX,"Remove the ant module",Improvement,CLOSED,Major,Fixed,None,2.0.0,None,modularization,,"The ant module consists of one class only. It is nothing more or less than an example on how to create an anttsk to extract text using PDFBox.
We should move the class PDFToTextTask to the exmaples module and remove th ant module.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"06/Feb/14 11:33","17/Mar/16 19:08","07/Feb/14 15:54"
PDFBOX-1892,PDFBOX,"Empty pages after rendering images: org.apache.pdfbox.util.operator.pagedrawer.Invoke",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,"noimage pdfbox","windows 7, java 1.7","Hello,
I'm printing file (test.pdf) which has on each page generated number with another font. I'm using PDDocument.loadNonSeq() to load data. In logs I can see
Feb 6, 2014 3:25:26 PM org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNING: Can't find the XObject for 'Xf1'
and no data except that generated numbers are printed.
I've seen in some old bug that imageIo library was needed, but now in dependencies I don't see it (http://pdfbox.apache.org/dependencies.html)
Please can you fix this?
Thanks",0,"Andreas Lehmkühler","Lukas Vasek",1,4,"06/Feb/14 15:08","17/Mar/16 19:07","30/Jun/14 18:48"
PDFBOX-1893,PDFBOX,"Refactor color spaces",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,color,,"I'm currently working on this, so I wanted to open an issue to let everyone know.
Color spaces need to be refactored in 2.0.0. Tilman noticed slowness in PDFBOX-1851 due to using ICC profiles and calling ColorSpace#toRGB for every pixel. For example, the file from PDFBOX-1851 went from rendering in 4 seconds to taking over 60 seconds.
The solution is to use ColorConvertOp to convert an entire BufferedImage in one go, taking advantage of AWT's native color management module. Color conversions done this way are almost instantaneous, even for large images.
The current design of color spaces within PDFBox depends upon conversions being done on a per-pixel basis, so a significant refactoring is needed in order to convert images using ColorConvertOp without having to resort to per-pixel calls in cases such as a Separation color space which uses a CMYK alternate color space via a tint-transform.
The color space handling code is also tightly coupled to image handling. The various classes which read images each have their own color handling code which rely on per-pixel conversions. For this reason any color space refactoring must also included a significant refactoring of image handling code. This is an opportunity to refactor all color handling so that it is encapsulated within the color space classes, allowing downstream users to call toRGB(float[]) or toRGB(BufferedImage) and not need to worry about tint transforms and the like.
===========
Here's a summary of the changes:
PDCcitt has been removed, its reading capability has moved to CCITTFaxFilter and writing capability has moved to CCITTFactory.
PDJpeg has been removed. JPEG reading is now done by new code in DCTFilter which correctly handles CMYK/YCCK color. This fixes various files where images appeared like negatives. JPEG writing is done by new code in JPEGFactory.
cleaned up JBIG2Filter
cleaned up JPXFilter, in particular calling decode() caused the stream dictionary to be updated, which was unsafe. I've also added a special JPXColorSpace which wraps the embedded AWT color space of a JPX BufferedImage, this replaces the need for the awkward mapping of ColorSpace to PDColorSpace.
Added better error messages for missing JAI plugins (JPX, JBIG2). A special exception, MissingImageReaderException is now thrown.
PDXObjectForm has been renamed to PDFormXObject to match the PDF spec.
PDXObjectImage has been renamed in the same manner.
PDInlinedImage has been renamed to PDInlineImage for the same reason.
CCITTFaxDecodeFilter has been renamed to CCITTFaxFilter for consistency with the other filters.
ImageParameters has been removed, it was used to represent inline image parameters which are now simply members of PDInlineImage.
added PDColor which represents a color value, including patterns, it is immutable for ease of use.
removed PDColorState which was a container for both a color and a color space, in almost every case it was used to represent a color and so has been replaced by PDColor and occasionally PDColorSpace.
moved most of the functionality of PDXObject into its subclasses
rewrote almost all color handling code in all PDColorSpace subclasses, including fixing the calculations for l*a*b, DeviceN, and indexed color spaces.
all color spaces now implement a toRGB(float[]) function for color conversion, so external consumers of color spaces no longer have to know about internals such as tint transforms.
image color conversion is now performed in one operation, using ColorConvertOp, rather than pixel-by-pixel, this speeds up ICC transforms by many orders of magnitude. Color spaces now expose a special method toImageRGB(Raster) for this purpose. This fixes some known performance issues with certain files.
updated Type1, Axial, Radial, and Gouraud shading contexts to call the new toRGB functions. This is an interim measure, for better performance the color conversion should instead be done using toImageRGB after the entire gradient is drawn to the raster.
creation of AWT Paint has been moved inside color spaces, hiding the details from the caller. It is no longer possible to get an AWT Color from a color space, only a Paint may be obtained.
removed PDColorSpaceFactory and moved its functionality into PDColorSpace.
moved some of the new shading and tiling pattern code to PDPattern so that toPaint() is encapsulated in the color space.
new PDImage interface which is implemented by both PDInlineImage and PDImageXObject
Image XObject image reading, masking and stencilling code has been rewritten, resulting in the removal of CompositeImage.
new SampledImageReader performs image reading for all formats, including JPEG and CCITT. The format itself is simply a filter, as is the case in the PDF spec. New image reading handles decode arrays, interpolation, and conversion of all image types to efficient 8bpp rasters. This replaces PDPixelMap as well as reading code from PDJpeg and PDCcitt. Handling of decod arrays fixes various issues where images were inverted, especially inline images in Type 3 fonts.
removed SetNonStrokingICCBasedColor, SetNonStrokingIndexed, SetNonStrokingPattern, SetNonStrokingSeparation, SetStrokingICCBasedColor, SetStrokingIndexed, SetStrokingPattern, SetStrokingSeparation, and replaced them with SetColor.",0,"John Hewson","John Hewson",0,6,"06/Feb/14 21:40","17/Mar/16 19:07","20/Feb/14 17:26"
PDFBOX-1895,PDFBOX,"Type0 settings /Registry and /Ordering are not decrypted when writing document",Bug,CLOSED,Major,Fixed,"1.8.3, 1.8.4","1.8.6, 2.0.0",Writing,None,,"When re-writing a document with font descriptions, Adobe Reader is unable to display the fonts in the document. Reader can display the fonts in the original document. The difference is that in the original document, the font descriptions are in lower object numbers than the font references; in the output document, the font descriptions are in higher object numbers than the font references. Is there a quick way to re-order them?
Update: the PDF file in question is actually corrupt, but somehow modifying it with PDFBox causes it to no longer be readable with Adobe Reader.
Update: The position of the objects in the document is not important, and is not the issue. Whether the file is corrupt or not according to preflight tools is not the issue. The problem is that the input document is encrypted, including the /Registry and /Ordering settings on the Type0 font, and the output document is not, however the encrypted strings are copied verbatim to the output document, despite having decrypted copies in use for the CMap of the PDType0Font.",0,"Andreas Lehmkühler","Pat Hickey",0,6,"07/Feb/14 18:27","22/Jun/14 14:34","14/May/14 17:04"
PDFBOX-1897,PDFBOX,"There are some errors within the source code documentation (javadocs)",Improvement,CLOSED,Trivial,Fixed,None,"1.8.5, 2.0.0",Documentation,documentation,,"The documentation within the sources has some errors leading to missing or incorrect information.",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"08/Feb/14 16:14","02/May/14 06:12","25/Apr/14 22:05"
PDFBOX-1899,PDFBOX,"Rendering issues with images and lines",Bug,CLOSED,Minor,Duplicate,2.0.0,None,Rendering,None,,"The file from PDFBOX-882 still has some minor rendering issues with images and lines, and logs some interesting errors to the console.",0,"John Hewson","John Hewson",0,2,"09/Feb/14 21:29","27/May/14 19:10","27/May/14 19:09"
PDFBOX-190,PDFBOX,"A drawing error occured",Bug,CLOSED,Minor,"Cannot Reproduce",None,None,PDModel,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1542907
Originally submitted by nobody on 2006-08-18 15:54.
I am using the example code to draw a jpg onto a pdf.
There are no errors thrown but when I open the pdf the
following error message is thrown - "A drawing error
occured".
Any help is appreciated.
Email address krreddy@gmail.com
Code below
/**
Copyright (c) 2005, www.pdfbox.org
All rights reserved.
*
Redistribution and use in source and binary forms,
with or without
modification, are permitted provided that the
following conditions are met:
*
1. Redistributions of source code must retain the
above copyright notice,
this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the
above copyright notice,
this list of conditions and the following
disclaimer in the documentation
and/or other materials provided with the
distribution.
3. Neither the name of pdfbox; nor the names of its
contributors may be used to endorse or promote
products derived from this
software without specific prior written permission.
*
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
*
http://www.pdfbox.org
*
*/
package edu.mayo.pcs.pdf;
import java.awt.print.PrinterException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.pdfbox.exceptions.COSVisitorException;
import org.pdfbox.pdmodel.PDDocument;
import org.pdfbox.pdmodel.PDPage;
import org.pdfbox.pdmodel.edit.PDPageContentStream;
import org.pdfbox.pdmodel.font.PDFont;
import org.pdfbox.pdmodel.font.PDType1Font;
import org.pdfbox.pdmodel.graphics.xobject.PDJpeg;
import org.pdfbox.pdmodel.graphics.xobject.PDXObjectImage;
/**
This is an example that creates a simple document.
*
The example is taken from the pdf file format
specification.
*
@author Ben Litchfield (ben@csh.rit.edu)
@version $Revision: 1.5 $
*/
public class ImageToPDF {
/**
create the second sample document from the PDF
file format specification.
*
@param file The file to write the PDF to.
@param image The filename of the image to put in
the PDF.
*
@throws IOException If there is an error writing
the data.
@throws COSVisitorException If there is an error
writing the PDF.
*/
public void createPDFFromImage(String file, String
image) throws PrinterException,
COSVisitorException {
PDDocument doc = null;
try
{
doc = new PDDocument();
PDPage page = new PDPage();
doc.addPage(page);
PDFont font = PDType1Font.HELVETICA_BOLD;
PDPageContentStream contentStream = new
PDPageContentStream(doc, page);
contentStream.beginText();
contentStream.setFont(font, 12);
contentStream.moveTextPositionByAmount(100, 700);
contentStream.drawString("This is a
text pdf doc");
contentStream.endText();
PDXObjectImage ximage = null;
if (image.toLowerCase().endsWith(".jpg"))
{ ximage = new PDJpeg(doc, new FileInputStream(image)); }
contentStream.drawImage(ximage, 20, 200);
contentStream.close();
doc.save(file);
} catch (FileNotFoundException e)
{ // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e)
{ // TODO Auto-generated catch block e.printStackTrace(); }
}
/**
This will create a PDF document with a single
image on it.
<br />
see usage() for commandline
*
@param args Command line arguments.
*/
public static void main(String[] args) {
ImageToPDF app = new ImageToPDF();
try
{ app.createPDFFromImage("xyz.pdf", "mc.jpg"); }
catch (Exception e)
{ e.printStackTrace(); }
}
/**
This will print out a message telling how to use
this example.
*/
private void usage() { System.err.println("usage: " + this.getClass().getName() + " <output-file> <image>"); }
}",0,"Andreas Lehmkühler",Anonymous,0,1,"18/Aug/06 22:54","14/Mar/13 11:25","14/Mar/13 11:25"
PDFBOX-1900,PDFBOX,"ConvertToImage - pdf - checkbox wrongly rendered",Bug,CLOSED,Major,Fixed,"1.8.3, 2.0.0",2.0.0,Rendering,"Dingbats Zapf",,"When converting pdf to png (PDPage.convertToImage or ImageWriter.writeImage) checkboxes are wrongly rendered.
other interactive components (radiobuttons, ...) look good
original pdf was created in Acrobat Pro X (the same behavior with pdf created in other software)",0,"John Hewson",foxkeh,0,4,"10/Feb/14 09:40","17/Mar/16 19:07","05/May/15 16:53"
PDFBOX-1901,PDFBOX,"null check confusing",Bug,CLOSED,Trivial,Fixed,2.0.0,"1.8.5, 2.0.0",PDModel,None,,"null check is confusing",0,"Tilman Hausherr","Jens Kapitza",0,3,"10/Feb/14 12:33","02/May/14 06:12","11/Feb/14 17:50"
PDFBOX-1902,PDFBOX,"generics added to maputil",Improvement,CLOSED,Trivial,Fixed,"1.8.4, 2.0.0","1.8.5, 2.0.0",Utilities,None,,"Using Generics for getNextUniqueKey to avoid eclipse hint",0,"Tilman Hausherr","Jens Kapitza",0,4,"10/Feb/14 12:36","02/May/14 06:12","11/Feb/14 18:36"
PDFBOX-1903,PDFBOX,"refactor pdmodel (pdpage)",Improvement,CLOSED,Minor,"Won't Fix",2.0.0,2.0.0,PDModel,None,,"refactor pdpage stuff
create a super class
remove duplicated code",0,"John Hewson","Jens Kapitza",0,3,"10/Feb/14 13:10","12/Dec/14 22:22","12/Dec/14 22:22"
PDFBOX-1905,PDFBOX,"Remove the PDPage reference from PageDrawer/PDFStreamEngine",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,refactoring,,"Both classes PageDrawer and PDFStreamEngine are holding a reference of the current page. It's only purpose is to get the page rotation and the page size.
I'm going to remove the page reference and using the pagesize and/or the pagerotation instead",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"10/Feb/14 19:52","17/Mar/16 19:08","10/Feb/14 19:55"
PDFBOX-1906,PDFBOX,"Don't use a src subdirectory as output directory for a test case",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,"Text extraction",None,,"The TestTextStripperPerformance test uses a src subdirectory as output directory but it shall be a directory within the target directory",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"10/Feb/14 21:07","17/Mar/16 19:08","10/Feb/14 21:10"
PDFBOX-1907,PDFBOX,"Out of memory - COSDocument (RandomAccessBuffer)",Bug,CLOSED,Major,"Won't Fix",1.8.4,None,Parsing,regression,"windows xp","Possibly related to PDFBOX-1777.
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
at java.util.AbstractCollection.toArray(AbstractCollection.java:136)
at java.util.ArrayList.<init>(ArrayList.java:168)
at org.apache.pdfbox.cos.COSDocument.getObjects(COSDocument.java:518)
at org.apache.pdfbox.cos.COSDocument.getObjects(COSDocument.java:518)
at org.apache.pdfbox.cos.COSDocument.close(COSDocument.java:575)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:254)
at techref.Testpdfbox.main(Testpdfbox.java:36)
The heap space is set to -Xmx1640m
The pdf docoument is parsed OK with version 1.8.3 but fails with 1.8.4
The large pdf document has the following attributes.
pdDoc.getCurrentAccessPermission.canExtractContent = true
pdDoc.getCurrentAccessPermission.canExtractForAccessibility = true
pdDoc.getNumberOfPages = 228
pdDoc.getDocumentCatalog.getLanguage = null
pdDoc.getDocumentCatalog.getPageLayout = SinglePage
pdDoc.getDocumentCatalog.getPageMode = UseNone
pdDoc.getDocumentCatalog.getVersion = null
Page Count=228
Title=Microsoft Word - FEA.doc
Author=null
Subject=null
Keywords=null
Creator=Windows NT 4.0
Producer=Acrobat Distiller 4.05 for Windows
Creation Date=Fri Jun 29 15:29:59 BST 2001
Modification Date=Mon Jul 02 15:41:18 BST 2001
Trapped=null
Dictionary=COSDictionary{(COSName
{CreationDate}
:COSString
{D:20010629142959}
) (COSName
{Producer}
:COSString
{Acrobat Distiller 4.05 for Windows}
) (COSName
{Creator}
:COSString
{Windows NT 4.0}
) (COSName
{Title}
:COSString
{Microsoft Word - FEA.doc}
) (COSName
{ModDate}
:COSString
{D:20010702164118+02'00'}
) }",0,"Andreas Lehmkühler","Jim Kay",0,6,"11/Feb/14 13:35","22/Oct/14 09:58","14/Sep/14 16:44"
PDFBOX-1909,PDFBOX,"Close open streams",Improvement,CLOSED,Trivial,Fixed,"1.8.4, 2.0.0","1.8.5, 2.0.0",None,None,,"There are still several cases where inputStreams aren't closed. I'll fix this, probably in several steps.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"11/Feb/14 19:09","02/May/14 06:12","12/Feb/14 17:07"
PDFBOX-191,PDFBOX,"PDFStreamEngine(Properties) should use propertyNames()",Bug,CLOSED,Minor,Duplicate,None,None,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1544943
Originally submitted by thib_gc on 2006-08-22 15:40.
The PDFStreamEngine(Properties) constructor uses
properties.keySet().iterator() to create a map of
operators based on the client-supplied custom operator
processor class names. This has the disadvantage of
only iterating over the proper keys of the properties
parameter, ignoring any keys that are defined by the
Properties instance's defaults (if present).
If a client of PDFStreamEngine wishes to have the
default behavior be anything other than the built-in
"no-op", which exists because of the null check in
processOperator(PDFOperator, List), the only choice is
to supply to the constructor a Properties object with
no defaults that includes all possible PDF operators,
attaching the name of a class extending
OperatorProcessor with the desired default behavior to
all keys that need it. Another conceivable possibility
would be to override PDFStreamEngine(Properties) and
processOperator(PDFOperator, List).
Neither of these options seem desirable, nor do they
enable clients to take advantage of defaults
recursively in Properties without flattening the
chained Properties objects.
Instead, the PDFStreamEngine(Properties) constructor
could use properties.propertyNames() (the die-hard
Enumeration from the Properties API), which guarantees
enumerating recursively over Properties objects.",0,"Andreas Lehmkühler",Anonymous,0,0,"22/Aug/06 22:40","12/Feb/11 18:59","07/Dec/10 06:42"
PDFBOX-1911,PDFBOX,"Orange background from the pdf gets turned into blue in the png files.",Bug,CLOSED,Major,Fixed,None,2.0.0,Rendering,None,"ubuntu, java 1.7",,0,"John Hewson","Paulo Siqueira",0,2,"11/Feb/14 20:29","17/Mar/16 19:08","20/Feb/14 17:35"
PDFBOX-1914,PDFBOX,"Shading package: Move "function" methods to base class and more refactoring",Improvement,CLOSED,Minor,Fixed,"1.8.4, 2.0.0","1.8.5, 2.0.0",Rendering,"refactoring shading",,"I'm planning to move the "function" methods to the PDShadingResources class. Reasons: 1) duplicate code (partly introduced by myself), 2) this will allow me to handle functions in type 4 & 5 shading. Currently I can't, because these shading context classes use a common class (GouraudShadingContext), but the PDShadingType 4 and 5 have their function methods.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"12/Feb/14 20:00","02/May/14 06:12","14/Feb/14 21:20"
PDFBOX-1915,PDFBOX,"Implement shading with Coons and tensor-product patch meshes",Improvement,CLOSED,Major,Fixed,"1.8.5, (3)","1.8.7, 2.0.0",Rendering,"graphical gsoc2014 j",,"Of the seven shading methods described in the PDF specification, type 6 (Coons patch meshes) and type 7 (Tensor-product patch meshes) haven't been implemented. I have done type 1, 4 and 5, but I don't know the math for type 6 and 7. My math days are decades away.
Knowledge prerequisites:
java, although you don't have to be a java ace, just feel confortable
math: you should know what "cubic Bézier curves", "Degenerate Bézier curves", "bilinear interpolation", "tensor-product", "affine transform matrix" and "Bernstein polynomials" are, or be able to learn it
maven (basic)
svn (basic)
an IDE like Netbeans or Eclipse or IntelliJ (basic)
ideally, you are either a math student who likes to program, or a computer science student who is specializing in graphics.
A first look at PDFBOX: try the command utility here:
https://pdfbox.apache.org/commandline/#pdfToImage
and use your favorite PDF, or the PDFs mentioned in PDFBOX-615, these have the shading types that are already implemented.
Some simple source code to convert to images:
String filename = "blah.pdf";
PDDocument document = PDDocument.loadNonSeq(new File(filename), null);
List<PDPage> pdPages = document.getDocumentCatalog().getAllPages();
int page = 0;
for (PDPage pdPage : pdPages)
{
++page;
BufferedImage bim = RenderUtil.convertToImage(pdPage, BufferedImage.TYPE_BYTE_BINARY, 300);
ImageIO.write(bim, "png", new File(filename+page+".png"));
}
document.close();
You are not starting from scratch. The implementation of type 4 and 5 shows you how to read parameters from the PDF and set the graphics. You don't have to learn the complete PDF spec, only 15 pages related to the two shading types, and 6 pages about shading in general. The PDF specification is here:
http://www.adobe.com/devnet/pdf/pdf_reference.html
The tricky parts are:
decide whether a point(x,y) is inside or outside a patch
decide the color of a point within the patch
To get an idea about the code, look at the classes GouraudTriangle, GouraudShadingContext, Type4ShadingContext and Vertex here
https://svn.apache.org/viewvc/pdfbox/trunk/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/
or download the whole project from the repository.
https://pdfbox.apache.org/downloads.html#scm
If you want to see the existing code in the debugger with a Gouraud shading, try this file:
http://asymptote.sourceforge.net/gallery/Gouraud.pdf
Testing:
I have attached several example PDFs. To see which one has which shading, open them with an editor like NOTEPAD++, and search for "/ShadingType" (without the quotes). If your images are rendering like the example PDFs, then you were successful.
Optional:
Review and optimize the complete shading package for speed; implement cubic spline interpolation for type 0 (sampled) functions (that one is really low-low priority, see details by looking up "cubic spline interpolation" in the PDF spec, which tells that it is disregarded in printing, and I don't have a test PDF).
Mentor: Tilman Hausherr (European timezone, languages: german, english, french)",0,"Shaola Ren","Tilman Hausherr",0,7,"13/Feb/14 17:33","19/Sep/14 14:40","10/Aug/14 18:06"
PDFBOX-1916,PDFBOX,"java.lang.ArrayIndexOutOfBoundsException in inlineimage",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,ccitt,,"I get this with page 8 of the attached file:
13.02.2014 20:10:10.809 WARN [main] org.apache.pdfbox.util.PDFStreamEngine:546 - java.lang.ArrayIndexOutOfBoundsException: 4
java.lang.ArrayIndexOutOfBoundsException: 4
at org.apache.pdfbox.filter.TIFFFaxDecoder.decodeT6(TIFFFaxDecoder.java:1153)
at org.apache.pdfbox.filter.CCITTFaxDecodeFilter.decode(CCITTFaxDecodeFilter.java:126)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDInlinedImage.createImage(PDInlinedImage.java:161)
at org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage.process(BeginInlineImage.java:60)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:533)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:261)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:236)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawType3String(PageDrawer.java:444)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:295)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:489)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:44)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:533)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:261)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:227)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:209)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:151)
at org.apache.pdfbox.util.RenderUtil.renderPage(RenderUtil.java:212)
at org.apache.pdfbox.util.RenderUtil.convertToImage(RenderUtil.java:177)
at pdfboxpageimageextraction.ExtractImages.doPdf(ExtractImages.java:273)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:77)
Some observations:
I can't see what image is missing when rendered
The data read between ID and EI (see http://www.verypdf.com/document/pdf-format-reference/pg_0352.htm ) includes the LF (0x0A). I tried to remove that in debugging, but the exception came anyway.",0,"John Hewson","Tilman Hausherr",0,2,"13/Feb/14 20:44","17/Mar/16 19:08","26/Feb/14 21:54"
PDFBOX-1917,PDFBOX,"Rendering hangs",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.5, 2.0.0",Rendering,None,"windows 7, java 1.7","Rendering hangs in page 9 of the attached file. It hangs in PageDrawer.strokePath(), there in graphics.draw(path). I'd like to hear from people using a different JDK version if it works.",0,"Andreas Lehmkühler","Tilman Hausherr",1,4,"13/Feb/14 21:12","02/May/14 06:12","22/Feb/14 11:27"
PDFBOX-1918,PDFBOX,"PDF with incorrect startxref",Bug,CLOSED,Major,Fixed,1.8.4,"1.8.8, 2.0.0","Parsing, Utilities",None,,"Current version has same problem 1.8.4
D:\Software\pdfbox>java -jar pdfbox-app-1.8.4.jar ConvertColorspace rpt1390780234888753.pdf test.pdf
二月 07, 2014 4:59:11 下午 org.apache.pdfbox.pdfparser.BaseParser parseCOSStream
警告: Specified stream length 15353 is wrong. Fall back to reading stream until 'endstream'.
二月 07, 2014 4:59:11 下午 org.apache.pdfbox.pdfparser.BaseParser parseCOSStream
警告: Specified stream length 12156 is wrong. Fall back to reading stream until 'endstream'.
二月 07, 2014 4:59:11 下午 org.apache.pdfbox.pdfparser.XrefTrailerResolver setStartxref
警告: Did not found XRef object at specified startxref position 83636
ConvertColorspace failed with the following exception:
java.io.IOException: Missing closing bracket for hex string. Reached EOS.
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString(BaseParser.java:1023)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSString(BaseParser.java:816)
at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:259)
at org.apache.pdfbox.pdfparser.PDFStreamParser.parse(PDFStreamParser.java:133)
at org.apache.pdfbox.ConvertColorspace.replaceColors(ConvertColorspace.java:88)
at org.apache.pdfbox.ConvertColorspace.main(ConvertColorspace.java:385)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:46)",0,"Andreas Lehmkühler","Jr. John",0,4,"14/Feb/14 05:19","13/Dec/14 14:15","20/Oct/14 17:14"
PDFBOX-1920,PDFBOX,"Buffer Error when trying to run node",Bug,CLOSED,Major,"Not A Problem",None,None,Utilities,None,,"Description: Trying to merge PDF using the latest Merge PDF Node but getting the following error
There is a problem with task “Merge PDF” in the process “Create Application Pack”
Problem: An error occurred in executing an Activity Class.
Details: org.apache.pdfbox.exceptions.WrappedIOException: Could not push back 628696 bytes in order to reparse stream. Try increasing push back buffer using system property org.apache.pdfbox.baseParser.pushBackSize
Recommended Action: Examine the activity class to correct the error and then resume.
Priority of this problem: High Priority",0,"Timo Boehme","Chris Hewkin",0,4,"14/Feb/14 09:59","05/Mar/14 12:26","05/Mar/14 09:40"
PDFBOX-1921,PDFBOX,PDDocument.load,Bug,CLOSED,Major,Invalid,1.8.4,None,None,None,,"Good day! I have one problem with the PDF-box application 1.8.4. Use in java-applet. On code "PDDocument.load" Antivirus blocks and nothing happens, no exceptions or other events. When I disable the antivirus, then all is well.
This code:
import org.apache.pdfbox.io.*;
import org.apache.pdfbox.io.RandomAccessFile;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPageable;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.standard.MediaSizeName;
import javax.print.attribute.standard.OrientationRequested;
import java.applet.Applet;
import java.awt.*;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.*;
import java.net.URL;
public class Print extends Applet {
private boolean containsFile(File dir, String fileName) {
for (String childFileName : dir.list()) {
if (childFileName.equals(fileName))
{ return true; }
}
return false;
}
public void init() {
try {
PrinterJob job = PrinterJob.getPrinterJob();
PDDocument document = null;
try {
if (getParameter("file") != null && !getParameter("file").equals("")) {
String file1 = getParameter("file");
if (getParameter("url") == null || getParameter("url").equals("1") ) {
if (getParameter("login") != null && !getParameter("login").equals(""))
{ file1 += "&login="+getParameter("login"); }
if (getParameter("pass") != null && !getParameter("pass").equals(""))
{ file1 += "&pass="+getParameter("pass"); }
URL url = new URL(file1);
File home = new File(System.getProperty("user.home"));
File dir = new File(home, "Print");
if (!dir.exists())
{ dir.mkdir(); }
int number = 0;
while (containsFile(dir, "Print" + number + ".pdf"))
{ number++; }
File file = new File(dir, "Print" + number + ".pdf");
FileOutputStream writer = new FileOutputStream(file);
InputStream is = url.openStream();
int read = 0;
byte[] bytes = new byte[1024];
while ((read = is.read(bytes)) != -1)
{ writer.write(bytes, 0, read); }
writer.close();
file = new File(dir, "Print" + number + ".pdf");
document = PDDocument.load(file);
} else
{ document = PDDocument.load(file1); }
} else
{ document = PDDocument.load(file); }
} catch (IOException e)
{ e.printStackTrace(); }
try { job.setPageable(new PDPageable(document, job)); } catch (PrinterException e) { e.printStackTrace(); }
job.setJobName("Print envelope");
HashPrintRequestAttributeSet psettings = new HashPrintRequestAttributeSet();
psettings.add(OrientationRequested.LANDSCAPE);
if (getParameter("type") != null) {
if (getParameter("type").equalsIgnoreCase("DL"))
{ psettings.add(MediaSizeName.ISO_DESIGNATED_LONG); }
else if (getParameter("type").equalsIgnoreCase("C4"))
{ psettings.add(MediaSizeName.ISO_C4); }
else if (getParameter("type").equalsIgnoreCase("C5"))
{ psettings.add(MediaSizeName.ISO_C5); }
else if (getParameter("type").equalsIgnoreCase("C6"))
{ psettings.add(MediaSizeName.ISO_C6); }
} else
{ psettings.add(MediaSizeName.ISO_A4); }
if (job.printDialog(psettings)) {
try
{ job.print(psettings); }
catch (PrinterException e) {
}
}
} catch (Exception ex) {
}
}
}",0,"Andreas Lehmkühler",Poplavsky,0,3,"14/Feb/14 12:38","18/Feb/14 06:27","18/Feb/14 06:27"
PDFBOX-1922,PDFBOX,"NonSequentialParser not reading version in header and trailer",Bug,CLOSED,Minor,Fixed,"1.8.4, (3)","1.8.6, 2.0.0",Parsing,None,,"On older pdf files, the NonSequentialParser returns a different PDFVersion than the traditional parser via the call: document.getDocument().getVersion().
I think this is because NonSequentialParser is not reading the header but relying on the default 1.4 if no version is found in the trailer.
Many apologies if this is a duplicate. I feel like I've seen this issue elsewhere, but I can't track it down.",0,"Tilman Hausherr","Tim Allison",0,5,"15/Feb/14 04:37","22/Jun/14 14:34","27/May/14 13:55"
PDFBOX-1924,PDFBOX,"Gouraud shading: detect empty triangles",Bug,CLOSED,Minor,Fixed,"1.8.4, 2.0.0","1.8.5, 2.0.0",None,None,,"1) The ch14.pdf file has some empty triangles on p. 20, because two points of the triangle are identical. These empty triangles result in divide by zeroes, which can result in black raster coloring of a whole page at resolutions that I didn't use before.
Bugfix: detect and delete empty triangles, and added code to detect an empty list and no background in GouraudShadingContext.getRaster().
2) One statement (raster.setPixels) in GouraudShadingContext was accidentally moved one line up in the past which could result in lower performance.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Feb/14 17:24","02/May/14 06:12","17/Feb/14 17:56"
PDFBOX-1925,PDFBOX,"DeviceCMYK Colorspace: PDFToImage gives wrong output",Bug,CLOSED,Major,Fixed,None,2.0.0,Rendering,None,,"The attached example does not produce the correct output. Tested with current trunk.",0,"John Hewson","Luis Bernardo",0,2,"18/Feb/14 13:24","17/Mar/16 19:07","20/Feb/14 17:27"
PDFBOX-1927,PDFBOX,"ClassCastException: COSInteger cannot be cast to COSObject",Bug,CLOSED,Critical,"Not A Problem",1.8.4,None,Parsing,None,"windows 7","Calling PDDocument.load("myPDF.pdf") throws ClassCastException.
I will attach a short sample program and PDF.
2014-02-19 14:01:11,220 WARN [org.apache.pdfbox.pdfparser.BaseParser] (main) Invalid dictionary, found: '?' but expected: '/'
Exception in thread "main" org.apache.pdfbox.exceptions.WrappedIOException
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:263)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1238)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1203)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1128)
at com.biosignia.framework.functionalTests.webServices.TestPDFBox.main(TestPDFBox.java:12)
Caused by: java.lang.ClassCastException: org.apache.pdfbox.cos.COSInteger cannot be cast to org.apache.pdfbox.cos.COSObject
at org.apache.pdfbox.pdfparser.PDFParser.readVersionInTrailer(PDFParser.java:859)
at org.apache.pdfbox.pdfparser.PDFParser.parseTrailer(PDFParser.java:845)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:502)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:194)
... 4 more
{code>",0,"Andreas Lehmkühler",CP,0,4,"19/Feb/14 19:20","13/Oct/14 20:18","13/Oct/14 20:18"
PDFBOX-1928,PDFBOX,"PDResources.getFonts() and PDresources.getXObjects() change underlying COSDictionary",Bug,CLOSED,Major,Fixed,"1.8.3, 1.8.4",2.0.0,PDModel,Breaking-Change,,"The methods getFonts() and getXObjects() in PDResources change the underlying COSDictionary.",0,"John Hewson","Dominic Tubach",0,3,"20/Feb/14 14:19","17/Mar/16 19:08","24/Feb/14 03:31"
PDFBOX-1931,PDFBOX,"Radial shading is missing",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,"shading shadingpatte",,"The attached file contains a radial shading fill which is missing. RadialShadingContext#calculateInputValues is returning NaN which seems to be incorrect.",0,"Tilman Hausherr","John Hewson",1,2,"21/Feb/14 08:56","17/Mar/16 19:06","06/Mar/14 17:08"
PDFBOX-1934,PDFBOX,"converttoimage error and part of the pdf is not rendered",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"And on source.pdf
java.lang.ClassCastException: org.apache.pdfbox.cos.COSArray cannot be cast to org.apache.pdfbox.cos.COSStream
at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask(PDImageXObject.java:255)
at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage(PDImageXObject.java:154)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:84)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:532)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:260)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:227)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:209)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:144)
at org.apache.pdfbox.util.RenderUtil.renderPage(RenderUtil.java:225)
at org.apache.pdfbox.util.RenderUtil.convertToImage(RenderUtil.java:190)
at main.java.output2jpg.pdf2img(output2jpg.java:270)
at main.java.output2jpg.main(output2jpg.java:116)
feb 22, 2014 11:02:01 AM org.apache.pdfbox.util.operator.pagedrawer.Invoke process",0,"John Hewson","lieven vanlerberghe",0,3,"22/Feb/14 13:29","17/Mar/16 19:08","24/Feb/14 02:57"
PDFBOX-1939,PDFBOX,"Store all stroke information in the graphics state",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"Recently PDFBOX-1917 has fixed an issue with how the current AWT stroke is calculated. This prompted me to look at the file from PDFBOX-1094 which contains separate stroking errors. This led to the identification of a problem: the BasicStroke is being used to keep track of the stroke state, rather than using the information from the graphics state. This fails when the graphics state is modified e.g. Save/Restore and the BasicStroke in PageDrawer is not correspondingly updated.
Having looked at the code, it seems that this is a long-standing issue. The solution is to remove the BasicStroke variable from PageDrawer and to calculate it each time it is needed, using only the information stored in the graphics state. The following classes which directly modify the BasicStroke can be removed:
pagedrawer.SetLineCapStyle
pagedrawer.SetLineDashPattern
pagedrawer.SetLineJoinStyle
pagedrawer.SetLineMiterLimit
pagedrawer.SetLineWidth",0,"John Hewson","John Hewson",0,2,"25/Feb/14 06:30","17/Mar/16 19:26","25/Feb/14 06:32"
PDFBOX-194,PDFBOX,"PDPageXYZDestination jumps one page too far",Bug,CLOSED,Minor,"Cannot Reproduce",0.7.0,None,PDModel,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1549236
Originally submitted by nobody on 2006-08-30 05:05.
When using PDPageXYZDestination with zoom -1, top 0 and
left 0 (other valeus, too) it jumps one page further
than it should.
This also means that PDPageXYZDestination can't jump to
the first page",0,"Tilman Hausherr",Anonymous,0,2,"30/Aug/06 12:05","05/Feb/15 12:17","05/Feb/15 12:17"
PDFBOX-1940,PDFBOX,"Faulty pdf->image rendering",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Rendering,None,,"A particular PDF is producing improper output jpg.
The pdf in question, as well as the produced jpg can be found attached to this issue.",0,"Tilman Hausherr","Daniel Kozimor",0,3,"25/Feb/14 15:53","19/Sep/14 14:40","22/Jun/14 16:33"
PDFBOX-1941,PDFBOX,"Refactor PageDrawer operators",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Rendering,None,,"Clean up the code in org.apache.pdfbox.util.operator.pagedrawer.*. Formatting, JavaDoc, etc.
Make sure that no classes in org.apache.pdfbox.util.operator.pagedrawer.* swallow exceptions, except for Invoke.
Remove setLinePath from PageDrawer which is only used for combined stroke + fill. Replace it with a new strokeAndFillPath(...) method.",0,"John Hewson","John Hewson",0,1,"25/Feb/14 20:56","17/Mar/16 19:08","25/Feb/14 21:10"
PDFBOX-1943,PDFBOX,"Move pdfbox-tools to its own package",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Utilities,None,,"Now that the tools live in their own module, pdfbox-tools, we should change the namespace for these classes from org.apache.pdfbox to org.apache.pdfbox.tools",0,"John Hewson","John Hewson",0,1,"25/Feb/14 21:55","17/Mar/16 19:06","26/Feb/14 08:10"
PDFBOX-1950,PDFBOX,"Inline image mask does not mask",Bug,CLOSED,Major,Fixed,"1.8.4, 2.0.0",2.0.0,Rendering,mask,,"The attached pdf has an inline image that looks like a "G" and only the black color should render on the colored background. However there is some white within the image instead of the background, despite having "/IM true" within BI and EI.",0,"John Hewson","Tilman Hausherr",0,2,"26/Feb/14 16:37","17/Mar/16 19:07","26/Feb/14 21:20"
PDFBOX-1953,PDFBOX,"java.lang.IllegalArgumentException in SampledImageReader.getRGBImage()",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"The file from PDFBOX-1207 has the above exception when calling readbits() on page 21 and others. Note that it must be opened with load() and not with loadNonSeq().
Its also unclear whether the exception is a caused by the broken PDF or if it is a real bug.",0,"John Hewson","Tilman Hausherr",0,2,"28/Feb/14 14:17","17/Mar/16 19:07","23/Mar/14 01:05"
PDFBOX-1954,PDFBOX,"Regression: Some lines are too small / too long",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,regression,,"The attached images have differences in line thickness / length. The vattenfall file had this problem before, it was solved in PDFBOX-1830.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/Feb/14 14:29","17/Mar/16 19:07","22/Mar/14 14:34"
PDFBOX-1955,PDFBOX,"Regression: Colors much lighter",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,regression,,"The colors in the file from PDFBOX-1288 is now much lighter than before.",0,"John Hewson","Tilman Hausherr",0,2,"28/Feb/14 14:31","17/Mar/16 19:08","22/Mar/14 21:02"
PDFBOX-1958,PDFBOX,"image mask outline with shading pattern is invisible",Bug,CLOSED,Major,Fixed,2.0.0,"2.0.5, (1)",Rendering,"Stencil mask shading",,"This is also somewhat of a regression: two weeks ago, the attached file had the image rendered in b/w, now it is invisible. I was able to get the image in another (wrong) color by changing one line in BeginInlineImage.java, the one with TODO to
awtImage = image.getStencilImage(colorSpace.toPaint(color, image.getHeight())); // <--- TODO: pass page height?",0,"Tilman Hausherr","Tilman Hausherr",0,3,"03/Mar/14 06:31","25/Mar/17 18:12","24/Jan/17 16:51"
PDFBOX-1961,PDFBOX,"Page with annotations renders fine with 1.8 but not with 2.0",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,"Annotations regressi",,"Page 2 of the attached PDF (from a ghostscript installation) renders fine with 1.8 but not with 2.0. The other pages are not rendered properly with any version.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"05/Mar/14 19:02","17/Mar/16 19:07","15/Jul/14 16:05"
PDFBOX-1963,PDFBOX,"PDFImageWriter doesn't make use of PDFStreamEngine",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"PDFImageWriter is a subclass of PDFStreamEngine, however it never uses any of its functionality, the writeImage methods could be marked as static and behave in the same manner.
The relationship between PDFImageWriter, RenderUtil, and ImageIOUtil no longer matches its historical origins and needs to be refactored.",0,"John Hewson","John Hewson",0,2,"05/Mar/14 20:50","17/Mar/16 19:07","11/Mar/14 19:35"
PDFBOX-1965,PDFBOX,"NPE in NonSequentialPDFParser when parseMinimal property is set to true",Bug,CLOSED,Major,Fixed,"1.8.4, 1.8.5, 2.0.0","1.8.9, 2.0.0",Parsing,None,,"When the parseMinimal system property is set to true, indirect objects are not followed when the PDF is parsed. That causes the following NPE:
java.lang.NullPointerException
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseDictObjects(NonSequentialPDFParser.java:1082)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.getPage(NonSequentialPDFParser.java:928)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:749)",0,"Andreas Lehmkühler","Stefan Magnus Landrø",2,5,"07/Mar/14 13:24","28/Mar/15 14:10","24/Jan/15 17:04"
PDFBOX-1966,PDFBOX,"Type 1, 4 and 5 shadings for shFill()",Bug,CLOSED,Minor,Fixed,"1.8.4, 2.0.0","1.8.5, 2.0.0",Rendering,"shading shadingpatte",,"I found two images that didn't render properly. The reason is that the appropriate code was missing in shFill() (the code is there for axial and radial shading). I will fix this.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"07/Mar/14 19:24","02/May/14 06:12","09/Mar/14 10:32"
PDFBOX-197,PDFBOX,"extractimages example doesn't work correctly",Bug,CLOSED,Minor,"Cannot Reproduce",None,None,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1558429
Originally submitted by pergi on 2006-09-14 01:22.
the process never enter in the second while
while( iter.hasNext() )
{
PDPage page = (PDPage)iter.next();
PDResources resources = page.getResources();
Map images = resources.getImages();
if( images != null )
{
Iterator imageIter = images.keySet().iterator();
while( imageIter.hasNext() )
{
String key = (String)imageIter.next();
PDXObjectImage image = (PDXObjectImage)images.get(
key );
String name = getUniqueFileName( key, image.getSuffix
() );
System.out.println( "Writing image:" + name );
image.write2file( name );
}
}
}
ps: attached is an example file
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1558429&file_id=193486
regolamento2005pisa.pdf (application/pdf), 60535 bytes",0,"Andreas Lehmkühler",Anonymous,0,1,"14/Sep/06 08:22","14/Mar/13 19:43","14/Mar/13 19:43"
PDFBOX-1973,PDFBOX,"Exception Refactoring (Don't wrap Exceptions with COSVisitorException)",Improvement,CLOSED,Minor,Fixed,None,2.0.0,None,None,,"COSVisitorException is redundant, it is a simple wrapper for SignatureException, CryptographyException and NoSuchAlgorithmException and should be replaced by those exceptions directly.
For example, we can replace:
public void write(PDDocument doc) throws COSVisitorException
With:
public void write(PDDocument doc) throws IOException, CryptographyException
and so on...",0,"John Hewson","John Hewson",0,1,"11/Mar/14 05:30","17/Mar/16 19:08","27/May/14 07:25"
PDFBOX-1975,PDFBOX,"Improve TestImageIOUtils unit tests to check image resolution and compression",Task,CLOSED,Minor,Fixed,"1.8.5, 2.0.0","1.8.5, 2.0.0",Utilities,"imageio test tiff",,"Because of the problems with recent changes (see PDFBOX-1963), I will improve the unit tests so that image resolution and compression is checked.
I found out that JPEGs don't have a resolution, BMP had the wrong resolution. The fault wasn't in the java TIFF writer as I thought before, it is in the java PNG writer, which uses the PixelSize values wrongly, i.e. it interprets them as "pixels per mm" instead of "mm per pixel" as per specification. The JPEG writer throws an exception "JFIF APP0 must be first marker after SOI". The BMP writer can set the resolution, but the BMP reader doesn't read it.
(Some of this might be different depending on the version)",0,"Tilman Hausherr","Tilman Hausherr",1,3,"11/Mar/14 17:10","02/May/14 06:12","20/Mar/14 07:32"
PDFBOX-1977,PDFBOX,"LZWFilter fails",Bug,CLOSED,Major,Fixed,"1.8.5, 2.0.0","1.8.5, 2.0.0",None,LZW,,"TestFilters uses Random().nextLong() to generate a seed for random data, which means that it is non-determinate. Depending on the seed value, the test may fail or succeed.
Using the following seed results in the LZW filter failing:
final long seed = -6257105096642706464L;",0,"Tilman Hausherr","John Hewson",0,4,"12/Mar/14 05:30","02/May/14 06:12","18/Apr/14 14:15"
PDFBOX-1978,PDFBOX,"Type1FontUtilTest is non-deterministic",Bug,CLOSED,Minor,Fixed,"1.8.7, 2.0.0",2.0.0,FontBox,None,,"Type1FontUtilTest uses java.util.Random to generate random test data, which means that it is is non-deterministic.
As discussed in PDFBOX-1977, we should alter this test to make sure that it has deterministic (regression test) functionality as well as the existing non-deterministic (fuzz test) functionality.",0,"Tilman Hausherr","John Hewson",0,2,"12/Mar/14 05:37","17/Mar/16 19:07","05/Feb/15 19:27"
PDFBOX-1979,PDFBOX,"TypeTestingHelper is non-deterministic",Bug,CLOSED,Minor,Fixed,"1.8.7, 2.0.0",2.0.0,XmpBox,None,,"TypeTestingHelper generates random calendar data and random UUIDs for testing, which means that it is non-deterministic.
As discussed in PDFBOX-1977, we should alter this test to make sure that it has deterministic (regression test) functionality as well as the existing non-deterministic (fuzz test) functionality.",0,"Guillaume Bailleul","John Hewson",0,5,"12/Mar/14 05:40","17/Mar/16 19:08","31/Jan/15 19:02"
PDFBOX-1980,PDFBOX,"TestCOSFloat is non-deterministic",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"TestCOSFloat generates random numbers for testing which means that it is non-deterministic.
Testing COSFloat on random data doesn't achieve much, because we know what numbers look like. Even taking into account the discussion in PDFBOX-1977, I suggest that it would be better to create a set of representative data with interesting edge-cases.",0,"Tilman Hausherr","John Hewson",0,3,"12/Mar/14 05:48","17/Mar/16 19:07","04/Feb/15 20:18"
PDFBOX-1981,PDFBOX,"CryptographyException for file that isn't encrypted",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,regression,,"I get this with the attached file:
Exception in file: rennie-fresh-gebrauchsinformation.pdf
java.io.IOException: Error (CryptographyException) while creating security handler for decryption: The supplied password does not match either the owner or user password in the document
12.03.2014 20:44:06.063 ERROR [main] org.apache.pdfbox.pdfparser.NonSequentialPDFParser:1888 - Can't find the object xref at offset 4543
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:444)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:741)
at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1152)
at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1135)
at pdfboxpageimageextraction.ExtractImages.doPdf(ExtractImages.java:203)
at pdfboxpageimageextraction.ExtractImages.main(ExtractImages.java:86)
This didn't happen ~ 2 weeks ago, so I suspect its a regression.",0,"John Hewson","Tilman Hausherr",0,2,"12/Mar/14 19:47","17/Mar/16 19:07","12/Mar/14 21:24"
PDFBOX-1982,PDFBOX,"Standardise AcroForm Fields",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,None,,"While working on adding the patch in PDFBOX-1847 I noticed that the digital signature form field, PDSignature is deprecated, having been replaced by PDSignatureField.
Currently some aspects of the fields do not correspond with the PDF specification, in particular the hierarchy of the fields and their naming. There are currently 43 open issues for the AcroForm component and no issues have been closed since 2011, so I've attempted some basic refactoring to give us a clean slate for adding new features and fixing old bugs.
Here's the current hierarchy of fields in PDFBox:
PDField
PDChoiceButton
PDCheckbox
PDRadioCollection
PDPushButton
PDVariableText
PDChoiceField
PDTextbox
PDSignatureField
PDUnknownField
And here's the actual hierarchy from the PDF specification:
Field
Button
Check Box
Radio Button
Pushbutton
Text
Choice
List Box
Combo Box
Signature
Note that PDPushButton and PDTextbox are in the wrong place in the hierarchy and List Box and Combo Box are missing.",0,"John Hewson","John Hewson",0,1,"13/Mar/14 06:09","17/Mar/16 19:07","13/Mar/14 06:38"
PDFBOX-1983,PDFBOX,"Unable to add TIF images, CCITTFactory not working",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"As used in the AddImageToPDF example, the following line generates an error with tif image:
PDImageXObject ximage = CCITTFactory.createFromRandomAccess(document, new RandomAccessFile(new File(imagePath), "r"));
java.io.IOException: Stream was not read
at org.apache.pdfbox.cos.COSStream.getDecodeResult(COSStream.java:235)
at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.<init>(PDImageXObject.java:80)
at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.<init>(PDImageXObject.java:70)
at org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory.createFromRandomAccess(CCITTFactory.java:50)",0,"Tilman Hausherr","Joel Kääpä",0,3,"13/Mar/14 07:51","17/Mar/16 19:07","13/Mar/14 16:45"
PDFBOX-1984,PDFBOX,"PDFont documentation correction needed for getFontWidth and getFontHeight",Bug,CLOSED,Minor,Fixed,"1.8.4, 2.0.0","1.8.5, 2.0.0",Documentation,None,,"Andy posted this on the dev mailing list:
I can see inside the PDFont documentation for 1.8.4 and 1.8.3 there seems
to be a bit of a typo perhaps on one of the methods. The getFontWidth
method seems to be the documentation for getFontHeight.
https://pdfbox.apache.org/docs/1.8.4/javadocs/org/apache/pdfbox/pdmodel/font/PDFont.html",0,"Tilman Hausherr","Tilman Hausherr",0,3,"13/Mar/14 18:11","02/May/14 06:12","13/Mar/14 18:17"
PDFBOX-1989,PDFBOX,"Save LZW and other encoded PDImageXObject resources",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"The "logo" image of the file from PDFBOX-1147.png isn't extracted because PDImageXObject.getSuffix() returns null. Changing getSuffix() so that it returns png brings us a correct file.
With some other images, e.g. the raw_image_demo.pdf file, getSuffix() brings an NPE when getPDStream().getFilters() returns null. This happens with images that are uncompressed. Returning "png" for this case also brings us a nice image.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Mar/14 17:34","17/Mar/16 19:07","17/Mar/14 17:43"
PDFBOX-199,PDFBOX,"Tiff image problems",Bug,CLOSED,Minor,Duplicate,None,None,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1559168
Originally submitted by wolf12 on 2006-09-15 02:02.
Hi everyone!!!
PDFBox doesn't write tiff images propertly.
In tiff documentation there are many fields that are
not suported by this library.
1. DPI (XResolution, YResolution, ResoulutionUnit)
XResolution and YResolution IFDFields are hardcoded
(300 dpi value for both), ResolutionUnit is not even
taken into account. User is forced to write those
values by hisself.
2. FillOrder
It is a logical order of bits within a byte (ref.
TIFF6.pdf document page 32). In PDFBox this entry is
allways 1 (because of lack it in library this field has
default value 1 - available are 1 and 2). The efect of
this is that the data is not properly recognized by pdf
viewers - error shown:
"No sufficient data for the image".
Here is code for creating pdf page with tiff image:
1. >>>>>>>>>>> create COSDictionary <<<<<<<<<<<
IFDEntry columns =
ifd.directoryEntries.get(IFDName.ImageWidth);
IFDEntry rows =
ifd.directoryEntries.get(IFDName.ImageLength);
IFDEntry t4compression =
ifd.directoryEntries.get(IFDName.Compression);
IFDEntry blackIs1 =
ifd.directoryEntries.get(IFDName.PhotometricInterpretation);
IFDEntry t42d =
ifd.directoryEntries.get(IFDName.T4Options);
int k = -1000;
if (t4compression != null)
{
if (t4compression.getValue() == 4)
{ k = -1; }
if (t4compression.getValue() == 3)
{ k = 0; }
}
if (t42d != null && t42d.getValue() == 1)
{ k = 50; }
if (k == -1000)
{ throw new IOException("First image in tiff is not CCITT T4 or T6 compressed"); }
boolean bi1 = (blackIs1.getValue() == 1) ? true : false;
cosDictParms.setInt(COLUMNS, columns.getValue());
cosDictParms.setInt(ROWS, rows.getValue());
if (bi1)
{ cosDictParms.setBoolean("BlackIs1", true); }
cosDictParms.setInt("K", k);
cosDictParms.setFloat("XRes", this.getXRes());
cosDictParms.setFloat("YRes", this.getYRes());
this.checkCOSDictionary = true;
2. >>>>>>>>>>> create PDStream <<<<<<<<<<<
PDStream stream = new PDStream(doc);
COSStream dic = stream.getStream();
COSDictionary decodeParms =
tiffImage.getCosDictionaryParams();
OutputStream os = null;
try
{ os = dic.createFilteredStream(); os.write(tiffImage.getStripsByte()); }
finally
{
try
{
if (os != null)
{ os.close(); }
}
catch (IOException e)
{ // ignore error }
}
dic.setItem(COSName.FILTER, COSName.CCITTFAX_DECODE);
dic.setItem(COSName.SUBTYPE, COSName.IMAGE);
dic.setItem(COSName.TYPE, COSName.getPDFName("XObject"));
dic.setItem("DecodeParms", decodeParms);
3. >>>>>>>>>>> create PDXObjectImage <<<<<<<<<<<
COSDictionary decodeParms =
tiffImage.getCosDictionaryParams();
PDCcitt ccitt = new PDCcitt(stream);
ccitt.setBitsPerComponent(1);
ccitt.setColorSpace(new PDDeviceGray());
ccitt.setWidth(decodeParms.getInt(TiffImage.COLUMNS));
ccitt.setHeight(decodeParms.getInt(TiffImage.ROWS));
4. >>>>>>>>>> create pdf page with image <<<<<<<<<
PDPageContentStream contentStream = new
PDPageContentStream(document, page);
PDFPageImageFormat pdfFormat =
PDFPageImageFormat.newPDFPageImageFormat(0, 0,
PDFPageImageFormat.FIT_TO_IMAGE, imageObject);
page.setMediaBox(new
PDRectangle(tiffImage.getOryginalWidth(),
tiffImage.getOryginalHeight()));
contentStream.drawImage(imageObject,
pdfFormat.getX(), pdfFormat.getY(),
(int)tiffImage.getOryginalWidth(),/pdfFormat.getWidth(),/
(int)tiffImage.getOryginalHeight()/pdfFormat.getHeight()/);
bos.write(tiffImage.toByteArray());
>>>>>>>>>>>>> end source code <<<<<<<<<
I cannot attach any example of pdf file because of
security.
I have my own tiff wraper which reads also multipage
tiff image.",0,"Jukka Zitting",Anonymous,0,0,"15/Sep/06 09:02","21/Oct/09 10:01","30/Dec/08 16:39"
PDFBOX-1993,PDFBOX,"Gray color images much lighter",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,Rendering,None,,"In testCreateLosslessFromImageRGB() I create a grayscale image, and in LosslessFactory.createFromImage() I save it as a grayscale image (that part is currently disabled, search and enable the part with BufferedImage.TYPE_BYTE_GRAY. When this is enabled, testCreateLosslessFromImageRGB() fails the identity test. The expected and the actual images are attached. I traced this effect to PDColorSpace.toRGBImageAWT(), where I saved the "src" and the "dest" image and got two different ones. But even the first one is already different to the grayscale image I created in the test.
The two attached file pairs were created by writing the BufferedImage src and dst in PDColorSpace.toRGBImageAWT().",0,"John Hewson","Tilman Hausherr",0,2,"21/Mar/14 17:46","17/Mar/16 19:08","23/Mar/14 04:33"
PDFBOX-1994,PDFBOX,"PDDocument.load(filename.pdf) hangs for pdf files having size",Bug,CLOSED,Major,"Not A Problem",1.8.4,None,None,None,,"The below code i am using for loading my pdf. but my pdf file is not a zero sized files and having full permission and it is not a corrupt file also. but i ddint get any error after code. it just hangs.
it is working in local, but not working in server .
(created ,jar files and then exe, then the .exe will excuted in the server)
java using 1,4
PDDocument pdf=PDDocument.load("d:
filename.pdf");
pdf.print();
please provide me why the same code is not working in server.",0,"Andreas Lehmkühler",brijesh,0,4,"21/Mar/14 18:30","15/May/14 10:24","15/May/14 10:24"
PDFBOX-1995,PDFBOX,"AdobePDFSchema.getProducer() returns empty string",Bug,CLOSED,Major,Fixed,1.8.4,"1.8.12, 2.0.0",XmpBox,None,,"I experienced this bug while PDF/A validation process. The document is not considered valid because the producer value is not in sync with PDDocumentInformation.
PDDocumentInformation.getProducer() = ` ' (one space)
AdobePDFSchema.getProducer() = `' (empty)
Below the metadata extracted from the PDF document:
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/">
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<rdf:Description rdf:about="" xmlns:xap="http://ns.adobe.com/xap/1.0/">
<xap:CreatorTool>Canon </xap:CreatorTool>
<xap:CreateDate>2014-01-23T20:09:45+01:00</xap:CreateDate>
</rdf:Description>
<rdf:Description rdf:about="" xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
<pdf:Producer> </pdf:Producer>
</rdf:Description>
<rdf:Description rdf:about="" xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/">
<pdfaid:part>1</pdfaid:part>
<pdfaid:conformance>B</pdfaid:conformance>
</rdf:Description>
</rdf:RDF>
</x:xmpmeta>
<?xpacket end="w"?>
As you can see the Producer value should be equal to ` ' (one space).
The bug is located within the method DomXmpParser.removeComments. This method is invoked during the unmarshalling process and removes much more than comments, text nodes too!
I can fix (badly) MY issue by changing the code base from :
Text t = (Text) node;
if (t.getTextContent().trim().length() == 0)
Unknown macro: { // XXX is there a better way to remove useless Text ? node.getParentNode().removeChild(node); }
into :
Text t = (Text) node;
if (t.getTextContent().startsWith("\n"))
Unknown macro: { // XXX is there a better way to remove useless Text ? node.getParentNode().removeChild(node); }
But this is not a long term fix.
IMHO, the unmarshalling process should be reworked.",0,"Guillaume Bailleul","Alexandre Garino",0,4,"22/Mar/14 13:11","17/Mar/16 19:08","20/Jun/14 20:59"
PDFBOX-1997,PDFBOX,"CIE LAB item missing in rendering",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,"CIELAB regression",,"The file from PDFBOX-1681 is missing the "CIELAB" output, it was there a few weeks ago.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Mar/14 17:36","17/Mar/16 19:07","04/Jul/14 06:06"
PDFBOX-2,PDFBOX,"Migrate PDFBox sources to Apache",Task,CLOSED,Major,Fixed,None,None,None,None,,"We should migrate the latest PDFBox sources from SourceForge to Apache.",0,"Jukka Zitting","Jukka Zitting",1,1,"13/Mar/08 22:25","21/Oct/09 10:03","04/Aug/08 17:12"
PDFBOX-20,PDFBOX,"Implement File Specification","New Feature",CLOSED,,Fixed,None,0.8.0-incubator,PDModel,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1035196
Originally submitted by benlitchfield on 2004-09-26 16:09.
org.pdfbox.pdmodel.common.filespecification has been
created but not implemented.
See PDF Reference 1.5 section 3.10 for File Specification
Details.",0,"Andreas Lehmkühler",Anonymous,0,1,"26/Sep/04 23:09","02/Mar/13 14:57","02/Mar/13 14:57"
PDFBOX-2001,PDFBOX,"Digital Signature information (parser bug?)",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,"Annotations Signatur",,"We have a signed PDF but signature is described without key "Sig".
As you can see in the standard PDF 32000-1:2008 - Table 252 - Entries in a signature dictionary, this key is optional :
"(Optional) The type of PDF object that this dictionary describes; if present, shall be Sig for a signature dictionary. "
But PDFBox seems to limit its research of signature only if this key "Sig" is present.
What is your position about that?",0,"Andreas Lehmkühler","Nicolas Kaczmarski",0,8,"26/Mar/14 09:16","13/Dec/14 14:14","18/Nov/14 10:34"
PDFBOX-2002,PDFBOX,"Show deprecation in the build / fix deprecated calls / delete longtime deprecated stuff",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"According to
https://pdfbox.apache.org/ideas.html
one of the tasks is "Remove all deprecated methods". Therefore, I will modify the parent POM to show the deprecated calls. This will show such calls, but not fail the build. It is a gentle hint to fix these calls. Lets leave this issue open until all is done.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"26/Mar/14 18:22","17/Mar/16 19:08","03/Feb/15 21:26"
PDFBOX-2003,PDFBOX,"Merging PDFs with interactive forms produces incorrect result",Bug,CLOSED,Major,Fixed,1.8.4,2.0.0,"AcroForm, (1)",PDFMergerUtility,,"When merging a PDF with form fields (page2.pdf) to a PDF generated via FOP (page1.pdf), the form fields of page2.pdf are not shown in the result in Acrobat Reader.
When merging page2.pdf twice, the form fields are not shown for the first occurrence but are shown for the second occurrence.
When merging page2.pdf with a PDF created by MS Word, the problem is not reproducible.
Command line to reproduce the problem:
java -classpath pdfbox-app-1.8.4.jar org.apache.pdfbox.PDFMerger page1.pdf page2.pdf page2.pdf result.pdf",0,"Maruan Sahyoun","Gerhard Temper",0,4,"27/Mar/14 15:26","31/Jan/17 10:58","30/Jan/17 11:05"
PDFBOX-2004,PDFBOX,"PDF2Image hangs/loops forever processing PDF",Bug,CLOSED,Major,Duplicate,1.8.4,1.8.5,Rendering,None,"windows 7, java 1.7, linux","When the attached PDF file is rendered to a JPG image it causes PDFBox to loop forever.
The problem is easily produced using the PDFBox example org.apache.pdfbox.PDF2Image with the following command line options:-
imageType jpg -outputPrefix OUT Hang.pdf
The fault is new to 1.8.4. As a workaround, we are using 1.8.3 which does not suffer.
We have found many such files and have identified this one as I can share it publicly.",0,"Andreas Lehmkühler","Ed Sawdon",0,3,"27/Mar/14 16:55","17/Apr/14 08:10","17/Apr/14 08:06"
PDFBOX-201,PDFBOX,"Bad file descriptor while saving a document w. imported PDFs",Bug,CLOSED,Minor,"Cannot Reproduce",None,None,Writing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1563263
Originally submitted by nobody on 2006-09-21 19:05.
I believe I've found an error on PDFBox, or at least a
non-standard behavior.
I have a PDF Document I create with PDFBox and then
start importing other PDFs onto it, something like
for every PDF in PDFLIST
mainPdf.import(PDF)
PDF.close
I can have hundreds of PDFs being imported to the main
document.
The thing is that when saving the main Document I
sometimes get the Bad File Descriptor error.
To fix it I had to do something ugly like:
for every PDF in PDFLIST
mainPdf.import(PDF)
toBeErasedPDF.add(PDF)
...
mainPdf.save(..)
mainPdf.close()
for every PDF in toBeErasedPDF
PDF.close
in this way the error goes away but
A) it took me a whole lot of time to realize this
B) I am maintaining in memory lots of unused objects
that could have been GC'd.
Still, this problem does not always arise.
I am attaching two different FO's (correct.fo.xml and
incorrect.fo.xml), where the first one does not show
this error, and the second one does. I am not attaching
code because I am not allowed to, but the idea is to
convert those documents to PDF and add them to the main
PDF document, separately.
I really do not know what is causing the problem in one
doc and not in the other.
BTW I am using version 0.7.2 (and it also happens in 0.7.1)
PS: It seems that I can only add one file? I'm adding
the incorrect one.
Hope this helps,
Best Regards
AndrÃ©s Bernasconi
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1563263&file_id=194626
incorrect.fo.xml (text/xml), 29948 bytes
This FO causes the error mentioned above
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
Hi AndrÃ©s,
Can you give the nightly build a try
http://www.pdfbox.org/dist
I think another user reported this at one point and if I
remember correctly I couldn't reproduce it, so I think it
might be fixed in CVS.
Give it a try and let me know,
Thanks,
Ben",0,"Andreas Lehmkühler",Anonymous,0,0,"22/Sep/06 02:05","12/Feb/11 19:02","15/Dec/10 20:37"
PDFBOX-2010,PDFBOX,"Please make "protected PDFont getDescendantFont()" public as it is in 2.0.0",Wish,CLOSED,Major,Fixed,1.8.4,1.8.5,PDModel,None,,"Would be great to have this for 1.8.5 inside! Thanks",0,"Tilman Hausherr","Philip Helger",0,4,"02/Apr/14 17:56","02/May/14 06:12","02/Apr/14 18:50"
PDFBOX-2015,PDFBOX,"Hybrid reference pdf still contain XRefStm info in the trailer dictionary afterPDDocument#save",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",PDModel,None,,"Word2010.pdf is the input pdf, I open the document with PDFBOX add a string to the pdf. In this case ‘Hello world!’.
Afterwards I save the pdf.
If I look at the content of the pdf before and after I modified it (using Notepad++) I see this:
Word2010.pdf:
Line 647: <</Size 18/Root 1 0 R/Info 7 0 R/ID[<AE9AF29D5A22AE47B47C4DA29170BE64><AE9AF29D5A22AE47B47C4DA29170BE64>] /Prev 81972/XRefStm 81702>>
modified_Word2010.pdf:
Line 791: /XRefStm 81702
XRefStm is not updated although the original pdf had multiple revisions that were merged into a new pdf document.
A third party library we use defends on this XRefStm value and cannot open the pdf after it was modified. (Stack trace see previous msg)
Any help would be much appreciated.
Maruan:
that’s a bug.
Explanation: The original file uses what’s called a hybrid reference. That’s for compatibility with readers which do not support compressed reference streams. The file generated by PDFBox doesn’t use hybrid references any more but still contains the XRefStm info in the trailer dictionary.
See http://mail-archives.apache.org/mod_mbox/pdfbox-users/201403.mbox/%3C4425DF0D5759D64AA8845AA3EC444E1D014AE30AB3%40EXCHANGE03.unifiedpost.com%3E for more info.",0,"Andreas Lehmkühler","Tim Costermans",0,2,"06/Apr/14 07:17","13/Dec/14 14:15","13/Oct/14 20:38"
PDFBOX-2016,PDFBOX,"Stream parsing still incorrect if length value is wrong",Bug,CLOSED,Major,Fixed,"1.6.0, 1.8.4","1.8.5, 2.0.0",Parsing,None,,"From issue PDFBOX-1333 - "In 1.7.0 stream parsing in BaseParser was optimized to use length value if available. The advantage is faster parsing and independence of 'endstream' bytes sequences in stream. However the disadvantage is that streams with wrong length values cannot be parsed anymore" - etc.
This issue was marked as fixed now that COSStreams can once again be parsed by reading all the way to 'endstream'. However, the resulting COSStream object still contains the expected length, not the true length. When parsing the COSStream with a PDFStreamParser, the call to COSStream#getUnfilteredStream uses getLength() instead of getLengthWritten to limit the amount of data that can be read. This can truncate the stream and means that incorrect length values still lead to missing data, and so limits the usefulness of the last fix. Changing the call to getLengthWritten should solve the problem.",0,"Tilman Hausherr","Andrew Olsen",0,3,"07/Apr/14 09:56","28/Aug/14 22:22","08/Apr/14 16:58"
PDFBOX-2018,PDFBOX,"Dashed line with incorrect line cap",Bug,CLOSED,Minor,Fixed,1.8.5,1.8.5,Rendering,None,,"The dashed lines of p.9, 10 and 11 of the PDFBOX-1917 file look different in 1.8 and in 2.0. IMHO, they look better in 1.8, however after debugging I found out that 2.0 is correct. I found a place in 1.8 where a BasicStroke object is initialized with "default values", and looking at the java source code it is a square cap, and that is incorrect, it must be a BUTT cap.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Apr/14 15:17","02/May/14 06:12","07/Apr/14 15:22"
PDFBOX-202,PDFBOX,"Error on text extraction: java.lang.IndexOutOfBoundsExceptio",Bug,CLOSED,Minor,Fixed,None,1.5.0,Parsing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1565617
Originally submitted by gagravarr on 2006-09-26 03:30.
I'm trying to extract text from a pdf file
(http://www.cifor.cgiar.org/mla/download/publication/mozambique.pdf),
but I'm getting an IndexOutOfBoundsException on it:
Exception in thread "main"
java.lang.IndexOutOfBoundsException: Index: 4, Size: 4
at
java.util.ArrayList.RangeCheck(ArrayList.java:546)
at java.util.ArrayList.get(ArrayList.java:321)
at
org.pdfbox.util.operator.Concatenate.process(Concatenate.java:69)
at
org.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:494)
at
org.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:207)
at
org.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:160)
at
org.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:355)
at
org.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:268)
at
org.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:220)
at
org.pdfbox.ExtractText.main(ExtractText.java:237)
I've tried with 0.7.2, and 0.7.3-dev-20060920, and I
get the same exception from both versions.
Nick",0,"Adam Nichols",Anonymous,0,0,"26/Sep/06 10:30","04/Mar/11 10:29","28/Dec/10 00:27"
PDFBOX-2020,PDFBOX,"PDF/A Validation raises NullPointerException for PDFs without ImageColorSpace",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Preflight,"pdf/a validation","windows 7, java 1.7","TestCode: Example Code http://pdfbox.apache.org/cookbook/pdfavalidation.html
If i check a PDF without ImageColorSpace the example Code raises the following NullPointerException:
Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.preflight.content.ContentStreamEngine.validImageColorSpace(ContentStreamEngine.java:323)
at org.apache.pdfbox.preflight.content.ContentStreamWrapper.processOperator(ContentStreamWrapper.java:179)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:254)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:221)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:203)
at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validPageContentStream(ContentStreamWrapper.java:76)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateContent(SinglePageValidationProcess.java:180)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:88)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:169)
at PdfBox.main(PdfBox.java:33)
I think the method org.apache.pdfbox.pdmodel.PDResources.getColorSpaces (PDResources.java:311) did not return a object if their is no image color space but the code line org.apache.pdfbox.preflight.content.ContentStreamEngine.validImageColorSpace(ContentStreamEngine.java:323) expects a object in any case.",0,"Tilman Hausherr","Ulrich Wohlfeil",1,5,"08/Apr/14 19:22","19/Sep/14 14:40","29/Jul/14 19:22"
PDFBOX-2021,PDFBOX,"PDFPrinter problem with landscape and rotated pages",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"PDFPrinter does not correctly print landscape or rotated pages, there is code which attempts to do both these things, however the results is wrong. There are three main issues:
the centering code does*not* center the image correctly because it assumes that imageableArea is the Graphics2D origin, but it is actually the page margin size and the Graphics2D origin remains the physical top-left edge of the paper.
auto portrait/landcape is actually sets the imageableArea, so it is actually setting the page margins, instead of the Graphics2D origin. This is actually overwriting the user's desired margins as well as placing the image incorrectly on the page.
the Page dictionary "Rotate" key is not taken into account, so rotated pages appear incorrectly.",0,"John Hewson","John Hewson",0,2,"08/Apr/14 22:59","17/Mar/16 19:07","12/Apr/14 05:49"
PDFBOX-2024,PDFBOX,"/Rotate 180 PDF is not displayed correctly in PDFReader app",Bug,CLOSED,Minor,Fixed,"1.8.4, 1.8.5, 2.0.0","1.8.5, 2.0.0","Swing GUI",None,,"To test PDFBOX-2021 I created a PDF with /Rotate 180. It does not display correctly in the PDFReader app (class PDFPagePanel). The purpose of this issue is to fix this and/or also use Johns new renderPageToGraphics() method per DRY.
I won't do it immediately so if anybody else wants to do it, just assign it to yourself.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"11/Apr/14 16:33","02/May/14 06:12","12/Apr/14 20:52"
PDFBOX-2025,PDFBOX,"Some fonts do not print",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,"windows 7","From the mailing list:
When I try to print the pdf available
here<https://www.dropbox.com/s/bb44l6r6lno4sgt/pdf_fail.pdf> there
are 2 boxes on the second page with text "CV 138" and "D946". both text are
in black boxes. When this is printed out on windows machine the text in the
2 boxes is not there but on a mac its fine. Using pdffonts command it shows
their are 3 fonts Helvetica, Helvetica-Bold and Courier that are not
embedded in the pdf. Could this be causing it?
How do I solve it so the text will be visible in the boxes?
Thank you
Regards
Joseph",0,"John Hewson","John Hewson",0,2,"12/Apr/14 00:23","17/Mar/16 19:38","12/Apr/14 00:26"
PDFBOX-2026,PDFBOX,"cannot load jpg into new pdf",Bug,CLOSED,Major,Fixed,"1.8.4, 1.8.5, 2.0.0","1.8.5, 2.0.0",None,"JPG pdjpeg pdxobject","java 1.7, eclipse","When trying to load jpg, tif or png get error below. Document is created but either gives "out of memory error" or "cannot display image" when document is opened.
Tried: jpg or jpeg
multiple resolutions
compression or no compression
creating a fresh image in gimp
grayscale or rgb
downloading an image from google images
reading data into byte array and using byteinput stream
nothing will allow me to load an image into the doc - all same result as below
Apr 13, 2014 1:50:02 PM org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage getColorSpace
INFO: About to return NULL from unhandled branch. filter = COSName
{DCTDecode}
doc = new PDDocument();
PDPage page = new PDPage();
FileInputStream in = new FileInputStream ("logo.jpg");
DEBUG OUTPUT APPEARS AFTER EXEC OF THIS LINE:
PDXObjectImage img = new PDJpeg (doc, in);
PDPageContentStream cs = new PDPageContentStream(doc, page);
cs.drawImage(img, 72.0f, 720.0f);",0,"Tilman Hausherr","shaun neal",0,3,"13/Apr/14 18:08","02/May/14 06:12","18/Apr/14 13:51"
PDFBOX-2028,PDFBOX,"Convert Page to Image",Bug,CLOSED,Major,Invalid,2.0.0,None,None,None,,"Hi there,
i am missing the convertToImage function for a page.
Is there a new way to handle this task? I am using 2.0.0 because of the awt font optimization.",0,"Andreas Lehmkühler","Stefan Helfert",0,3,"15/Apr/14 12:20","15/Apr/14 15:28","15/Apr/14 15:28"
PDFBOX-2030,PDFBOX,"Using new PDPixelMap() results in black image in PDF",Bug,CLOSED,Major,Fixed,1.8.4,1.8.5,Rendering,None,,"PDPixelMap.createImageStream() makes the assumption that BPC is 8. This is not always correct, and it results in the weird effects described here:
https://stackoverflow.com/questions/15131067/pdfbox-issues-when-creating-pdf-from-bmp
https://stackoverflow.com/questions/19422156/converting-printable-to-pdf
I can confirm this by using GIF files. It happens both with bitonal and color GIF files. I have fixed it by using some of my code from the trunk from LosslessFactory.createFromImage(). That code is slower and longer, but is safer because it avoids making assumptions about the low level data, as in the line with "rgbImage.getData().getDataElements()".
I will also uncomment the "new PDPixelMap" segment in the ImageToPDF examples.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"15/Apr/14 20:52","04/May/14 16:05","15/Apr/14 21:35"
PDFBOX-2031,PDFBOX,"GrayScale images become inverted",Bug,CLOSED,Major,Duplicate,1.8.4,1.8.5,"PDModel, (1)",None,"mac os x","PDPixelMap.getRGBImage() inverts images. After debugging it appears that the inversion happens at the end, in applyMasks(image);
Some more debugging info:
bitsPerComponent == 1
getImageMask() == true
getColorSpace() == PDDeviceGray
map == new byte[]
{(byte)0xff}
// used for IndexColorModel
In imageMask(baseImage) this happens:
graphics.setColor(Color.BLACK);
graphics.fillRect(0, 0, baseImage.getWidth(), baseImage.getHeight());
// assume default values ([0,1]) for the DecodeArray
// TODO DecodeArray == [1,0]
graphics.setComposite(AlphaComposite.DstIn);
graphics.drawImage(baseImage, null, 0, 0);
graphics.dispose();
return stencilMask;
I wish I could provide a sample file, but I have no sanitized data files.",0,"Tilman Hausherr","Elija B",0,2,"16/Apr/14 03:21","16/Apr/14 15:18","16/Apr/14 15:18"
PDFBOX-2032,PDFBOX,"[PATCH] TTF Type12 IOException: Invalid Characters codes",Bug,CLOSED,Major,Fixed,"1.8.4, 1.8.5, 2.0.0","1.8.5, 2.0.0",None,None,,"https://developer.apple.com/fonts/TTRefMan/RM06/Chap6cmap.html
You try to read nGroups+1 instead of nGroups",0,"Tilman Hausherr","simon steiner",0,3,"16/Apr/14 15:17","02/May/14 06:12","16/Apr/14 15:55"
PDFBOX-2034,PDFBOX,"TestFilters is non-deterministic",Improvement,CLOSED,Minor,Fixed,"1.8.5, 2.0.0","1.8.6, 2.0.0",None,LZW,,"This is a follow-up of PDFBOX-1977, which was created by John.
====
TestFilters uses Random().nextLong() to generate a seed for random data, which means that it is non-determinate. Depending on the seed value, the test may fail or succeed.
====
So what we need is:
a set of deterministic tests
a set of non-deterministic tests
To see why, see the discussion in PDFBOX-1977.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"18/Apr/14 14:23","22/Jun/14 14:34","02/May/14 08:45"
PDFBOX-2035,PDFBOX,"Ignore badly formatted toUnicode CMaps",Bug,CLOSED,Major,Fixed,"1.8.4, 2.0.0","1.8.5, 2.0.0","Parsing, (1)",None,,"Copied from PDFBOX-399:
Submitting a patch for ignoring badly-formatted CMap ToUnicode instructions.
This allows parsing of some ToUnicode resource streams that would otherwise throw exceptions which were silently consumed. This allows text extraction to get the correctly mapped characters.
Specifically parse token<hex> adjacency without whitespace separating them, eat all whitespace within a hex value, and return a partially constructed CMap instead of throwing an exception.
I don't see a problem with the previous test case example (BlackHat...) but I've modified the test case based on an example from the wild: http://www.itsix.com/media/experienced_java_developer.pdf
edit: forgot to mention that this patch was designed on 1.8.3, but also worked on trunk.",0,"Andreas Lehmkühler","Cheng Leong",0,2,"19/Apr/14 10:41","02/May/14 06:12","20/Apr/14 11:16"
PDFBOX-2036,PDFBOX,"Add test with LZW fail sequence",Bug,CLOSED,Minor,Fixed,"1.8.5, 2.0.0","1.8.5, 2.0.0",None,LZW,,"Using the following seed resulted in the LZW filter failing (this has been resolved in PDFBOX-1977):
final long seed = -6257105096642706464L;
I saved this sequence in a file and will add a test that runs it through the LZW filter.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"22/Apr/14 16:18","02/May/14 06:12","22/Apr/14 16:58"
PDFBOX-2039,PDFBOX,"Class PDDocument should implement java.io.Closeable",Improvement,CLOSED,Minor,Fixed,"1.8.4, 1.8.5, 2.0.0","1.8.5, 2.0.0",None,None,,"It would make it possible to use Java 7 try-with-resources feature:
try (PDDocument doc = PDDocument.load(outputFile)) {
// bla-bla
// no need to call doc.close(); explicitly
}
P.S. Actually all org.apache.pdfbox.* classes with method close() could implement java.io.Closeable",0,"Tilman Hausherr","Andrei Solntsev",0,3,"22/Apr/14 21:36","02/May/14 06:12","23/Apr/14 17:57"
PDFBOX-2040,PDFBOX,"Method PDDocument#save does not sign the document",Bug,CLOSED,Major,Invalid,None,None,None,None,,"Method PDDocument.saveIncrementally() DOES sign the document, while method PDDocument.save() does NOT sign.
It's not clear from javadoc if it's ok. At least I was frustrated. I want to sign my PDF, and it's convenient for me to use method PDDocument.save(). Could it sign the document?",0,"Andreas Lehmkühler","Andrei Solntsev",0,2,"22/Apr/14 21:39","02/Jun/14 10:32","02/Jun/14 10:32"
PDFBOX-2042,PDFBOX,"ColorSpace with empty Range array",Bug,CLOSED,Major,Fixed,"1.8.4, 1.8.5, 2.0.0","1.8.5, 2.0.0",PDModel,None,,"I have PDF document where I am modifying PDPage content stream.
Saved document is invalid (Adobe reader complains about it).
I have narrowed it down to ColorSpace.
Original document has colorspace:
/ColorSpace <<
/Cs6 [/ICCBased <<
/Alternate /DeviceRGB
/Filter /FlateDecode
/Length 2597
/N 3
>>]>>
Modified document has colorspace:
/ColorSpace <<
/Cs6 [/ICCBased <<
/Alternate /DeviceRGB
/Filter /FlateDecode
/Length 2597
/N 3
/Range []
>>]>>
When I manually remove "/Range []" from PDF then Adobe reader opens it without an error.
Obviously that range is added by calling PDICCBased.getRangeArray(0) somewhere.",0,"Tilman Hausherr","Juraj Lonc",0,3,"23/Apr/14 12:50","02/May/14 06:12","24/Apr/14 22:27"
PDFBOX-2043,PDFBOX,"While Reading a PDF which contains Image the Content of the PDF is misaligned in the resulting text.",Bug,CLOSED,Major,"Not A Problem",None,None,None,None,"visual studio","We are trying to read content of a PDF file, The PDF has images in the header. We use the PDFTextStripper.getText() method. After calling this method the resulting text is misaligned compare to the Original PDF.",0,"Andreas Lehmkühler",Venkatesan,0,3,"24/Apr/14 09:05","29/Apr/14 10:57","29/Apr/14 10:43"
PDFBOX-2044,PDFBOX,"TrueType glyphs not displayed in rendering",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"In the file of PDFBOX-2041 the text isn't displayed in the 2.0 version. It works in the 1.8 version which uses awt.
The cause is related to the truetype 'loca' table:
https://developer.apple.com/fonts/TTRefMan/RM06/Chap6loca.html
In the table of that file, the endOfGlyphs variable, which is the last offset value ("extra" in the spec), is 0. Therefore, GlyphTable.initData() doesn't read any glyphs because it believes that the end has already been reached, because the first offset is (of course) 0 and is identical to the endOfGlyphs variable.
I will fix this by disregarding endOfGlyphs == offset if endOfGlyphs is 0, and not asking for offset equality to skip glyphs, instead I require that the next offset is bigger.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"24/Apr/14 18:47","17/Mar/16 19:07","24/Apr/14 22:11"
PDFBOX-2045,PDFBOX,"Merging PDFs with a Form has no effect",Bug,CLOSED,Major,Fixed,"1.8.4, (3)",2.0.0,"AcroForm, (1)",None,,"Merging attached special PDF (a form) results in a PDF consisting only of the PDF form ignoring all other PDFs without any error.
Command line to reproduce the problem:
java -jar pdfbox-app-1.8.4.jar PDFMerger page1.pdf specialpdf.pdf result.pdf",0,"Maruan Sahyoun","Gerhard Temper",0,4,"25/Apr/14 11:59","17/Mar/16 19:08","08/Feb/15 17:06"
PDFBOX-2046,PDFBOX,"[PATCH] Can't read the embedded Type1 font",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,"type1 type1font",,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage x.pdf
SEVERE: Can't read the embedded Type1 font
java.io.IOException: Found Token[kind=NAME, text=end] but expected LITERAL
SEVERE: Can't read the embedded Type1 font
java.io.IOException: Found Token[kind=NAME, text=currentdict] but expected LITERAL",0,"Tilman Hausherr","simon steiner",0,2,"25/Apr/14 13:52","17/Mar/16 19:08","02/May/14 08:44"
PDFBOX-2047,PDFBOX,"read operations alter PDLab object",Bug,CLOSED,Major,Fixed,"1.8.4, 1.8.5, 2.0.0","1.8.6, 2.0.0",PDModel,None,,"This is a follow-up to PDFBOX-2042 but for PDLab: "A read operation must not alter the pdf."
The problem described PDFBOX-2042 happened because the constructor called loadICCProfile(), which called getRangeForComponent(c), which altered its own object with (broken) default values. PDLab has no such constructor so Jurajs test won't show any problem, but this different test will:
        PDLab pdLab = new PDLab();
        COSArray cosArray = (COSArray) pdLab.getCOSObject();
        COSDictionary dict = (COSDictionary)cosArray.getObject(1);
        pdLab.getBlackPoint();
        pdLab.getWhitepoint();
        pdLab.getARange();
        pdLab.getBRange();
        assertEquals("read operations should not change the size of /Lab objects", 0, dict.size());
        dict.toString(); // rev 1571125 does stack overflow here in 2.0
removing the assert brings a stack overflow.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"26/Apr/14 06:26","22/Jun/14 14:34","02/May/14 08:40"
PDFBOX-2048,PDFBOX,"TextExtraction only working after uncompressing with pdftk",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.6, 2.0.0","Parsing, (2)",None,,"From Jonas Karlsson on the user list:
===
We have a user with PDFs generated by a commercial transcription service.
When we try to extract text from these pdfs, pdfbox returns a few empty
lines. We get this result both from our own code, and when using the
ExtractText command line tool
If I specify the non-sequential parser, with the -nonSeq flag, the
following error is produced:
Apr 28, 2014 10:35:11 AM org.apache.pdfbox.pdfparser.NonSequentialPDFParser
validateStreamLength
SEVERE: The end of the stream doesn't point to the correct offset, using
workaround to read the stream
If I uncompress the file with pdftk, pdfbox is able to successfully extract
the text.
===
I have been given permission to attach the file "committers only". So don't pass it around, avoid quoting details from the file. The file is also not rendering. The lengths of the streams are 0.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"28/Apr/14 21:11","17/Mar/16 19:38","02/May/14 08:41"
PDFBOX-2049,PDFBOX,"load PDF file throws WrappedIOException in v1.8.4 but not in v0.7.3",Bug,CLOSED,Major,"Won't Fix",1.8.4,1.8.5,.NET,None,"visual studio","We are using .Net Version of PDFBox V1.8.4, It throws WrappedIOException for one PDF file at the below line.
PDDocument doc = PDDocument.load("path of the PDF");
Were the Same PDF file is read Successfully in the PDFBox V0.7.3.",0,"Andreas Lehmkühler",Venkatesan,0,3,"29/Apr/14 10:30","27/May/14 10:31","27/May/14 10:31"
PDFBOX-205,PDFBOX,"Miscellaneous errors on valid files",Bug,CLOSED,Minor,Fixed,None,"1.8.5, 2.0.0",Parsing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1570311
Originally submitted by renaudw on 2006-10-03 15:04.
As far as I can tell these files are valid. Some
generate a warning in Acrobat Reader, some don't.
I'm reporting them in case you want to have a look at
the errors they generate. All files are accessible
online by replacing /web/gfdocs with
http://bat.library.ucsf.edu/data.
/web/gfdocs/p/b/x/pbx00a99/pbx00a99.pdf skipped due
to: java.io.IOException: Error: Expected an integer
type, actual='BC3c#c3???' (stacktrace follows)
java.io.IOException: Error: Expected an integer type,
actual='BC3c#c3???'
at org.pdfbox.pdfparser.BaseParser.readInt
(BaseParser.java:1335)
at org.pdfbox.pdfparser.PDFParser.parseObject
(PDFParser.java:415)
at org.pdfbox.pdfparser.PDFParser.parse
(PDFParser.java:176)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.pa
rseDocument(TextOverImageDocumentDetector.java:210)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.de
tect(TextOverImageDocumentDetector.java:102)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.ma
in(TextOverImageDocumentDetector.java:77)
/web/gfdocs/p/e/b/peb40a99/peb40a99.pdf skipped due
to: java.io.StreamCorruptedException: Error: data is
null (stacktrace follows)
java.io.StreamCorruptedException: Error: data is null
at org.pdfbox.filter.LZWFilter.decode
(LZWFilter.java:101)
at org.pdfbox.cos.COSStream.doDecode
(COSStream.java:319)
at org.pdfbox.cos.COSStream.doDecode
(COSStream.java:249)
at org.pdfbox.cos.COSStream.getUnfilteredStream
(COSStream.java:173)
at
org.pdfbox.pdmodel.common.COSStreamArray.getUnfilteredS
tream(COSStreamArray.java:200)
at org.pdfbox.pdfparser.PDFStreamParser.<init>
(PDFStreamParser.java:91)
at
org.pdfbox.pdmodel.common.COSStreamArray.getStreamToken
s(COSStreamArray.java:141)
at
org.pdfbox.util.PDFStreamEngine.processSubStream
(PDFStreamEngine.java:189)
at
org.pdfbox.util.PDFStreamEngine.processStream
(PDFStreamEngine.java:160)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.co
llectTextRenderingModes
(TextOverImageDocumentDetector.java:153)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.de
tect(TextOverImageDocumentDetector.java:125)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.de
tect(TextOverImageDocumentDetector.java:103)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.ma
in(TextOverImageDocumentDetector.java:77)
/web/gfdocs/q/l/n/qln20a99/qln20a99.pdf skipped due
to: java.io.StreamCorruptedException: Error: data is
null (stacktrace follows)
java.io.StreamCorruptedException: Error: data is null
at org.pdfbox.filter.LZWFilter.decode
(LZWFilter.java:101)
at org.pdfbox.cos.COSStream.doDecode
(COSStream.java:319)
at org.pdfbox.cos.COSStream.doDecode
(COSStream.java:249)
at org.pdfbox.cos.COSStream.getUnfilteredStream
(COSStream.java:173)
at
org.pdfbox.pdmodel.common.COSStreamArray.getUnfilteredS
tream(COSStreamArray.java:200)
at org.pdfbox.pdfparser.PDFStreamParser.<init>
(PDFStreamParser.java:91)
at
org.pdfbox.pdmodel.common.COSStreamArray.getStreamToken
s(COSStreamArray.java:141)
at
org.pdfbox.util.PDFStreamEngine.processSubStream
(PDFStreamEngine.java:189)
at
org.pdfbox.util.PDFStreamEngine.processStream
(PDFStreamEngine.java:160)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.co
llectTextRenderingModes
(TextOverImageDocumentDetector.java:153)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.de
tect(TextOverImageDocumentDetector.java:125)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.de
tect(TextOverImageDocumentDetector.java:103)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.ma
in(TextOverImageDocumentDetector.java:77)
/web/gfdocs/q/p/e/qpe20a99/qpe20a99.pdf skipped due
to: java.io.StreamCorruptedException: Error: data is
null (stacktrace follows)
java.io.StreamCorruptedException: Error: data is null
at org.pdfbox.filter.LZWFilter.decode
(LZWFilter.java:101)
at org.pdfbox.cos.COSStream.doDecode
(COSStream.java:319)
at org.pdfbox.cos.COSStream.doDecode
(COSStream.java:249)
at org.pdfbox.cos.COSStream.getUnfilteredStream
(COSStream.java:173)
at
org.pdfbox.pdmodel.common.COSStreamArray.getUnfilteredS
tream(COSStreamArray.java:200)
at org.pdfbox.pdfparser.PDFStreamParser.<init>
(PDFStreamParser.java:91)
at
org.pdfbox.pdmodel.common.COSStreamArray.getStreamToken
s(COSStreamArray.java:141)
at
org.pdfbox.util.PDFStreamEngine.processSubStream
(PDFStreamEngine.java:189)
at
org.pdfbox.util.PDFStreamEngine.processStream
(PDFStreamEngine.java:160)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.co
llectTextRenderingModes
(TextOverImageDocumentDetector.java:153)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.de
tect(TextOverImageDocumentDetector.java:125)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.de
tect(TextOverImageDocumentDetector.java:103)
at
edu.ucsf.library.utils.TextOverImageDocumentDetector.ma
in(TextOverImageDocumentDetector.java:77)",0,"Tilman Hausherr",Anonymous,1,2,"03/Oct/06 22:04","02/May/14 06:12","25/Feb/14 20:02"
PDFBOX-2050,PDFBOX,"Add predictor to LZW filter",Bug,CLOSED,Minor,Fixed,"1.8.4, 1.8.5, 2.0.0","1.8.6, 2.0.0",None,LZW,,"According to the PDF spec "LZW and Flate Predictor Functions", both can have post processing with predictors. It is implemented for Flate but not for LZW. I am adding this by using the existing code from the Flate filter, which I will be moving into a helper class.
While looking at the Flate filter, I noticed that its footprint is higher than needed, i.e. there is too much buffering. I will test this separately and commit only if I can measure an improvement.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"01/May/14 12:55","22/Jun/14 14:34","02/May/14 08:37"
PDFBOX-2051,PDFBOX,"PDFPrinter does not use getPageable()",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"The print method (print(PrinterJob job, boolean isSilent)) does not use the getPageable() method, but constructs a PDFPageable directly.
I think it is better to use that method and is very helpful when someone wants to extend the PDFPrinter and PDFPageable to do some custom behaviour.",0,"Tilman Hausherr","Cornelis Hoeflake",0,2,"02/May/14 07:16","17/Mar/16 19:07","02/May/14 09:11"
PDFBOX-2052,PDFBOX,"PDFCloneUtility does not handle COSStreamArray",Improvement,CLOSED,Major,Fixed,"1.8.4, (3)","1.8.6, 2.0.0",Utilities,None,,"A document which has COSStreamArray's, cannot be cloned. There is no handling for COSStreamArray.",0,"Tilman Hausherr","Cornelis Hoeflake",0,3,"02/May/14 07:19","16/Aug/14 06:01","02/May/14 23:45"
PDFBOX-2054,PDFBOX,"Remove System.out.println()",Bug,CLOSED,Minor,Fixed,"1.8.4, (3)","1.8.6, 2.0.0",None,None,,"For example at GlyfSimpleDescript.java
...
catch (ArrayIndexOutOfBoundsException e)
        {
            System.out.println("error: array index out of bounds");
        }
and also 'printStackTrace' like in PageDrawer.java:
...
catch( IOException io )
        {
            io.printStackTrace();
        }
Should forward exception or keep silence.",0,"Tilman Hausherr","Hong-Thai Nguyen",0,2,"02/May/14 12:12","22/Jun/14 14:34","03/May/14 17:40"
PDFBOX-2056,PDFBOX,"incomplete build tests",Bug,CLOSED,Major,Fixed,"1.8.4, 1.8.5, 1.8.6",1.8.6,None,None,,"In the 1.8 branch, tests need to be explicitely mentioned in the pom or in TestAll.java. At least 5 tests are missing, among them 3 that I wrote. I am adding these.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"03/May/14 05:36","22/Jun/14 14:34","03/May/14 05:41"
PDFBOX-2057,PDFBOX,"Importing BufferedImage into PDPixelMap is broken in 1.8.5",Bug,CLOSED,Major,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",PDModel,regression,"windows, java 1.7","Try to import a BufferedImage in a PDDocument with PDPixelMap
BufferedImage with TYPE_4BYTE_ABGR works fine with PDFBox 1.8.4 (though, the pdf file contains instruction /ColorSpace /DeviceGray)
BufferedImage with TYPE_4BYTE_ABGR produces an unreadable PDF with PDFBox 1.8.5 (though, the pdf file contains instruction /ColorSpace /DeviceRGB).
Code used to demonstrate the problem is as follows (image has also been colored with some Graphics instructions to demonstrate that 1.8.4 is working) :
try {
            PDDocument doc = new PDDocument();
            PDPage page = new PDPage();
            doc.addPage(page);
            BufferedImage awtImage = new BufferedImage(100,100, BufferedImage.TYPE_4BYTE_ABGR);
            PDPixelMap ximage = new PDPixelMap(doc, awtImage);
            PDPageContentStream contentStream = new PDPageContentStream(doc, page);
            contentStream.drawXObject(ximage, 200, 200, 100, 100);
            contentStream.close();
            doc.save("C:\\Temp\\PDF\\test185_4babgr.pdf");
        } catch(COSVisitorException|IOException e) {
            e.printStackTrace();
        }
I also tried with a BufferedImage with TYPE_INT_ARGB but it throws an exception with PDFBox 1.8.4 and 1.8.5 :
Exception in thread "main" java.lang.IllegalArgumentException: Raster IntegerInterleavedRaster: width = 100 height = 100 #Bands = 1 xOff = 0 yOff = 0 dataOffset[0] 0 is incompatible with ColorModel ColorModel: #pixelBits = 8 numComponents = 1 color space = java.awt.color.ICC_ColorSpace@1dc80063 transparency = 1 has alpha = false isAlphaPre = false
 at java.awt.image.BufferedImage.<init>(BufferedImage.java:630)
 at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.createImageStream(PDPixelMap.java:107)
My main purpose was to use a BufferedImage with a CMYK ColorSpace, but PDPixelMap seems to accept 1 component and 3 component ColorSpace only.",0,"Tilman Hausherr","Michaël Michaud",1,5,"04/May/14 14:34","22/Jun/14 14:34","17/May/14 15:04"
PDFBOX-2058,PDFBOX,"The text of pdfs using Type1C can't be extracted correct",Bug,CLOSED,Major,Fixed,"1.8.4, (3)","1.8.6, 2.0.0","Text extraction",type1cfont,,"PDFBOX-1770 introduced a regression with pdfs using a Type1C font. Special characters incluing ligatures can't be extracted anymore.
The issue was originally posted on users@pdfbox:
I ran pdfbox-app version 1.8.5 over the PDF Greenstone manual:
http://www.greenstone.org/docs/greenstone3/manual.pdf
It removed the fl and fi prefixes from words like "flexible", "file" and
"first". Perhaps these genuine word prefixes have been confused with f-based
ligatures?
We were previously using a pdfbox-app 1.5.* version and wanted to switch over to
a newer one. Version 1.8.2 does not have this issue.
The command we ran:
java -cp "/path/to/pdfbox-app-1.8.5.jar" -Dline.separator="<br />"
org.apache.pdfbox.ExtractText -html "/path/to/manual.pdf"
Relevant excerpts from the output generated:
"improve exibility, modularity, and extensibility"
the 2nd word should be "flexibillity"
"Table 1 shows the le hierarchy for Greenstone3. The rst part shows the common"
The words "file" and "first" have been truncated to "le" and "rst"
I believe this is rather a bug than intended behaviour.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"04/May/14 16:50","28/Jul/14 18:43","05/May/14 17:57"
PDFBOX-2059,PDFBOX,"Characters are not positioned properly (due to wrong width&height of chars)",Bug,CLOSED,Major,Duplicate,2.0.0,None,Rendering,None,,"Characters in this PDF are not positioned properly.
All characters are rendered at position x=0.0
Problem is in PDFont.getFontWidth(). it returns 0.0 for every char.
The same applies for PDFont.getFontHeight()",0,"Andreas Lehmkühler","Juraj Lonc",0,2,"05/May/14 10:14","06/May/14 09:48","05/May/14 10:35"
PDFBOX-206,PDFBOX,"Setfield is not working in Acrobat 7.0",Bug,CLOSED,Minor,Duplicate,0.7.2,None,AcroForm,"Appearance FDF",,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1572315
Originally submitted by nobody on 2006-10-06 11:30.
Hello,
I created a acrobat form in version 7.0 and used
setfield to bind the variables but I am unable to see
the values when I view online. I am using
PDFBox_7.0.2.
Here is code that I am using in peoplesoft:
______________________________________
&pdf_file = CreateJavaObject
("org.pdfbox.pdmodel.PDDocument");
&source_file = &pdf_file.load
("Service_Terms_mstr.pdf");
&jo = CreateJavaObject
("org.pdfbox.examples.fdf.SetField");
If &target_field = "company" Then
&field_value = &name;
End-If;
&jo.setField(&source_file, &target_field,
&field_value);
&source_file.save(&PATH | %UserId | ".pdf");
ViewURL("http://" | &servername | "/" | &DBNAME | "/"
%UserId ".pdf", True);
_________________________________________________
I am able to view the whole page except the form
fields that need to updated using setfield ,they are
blank. I read somewhere that using version 6.0 would
help. Please guide me.
Thanks a lot.",0,"Maruan Sahyoun",Anonymous,1,2,"06/Oct/06 18:30","17/Mar/16 19:15","03/Feb/15 22:14"
PDFBOX-2062,PDFBOX,"Setting a PDFFormField's value with a specific font size causes the font size to change on click",Bug,CLOSED,Major,Fixed,1.8.5,2.0.0,"AcroForm, (1)","AcroForm Appearance","linux, mac os x","Setting the font size of a PDField causes the font size to change on click on the field. It starts out with incorrect font size. When the field is clicked, it displays in the font size correctly. Clicking outside the field, reverts back to the incorrect font size.
This behavior was also mentioned in PDFBOX-1419 in passing.
Code:
pdfFormField.getDictionary.setString(COSName.DA, "/Helv 10 Tf 0 g”)
pdfFormField.setValue("Hello”)
A simple example of such a PDF is here.",0,"Maruan Sahyoun","Akshay Rawat",1,3,"06/May/14 20:04","17/Mar/16 19:08","16/Mar/15 07:37"
PDFBOX-2063,PDFBOX,"Incomplete EOF detection in ASCIIHexFilter",Bug,CLOSED,Major,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",None,None,,"ASCIIHexFilter fails with an out of bounds error on the file of PDFBOX-2060.
java.lang.ArrayIndexOutOfBoundsException: -1
at org.apache.pdfbox.filter.ASCIIHexFilter.decode(ASCIIHexFilter.java:68)
at org.apache.pdfbox.filter.Filter.decode(Filter.java:58)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:352)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:278)
at org.apache.pdfbox.cos.COSStream.getDecodeResult(COSStream.java:235)
at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.<init>(PDImageXObject.java:94)
The reason is this content:
/Filter /ASCIIHexDecode
/Length 17
>>
stream
32
              
endstream
The source code doesn't check for EOF after getting a space. I will check which versions are affected and will fix this.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"06/May/14 20:31","22/Jun/14 14:34","06/May/14 20:51"
PDFBOX-2064,PDFBOX,"java.lang.ArrayIndexOutOfBoundsException in CompositeImage.createMaskedImage",Bug,CLOSED,Major,Fixed,"1.8.5, 1.8.6",1.8.6,None,None,,"I get this exception with the file of PDFBOX-2060:
Mai 06, 2014 9:59:22 PM org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap ge
tRGBImage
Schwerwiegend: java.lang.ArrayIndexOutOfBoundsException: Coordinate out of bounds!
java.lang.ArrayIndexOutOfBoundsException: Coordinate out of bounds!
at sun.awt.image.ByteInterleavedRaster.getDataElements(Unknown Source)
at java.awt.image.BufferedImage.getRGB(Unknown Source)
at org.apache.pdfbox.pdmodel.graphics.xobject.CompositeImage.createMaskedImage(CompositeImage.java:86)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.applyMasks(PDXObjectImage.java:156)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:343)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:83)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:135)
at org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:105)
The reason is that the mask size is smaller than the base image size, but the loop uses the base size.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"06/May/14 21:16","22/Jun/14 14:34","06/May/14 21:25"
PDFBOX-2065,PDFBOX,"Missing getCOSObject() in PDCalRGB",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"PDCalRGB.java should have these lines:
@Override
public COSBase getCOSObject()
{return array;}
like all the other classes that extend PDCIEBasedColorSpace",0,"Andreas Lehmkühler","Juraj Lonc",0,4,"07/May/14 13:34","17/Mar/16 19:06","07/May/14 17:53"
PDFBOX-2066,PDFBOX,"RubberStampWithImage should support more image types",Improvement,CLOSED,Minor,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",None,None,,"Modify the RubberStampWithImage example so that it supports more image types, i.e. like the AddImageToPDF example.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"07/May/14 15:23","22/Jun/14 14:34","07/May/14 15:34"
PDFBOX-2067,PDFBOX,"Error creating JPEG image with SMask",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"JPEGFactory.createFromImage() has problems with images with transparency (alpha data).",0,"Tilman Hausherr","Juraj Lonc",0,2,"07/May/14 21:47","17/Mar/16 19:08","17/May/14 12:35"
PDFBOX-2068,PDFBOX,"Add filter parameter to PDImageXObject(document, filteredStream) constructor",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"I am adding a third parameter to
public PDImageXObject(PDDocument document, InputStream filteredStream)
i.e. changing it to
public PDImageXObject(PDDocument document, InputStream filteredStream, COSBase cosFilter)
because in the code, the filter is always set afterwards. My change improves code clarity. The caller knows what filter was used because he used it to prepare the filteredStream content.
WDYT about also adding width, height, bpc and colorspace to that constructor? These four parameters are always used.
This cool guy (enter his name on youtube) has arguments to use constructors parameters instead of setters:
http://misko.hevery.com/2009/02/19/constructor-injection-vs-setter-injection/
IMHO, mixing constructor initialization and setter initialization looks confusing.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/May/14 16:02","17/Mar/16 19:07","02/Jun/14 14:41"
PDFBOX-2070,PDFBOX,"Filter.decode() modifies PDF if there is a filter array",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"If there are several filters (filter array) in an image, PDFBox is inserting an empty DecodeParms object here
params.setItem(COSName.DECODE_PARMS, getDecodeParams(params, index));
instead of either inserting an empty COSArray, or (better) do nothing. Saving such a PDF results in it not being displayable in the Acrobat Reader.
Test code:
        PDDocument d = PDDocument.load("before.pdf");
        new PDFRenderer(d).renderImage(0);
        d.save("after.pdf");
The rendering is important because without it, the filtered objects aren't decoded.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/May/14 11:40","17/Mar/16 19:07","15/May/14 16:36"
PDFBOX-2071,PDFBOX,"Insert inline image in page content stream",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"I can't find anything to insert a PDInlineImage into the page content stream. As far as I understand the spec (p. 352-355), it is rather simple, i.e. just append the raw commands.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"11/May/14 13:06","17/Mar/16 19:06","02/Jun/14 11:58"
PDFBOX-2072,PDFBOX,"Wrong calculation of space char width in PDFStreamEngine",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.6, 2.0.0",None,None,,"PDFStreamEngine calculates width of space character wrongly.
Page's content stream contains this operation:
"0 12 -12 0 562.3199 372.7105 Tm"
and that causes PDFStreamEngine calculate width of " " to value 0",0,"Andreas Lehmkühler","Juraj Lonc",0,2,"12/May/14 10:22","19/Oct/15 16:25","12/May/14 18:40"
PDFBOX-2073,PDFBOX,"PDF files with unusual Japanese font can not be rewrite correctly",Bug,CLOSED,Critical,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",None,encoding,"windows 7","While rotate attached pdf file, The Japanese characters cannot display in the output pdf file.
This problem can also occur when marge PDF files.
We suspect that this caused by the name of font type.
Environment
-------------------------------------------------
OS : Windows 7 (32bit)
jvm : 1.6
pdfbox: 1.8.5
-------------------------------------------------
Code to reproduce the problem
-------------------------------------------------
public static void main(String[] args) {
String filePath = "D:\\test
landscape.pdf";
String newPDFFile = "D:\\test
new_landscape.pdf";
try {
PDDocument rotatedDocument = PDDocument.load(filePath);
PDDocument document = new PDDocument();
int pageNumber = document.getNumberOfPages();
for (int i=0; i<pageNumber; i++)
{ PDPage page = (PDPage)document.getDocumentCatalog().getAllPages().get(i); page.setRotation(-90); rotatedDocument.addPage(page); }
rotatedDocument.save(newPDFFile);
document.close();
rotatedDocument.close();
} catch (Exception e)
{ e.printStackTrace(); }
}
-------------------------------------------------",0,"Tilman Hausherr","May Yu",0,3,"12/May/14 11:34","22/Jun/14 14:34","13/May/14 17:56"
PDFBOX-2074,PDFBOX,"4-bytes CMap entry causes exception",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.6, 2.0.0",None,None,,"I have PDF that has CMap entry consisting of 4 bytes. It is just one entry with that size, other entries have 2-bytes.
Adobe reader has no problems with that, PDFBox throws Exception.
I think this Exception should not be thrown. It should be skipped or truncated tu 2 bytes and write warning to log.",0,"Andreas Lehmkühler","Juraj Lonc",0,3,"12/May/14 17:46","01/Sep/15 18:08","09/Jun/14 17:51"
PDFBOX-2076,PDFBOX,"Arabic not well converted on PDF document",Bug,CLOSED,Major,"Won't Fix",1.8.5,None,"Text extraction",None,,"I'm using PDFBox 1.8.5 to convert this pdf file to html on ExtractText. Seem that arabic content is not well converted.
Here's option:
-html
E:\page0010.pdf.pdf
E:\page0010.html",0,"Andreas Lehmkühler","Hong-Thai Nguyen",0,2,"13/May/14 09:12","13/May/14 16:18","13/May/14 11:40"
PDFBOX-2078,PDFBOX,"DPI always 96",Bug,CLOSED,Major,Fixed,1.8.5,None,None,None,,"I'm trying to convert a 1 page pdf report to an image using convertToImage.
My used command goes as follows:
BufferedImage bi=page.convertToImage(BufferedImage.TYPE_INT_RGB, 300);
No matter how much i change the resolution (300 in the example), the DPI stays the same, even though the quality and the dimensions of the picture change.
Adding a comparison between a 96 resolution picture and what should be a 300 resolution picture (notice the DPI)
http://i58.tinypic.com/9sv339.png",0,"Tilman Hausherr",proba,0,2,"14/May/14 07:15","16/May/14 18:27","15/May/14 15:57"
PDFBOX-2079,PDFBOX,"Extra new line characters extracted in 1.8.5 for embedded files leading to ZipFile exception in Java 1.6",Bug,CLOSED,Minor,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",PDModel,regression,,"For the test file I'll attach shortly, PDFBox 1.8.4 extracts 17660 bytes from an embedded zip (well, docx) file. PDFBox 1.8.5 extracts 17662 bytes – "\r\n" at the end of the stream. This leads to a ZipException for ZipFile(s) in Java 1.6, but not Java 1.7.",0,"Tilman Hausherr","Tim Allison",0,2,"15/May/14 13:43","28/Aug/14 22:25","25/May/14 15:00"
PDFBOX-208,PDFBOX,"java.lang.IllegalArgumentException printing PDF",Bug,CLOSED,Minor,Incomplete,None,None,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1578473
Originally submitted by miguelc on 2006-10-16 13:09.
The following exception occurs when printing a PDF (see
estadodecuenta.pdf):
java.lang.IllegalArgumentException: filtered.length !=
(width*bpp + 1) * height,
10800 10860w,h,bpp=60,60,3
at
org.pdfbox.pdmodel.graphics.predictor.Uptimum.checkBufsiz(Uptimum.java:52)
at
org.pdfbox.pdmodel.graphics.predictor.Uptimum.decode(Uptimum.java:141)
at
org.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:154)
at
org.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:81)
at
org.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:452)
at
org.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:215)
at
org.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:174)
at
org.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:104)
at org.pdfbox.pdmodel.PDPage.print(PDPage.java:741)
at sun.print.RasterPrinterJob.printPage(Unknown
Source)
at sun.print.RasterPrinterJob.print(Unknown Source)
at sun.print.RasterPrinterJob.print(Unknown Source)
at
org.pdfbox.pdmodel.PDDocument.print(PDDocument.java:833)
at org.pdfbox.PrintPDF.main(PrintPDF.java:108)
I am using PDFBox 0.7.3, on Windows 2000. JRE 1.5.0_08.",0,"Andreas Lehmkühler",Anonymous,0,0,"16/Oct/06 20:09","12/Feb/11 19:15","15/Dec/10 21:40"
PDFBOX-2080,PDFBOX,"Barcode getting color inverted in pdf to image conversion",Bug,CLOSED,Major,Fixed,"1.8.5, 1.8.6",1.8.6,None,"CCITTFaxDecode ccitt",,"While converting a 1 page pdf to an image (both attached below), the image converts properly, however the barcodes colours invert.
The code used to do the conversion looks like this right now:
public static void convertPDFToJPG(String src){
try{
//load pdf file in the document object
PDDocument doc=PDDocument.load(new FileInputStream(src));
//Get all pages from document and store them in a list
List<PDPage> pages=doc.getDocumentCatalog().getAllPages();
//create iterator object so it is easy to access each page from the list
Iterator<PDPage> i= pages.iterator();
int count=1; //count variable used to separate each image file
//Convert every page of the pdf document to a unique image file
System.out.println("Please wait...");
while(i.hasNext())
{ PDPage page=i.next(); BufferedImage bi=page.convertToImage( BufferedImage.TYPE_INT_RGB, 300); FileOutputStream fos = new FileOutputStream(new File("d:\\slika2_3.jpg")); //ImageIO.write(bi, "jpg", new File("d:\\pdfimageold.jpg")); boolean foundWriter = ImageIOUtil.writeImage(bi, "jpg", fos, 300); count++; }
System.out.println("Conversion complete");
}catch(IOException ie)
{ie.printStackTrace();}
}",0,"Tilman Hausherr",proba,0,3,"16/May/14 07:43","17/Oct/14 06:38","21/May/14 19:45"
PDFBOX-2082,PDFBOX,"signing corrupts PDF when signature exactly fits allocated space",Bug,CLOSED,Critical,Fixed,"1.8.5, 2.0.0","1.8.6, 2.0.0",Writing,None,,"The current check does not take "<>" into account, so if you are (un)lucky, the signature overwrites ">" and corrupts the PDF.
Fix for 1.8:
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java b/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java
index 3165589..80fbad2 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java
@@ -778,13 +778,15 @@ public class COSWriter implements ICOSVisitor, Closeable
         
             SignatureInterface signatureInterface = doc.getSignatureInterface();
             byte[] sign = signatureInterface.sign(new ByteArrayInputStream(pdfContent));
+            // this assumes that the dummy signature has been writen as "<0000...>"
             String signature = new COSString(sign).getHexString();
-            int leftSignaturerange = signaturePosition[1]-signaturePosition[0]-signature.length();
-            if(leftSignaturerange<0)
+            int startPos = signaturePosition[0] + 1; // move past "<"
+            int endPos = signaturePosition[1] - 1; // move in front of ">"
+            if (startPos + signature.length() > endPos)
             {
                 throw new IOException("Can't write signature, not enough space");
             }
-            getStandardOutput().setPos(signaturePosition[0]+1);
+            getStandardOutput().setPos(startPos);
             getStandardOutput().write(signature.getBytes());
         }
     }
Another thing is that pdfbox now allocates (2 * preferedSize + 2) for a signature. It quite confused me to see 16k+4 bytes allocated when I called setPreferedSignatureSize(4k) - it should have allocated 8k (each signature byte takes 2 bytes in the pdf).
Fix for 1.8:
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java
index 358364a..23dd3ab 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java
@@ -309,7 +309,7 @@ public class PDDocument implements Pageable, Closeable
         int preferedSignatureSize = options.getPreferedSignatureSize();
         if (preferedSignatureSize > 0)
         {
-            sigObject.setContents(new byte[preferedSignatureSize * 2 + 2]);
+            sigObject.setContents(new byte[preferedSignatureSize]);
         }
         else
         {",0,"Andreas Lehmkühler","Štěpán Schejbal",0,2,"16/May/14 15:48","22/Jun/14 14:34","18/Jun/14 18:37"
PDFBOX-2084,PDFBOX,"Make TestImageIOUtils optional in 1.8 for Fedora packaging",Improvement,CLOSED,Minor,Fixed,"1.8.5, 1.8.6",1.8.6,None,None,fedora,"On the user mailing list, Orion Poplawski reported that he cannot package PDFBox in Fedora because it loads external software for the test, namely levigo JBIG2 and jai_imageio. This is unwelcome, per a "Fedora builders cannot access anything remotely" rule. Not having these libraries fail TestImageIOUtils, which is part of the TestAll class. I will separate this test from the rest.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"19/May/14 16:15","22/Jun/14 14:34","02/Jun/14 11:47"
PDFBOX-2088,PDFBOX,"Support Bouncycastle 1.50",Improvement,CLOSED,Major,Fixed,1.8.5,2.0.0,PDModel,None,fedora,"Fedora Rawhide has moved on to bouncycastle 1.50. Unfortunately this breaks pdfbox:
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project pdfbox: Compilation failure: Compilation failure:
[ERROR] /builddir/build/BUILD/pdfbox-1.8.4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java:[40,29] cannot find symbol
[ERROR] symbol: class DERObject
[ERROR] location: package org.bouncycastle.asn1
[ERROR] /builddir/build/BUILD/pdfbox-1.8.4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java:[379,13] cannot find symbol
[ERROR] symbol: class DERObject
[ERROR] location: class org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler
[ERROR] /builddir/build/BUILD/pdfbox-1.8.4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java:[186,49] method getContent in class org.bouncycastle.cms.RecipientInformation cannot be applied to given types;
[ERROR] required: org.bouncycastle.cms.Recipient
[ERROR] found: java.security.Key,java.lang.String
[ERROR] reason: actual and formal argument lists differ in length
[ERROR] /builddir/build/BUILD/pdfbox-1.8.4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java:[312,17] cannot find symbol
[ERROR] symbol: class DERObject
[ERROR] location: class org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler
[ERROR] /builddir/build/BUILD/pdfbox-1.8.4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java:[390,9] cannot find symbol
[ERROR] symbol: class DERObject
[ERROR] location: class org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler
[ERROR] /builddir/build/BUILD/pdfbox-1.8.4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java:[403,29] reference to EnvelopedData is ambiguous
[ERROR] both constructor EnvelopedData(org.bouncycastle.asn1.cms.OriginatorInfo,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.asn1.cms.EncryptedContentInfo,org.bouncycastle.asn1.ASN1Set) in org.bouncycastle.asn1.cms.EnvelopedData and constructor EnvelopedData(org.bouncycastle.asn1.cms.OriginatorInfo,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.asn1.cms.EncryptedContentInfo,org.bouncycastle.asn1.cms.Attributes) in org.bouncycastle.asn1.cms.EnvelopedData match
[ERROR] /builddir/build/BUILD/pdfbox-1.8.4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java:[406,27] cannot find symbol
[ERROR] symbol: method getDERObject()
[ERROR] location: variable contentinfo of type org.bouncycastle.asn1.cms.ContentInfo",0,"Andreas Lehmkühler","Orion Poplawski",0,4,"21/May/14 21:41","17/Mar/16 19:07","02/Jun/14 18:15"
PDFBOX-209,PDFBOX,"java.lang.OutOfMemoryError while parsing pdf file",Bug,CLOSED,Minor,"Cannot Reproduce",None,None,Parsing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1581061
Originally submitted by hui85 on 2006-10-19 23:47.
I want to parse text from a PDF file and use
PDFTextStripper. Most of the PDF files work. But in the
following case I get an OutOfMemoryError.
The PDF file I want to parse is about 312k and my JVM
Xmx is about 512m.
I get the following stackTrace:
java.lang.OutOfMemoryError
at java.util.zip.Inflater.inflateBytes(Native Method)
at java.util.zip.Inflater.inflate(Unknown Source)
at java.util.zip.InflaterInputStream.read(Unknown Source)
at
org.pdfbox.filter.FlateFilter.decode(FlateFilter.java:97)
at org.pdfbox.cos.COSStream.doDecode(COSStream.java:319)
at org.pdfbox.cos.COSStream.doDecode(COSStream.java:249)
at
org.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:173)
at
org.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:91)
at
org.pdfbox.cos.COSStream.getStreamTokens(COSStream.java:135)
at
org.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:189)
at
org.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:160)
at
org.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:355)
at
org.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:268)
at
org.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:220)
I use pdfbox-0.7.3, tested on Win 2000, JVM 1.4.2.
The file that causes the error is to big to attach
(271K zipped).
Please mail me and I will send it.
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
see test-1581061.pdf
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
Thanks, please email the PDF to ben@benlitchfield.com or
upload to ftp.pdfbox.org
Thanks,
Ben",0,"Timo Boehme",Anonymous,0,1,"20/Oct/06 06:47","21/May/12 22:42","21/May/12 22:42"
PDFBOX-2090,PDFBOX,"Glyph not found:3",Bug,CLOSED,Minor,"Not A Problem",2.0.0,None,Rendering,None,,"There are some debug messages:
15:30:46,574 DEBUG TTFGlyph2D:227 - GYQPBH+TimesNewRomanPSMT: Glyph not found:3
but glyph id #3 is reserved (according to TTF spec) so it is OK that this glyph was not found in TTF font.",0,"Tilman Hausherr","Juraj Lonc",0,2,"22/May/14 13:50","22/May/14 18:55","22/May/14 18:35"
PDFBOX-2091,PDFBOX,"Some characters are not rendered (font with symbol encoding)",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"Some characters are not rendered (see attached PDF).
In this case it is "yaccute".",0,"Andreas Lehmkühler","Juraj Lonc",0,6,"22/May/14 14:58","17/Mar/16 19:07","24/May/14 12:55"
PDFBOX-2092,PDFBOX,"Very slow rendering of scanned document",Improvement,CLOSED,Major,Fixed,2.0.0,"2.0.9, (1)",Rendering,optimization,"windows 7","It takes extremely long to render this file to image.
Depends on computer but it can take 15s+ to render 1 page.
When I skip drawing of inserted image /Im0, then rendering is fast. So there is something wrong with drawing that image in
PageDrawer.drawImage(Image awtImage, AffineTransform at)
when I comment out line
graphics.drawImage(awtImage, imageTransform, null);
then rendering process takes 6s",0,"Tilman Hausherr","Juraj Lonc",2,9,"23/May/14 11:14","24/Mar/18 09:41","14/Mar/18 16:59"
PDFBOX-2093,PDFBOX,""bullet" character is not rendered",Bug,CLOSED,Major,Duplicate,2.0.0,None,Rendering,None,,"In this PDF is a "bullet" character which is not rendered.
There is some problem with translating code to glyph.
That character has code 127 (0x7F), but mapping for it is not found
14:33:17,966 DEBUG Type1Glyph2D:127 - FKOYIT+MyriadPro-Cond: glyph mapping for 127 not found
embedded font contains definition for "bullet" character.
But "bullet" character has code 183 in mapping table (from StandardEncoding, I suppose).",0,"Andreas Lehmkühler","Juraj Lonc",0,3,"23/May/14 12:40","24/May/14 12:54","24/May/14 12:54"
PDFBOX-2094,PDFBOX,"Add PrintRequestAttributeSet parameter to silentPrint()",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"The current implementation is not allow us to set the printer , paper Attribute. Could you please implement the silentPrint() to accept printRequestAttributeSet as parameter. affected version from pdfbox-app-2.0.0-20140506.050443-277jar to pdfbox-app-2.0.0-20140506.050443-301jar .",0,"John Hewson",senthuran,0,3,"26/May/14 10:04","17/Mar/16 19:06","23/Jun/14 19:01"
PDFBOX-2095,PDFBOX,"Useless memory allocation in GlyfDescript",Bug,CLOSED,Trivial,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",FontBox,None,,"GlyfDescript#readInstructions() allocates an int array which is never used (replaced by TTFDataStream#readUnsignedByteArray) on the following line. While harmless, this still costs some memory and garbage collector time.",0,"Tilman Hausherr","Petr Slaby",0,1,"26/May/14 12:36","22/Jun/14 14:34","26/May/14 12:49"
PDFBOX-2096,PDFBOX,"ICC profile ignored if number of components is 1",Bug,CLOSED,Major,Fixed,1.8.5,1.8.6,PDModel,None,,"The method getRGBImage in PDPixelMap ignores the ICC profile of an ICCBased color space if the number of components is 1 (ll. 320-321 in 1.8.5):
byte[] map = new byte[] {(byte)0xff};
cm = new IndexColorModel(bpc, 1, map, map, map, Transparency.OPAQUE);
This gives me a blank image in my PDF.
If I use the code in l. 325
cm = colorspace.createColorModel( bpc );
I get the expected result.
I'm sorry that I'm not allowed to attach the affected PDF. If required I would try to generate a different one.",0,"Tilman Hausherr","Dominic Tubach",0,2,"26/May/14 15:14","22/Jun/14 14:34","27/May/14 16:52"
PDFBOX-2097,PDFBOX,"Remove pdfbox-war subproject",Improvement,CLOSED,Critical,Fixed,2.0.0,2.0.0,None,None,,"I'd like to remove the pdfbox-war subproject. It's nothing more like an examples and hasn't any benefit for pdfbox itself.",0,"Andreas Lehmkühler","Andreas Lehmkühler",1,2,"27/May/14 09:59","17/Mar/16 19:08","01/Jun/14 12:35"
PDFBOX-2098,PDFBOX,"Gouraud shading doesn't appear",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,"shading shadingpatte",,"There is a gray gouraud shading on page 6 of the attached PDF file that does't appear. One cause is similar to a few other such examples, e.g. PDFBOX-1947 and PDFBOX-1968, although I don't know if it is a duplicate: the paint context object is created, but getRaster() is never called.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"27/May/14 11:39","17/Mar/16 19:08","30/Aug/14 19:05"
PDFBOX-2099,PDFBOX,"Improve handling and writing of header and trailer versions",Improvement,CLOSED,Minor,Fixed,"1.8.5, 1.8.6, 2.0.0",2.0.0,"Parsing, Writing",None,,"From Maruan Sahyoun in PDFBOX-1922:
I'd think that instead of setting the version the current way (which is replacing the version information in the header) during the parsing the parsing should keep both version informations and getVersion within COSDocument is amended to return the correct information. What I'm suggesting is keeping both versions as this is inline with the spec and ensures that we do not override the current settings in a pdf when opening and saving out.
From me:
COSDocument.java has this:
    public void setVersion( float versionValue )
    {
        // update header string
        if (versionValue != version) 
        {
            headerString = headerString.replaceFirst(String.valueOf(version), String.valueOf(versionValue));
        }
        version = versionValue;
    }
So it does two things, set the version and set the headerString. My first Idea would be to remove the setting of the headerString, because this is 1. a side effect and 2. already done elsewhere. But this was inserted in 2011 by Andreas Lehmkühler as part of PDFBOX-879 so I wonder if I will break something by removing this.
from Andreas Lehmkühler:
As far as I can remember it, I wasn't aware of the fact that a pdf may have to versions (header + trailer). In the hindsight the change wasn't that good. I agree with Maruan Sahyoun, we have to overhaul the get/setVersion methods. Both must take both possible values into account following the pdf spec.
My current thought:
We may need two setters. One for "inside jobs" (i.e. parsing), that sets each version separately. One for "higher" applications (e.g. merging), that sets the version in the header and in the trailer at the same time.
Whatever change will be done, it should not produce a regression in PDFBOX-879.",0,"Andreas Lehmkühler","Tilman Hausherr",0,4,"27/May/14 13:58","17/Mar/16 19:08","08/Mar/15 12:50"
PDFBOX-2100,PDFBOX,"Gouraud shading doesn't work with function",Bug,CLOSED,Major,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",Rendering,"Gouraud shading shad",,"While working on PDFBOX-1915, my GSoC student Shaola Ren pointed out that Gouraud shading probably wouldn't work with a function. I created a test file with postscript and indeed, it doesn't work",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/May/14 10:32","22/Jun/14 14:34","28/May/14 11:11"
PDFBOX-2101,PDFBOX,"Surprising memory consumption when extracting images",Bug,CLOSED,Minor,Fixed,1.8.5,"1.8.6, 2.0.0",Utilities,None,"windows 7","ExtractImages seems to fail to release memory resources on some files in both PDFBox 1.8.5 and trunk.
On this file 4MB file http://digitalcorpora.org/corp/nps/files/govdocs1/239/239665.pdf, if extracting every image on every page (and there are many, many duplicate images), there is an OOM with -Xmx1g. If there is no Xmx and there is > 2.5g available, ExtractImages will work.
With some experimentation, the triggers seem to be JPEG images that have masks. I'm not sure, though, whether the issue is with PDFBox or Java.
Commandlines:
1.8.5:
java -Xmx1g -cp pdfbox-app-1.8.5.jar org.apache.pdfbox.ExtractImages 239665.pdf
2.0_SNAPSHOT:
java -Xmx1g -cp pdfbox-app-2.0.0-SNAPSHOT.jar org.apache.pdfbox.tools.ExtractImages -addkey 239665.pdf
Results:
1.8.5: 906 files before OOM
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
        at java.util.Arrays.copyOf(Arrays.java:2271)
        at java.io.ByteArrayOutputStream.grow(ByteArrayOutputStream.java:113)
        at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.ja
va:93)
        at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:140)
        at org.apache.pdfbox.pdmodel.common.PDStream.getByteArray(PDStream.java:
514)
        at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDP
ixelMap.java:217)
        at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.write2OutputStr
eam(PDPixelMap.java:363)
        at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file(
PDXObjectImage.java:254)
        at org.apache.pdfbox.ExtractImages.processResources(ExtractImages.java:2
02)
        at org.apache.pdfbox.ExtractImages.extractImages(ExtractImages.java:160)

        at org.apache.pdfbox.ExtractImages.main(ExtractImages.java:65)
2.0_SNAPSHOT: 428 files before OOM
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
        at java.util.Arrays.copyOf(Arrays.java:2271)
        at java.io.ByteArrayOutputStream.grow(ByteArrayOutputStream.java:113)
        at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.ja
va:93)
        at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:140)
        at org.apache.pdfbox.io.IOUtils.copy(IOUtils.java:70)
        at org.apache.pdfbox.io.IOUtils.toByteArray(IOUtils.java:52)
        at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit(
SampledImageReader.java:171)
        at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBIma
ge(SampledImageReader.java:154)
        at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage(PDIm
ageXObject.java:171)
        at org.apache.pdfbox.tools.ExtractImages.write2file(ExtractImages.java:2
31)
        at org.apache.pdfbox.tools.ExtractImages.processResources(ExtractImages.
java:206)
        at org.apache.pdfbox.tools.ExtractImages.extractImages(ExtractImages.jav
a:164)
        at org.apache.pdfbox.tools.ExtractImages.main(ExtractImages.java:69)",0,"Andreas Lehmkühler","Tim Allison",0,6,"28/May/14 16:07","07/Sep/14 08:19","15/Jun/14 11:34"
PDFBOX-2102,PDFBOX,"Characters swallowed on COSString.getString()",Bug,CLOSED,Major,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",Parsing,None,,"PDFBOX-1437 seems to have introduced a regression that causes characters like \n to be swallowed when COSString.getString() is called. PDFDocEncoding doesn't handle all valid characters.
testStr = "Line1\nLine2\nLine3\n";
COSString lineFeedString = new COSString(testStr);
assertEquals(testStr, lineFeedString.getString());

//Same as previous but this time as a dictionary value
lineFeedString = new COSString(true);
for (int i = 0; i < testStr.length(); i++) {
    lineFeedString.append(testStr.charAt(i));
}
assertEquals(testStr, lineFeedString.getString()); //currently fails
Direct link to the change causing the regression:
http://svn.apache.org/viewvc?view=revision&revision=1406628",0,"Jeremias Maerki","Jeremias Maerki",0,3,"29/May/14 10:12","22/Jun/14 14:34","01/Jun/14 17:53"
PDFBOX-2103,PDFBOX,"JPXFilter fails to decode some Jpeg2000 images",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,JPEG2000,,"Most of the images in the attached PDF are missing when rendered via PDFBox (tested in 2.0 head). The reason is a NullPointerException in ImageIO:
java.lang.NullPointerException
at com.sun.media.imageioimpl.plugins.jpeg2000.J2KMetadata.replace(J2KMetadata.java:962)
at com.sun.media.imageioimpl.plugins.jpeg2000.J2KMetadata.addNode(J2KMetadata.java:631)
at jj2000.j2k.fileformat.reader.FileFormatReader.readFileFormat(FileFormatReader.java:279)
at com.sun.media.imageioimpl.plugins.jpeg2000.J2KReadState.initializeRead(J2KReadState.java:418)
at com.sun.media.imageioimpl.plugins.jpeg2000.J2KReadState.<init>(J2KReadState.java:189)
at com.sun.media.imageioimpl.plugins.jpeg2000.J2KImageReader.read(J2KImageReader.java:443)
at javax.imageio.ImageReader.read(Unknown Source)
at org.apache.pdfbox.filter.JPXFilter.readJPX(JPXFilter.java:84)
at org.apache.pdfbox.filter.JPXFilter.decode(JPXFilter.java:58)
...
To avoid the problem, the ImageIO has to be instructed to skip reading metadata of the image, i.e. use reader.setInput(iis, true, true) instead of reader.setInput(iis) as shown in the attached patch. This is also what ImageIO.read(stream) does - the method that was used before the commit 1570806.",0,"Andreas Lehmkühler","Petr Slaby",0,2,"30/May/14 09:08","17/Mar/16 19:06","30/May/14 15:39"
PDFBOX-2104,PDFBOX,"Implement transparency groups",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,transparency,,"The attached PDF uses transparency groups, blending and soft masks to create the rounded corners and shades behind images. It appears that these features are not implemented in PDFBox. An implementation proposal is attached in the TransparencyGroup.patch. The basic idea is to create a buffered image, draw the transparency group content onto it and then use the result to produce the soft mask or draw the image on the original g2d.
Note: I am not the (only) author of the proposed change. It was developed in our company few years ago in sources based on a 1.7.x version of PDFBox, mostly by a guy who already left. Over the years, merging of the work done in PDFBox main stream into our source base has become impossible due to many refactorings and other deep going changes done. Now we would like to go the opposite way - where possible - bring the changes and fixes we have done into PDFBox main stream and start to use it in our installations.",0,"John Hewson","Petr Slaby",0,7,"30/May/14 09:54","15/Jan/18 16:58","17/Jun/14 00:21"
PDFBOX-2105,PDFBOX,"Support for multipage TIFFs in CCITTFactory, makes PDFBox capable of doing tiff2pdf",Improvement,CLOSED,Minor,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",PDModel,"CCITTFaxDecode ccitt",,"I created a patch based on Sergey Ushakov's work that handles multipage TIFFs. This allows fast and efficient conversion from TIFF to PDF
The general approach is to provide a new factory method that accepts an image (page) number, and then appropriate page number is located when the CCITT stream is being extracted.
There's a minor inefficiency in this approach because the seek starts from the beginning for each page, causing O(N^2) algorithm when extracting every page, but maximum size for file appears to be 2 GB and the cost for finding a single page will still be low, so I bet this will never come up in practice.
There is no method that tells how many pages TIFF files have. I opted to simply return null from the factory method that accepts page number if there is no such page, so users can use this as condition to break from a TIFF to PDF conversion loop.",0,"Tilman Hausherr","Antti Lankila",2,3,"31/May/14 07:54","22/Jun/14 14:34","31/May/14 21:47"
PDFBOX-2106,PDFBOX,"getSuffix() returns null for RLE encoding",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"ExtractImages fails for the file of PDFBOX-1490. The reason is that there is no suffix defined for run length encoding. I will add this (.png).",0,"Tilman Hausherr","Tilman Hausherr",0,1,"01/Jun/14 12:29","17/Mar/16 19:07","01/Jun/14 12:31"
PDFBOX-2107,PDFBOX,"Make PDFBox XMP library agnostic",Improvement,CLOSED,Minor,Fixed,None,2.0.0,PDModel,None,,"PDFBox should become agnostic to how XMP metadata has been generated. This will also remove the dependency on Jempbox.
The benefit will be that Jembox, Xmpbox as well as other libraries could be used for generating the XMP metadata. PDFBox will only provide methods to get and set the XMP metadata.",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"01/Jun/14 18:07","17/Mar/16 19:07","01/Jun/14 19:18"
PDFBOX-2109,PDFBOX,"CFFParser uses String constructor without encoding",Bug,CLOSED,Trivial,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",FontBox,None,,"The string constructor called in CFFParser#readTagName() should specify an encoding, probably "ISO-8859-1", otherwise it will not work on systems where the default encoding is something "exotic" (we have some with EBCDIC, but I never tried to run PDFBox there). Patch attached.",0,"Tilman Hausherr","Petr Slaby",0,2,"03/Jun/14 10:06","22/Jun/14 14:34","04/Jun/14 10:17"
PDFBOX-2110,PDFBOX,"Font not found: CourierNew",Bug,CLOSED,Major,Fixed,"1.8.5, 2.0.0","1.8.6, 2.0.0",FontBox,None,,"PDF uses non-embedded font "CourierNew".
OS contains font:
/usr/share/fonts/truetype/msttcorefonts/Courier_New.ttf: Courier New:style=Regular,Normal,obyèejné,Standard,????????,Normaali,Normál,Normale,Standaard,Normal
FontManager is not able to find it and warns:
WARN  [org.apache.fontbox.util.FontManager] (http-0.0.0.0-80-6) Font not found: CourierNew
It seems that the problem is in that space in font name "CourierNew" vs. "Courier New"",0,"Andreas Lehmkühler","Juraj Lonc",0,2,"03/Jun/14 13:11","22/Jun/14 14:34","07/Jun/14 16:06"
PDFBOX-2111,PDFBOX,"Cast error in Gouraud shadings",Bug,CLOSED,Major,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",Rendering,"shading shadingpatte",,"There's a bug in Type4ShadingContext and Type5ShadingContext:
        long maxSrcCoord = (int) Math.pow(2, bitsPerCoordinate) - 1;
        long maxSrcColor = (int) Math.pow(2, bitsPerColorComponent) - 1;
should be
        long maxSrcCoord = (long) (Math.pow(2, bitsPerCoordinate) - 1);
        long maxSrcColor = (long) (Math.pow(2, bitsPerColorComponent) - 1);
The problem is that maxSrcCoord is 7FFFFFFF instead of FFFFFFFF when bitsPerCoordinate is 32.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"03/Jun/14 15:14","22/Jun/14 14:34","03/Jun/14 16:06"
PDFBOX-2112,PDFBOX,"Cannot read JBIG2 image: jbig2-imageio is not installed",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,PDModel,JBIG2,fedora,"ERROR - error while creating a xobject
org.apache.pdfbox.filter.MissingImageReaderException: Cannot read JBIG2 image: jbig2-imageio is not installed
at org.apache.pdfbox.filter.JBIG2Filter.decode(JBIG2Filter.java:70)
at org.apache.pdfbox.filter.Filter.decode(Filter.java:58)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:365)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:278)
at org.apache.pdfbox.cos.COSStream.getDecodeResult(COSStream.java:235)
at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.<init>(PDImageXObject.java:94)
at org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject(PDXObject.java:65)
at org.apache.pdfbox.pdmodel.PDResources.getXObjects(PDResources.java:247)
at org.apache.pdfbox.util.PDFStreamEngine.getXObjects(PDFStreamEngine.java:658)
at org.apache.pdfbox.util.operator.Invoke.process(Invoke.java:53)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:608)
at org.coin.util.pdf.pdfbox.TextLocation.processOperator(TextLocation.java:277)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:311)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:266)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:248)
at org.coin.util.pdf.pdfbox.TextLocation.locateText(TextLocation.java:193)
at org.coin.util.pdf.pdfbox.TextLocation.contains(TextLocation.java:70)
at org.coin.util.pdf.pdfbox.TextLocation.contains(TextLocation.java:52)
at mt.paraph.folder.util.ReferenceInfo.containsReferenceTag(ReferenceInfo.java:204)
at mt.paraph.folder.ParaphFolder.hasRefReplacementByChronoSeal(ParaphFolder.java:3525)",0,"Tilman Hausherr","David KELLER",0,4,"04/Jun/14 07:46","04/Jun/14 19:24","04/Jun/14 09:32"
PDFBOX-2113,PDFBOX,"Update documentation to reflect the requirement for JBIG2 decoders",Improvement,CLOSED,Minor,Fixed,"1.8.4, (3)",2.0.0,Documentation,None,,"The website should be enhanced to reflect the requirement for Levigo decoder for JBIG2. (http://pdfbox.apache.org/dependencies.html)",0,"Maruan Sahyoun","Maruan Sahyoun",0,6,"04/Jun/14 13:30","17/Mar/16 19:06","14/Oct/14 17:10"
PDFBOX-2114,PDFBOX,"ObjStm is being processed to late",Bug,CLOSED,Major,Fixed,None,"1.8.6, 2.0.0",None,None,,"I have a pdf that has the following
1 0 obj^M
<</Type/Catalog/Pages 5 0 R/Metadata 8 0 R/AcroForm<</Fields[]>>>>^M
and
22 0 obj^M
<</Type /ObjStm /N 2/First 10/Length 175/Filter /FlateDecode>>stream^M
Inside the 22 0 obj is the 5 0 which holds the pages. When 1 0obj is parsed then a place holder is set for the 5 0Obj with it's value set to null. When 22 0 is parsed it is not expanded so 5 0 is always null.
When I go to get all the pages
document.getDocumentCatalog().getAllPages() it returns 0 since
(COSDictionary)root.getDictionaryObject( COSName.PAGES ) is null.
Should ObjStm not get processed immediately so the objects tha are in there are filled?
I have a pdf as an example but it is confidential so I can send it someone off list",0,"Tilman Hausherr","Dave Smith",0,2,"04/Jun/14 20:04","22/Jun/14 14:34","11/Jun/14 10:59"
PDFBOX-2115,PDFBOX,"Use unfiltered stream in gouraud shadings",Bug,CLOSED,Major,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",Rendering,"shading shadingpatte",,"Gouraud shadings calls getFilteredStream(), it should call getUnfilteredStream(). This bug didn't make trouble until now, because all the streams didn't have filters. In PDFBOX-1915, several PDFs have appeared that have encoded streams.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"04/Jun/14 21:57","22/Jun/14 14:34","04/Jun/14 22:05"
PDFBOX-2117,PDFBOX,"AxialShadingContext is slow",Sub-task,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0",2.0.0,Rendering,"shading shadingpatte",,"AxialShadingContext#getRaster() is on top of profiler hot spots in documents that use an axial shading. Inside it, the slowest part is calling PDColorSpaceRGB#toRGB() and PDFunctionType3#eval() (in this order).",0,"Shaola Ren","Petr Slaby",0,5,"05/Jun/14 08:36","17/Mar/16 19:07","31/Jul/14 18:13"
PDFBOX-2118,PDFBOX,"Remove ICU4J dependency",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,ICU4J,,"The ICU4J lib is quite big and we are just using a small part of it. Both features are provided by the JDK (java.text.Normalizer and java.text.Bidi) since 1.6 so that it should be possible to remove the ICU4J dependency.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"05/Jun/14 17:02","17/Mar/16 19:08","22/Jun/14 10:25"
PDFBOX-2120,PDFBOX,"Regression: Type 1 font corrupted",Bug,CLOSED,Major,Fixed,"1.8.6, 2.0.0","1.8.6, 2.0.0",None,regression,,"You get a warning when opening output in adobe reader
Blank line after "cleartomark" missing in fontfile
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar WriteDecodedDoc t1subset2.pdf",0,"Tilman Hausherr","simon steiner",0,2,"06/Jun/14 12:27","22/Jun/14 14:34","09/Jun/14 14:33"
PDFBOX-2122,PDFBOX,"FontBox's TTFDataStream doesn't set timezone in readInternationalDate",Bug,CLOSED,Trivial,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",FontBox,None,,"TTFDataStream doesn't set the timezone for the calendar. GregorianCalendar defaults to the system's timezone. This means that people in different timezones will get slightly different dates. (TIKA-1325).
One TTF Spec (https://developer.apple.com/fonts/TTRefMan/RM06/Chap6.html) doesn't specify the timezone, but my guess would be UTC...except that it is Apple, so maybe it's Cupertino.",0,"Tilman Hausherr","Tim Allison",0,4,"06/Jun/14 17:13","22/Jun/14 14:34","09/Jun/14 16:04"
PDFBOX-2123,PDFBOX,"Optimize reading of 1-bit depth images in SampleImageReader",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Reading of 1-bit depth (black and white) images in SampleImageReader can be optimized. The attached patch reduces the time spent in SampleImageReader#getRGBImage() from 4 seconds to 1.8 second on my notebook with the attached PDF.",0,"Tilman Hausherr","Petr Slaby",0,2,"06/Jun/14 22:00","17/Mar/16 19:06","07/Jun/14 09:41"
PDFBOX-2127,PDFBOX,"Optimize calls of getPixel in SampledImageReader and PDImageXObject",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"When calling Raster#getPixel() in a loop, it is a good practice to make sure that the result array is allocated only once. SampledImageReader#getStencilImage() and PDImageXObject#applyMask() fail to do that. When rendering the attached example, this results in allocating 24 053 760 arrays containing 3 floats, which is about 0.5GB of data if my math is right. Also, I have noticed that SampledImageReader#getStencilImage() reads and sets the same data w/o modification if alpha of a pixel != 255.
After applying the attached patch, rendering time of the document drops from 8.5s to 7.4s. Not as much as I have expected - array allocation and the garbage collector seem to be fast - but still...
Note: Rendering of the document is wrong, it does not find some of its fonts, but that is irrelevant for this issue.",0,"Andreas Lehmkühler","Petr Slaby",0,3,"10/Jun/14 09:53","17/Mar/16 19:08","10/Jun/14 17:15"
PDFBOX-2129,PDFBOX,"Add PDFBox version to the title",Improvement,CLOSED,Trivial,Fixed,"1.8.5, 2.0.0","1.8.6, 2.0.0","Swing GUI, (1)",None,,"Add the PDFBox version to the title of the PDFReader",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"10/Jun/14 17:21","22/Jun/14 14:34","10/Jun/14 17:32"
PDFBOX-213,PDFBOX,"Text Extraction with Formatting","New Feature",CLOSED,Minor,Duplicate,None,None,"Text extraction",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1589018
Originally submitted by cetinsert on 2006-11-01 17:50.
Is it possible to extract text from a PDF without
ignoring the formatting?
HTML tags might be used for example. I thought the
PDFText2Html class would do the trick but it does not.
Thank you for reading.
[comment on SourceForge]
Originally sent by rrufai.
Logged In: YES
user_id=1776491
Originator: NO
It's sent.
[comment on SourceForge]
Originally sent by rrufai.
Logged In: YES
user_id=1776491
Originator: NO
What email address should I send it to?
[comment on SourceForge]
Originally sent by cetinsert.
Logged In: YES
user_id=1562185
Originator: YES
@ rruffai
> You might send a compiled 32-bit windows or linux binary personally to me.
> (I'm a user of pdftohtml.)
I messed things up. This was also PDFBox. Hehe, sorry.
[comment on SourceForge]
Originally sent by cetinsert.
Logged In: YES
user_id=1562185
Originator: YES
@ rrufai
what is the trouble you have with handling underlines?
You might send a compiled 32-bit windows or linux binary personally to me. (I'm a user of pdftohtml.)
[comment on SourceForge]
Originally sent by rrufai.
Logged In: YES
user_id=1776491
Originator: NO
Hi Ben,
I've extended PDFText2Html to handle bold, new lines (with <br> tags). However, I'm having trouble figuring out how to handle underlines.
Also, I don't know how to post updates.
Regards,
Raimi
[comment on SourceForge]
Originally sent by cetinsert.
Logged In: YES
user_id=1562185
Uhmm... well bold, italic, underlined etc... would be a good
beginning but my ultimate wish would be something like
quoted below:
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">
<pdf2xml>
<page number="1" position="absolute" top="0" left="0"
height="1262" width="892">
<fontspec id="0" size="16" family="Times" color="#000000"/>
<fontspec id="1" size="16" family="Times" color="#000000"/>
<fontspec id="2" size="16" family="Times" color="#000000"/>
<text top="110" left="106" width="137" height="18"
font="0"><i>She </i>told <b>me</b>. Ã¤ÂµÃ </text>
</page>
</pdf2xml>
I think I have made a mistake by naming it "Text Extraction
with Formatting"... I should have put my question under a
more fitting title, something like "PDF to (HTML/)XML
Conversion with formatting".
Thank you very much for your prompt replies. _
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
Specifically are you looking only for bold & italic or other things?
[comment on SourceForge]
Originally sent by cetinsert.
Logged In: YES
user_id=1562185
That's exactly what I am looking for. But is this not a
priority issue for the PDFBox package? It would take me
quite a time to extend the stripper on my own. One of the
PDFBox developers might do it better I think.
If you insist that it's a user's issue and PDFBox developers
would not invest their time in such an extension, could you
at least tell me whether you have any links to any
information regarding this matter?
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
HTML tags are not used to format a PDF document. Font information is available but can be tricky to get what you
want. You will need to extend PDFTextStripper and override writeCharacters to get formatting such as bold/italic.
Is that what you are looking for?
Ben",0,"Andreas Lehmkühler",Anonymous,1,1,"02/Nov/06 01:50","30/Oct/13 09:29","30/Oct/13 09:29"
PDFBOX-2131,PDFBOX,"Avoid constructing debug messages if debug log is off",Improvement,CLOSED,Trivial,Fixed,2.0.0,2.0.0,None,None,,"Concatenation and formatting of strings takes some time. If a debug message is written to the log at a frequently called place, it should be surrounded by an if(LOG.isDebugEnabled()). Using the if everywhere does not do any harm either.
Attached patch changes two classes which were sticking out in the profiler. The difference in performance is not that big, but, in my application, each millisecond counts.",0,"Tilman Hausherr","Petr Slaby",0,2,"11/Jun/14 11:52","17/Mar/16 19:07","12/Jun/14 12:16"
PDFBOX-2133,PDFBOX,"Parsing of a Type1 font fails with a NumberFormatException",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,FontBox,None,,"When rendering the attached PDF, parsing of a font fails with a NumberFormatException. Many NullPointerExceptions and "missing fonts" are being reported then. The PDF rendered fine in our modified 1.7.x where fonts were read using AWT. I did not try with current 1.8.x. Stack traces are attached.
Note: This is just a file from my test suite, not a production problem. I am not sure whether the parser or the PDF is wrong, but the fact that it renders fine in Acrobat and in 1.7.x indicates that the former is true. The offending font is F2, if I catch and ignore the runtime exception in PDResources#getFonts() then it is reported as missing in the PageDrawer.",0,"John Hewson","Petr Slaby",0,3,"11/Jun/14 13:28","17/Mar/16 19:08","12/Jun/14 23:25"
PDFBOX-2135,PDFBOX,"Parsing of a Type1 font fails with a ClassCastException",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,FontBox,None,,"A ClassCastException is reported in Type1CharStringParser while rendering the attached PDF. The PDF was rendered correctly in 1.7.x where the fonts were read using AWT, I did not try with latest 1.8.x.
Note: The PDF is just one of my test suite files, not a production problem. I am not sure whether the PDF or the parser is wrong, but I assume the later as Acrobat and PDFBox 1.7.x (AWT) are able to read it correctly.",0,"John Hewson","Petr Slaby",0,3,"11/Jun/14 14:25","17/Mar/16 19:26","13/Jun/14 00:10"
PDFBOX-2136,PDFBOX,"Use the Type1Parser to extract the encoding",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"PDType1Font#getEncodingFromFont implements its own type1 parser instead of using the new Type1Parser coming with fontbox",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"11/Jun/14 17:24","17/Mar/16 19:07","11/Jun/14 17:28"
PDFBOX-2137,PDFBOX,"Rendering of Type3 string fails with NPE",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"Rendering of the attached PDF fails with a NPE in PDFStreamEngine at the line 395 (float spaceWidthDisp = ...) because the textMatrix field is null. The reason is that the textMatrix gets reset while processing the first character of the string in PageDrawer#drawType3String(). The attached patch fixes the problem, but I am not quite sure whether it is the right solution.
To debug this, set a breakpoint in PDFStreamEngine#processEncodedText() with the condition "string.length == 2 && string[1] == 67" and watch the textMatrix field vanish after the first character has been processed.",0,"Andreas Lehmkühler","Petr Slaby",0,3,"11/Jun/14 20:43","17/Mar/16 19:38","13/Jun/14 00:22"
PDFBOX-214,PDFBOX,"Can't ExtractImages an IndexedCMYK raster",Bug,CLOSED,Minor,Incomplete,None,None,PDModel,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1589598
Originally submitted by rpresser on 2006-11-02 14:50.
I have a lot of these images; they're part of my
everyday workflow. CMYK images are extremely common in
the prepress world; IndexedCMYK is too, because it is
the default setting for Adobe Distiller when the total
number of unique colors is less than 256.
C:\temp\PDFBox-0.7.3\bin>ExtractImages.exe 797-14-1.pdf
Writing image:Im1-2
Exception in thread "main"
java.lang.UnsupportedOperationException
at
java.awt.image.ColorModel.createCompatibleSampleModel(ColorModel.java:684)
at
java.awt.image.ColorModel.createCompatibleWritableRaster(ColorModel.java:677)
at
org.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:143)
at
org.pdfbox.pdmodel.graphics.xobject.PDPixelMap.write2OutputStream(PDPixelMap.java:166)
at
org.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file(PDXObjectImage.java:118)
at
org.pdfbox.ExtractImages.extractImages(ExtractImages.java:161)
at
org.pdfbox.ExtractImages.main(ExtractImages.java:72)
It turns out that my sample image 797-14-1.pdf was too
large to upload to sourceforge. I created a reduced
resolution version of it, and got a different exception
when attempting to ExtractImages on it:
C:\temp>extractimages test.pdf
Writing image:R29-1
Exception in thread "main" java.io.IOException: Not
implemented
at
org.pdfbox.pdmodel.graphics.color.PDDeviceCMYK.createColorModel(PDDeviceCMYK.java:135)
at
org.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:142)
at
org.pdfbox.pdmodel.graphics.xobject.PDPixelMap.write2OutputStream(PDPixelMap.java:166)
at
org.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file(PDXObjectImage.java:118)
at
org.pdfbox.ExtractImages.extractImages(ExtractImages.java:161)
at
org.pdfbox.ExtractImages.main(ExtractImages.java:72)
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1589598&file_id=201210
test.pdf (application/pdf), 99717 bytes
example PDF
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
Originator: NO
Note: see 797-14-1.pdf
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
Originator: NO
Note: requested original pdf file from rpresser
[comment on SourceForge]
Originally sent by rpresser.
Logged In: YES
user_id=298615
Email me at rpresser AT gmail DOT com to get the original
PDF, if desired.",0,"Andreas Lehmkühler",Anonymous,0,0,"02/Nov/06 22:50","21/Jul/14 15:17","15/Dec/10 21:50"
PDFBOX-2140,PDFBOX,"non embedded Type1 symbol glyph not rendered",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,type1font,,"The first page of the file from PDFBOX-2133 is missing its "TM".",0,"John Hewson","Tilman Hausherr",0,2,"13/Jun/14 07:24","17/Mar/16 19:07","30/Aug/14 02:54"
PDFBOX-2142,PDFBOX,"some /ICCBased colorspaces not rendered correctly",Bug,CLOSED,Major,Fixed,2.0.0,"2.0.9, (1)",Rendering,None,,"I have created a test file from PostScript to show that CIELAB and XYZ some colors are different when rendered by PDFBox.
Btw the RGB colors in the file have no meaning, nor do the colors have a relationship between each others, i.e. they do not have to look identical to any other color anywhere.
The postscript file was created based on files by James Cloos.",0,"Tilman Hausherr","Tilman Hausherr",0,4,"14/Jun/14 13:25","24/Mar/18 09:41","21/Feb/18 16:55"
PDFBOX-2144,PDFBOX,"Provide a pluggable font manager",Improvement,CLOSED,Major,Fixed,None,2.0.0,Rendering,None,,"Our J2EE application has all fonts and resources configured and stored in its database. No files are accessed directly from file system or from system environment. To make PDFBox compatible with this philosophy, we need the FontManager in pdfbox and fontbox to be pluggable, e.g. as shown in the attached patch.
The proposal defines a FontManager interface and default implementation which is the original one. FontManager then needs to be configured on and propagated from PDFStreamEngine and PageDrawer. It should also be configurable on PDFRenderer, which is not shown in the patch. There I would suggest to introduce a configuration object which would take care about all the current and future options of PDFRenderer.",0,"John Hewson","Petr Slaby",1,4,"16/Jun/14 13:32","17/Mar/16 19:06","30/Aug/14 02:54"
PDFBOX-2145,PDFBOX,"Clean up PDFStreamEngine and PDFTextStripper",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,"Text extraction",None,,"PDFStreamEngine and PDFTextStripper don't really meet our coding conventions and have several unused methods and deprecated code which can safely be removed.
This should clear the way to fixing some bugs in PDFStreamEngine, PDFTextStripper and the various PDFont classes related to text encoding.",0,"John Hewson","John Hewson",0,5,"17/Jun/14 05:08","17/Mar/16 19:26","17/Jun/14 05:17"
PDFBOX-2146,PDFBOX,"remove unused imports / fix imports",Improvement,CLOSED,Trivial,Fixed,2.0.0,2.0.0,None,None,,,0,"Tilman Hausherr","Tilman Hausherr",0,1,"18/Jun/14 14:31","17/Mar/16 19:08","18/Jun/14 15:50"
PDFBOX-2147,PDFBOX,"Clean up code with "inspect and transform"",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"I'm doing some code clean up with Netbeans "Inspect and Transform" feature. (Which I already used for PDFBOX-2146)",0,"Tilman Hausherr","Tilman Hausherr",0,3,"18/Jun/14 16:42","17/Mar/16 19:07","27/Jul/14 06:16"
PDFBOX-2148,PDFBOX,"Handle the Fully Qualified Name of duplicate fields better",Improvement,CLOSED,Minor,Fixed,1.8.5,2.0.0,"AcroForm, (1)",None,,"When there are multiple copies with the same field name, the getFullyQualifiedName for each kid in the list of PDField objects returns the name of the parent, followed by ".null". So if the parent field is called "Button2" and it has 4 instances the result of printing out all the names will be:
Button2.null
Button2.null
Button2.null
Button2.null
Acrobat names these widgets using consecutive numbers, like so:
Button2.0
Button2.1
Button2.2
Button2.3
I had a look at the PDF ISO documentation regarding Field Names (12.7.3.2, p. 434) and this convention is not mentioned there, but it might be a good idea to use it anyway, no?
I'm attaching a sample code snippet and a PDF that show this issue.",0,"Maruan Sahyoun","Gilad Denneboom",0,4,"18/Jun/14 20:30","17/Mar/16 19:07","05/Feb/15 22:37"
PDFBOX-2149,PDFBOX,"Font Refactoring",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,"FontBox, (1)",None,,"To fix bugs such as PDFBOX-2140 and to enable Unicode TTF embedding we need to sort out long-standing font/text encoding issues. The main issue is that encoding is done in an ad-hoc manner, sometimes in the PDFont subclasses, sometimes elsewhere. For example TTFGlyph2D does its own decoding, and this code is copy & pasted into PDTrueTypeFont. Likewise, PDFont handles CMaps and Encodings despite the fact that these two encoding methods are mutually exclusive. The end result is that the process of reading Encodings/CMaps is often following rules which are completely invalid for that font type but mostly work by luck.
Phase 1
Refactor PDFont subclasses to remove setXXX methods which allow the object to be corrupted. Proper use of inheritance can remove all cases where public setXXX methods are used during font loading.
Clean up TTF loading and the loadTTF in anticipation of Unicode TTF embedding, FontBox's TrueTypeFont class is externally mutable via setXXX methods used only by TTFParser: these can be made package-private.
the Encoding class and EncodingManager could do with some cleaning up prior to further refactoring.
PDSimpleFont does not do anything, its functionality should be moved into its superclass, PDFont.
PDFont#determineEncoding() loads CMaps when only Encodings are applicable, and vice versa. Loading needs to be pushed down into the appropriate subclasses, as a starting point the relevant code should at least be copied into the relevant subclasses ready for further refactoring.
TTFGlyph2D does its own decoding of char codes, rather than using the font's #encode method (fair enough because #encode is broken) and there's a copy and pasted version of the same code in PDTrueTypeFont - we need to consolidate this code into PDTrueTypeFont where it belongs.
Phase 2
Refactor loading of CMaps and Encodings from font dictionaries, this will involve changes to PDFont and its subclasses to delegate loading to subclasses where it can be properly encapsulated
May need to alter the class hierarchy w.r.t CIDFont to facilitate this, as CIDFont isn't really a PDFont - it's parent Type0 font is responsible for its CMap. We'll see.
Phase 3
Refactor the decoding of character codes by PDFont and its subclasses, this will involve replacing the #getCodeFromArray, #encode and #encodeToCID methods.
Fix decoding of content stream character codes in PDFStreamEngine, using the newly refactored PDFont and using the current font's CMap to determine the code width.",0,"John Hewson","John Hewson",0,5,"18/Jun/14 20:39","17/Mar/16 19:07","30/Aug/14 02:51"
PDFBOX-2151,PDFBOX,"Replace log4j with commons logging",Improvement,CLOSED,Minor,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Preflight,None,,"Suggested by Simon Steiner on the dev list: "Should pdfbox move few bits of log4j to commons logging?"",0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Jun/14 05:34","19/Sep/14 14:40","22/Jun/14 16:32"
PDFBOX-2152,PDFBOX,"Unable to print the PDF with Acrobat shrink to fit print",Improvement,CLOSED,Minor,"Won't Fix",2.0.0,2.0.0,Rendering,None,,"Could you please create an enhancement for pdfbox 2.0 to make the default scaling to actual size. Current default is shrink to fix and its not matching with the acrobat shrink to fit print, pdfbox one is too small than adobe acrobat.",0,"John Hewson",senthuran,0,2,"19/Jun/14 08:27","03/Jul/14 02:07","03/Jul/14 02:07"
PDFBOX-2153,PDFBOX,"Setting the correct clipping path for shading",Bug,CLOSED,Major,Fixed,"1.8.5, (3)","1.8.7, 2.0.0",Rendering,"shading shadingpatte",,"While doing tests with the file eci_altona-test-suite-v2_technical_H.pdf (uncompressed) of PDFBOX-1915 I noticed that by removing a "W" (modifies the clipping region) operator of a type 7 shading I got a lot more correct shadings (type 6 and lower). It looked like PDFBox had been using the clipping of the type 7 when drawing the type 6, which is just a rectangle above in that rendering. This resulted in a blank.
By adding
graphics.setClip(getGraphicsState().getCurrentClippingPath());
in PageDrawer.shfill() just before the graphics.fill() I get several files to render correctly that I hadn't before.
(Setting null will probably do the same, didn't test that yet).
The following PDFs are rendered correctly with the change:
McAfee-ShadingType7.pdf
eci_altona-test-suite-v2_technical_H.pdf
crestron-p9.pdf (these three found in PDFBOX-1915)
PDFBOX-1451.pdf ("alfresco")
PDFBOX-1940.pdf ("chart")
PDFBOX-1861-tracemonkey.pdf p.11
Not solved by the change:
PDFBOX-2098-asyTUG.pdf p.6 (this one doesn't use shfill)
PDFBOX-1861-tracemonkey.pdf p.6 (not shading)
PDFBOX-1416.pdf (not shading)
texample-rgb-triangle.pdf (John has an explanation about that one)
WDYT? Is there any reason NOT to set the clipping path in PageDrawer.shFill() ?",0,"Tilman Hausherr","Tilman Hausherr",0,3,"20/Jun/14 07:01","19/Sep/14 14:40","22/Jun/14 16:29"
PDFBOX-2154,PDFBOX,"NPE while rendering files with type3 fonts",Bug,CLOSED,Major,Fixed,"1.8.3, (4)",1.8.7,None,type3,,"I get this NPE with the files of PDFBOX-1145, PDFBOX-1794, PDFBOX-2023 in 1.8 only:
java.lang.NullPointerException
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:210)
at org.apache.pdfbox.pdmodel.font.Type3StreamParser.createImage(Type3StreamParser.java:59)
at org.apache.pdfbox.pdmodel.font.PDType3Font.createImageIfNecessary(PDType3Font.java:80)
at org.apache.pdfbox.pdmodel.font.PDType3Font.drawString(PDType3Font.java:102)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:256)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:499)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:135)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:801)
at org.apache.pdfbox.util.TestPDFToImage.doTestFile(TestPDFToImage.java:232)
at org.apache.pdfbox.util.TestPDFToImage.testRenderImage(TestPDFToImage.java:344)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at junit.framework.TestCase.runTest(TestCase.java:168)
at junit.framework.TestCase.runBare(TestCase.java:134)
at junit.framework.TestResult$1.protect(TestResult.java:110)
at junit.framework.TestResult.runProtected(TestResult.java:128)
at junit.framework.TestResult.run(TestResult.java:113)
at junit.framework.TestCase.run(TestCase.java:124)
at junit.framework.TestSuite.runTest(TestSuite.java:232)
at junit.framework.TestSuite.run(TestSuite.java:227)
at junit.textui.TestRunner.doRun(TestRunner.java:116)
at junit.textui.TestRunner.start(TestRunner.java:180)
at junit.textui.TestRunner.main(TestRunner.java:138)
at org.apache.pdfbox.util.TestPDFToImage.main(TestPDFToImage.java:394)
After fixing PDFStreamEngine.processStream() like this
        if (aPage == null)
        {
            graphicsState = new PDGraphicsState();
        }
        else
        {
            graphicsState = new PDGraphicsState(aPage.findCropBox());
        }
I get another NPE:
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.font.Type3StreamParser.createImage(Type3StreamParser.java:60)
at org.apache.pdfbox.pdmodel.font.PDType3Font.createImageIfNecessary(PDType3Font.java:80)
at org.apache.pdfbox.pdmodel.font.PDType3Font.drawString(PDType3Font.java:102)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:256)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:506)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:564)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:275)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:242)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:222)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:135)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:801)
at org.apache.pdfbox.util.TestPDFToImage.doTestFile(TestPDFToImage.java:232)
at org.apache.pdfbox.util.TestPDFToImage.testRenderImage(TestPDFToImage.java:344)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at junit.framework.TestCase.runTest(TestCase.java:168)
at junit.framework.TestCase.runBare(TestCase.java:134)
at junit.framework.TestResult$1.protect(TestResult.java:110)
at junit.framework.TestResult.runProtected(TestResult.java:128)
at junit.framework.TestResult.run(TestResult.java:113)
at junit.framework.TestCase.run(TestCase.java:124)
at junit.framework.TestSuite.runTest(TestSuite.java:232)
at junit.framework.TestSuite.run(TestSuite.java:227)
at junit.textui.TestRunner.doRun(TestRunner.java:116)
at junit.textui.TestRunner.start(TestRunner.java:180)
at junit.textui.TestRunner.main(TestRunner.java:138)
at org.apache.pdfbox.util.TestPDFToImage.main(TestPDFToImage.java:394)",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"20/Jun/14 21:09","19/Sep/14 14:40","28/Jun/14 14:40"
PDFBOX-2155,PDFBOX,"Fix JavaDocs warnings",Bug,CLOSED,Trivial,Fixed,"1.8.6, 2.0.0",2.0.0,"Documentation, (3)",None,,"after fixing PDFBOX-1897 with additional changes some new warnings were introduced. In addition warnings in sub projects should be fixed.",0,"Maruan Sahyoun","Maruan Sahyoun",0,1,"21/Jun/14 09:24","17/Mar/16 19:08","26/Oct/14 19:37"
PDFBOX-2156,PDFBOX,"different shading patterns at different resolutions when ctm is null",Bug,CLOSED,Major,Fixed,"1.8.5, (3)","1.8.7, 2.0.0",Rendering,"shading shadingpatte",,"The attached file renders incorrectly except at 72dpi; at other resolutions, there are different results that get worse as the resolution gets higher. For shading types 2 and 3, this effect happens only in the 1.8 versions, not in the 2.0 version. For shading types 4 and up, it happens in both 1.8 and 2.0.
The reason is that the transformation is incomplete if the ctm is null.
I found the file here and it was created by Matthias Kramm:
https://github.com/jdapena/swftools/tree/master/spec",0,"Tilman Hausherr","Tilman Hausherr",0,1,"21/Jun/14 17:35","19/Sep/14 14:40","22/Jun/14 16:27"
PDFBOX-2157,PDFBOX,"Remove AFMFormatter",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"The AFMFormatter class is used to create the font metrics of a CFF font. It makes a detour by creating an AFM file first and parsing it the create the font metrics. That isn't needed as we can create the font metrics directly when parsing the CFF font.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"22/Jun/14 13:09","17/Mar/16 19:07","22/Jun/14 14:26"
PDFBOX-2158,PDFBOX,"ExtractText missing most of text in this PDF file, due to font bounding box with minus infinity",Bug,CLOSED,Major,Fixed,"1.8.5, 2.0.0",2.0.0,"Parsing, (1)",None,windows,"Attached PDF file is missing most of the text when processed by the ExtractText example program
I traced it down to PDFontDescriptorDictionary.getFontBoundingBox() getting a rectange for COSName.FONT_BBOX that contained a ymin value of minus infinity. That method then creates a PDRectangle which calculates a bounding box with a ymin value of -65,329, and results in an enormous text size, and things go downhill from there. The text cannot be matched up, and most of it ends up being discarded.
I was able to hack a fix by doing a check in the constructor PDRectangle.PDRectangle( COSArray array ) for big negative numbers and setting them to 0. With that change, all the text came through as expected. However, I don't have enough familiarity with the code to understand what a real fix ought to look like.
The PDF file looks to be fine by other programs such as Acrobat and NitroPDF",0,"Tilman Hausherr","Joel Hirsh",0,5,"22/Jun/14 20:39","17/Mar/16 19:07","24/Nov/15 20:22"
PDFBOX-2160,PDFBOX,"PDFTextStripper doesn't always write paragraph start",Bug,CLOSED,Trivial,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",None,None,,"In some cases PDFTextStripper writes more paragraph ends than paragraph starts.",0,"Tilman Hausherr","Tim Allison",0,2,"23/Jun/14 18:37","24/Oct/14 15:32","28/Jun/14 13:02"
PDFBOX-2163,PDFBOX,"inline image with EI in the middle incorrectly parsed",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Parsing,inline,,"This PDF
http://digitalcorpora.org/corp/nps/files/govdocs1/876/876636.pdf
has an exception because the end of an inline image is improperly detected. The stream looks like this:
BI
  /W 452
  /H 169
  /BPC 8
  /CS /RGB
  /D [0.0 1.0 0.0 1.0 0.0 1.0]
  /F [/A85 /Fl]
ID
......................................................
....................................................EI
......................................................
...
....
EI Q
The inline images are handled in PDFStreamParser. This is tricky, we look for followup bin data to check that it isn't an EI in the middle, but here it isn't bin data, but ascii85 stuff. We also can't request that there be a LF before the EI, because I remember that I had a PDF at work created by a well known company that doesn't use it.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"26/Jun/14 20:14","11/Nov/14 19:30","28/Jun/14 08:09"
PDFBOX-2164,PDFBOX,"NPE when reading non-terminal fields",Bug,CLOSED,Major,Fixed,"1.8.6, 2.0.0","1.8.7, 2.0.0","AcroForm, (1)",None,,"I'm getting an NPE on the following two files when calling PDDocumentCatalog#getAcroForm() on the two attached PDF files.
Note: These two PDF files are from the public record in the US.",0,"John Hewson","John Hewson",0,1,"27/Jun/14 05:18","17/Mar/16 19:38","27/Jun/14 05:38"
PDFBOX-2166,PDFBOX,"AIOOBE with barcode ttf font",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Writing,"42 barcode font true",,"Inspired by this complaint
http://stackoverflow.com/a/24432822/535646
I tried loading barcode fonts with PDFBox, with the command
PDTrueTypeFont.loadTTF()
With the file free3of9.ttf that I can get here
http://www.barcodesinc.com/free-barcode-font/
I get this exception:
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 42
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.makeFontDescriptor(PDTrueTypeFont.java:337)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:127)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:80)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"27/Jun/14 16:08","19/Sep/14 14:40","29/Jul/14 15:55"
PDFBOX-2167,PDFBOX,"NPE in PDTrueTypeFont.makeFontDescriptor",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"I get an NPE with the file from
http://digitalcorpora.org/corp/nps/files/govdocs1/268/268554.pdf
java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.makeFontDescriptor(PDTrueTypeFont.java:292)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getFontDescriptor(PDTrueTypeFont.java:150)
 at org.apache.pdfbox.pdmodel.font.PDFont.getFontWidth(PDFont.java:814)
IOException for file 268554.pdf
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getFontWidth(PDTrueTypeFont.java:382)
 at org.apache.pdfbox.pdmodel.font.PDFont.getFontWidth(PDFont.java:312)
 at org.apache.pdfbox.pdmodel.font.PDFont.getSpaceWidth(PDFont.java:855)
 at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:328)
 at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:44)
 at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:521)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:267)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:226)
 at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:209)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:174)
 at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:227)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:160)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:109)
I first thought it is the same as PDFBOX-2165, but it's a different line number.",0,"John Hewson","Tilman Hausherr",0,2,"27/Jun/14 20:28","17/Mar/16 19:38","01/Jul/14 00:45"
PDFBOX-2168,PDFBOX,"Different behavior of Undo feature when form was pre filled by PDFBox",Bug,CLOSED,Minor,Fixed,None,2.0.0,AcroForm,Appearance,,"When a form is pre filled by PDFBox the Undo feature in Adobe Reader will reset the field value but not change the visible appearance of the field i.e. the old value will still be visible, The same form filled by Adobe Reader/Acrobat behaves correctly.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"28/Jun/14 16:40","17/Mar/16 19:08","11/Mar/15 07:14"
PDFBOX-2169,PDFBOX,"NPE in PDTrueTypeFont.makeFontDescriptor",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"The attached file brings this exception when rendering or when extracting text
java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.makeFontDescriptor(PDTrueTypeFont.java:161)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getFontDescriptor(PDTrueTypeFont.java:150)
 at org.apache.pdfbox.pdmodel.font.PDFont.getFontWidth(PDFont.java:814)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getFontWidth(PDTrueTypeFont.java:382)
 at org.apache.pdfbox.pdmodel.font.PDFont.getFontWidth(PDFont.java:312)
 at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:377)
 at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:44)
 at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:508)",0,"John Hewson","Tilman Hausherr",0,4,"28/Jun/14 20:28","17/Mar/16 19:38","01/Jul/14 03:51"
PDFBOX-2170,PDFBOX,"java.lang.ClassCastException: org.apache.fontbox.cff.CharStringCommand cannot be cast to java.lang.Integer",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,type1font,,"p.59 of the attached file fails with
java.lang.ClassCastException: org.apache.fontbox.cff.CharStringCommand cannot be cast to java.lang.Integer
 at org.apache.fontbox.cff.Type1CharStringParser.parse(Type1CharStringParser.java:110)
 at org.apache.fontbox.cff.Type1CharStringParser.parse(Type1CharStringParser.java:89)
 at org.apache.fontbox.cff.Type1CharStringParser.parse(Type1CharStringParser.java:72)
 at org.apache.fontbox.type1.Type1Font.getType1CharString(Type1Font.java:151)
 at org.apache.fontbox.type1.Type1Font$Mapping.getType1CharString(Type1Font.java:207)
 at org.apache.pdfbox.pdfviewer.font.Type1Glyph2D.<init>(Type1Glyph2D.java:93)
 at org.apache.pdfbox.pdfviewer.font.Type1Glyph2D.<init>(Type1Glyph2D.java:65)
Start parsing '002.zip002167.pdf'
 at org.apache.pdfbox.rendering.PageDrawer.createGlyph2D(PageDrawer.java:556)",0,"John Hewson","Tilman Hausherr",0,3,"29/Jun/14 06:55","17/Mar/16 19:06","01/Jul/14 03:55"
PDFBOX-2171,PDFBOX,"UnsupportedOperationException for stencil image / pattern",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,pattern,,"I get this with the attached image, which is page 14 of the file 002710.pdf in
http://digitalcorpora.org/corp/nps/files/govdocs1/zipfiles/002.zip
java.lang.UnsupportedOperationException
        at org.apache.pdfbox.pdmodel.graphics.color.PDPattern.toPaint(PDPattern.java:104)
        at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:76)
Invoke.java has a comment "TODO: pass page height?".
After changing the code by passing the height (see also rev 1580326), running code in PDPattern.java is called and I get a better image. To see the difference, look at "Sailor springs" and "New Harmony Consolidated". In the "good" image there's a pattern which isn't in the "bad" image.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"29/Jun/14 14:16","17/Mar/16 19:07","29/Jun/14 14:21"
PDFBOX-2177,PDFBOX,"[PATCH] IndexOutOfBoundsException reading embedded OpenType font",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage opentype.pdf
PDFToImage failed with the following exception:
java.lang.IndexOutOfBoundsException: Index: 2, Size: 2
at java.util.SubList.rangeCheck(AbstractList.java:755)
at java.util.SubList.get(AbstractList.java:639)
at java.util.Collections$SynchronizedList.get(Collections.java:2477)
at org.apache.fontbox.cff.Type2CharString.drawCurve(Type2CharString.java:356)
7zip attachment",0,"John Hewson","simon steiner",0,4,"02/Jul/14 15:23","17/Mar/16 19:08","18/Sep/14 20:55"
PDFBOX-2179,PDFBOX,"Regression: Some isartor tests are not passing in 2.0.0",Bug,CLOSED,Critical,Fixed,2.0.0,2.0.0,Preflight,"Isartor regression",,"It is possible to check preflight with the isartor files while building pdfbox. The option is not set by default. It can be done with the command line :
mvn test -Dskip.external.resources=false
On July 2nd, 9 tests are failing :
TestIsartor.validate:175 isartor-6-2-3-3-t02-fail-f.pdf : IllegalStateException raised , message=Call to processSubStream() before processStream() or initStream()
TestIsartor.validate:175 isartor-6-2-3-3-t02-fail-h.pdf : IllegalStateException raised , message=Call to processSubStream() before processStream() or initStream()
TestIsartor.validate:175 isartor-6-2-3-3-t02-fail-i.pdf : IllegalStateException raised , message=Call to processSubStream() before processStream() or initStream()
TestIsartor.validate:170 isartor-6-2-7-t01-fail-a.pdf : Invalid error code returned. expected:<2.[3.2]> but was:<2\.[1.9]>
TestIsartor.validate:159 isartor-6-3-2-t01-fail-a.pdf : Invalid error code returned. Expected 3.2.2, found [3.1.1 3.3.2 ]
TestIsartor.validate:175 isartor-6-3-4-t01-fail-f.pdf : NullPointerException raised , message=null
TestIsartor.validate:175 isartor-6-3-4-t01-fail-g.pdf : IllegalStateException raised , message=Call to processSubStream() before processStream() or initStream()
TestIsartor.validate:175 isartor-6-3-4-t01-fail-h.pdf : IllegalStateException raised , message=Call to processSubStream() before processStream() or initStream()
TestIsartor.validate:175 isartor-6-9-t02-fail-a.pdf : NullPointerException raised , message=null
All is working fine with the last released version.",0,"John Hewson","Guillaume Bailleul",0,3,"02/Jul/14 19:47","17/Mar/16 19:08","04/Jul/14 19:39"
PDFBOX-2181,PDFBOX,"Regression: NPE in PreflightContentStream",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,,"Works in 1.8
java -cp pdf-box-svn/preflight/target/preflight-2.0.0-SNAPSHOT.jar:pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar:pdf-box-svn/xmpbox/target/xmpbox-2.0.0-SNAPSHOT.jar org.apache.pdfbox.preflight.Validator_A1b expected.pdf
Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.preflight.content.PreflightContentStream.validXObjContentStream(PreflightContentStream.java:99)",0,"John Hewson","simon steiner",0,4,"03/Jul/14 09:28","17/Mar/16 19:07","04/Jul/14 18:20"
PDFBOX-2183,PDFBOX,"COSArray cannot be cast to COSNumber",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Parsing,Annotations,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage input.pdf
Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSArray cannot be cast to org.apache.pdfbox.cos.COSNumber
at org.apache.pdfbox.cos.COSArray.toFloatArray(COSArray.java:530)
at org.apache.pdfbox.pdmodel.common.PDRectangle.<init>(PDRectangle.java:97)",0,"Tilman Hausherr","simon steiner",0,3,"03/Jul/14 11:25","19/Sep/14 14:40","06/Jul/14 11:25"
PDFBOX-2184,PDFBOX,"CMMException: Invalid profile data",Bug,CLOSED,Blocker,Fixed,2.0.0,2.0.0,None,None,,"Jenkins builds are intermittently failing with the error:
java.awt.color.CMMException: Invalid profile data
 at sun.awt.color.CMM.checkStatus(CMM.java:131)
 at sun.awt.color.ICC_Transform.<init>(ICC_Transform.java:88)
 at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:144)
 at org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB(PDDeviceRGB.java:79)
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.toPaint(PDColorSpace.java:255)
 at org.apache.pdfbox.rendering.PageDrawer.getNonStrokingPaint(PageDrawer.java:666)
 at org.apache.pdfbox.rendering.PageDrawer.fillPath(PageDrawer.java:739)
 at org.apache.pdfbox.util.operator.pagedrawer.FillNonZeroRule.process(FillNonZeroRule.java:37)
 at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:488)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:254)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:221)
 at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:130)
 at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:488)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:254)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:221)
 at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:197)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:183)
 at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:228)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:160)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:83)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:70)
 at org.apache.pdfbox.util.TestRendering.render(TestRendering.java:78)",0,"John Hewson","John Hewson",0,4,"04/Jul/14 03:41","17/Mar/16 19:08","11/Aug/15 00:20"
PDFBOX-2185,PDFBOX,"Rotation and skew not applied on rectangles",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Rendering,None,,"When rendering the attached example, rotation and skew of rectangles is not applied properly. The reason is that the AppendRectangleToPath transform only start and end point and makes a non-rotated non-skewed result out of that. Instead, each corner of the rectangle has to be transformed separately as shown in the attached patch.",0,"Tilman Hausherr","Petr Slaby",0,2,"04/Jul/14 14:12","19/Sep/14 14:40","05/Jul/14 03:28"
PDFBOX-2186,PDFBOX,"java.io.IOException: Catalog cannot be found",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Parsing,None,,"I get this with the attached file:
Jul 04, 2014 5:41:00 PM org.apache.pdfbox.pdfparser.PDFParser parseXrefTable
Warnung: invalid xref line: 0000000000 65535    f
Jul 04, 2014 5:41:00 PM org.apache.pdfbox.pdfparser.PDFParser parseXrefTable
Warnung: Count in xref table is 0 at offset 334372
Jul 04, 2014 5:41:00 PM org.apache.pdfbox.pdfparser.NonSequentialPDFParser initi
alParse
Warnung: Expected trailer object at position 334373, keep trying
Exception in thread "main" java.io.IOException: Catalog cannot be found
        at org.apache.pdfbox.cos.COSDocument.getCatalog(COSDocument.java:522)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSe
quentialPDFParser.java:482)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentia
lPDFParser.java:757)
        at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1157)

        at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:197)
        at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:89)
The cause is a TAB in an xref line. The solution is to search for a backslash s regex instead of a space only.
I'm not touching the preflight parser (who has the same code line) because I assume that he should not be lenient.
Source of the file:
http://digitalcorpora.org/corp/nps/files/govdocs1/zipfiles/002.zip file 959",0,"Tilman Hausherr","Tilman Hausherr",0,1,"04/Jul/14 15:41","19/Sep/14 14:40","04/Jul/14 15:58"
PDFBOX-2187,PDFBOX,"ArrayIndexOutOfBoundsException in TIFFFaxDecoder",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Rendering,"CCITTFaxDecode ccitt",,"I get ArrayIndexOutOfBoundsExceptions at two locations with several files from the digitalcorpora site:
Exception in thread "AWT-EventQueue-0" java.lang.ArrayIndexOutOfBoundsException: 16
        at org.apache.pdfbox.filter.ccitt.TIFFFaxDecoder.decodeT6(TIFFFaxDecoder
.java:1002)        at org.apache.pdfbox.filter.CCITTFaxFilter.decode(CCITTFaxFilter.java:95)
...
or
Exception in thread "AWT-EventQueue-0" java.lang.ArrayIndexOutOfBoundsException:1
       at org.apache.pdfbox.filter.ccitt.TIFFFaxDecoder.decodeT6(TIFFFaxDecoder.java:916)       at org.apache.pdfbox.filter.CCITTFaxFilter.decode(CCITTFaxFilter.java:95)
The fix, which is also used by others who use the same code and which solves both exceptions, is to increase w by one in this segment:
        this.prevChangingElems = new int[w];
        this.currChangingElems = new int[w];",0,"Tilman Hausherr","Tilman Hausherr",0,1,"04/Jul/14 16:42","19/Sep/14 14:40","04/Jul/14 16:49"
PDFBOX-2189,PDFBOX,"java.awt.geom.IllegalPathStateException: missing initial moveto in path definition",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"I get this with the attached file:
java.awt.geom.IllegalPathStateException: missing initial moveto in path definition
 at java.awt.geom.Path2D$Float.needRoom(Path2D.java:280)
 at java.awt.geom.Path2D$Float.needRoom(Path2D.java:280)
 at java.awt.geom.Path2D.closePath(Path2D.java:1769)
I missed that one when I fixed PDFBOX-2158. The fix will be to do nothing and put out a warning if there's no current point.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"04/Jul/14 18:42","17/Mar/16 19:08","04/Jul/14 19:20"
PDFBOX-2191,PDFBOX,"Identity function not implemented",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"I get this exception with the attached file:
java.lang.ClassCastException: org.apache.pdfbox.cos.COSName cannot be cast to org.apache.pdfbox.cos.COSDictionary
        at org.apache.pdfbox.pdmodel.common.function.PDFunction.create(PDFunction.java:137)
        at org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.<init>(PDSeparation.java:73)
        at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create(PDColorSpace.java:126)
The cause is this:
28 0 obj
[ 
/Separation /PANTONE#20723 /DeviceGray /Identity 
]
endobj
Although the identity function isn't in the spec for the separation colorspace, it is mentioned elsewhere (TransferFunction) so we need it anyway.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"06/Jul/14 09:09","17/Mar/16 19:07","06/Jul/14 09:15"
PDFBOX-2192,PDFBOX,""unknown command" in Type1CharString.handleCommand",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,type1font,,"I get this at page 24 of the attached PDF:
IOException for file pdfbox-2192-006972.pdf
java.lang.IllegalArgumentException: Unknown command: null
 at org.apache.fontbox.cff.Type1CharString.handleCommand(Type1CharString.java:260)
 at org.apache.fontbox.cff.Type1CharString.access$000(Type1CharString.java:39)
 at org.apache.fontbox.cff.Type1CharString$1.handleCommand(Type1CharString.java:135)
 at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:45)
 at org.apache.fontbox.cff.Type1CharString.render(Type1CharString.java:138)
 at org.apache.fontbox.cff.Type1CharString.getPath(Type1CharString.java:110)
A source code comment tells "indicates a PDFBox bug".",0,"John Hewson","Tilman Hausherr",0,2,"06/Jul/14 09:47","17/Mar/16 19:07","09/Jul/14 02:05"
PDFBOX-2193,PDFBOX,"ClassCastException in PDExtendedGraphicsState.getFontSetting()",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"I get this with the attached file:
java.lang.ClassCastException: org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSArray
013/013975.pdf
 at org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState.getFontSetting(PDExtendedGraphicsState.java:385)
 at org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState.copyIntoGraphicsState(PDExtendedGraphicsState.java:121)
 at org.apache.pdfbox.util.operator.SetGraphicsStateParameters.process(SetGraphicsStateParameters.java:49)",0,"John Hewson","Tilman Hausherr",0,2,"06/Jul/14 14:38","17/Mar/16 19:08","09/Jul/14 02:23"
PDFBOX-2194,PDFBOX,"Refactor predictor",Bug,CLOSED,Minor,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Parsing,Predictor,,"The predictor class has an unneeded ByteArrayOutputStream. I observed a temporary memory usage of sometimes 1MB. I will remove this and do some minor cleanup.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"07/Jul/14 17:54","19/Sep/14 14:40","07/Jul/14 18:03"
PDFBOX-2196,PDFBOX,"[PATCH] Type safety in PDNameTreeNode and PDNumberTreeNode via generics",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,patch,,"This patch provides type safety via generics in PDNameTreeNode and PDNumberTreeNode.",0,"John Hewson","Dominic Tubach",0,3,"09/Jul/14 12:22","17/Mar/16 19:07","14/May/15 00:59"
PDFBOX-2197,PDFBOX,"Add sample how to import a page as PDFormXObject",Task,CLOSED,Trivial,Fixed,2.0.0,"1.8.8, 2.0.0",Documentation,None,,"Add an example to the pdfbox examples how to import a page from another document into a master document as PDFormXObject",0,"Maruan Sahyoun","Maruan Sahyoun",3,4,"09/Jul/14 13:34","13/Dec/14 14:15","07/Dec/14 11:55"
PDFBOX-2198,PDFBOX,"ClassCastException in COSArrayList.convertIntegerCOSArrayToList for font widths",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Parsing,None,,"I get this with the attached file:
java.lang.ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSNumber
        at org.apache.pdfbox.pdmodel.common.COSArrayList.convertIntegerCOSArrayToList(COSArrayList.java:278)
        at org.apache.pdfbox.pdmodel.font.PDFont.getWidths(PDFont.java:739)
        at org.apache.pdfbox.pdmodel.font.PDFont.getFontWidth(PDFont.java:805)
        at org.apache.pdfbox.pdmodel.font.PDFont.getFontWidth(PDFont.java:312)
        at org.apache.pdfbox.util.PDFStreamEngine.processText(PDFStreamEngine.java
The cause is this:
22 0 obj
[ 583 536 ...... 694 23 0 R 875 708 ...... ]
endobj
23 0 obj
542
endobj
The indirect reference looks stupid, but isn't forbidden. The spec just mentions that there must be an array of widths.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"09/Jul/14 19:06","19/Sep/14 14:40","09/Jul/14 19:35"
PDFBOX-2199,PDFBOX,"Found Token[kind=NAME, text=dup] but expected begin",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,type1,,"I get the following exception on page 11 of the file of PDFBOX-2198:
09.07.2014 21:33:33.025 ERROR [main] org.apache.pdfbox.pdmodel.font.PDType1Font:220 - Can't read the embedded Type1 font JNWZUE+TeX-cmex7
java.io.IOException: Found Token[kind=NAME, text=dup] but expected begin
 at org.apache.fontbox.type1.Type1Parser.read(Type1Parser.java:710)
 at org.apache.fontbox.type1.Type1Parser.parseASCII(Type1Parser.java:99)
 at org.apache.fontbox.type1.Type1Parser.parse(Type1Parser.java:61)
 at org.apache.fontbox.type1.Type1Font.createWithSegments(Type1Font.java:68)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:216)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:56)
 at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:206)",0,"John Hewson","Tilman Hausherr",0,2,"09/Jul/14 19:37","17/Mar/16 19:07","10/Jul/14 00:55"
PDFBOX-2202,PDFBOX,"java.io.IOException: Found Token[kind=NAME, text=readonly] but expected def",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,type1font,,"I get this exception with the attached file:
11.07.2014 21:10:36.830 ERROR [main] org.apache.pdfbox.pdmodel.font.PDType1Font:220 - Can't read the embedded Type1 font GBCGAB+CMR10
java.io.IOException: Found Token[kind=NAME, text=readonly] but expected def
 at org.apache.fontbox.type1.Type1Parser.read(Type1Parser.java:741)
 at org.apache.fontbox.type1.Type1Parser.parseASCII(Type1Parser.java:135)
 at org.apache.fontbox.type1.Type1Parser.parse(Type1Parser.java:61)
 at org.apache.fontbox.type1.Type1Font.createWithSegments(Type1Font.java:68)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:216)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:56)",0,"Tilman Hausherr","Tilman Hausherr",0,1,"11/Jul/14 19:34","17/Mar/16 19:07","20/Jul/14 13:30"
PDFBOX-2203,PDFBOX,"java.lang.IllegalArgumentException: alpha value out of range",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"I get this with the attached file:
java.lang.IllegalArgumentException: alpha value out of range
 at java.awt.AlphaComposite.<init>(AlphaComposite.java:624)
 at java.awt.AlphaComposite.getInstance(AlphaComposite.java:689)
 at org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance(BlendComposite.java:45)
 at org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getStrokeJavaComposite(PDGraphicsState.java:577)
 at org.apache.pdfbox.rendering.PageDrawer.strokePath(PageDrawer.java:939)
 at org.apache.pdfbox.util.operator.pagedrawer.StrokePath.process(StrokePath.java:37)
The file has a CA and ca of 1.005 in ExtGState which is incorrect.
I will fix this by clipping the alphaConstant to a 0..1 interval and put out a warning.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"12/Jul/14 12:17","31/Aug/16 18:25","12/Jul/14 12:21"
PDFBOX-2204,PDFBOX,"Indexed color space in JPX",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,"JPEG2000 JPXDecode J",,"I get this with the attached file on page 11:
java.lang.ArrayIndexOutOfBoundsException: 8296
 at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit(SampledImageReader.java:253)
 at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage(SampledImageReader.java:146)
 at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage(PDImageXObject.java:188)
 at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:80)
The problem is in JPXFilter. Per the spec, we must ignore the BITS_PER_COMPONENT value from the PDF and use the one from the image. We set BITS_PER_COMPONENT to 8 because colorModel.getComponentSize(0) is 8. colorModel.getPixelSize() is 4. In "normal" images, the sum of the colorModel.getComponentSize() values equals colorModel.getPixelSize().
I'm not sure what to do. I am using this code locally:
            ColorModel colorModel = image.getColorModel();
            int pixelSize = colorModel.getPixelSize();
            int[] componentSize = colorModel.getComponentSize();
            if (pixelSize < componentSize[0])
            {
                LOG.warn("componentSize[0] of image ignored, because pixelSize < componentSize[0]");
                LOG.warn("pixelSize: " + pixelSize);
                LOG.warn("componentSize.length " + componentSize.length);
                for (int i = 0; i < componentSize.length; ++i)
                {
                    LOG.warn("componentSize[" + i + "]: " + componentSize[i]);
                }
            }
            else
            {
                parameters.setInt(COSName.BITS_PER_COMPONENT, componentSize[0]);
            }
and now the PDF renders properly and the image at the bottom right is almost correct. (A circle on the left is missing)",0,"John Hewson","Tilman Hausherr",0,3,"12/Jul/14 12:52","29/Sep/18 11:46","11/Aug/15 03:17"
PDFBOX-2207,PDFBOX,"Stream parsing still incorrect if length value is wrong",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Parsing,None,,"PDFBOX-2016 did getUnfilteredStream, can you also do getFilteredStream
http://svn.us.apache.org/viewvc/pdfbox/trunk/pdfbox/src/main/java/org/apache/pdfbox/cos/COSStream.java?r1=1585781&r2=1585780&pathrev=1585781",0,"Tilman Hausherr","simon steiner",0,2,"15/Jul/14 11:54","19/Sep/14 14:40","15/Jul/14 16:01"
PDFBOX-2208,PDFBOX,"[PATCH] Allow compare of glyphs",Improvement,CLOSED,Major,"Won't Fix",2.0.0,None,FontBox,None,,"I use this change in fop to allow comparing of glyphs in different pdfs to decide if i can merge fonts",0,"John Hewson","simon steiner",0,2,"15/Jul/14 12:06","06/Jan/15 07:44","06/Jan/15 05:20"
PDFBOX-2209,PDFBOX,"[PATCH] Restore shading API",Wish,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"Some of shading API is gone in 2.0 can we have it back so we can convert PDF to postscript in fop",0,"Tilman Hausherr","simon steiner",0,3,"15/Jul/14 12:12","17/Mar/16 19:08","15/Jul/14 15:38"
PDFBOX-221,PDFBOX,"NPE on convertToImage",Bug,CLOSED,Minor,Fixed,None,0.8.0-incubator,Parsing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1607100
Originally submitted by rimmeraj on 2006-12-01 12:31.
Command...
java -classpath PDFBox-0.7.3.jar:FontBox-0.1.0.jar org.pdfbox.PDFToImage cert.pdf
java.lang.NullPointerException
at org.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:84)
at org.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:452)
at org.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:215)
at org.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:174)
at org.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:104)
at org.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:657)
at org.pdfbox.PDFToImage.main(PDFToImage.java:183)
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1607100&file_id=205325
cert.pdf (application/pdf), 21465 bytes
Doc that was failing..
[comment on SourceForge]
Originally sent by code_slave.
Logged In: YES
user_id=413743
Originator: NO
I'm seeeing the same.
but it's been over a month since you reported it , and still not fixed in the cvs",0,"Andreas Lehmkühler",Anonymous,0,0,"01/Dec/06 20:31","21/Oct/09 09:52","07/Feb/09 15:14"
PDFBOX-2210,PDFBOX,"[PATCH] Allow caching of glyphs",Improvement,CLOSED,Major,"Won't Fix",2.0.0,None,Rendering,None,,"If you seperate transform from glyph it means we can reuse glyphs in fop postscript output and get smaller output files",0,"John Hewson","simon steiner",0,4,"15/Jul/14 12:24","06/Jan/15 07:44","22/Aug/14 19:01"
PDFBOX-2211,PDFBOX,"Create sample code for creating a PDF with shading","New Feature",CLOSED,Minor,Fixed,"1.8.7, 2.0.0","1.8.7, 2.0.0",None,shading,,"I'm adding the sample code with shading that I posted to the mailing list. We can never have too many examples. I'm naming it "GradientShading" because many websites use "gradient" instead of "shading".",0,"Tilman Hausherr","Tilman Hausherr",0,2,"15/Jul/14 21:28","19/Sep/14 14:40","17/Jul/14 21:04"
PDFBOX-2212,PDFBOX,"OutOfMemoryError in GlyfCompositeDescrip",Bug,CLOSED,Major,Fixed,1.8.6,"1.8.7, 2.0.0","FontBox, (1)",None,"windows 7, java 1.6","Hi All,
The application I’m working on is a web service that accepts PDF documents and combines them in a single larger PDF. Client submits a bunch of PDFs and we create a single PDF out of them. In some rare cases one of the PDF documents submitted has a glitch in it that causes Adobe Reader to throw errors when viewing the final document (attached).
When I tried to check the buggy PDF with the approach outlined here:
https://pdfbox.apache.org/cookbook/pdfavalidation.html
I was getting an OutOfMemoryError in the GlyfCompositeDescrip class, here is the full stack trace:
java.lang.OutOfMemoryError: Java heap space
at org.apache.fontbox.ttf.GlyfCompositeDescript.<init>(GlyfCompositeDescript.java:58)
at org.apache.fontbox.ttf.GlyphData.initData(GlyphData.java:62)
at org.apache.fontbox.ttf.GlyphTable.initData(GlyphTable.java:69)
at org.apache.fontbox.ttf.TrueTypeFont.initializeTable(TrueTypeFont.java:280)
at org.apache.fontbox.ttf.AbstractTTFParser.parseTables(AbstractTTFParser.java:128)
at org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:80)
at org.apache.fontbox.ttf.AbstractTTFParser.parseTTF(AbstractTTFParser.java:109)
at org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:25)
at org.apache.fontbox.ttf.AbstractTTFParser.parseTTF(AbstractTTFParser.java:84)
at org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:25)
at org.apache.pdfbox.preflight.font.descriptor.TrueTypeDescriptorHelper.processFontFile(TrueTypeDescriptorHelper.java:84)
at org.apache.pdfbox.preflight.font.descriptor.FontDescriptorHelper.validate(FontDescriptorHelper.java:97)
at org.apache.pdfbox.preflight.font.SimpleFontValidator.processFontDescriptorValidation(SimpleFontValidator.java:82)
at org.apache.pdfbox.preflight.font.SimpleFontValidator.validate(SimpleFontValidator.java:55)
at org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.validate(FontValidationProcess.java:69)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:96)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:74)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:77)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:191)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:78)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
While I can’t send on the PDF in question due to the sensitivity of the contents in it, I did a bit of digging and debugging to find out why this is happening.
In the GlyfCompositeDescrip classes constructor there is a do … while loop that is constructing GlyfCompositeComp objects and adding them to the components list of GlyfCompositeDescrip. In the constructor of the GlyfCompositeComp a signed short is read from the TTFDataStream in the flags field, that field in turn is used in the GlyfCompositeDescrip constructor to check if any more components are there to be read. Here is the code in question:
public GlyfCompositeDescript(TTFDataStream bais, GlyphTable glyphTable) throws IOException
{
…
do
{ comp = new GlyfCompositeComp(bais); //This is where the OutOfMemoryError happens components.add(comp); }
while ((comp.getFlags() & GlyfCompositeComp.MORE_COMPONENTS) != 0); //here the flags are used to check if more components are there
…
}
protected GlyfCompositeComp(TTFDataStream bais) throws IOException
{
flags = bais.readSignedShort();
…
}
In the case of the corrupted PDF, that we get from time to time, the bais.readSignedShort() call in GlyfCompositeComp results in a value of -1 and once it hits that value the condition in the GlyfCompositeDescript constructor’s loop will always result in 32 (!=0). Basically, it ends up in an infinite loop and keeps constructing GlyfCompositeComp objects until the memory runs out.
The main question here is, has anyone ever encountered a PDF corruption that causes this behaviour and how would one have to go about checking the PDF document for this sort of corruptions without causing the application to run out of memory?
We’re not required to fix the document, just check if it’s valid. If it’s not valid then we just reject the document. Ideally I’d also like to know what the corruption could be so that I can at least give a hint to the client software as to what is causing this document to be rejected (I do understand that without the actual PDF that’s causing this it might be impossible to tell that).",0,"Andreas Lehmkühler","Valdis Andersons",0,4,"16/Jul/14 09:12","19/Sep/14 14:40","29/Jul/14 18:27"
PDFBOX-2213,PDFBOX,"NPE in PageDrawer.drawString",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"File from PDFBOX-122
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage PDFBOX122-UniJIS-UCS2-HW-H_sample.pdf
Jul 22, 2014 9:38:55 PM org.apache.pdfbox.rendering.PageDrawer createAWTFont
INFORMATION: Unsupported type of font org.apache.pdfbox.pdmodel.font.PDType0Font
Jul 22, 2014 9:38:55 PM org.apache.pdfbox.rendering.PageDrawer createAWTFont
INFORMATION: Using font SansSerif.plain instead of ?l?r?¥?®
Exception in thread "main" java.lang.NullPointerException
        at sun.font.StandardGlyphVector.<init>(Unknown Source)
        at java.awt.Font.createGlyphVector(Unknown Source)
        at org.apache.pdfbox.rendering.PageDrawer.drawString(PageDrawer.java:415)
        at org.apache.pdfbox.rendering.PageDrawer.processGlyph(PageDrawer.java:331)
        at org.apache.pdfbox.util.PDFStreamEngine.processText(PDFStreamEngine.java:503)",0,"John Hewson","simon steiner",0,3,"17/Jul/14 15:43","17/Mar/16 19:38","04/Aug/14 19:04"
PDFBOX-2214,PDFBOX,"EmptyStackException in PDFStreamEngine",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"File from PDFBOX-161
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage PDFBOX161-E12860v10P096469EAs.pdf
Jul 17, 2014 4:47:09 PM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFO: unsupported/disabled operation: i
Exception in thread "main" java.util.EmptyStackException
at java.util.Stack.peek(Stack.java:102)
at org.apache.pdfbox.util.PDFStreamEngine.saveGraphicsState(PDFStreamEngine.java:604)",0,"Tilman Hausherr","simon steiner",0,3,"17/Jul/14 15:49","17/Mar/16 19:07","21/Jul/14 18:05"
PDFBOX-2215,PDFBOX,"NPE in PDTrueTypeFont.makeFontDescriptor",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"I get an NPE with the attached file:
java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.makeFontDescriptor(PDTrueTypeFont.java:337)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getFontDescriptor(PDTrueTypeFont.java:150)
 at org.apache.pdfbox.pdmodel.font.PDFont.getFontHeight(PDFont.java:350)",0,"John Hewson","Tilman Hausherr",0,3,"17/Jul/14 18:02","17/Mar/16 19:06","05/Aug/14 20:08"
PDFBOX-2216,PDFBOX,"java.io.IOException: Found Token[kind=NAME, text= ] but expected LITERAL for type1 font",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,"type1 type1font",,"I get this with the attached file on page 3:
java.io.IOException: Found Token[kind=NAME, text= ] but expected LITERAL
        at org.apache.fontbox.type1.Type1Parser.read(Type1Parser.java:727)
        at org.apache.fontbox.type1.Type1Parser.readCharStrings(Type1Parser.java:658)
        at org.apache.fontbox.type1.Type1Parser.parseBinary(Type1Parser.java:522)
        at org.apache.fontbox.type1.Type1Parser.parse(Type1Parser.java:64)
The cause is that the font has a few NULL bytes (see attached font file). These are regarded as literals.
My solution would be to skip them in Type1Lexer them like we skip spaces, but to put out a warning.
WDYT?",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Jul/14 20:56","17/Mar/16 19:08","19/Jul/14 13:28"
PDFBOX-2217,PDFBOX,"Matrix transform ignored in axial and radial shadings (in PDFToImage output)",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0",2.0.0,Rendering,"shading shadingpatte",,"See attached example.",0,"Tilman Hausherr","Luis Bernardo",1,3,"17/Jul/14 21:10","17/Mar/16 19:07","28/Dec/14 21:52"
PDFBOX-222,PDFBOX,"Printing Landscape",Bug,CLOSED,Minor,Duplicate,None,None,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1608652
Originally submitted by jlynch16 on 2006-12-04 09:26.
Right now, when you try to print a PDDocument that has rotated pags (ie. /ROTATE 90) it does not currently take the rotation into consideration when figuring out the PageFormat for a given page. I fixed this and submitted a patch for it.
I wasn't sure if you needed a bug written up in order to process and close the fix via the patch submitted.
-Jim Lynch
1360 Studios",0,"Andreas Lehmkühler",Anonymous,0,1,"04/Dec/06 17:26","03/Mar/13 13:42","03/Mar/13 13:41"
PDFBOX-2220,PDFBOX,"[PATCH] Differences array without BaseEncoding (Type1C)",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,type1font,,"File from PDFBOX-192
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage PDFBOX191-01_.pdf",0,"John Hewson","simon steiner",0,3,"18/Jul/14 09:27","17/Mar/16 19:08","30/Aug/14 02:58"
PDFBOX-2221,PDFBOX,"Text is pink",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"File from PDFBOX-234
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage STB336.pdf",0,"Tilman Hausherr","simon steiner",0,2,"18/Jul/14 10:30","17/Mar/16 19:07","18/Jul/14 17:05"
PDFBOX-2222,PDFBOX,"NPE in PDFStreamEngine",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Parsing,None,,"java -jar pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage PDFBOX-1434/forms26916.pdf
Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.util.PDFStreamEngine.processText(PDFStreamEngine.java:408)",0,"John Hewson","simon steiner",0,2,"18/Jul/14 11:33","24/Oct/15 13:42","19/Jul/14 12:29"
PDFBOX-2227,PDFBOX,"java.io.IOException: Found Token[kind=NAME, text= ] but expected LITERAL for type1 font",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,type1font,,"simon steiner reports an exception with the file from PDFBOX-1084:
java.io.IOException: Found Token[kind=NAME, text=#40] but expected LITERAL at 2354
 at org.apache.fontbox.type1.Type1Parser.read(Type1Parser.java:737)
 at org.apache.fontbox.type1.Type1Parser.parseASCII(Type1Parser.java:159)
 at org.apache.fontbox.type1.Type1Parser.parse(Type1Parser.java:61)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Jul/14 12:45","17/Mar/16 19:07","19/Jul/14 13:28"
PDFBOX-2228,PDFBOX,"LZW EarlyChange parameter isn't supported",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.6, 1.8.7, 2.0.0",Parsing,LZW,,"The image in the attached PDF can't be decoded (IndexOutOfBoundsException), The reason is that the EarlyChange decode param is set to 0:
An indication of when to increase the code length. If the value of this entry is 0, code length increases are postponed as long as possible. If the value is 1, code length increases occur one code early. This parameter is included because LZW sample code distributed by some vendors increases the code length one code earlier than necessary. Default value: 1.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"20/Jul/14 06:45","19/Sep/14 14:40","20/Jul/14 08:59"
PDFBOX-2229,PDFBOX,"NPE in GlyfCompositeDescript.getPointCount",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"I get this with the attached file:
Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
        at org.apache.fontbox.ttf.GlyfCompositeDescript.getPointCount(GlyfCompositeDescript.java:199)
        at org.apache.fontbox.ttf.GlyphRenderer.describe(GlyphRenderer.java:56)
        at org.apache.fontbox.ttf.GlyphRenderer.getPath(GlyphRenderer.java:46)
        at org.apache.fontbox.ttf.GlyphData.getPath(GlyphData.java:114)
        at org.apache.pdfbox.rendering.font.TTFGlyph2D.getPathForGlyphId(TTFGlyph2D.java:202)
        at org.apache.pdfbox.rendering.font.TTFGlyph2D.getPathForCharacterCode(TTFGlyph2D.java:154)",0,"Tilman Hausherr","Tilman Hausherr",0,1,"20/Jul/14 09:23","17/Mar/16 19:06","20/Jul/14 10:09"
PDFBOX-2234,PDFBOX,"[PATCH] Invalid Color space preflight error on Java 8",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Preflight,JDK1.8,,"java -cp pdf-box-svn/preflight/target/preflight-2.0.0-SNAPSHOT.jar:pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar:pdf-box-svn/xmpbox/target/xmpbox-2.0.0-SNAPSHOT.jar:lib/commons-io-1.3.1.jar org.apache.pdfbox.preflight.Validator_A1b expected.pdf
Java 7:
The file expected.pdf is a valid PDF/A-1b file
Java 8:
The fileexpected.pdf is not valid, error(s) :
2.4.3 : Invalid Color space, The operator "G" can't be used without Color Profile",0,"Andreas Lehmkühler","simon steiner",0,4,"23/Jul/14 09:32","19/Sep/14 14:40","14/Sep/14 12:07"
PDFBOX-2236,PDFBOX,"Useless dependency in specific usage",Wish,CLOSED,Trivial,Fixed,1.8.6,1.8.7,Signing,easyfix,,"In class org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner line 324 you use Arrays.clone() method from BouncyCastle.
This creates a dependency on BouncyCastle if we try to add a visual signature (computed by third party solution) to a pdf document.
For this specific usage this dependency seems useless and could be avoided using the copy method of the class java.util.Arrays.
Could you fix this issue in a future version ?",0,"Tilman Hausherr","Cyril Bremaud",0,2,"23/Jul/14 15:10","19/Sep/14 14:40","23/Jul/14 15:53"
PDFBOX-2237,PDFBOX,"java.io.IOException: Image stream is empty for inline image",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Rendering,None,,"The attached file throws an exception:
java.io.IOException: Image stream is empty
 at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage(SampledImageReader.java:117)
 at org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getImage(PDInlineImage.java:234)
 at org.apache.pdfbox.rendering.PageDrawer.drawImage(PageDrawer.java:1082)
 at org.apache.pdfbox.util.operator.graphics.BeginInlineImage.process(BeginInlineImage.java:40)
The reason is this:
BI
/H 1 /W 256 /CS /RGB /BPC 8 /F []
...
The empty filter array is incorrectly processed in PDInlineImage, it results in an empty output stream. Checking for an empty array like checking for null solves the problem.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"23/Jul/14 18:16","19/Sep/14 14:40","23/Jul/14 18:38"
PDFBOX-2238,PDFBOX,"DataFormatException: incorrect header check",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,Parsing,None,,"PDF from PDFBOX-186
java -cp lib/levigo-jbig2-imageio-1.6.0.jar:lib/jai_imageio.jar:pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar org.apache.pdfbox.tools.WriteDecodedDoc PwC-Tech-Forecast-Spring-2009.pdf
Exception in thread "main" java.io.IOException: java.util.zip.DataFormatException: incorrect header check
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:365)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:278)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:189)
at org.apache.pdfbox.tools.WriteDecodedDoc.doIt(WriteDecodedDoc.java:121)
at org.apache.pdfbox.tools.WriteDecodedDoc.main(WriteDecodedDoc.java:192)
Caused by: java.util.zip.DataFormatException: incorrect header check
at java.util.zip.Inflater.inflateBytes(Native Method)
at java.util.zip.Inflater.inflate(Inflater.java:259)
at java.util.zip.Inflater.inflate(Inflater.java:280)
at org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:101)
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:65)
... 5 more",0,"Tilman Hausherr","simon steiner",0,2,"24/Jul/14 10:30","25/Jul/14 15:30","24/Jul/14 19:31"
PDFBOX-2239,PDFBOX,"Add missing values to PDComplexFileSpecification",Improvement,CLOSED,Major,Fixed,"1.8.6, 2.0.0","1.8.7, 2.0.0",PDModel,None,,"The class PDComplexFileSpecification needs to be improved as follows:
analog to "get/setFileXXX" we should add the missing get/setEmbeddedFileUnicode
we should rename getUnicodeFile to getFileUnicode to be inline with the other getters and add a setter for that value as well
according to the spec, the Dos, Unix and Mac mutations shouldn't be used anymore, therefore we should rearrange the order in "getFilename"",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"24/Jul/14 10:45","19/Sep/14 14:40","25/Jul/14 16:59"
PDFBOX-2240,PDFBOX,"ArrayIndexOutOfBoundsException PDImageXObject.applyMask",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"java.lang.ArrayIndexOutOfBoundsException: 3
at java.awt.image.SampleModel.getPixel(SampleModel.java:712)
at java.awt.image.Raster.getPixel(Raster.java:1539)
at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask(PDImageXObject.java:272)
java -cp pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar org.apache.pdfbox.tools.PDFToImage out.pdf",0,"Tilman Hausherr","simon steiner",0,3,"24/Jul/14 14:16","17/Mar/16 19:08","25/Jul/14 20:50"
PDFBOX-2241,PDFBOX,"IOException: Expected INTEGER or REAL but got NAME",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,type1font,,"java -cp pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar org.apache.pdfbox.tools.PDFToImage 2.pdf
SEVERE: Can't read the embedded Type1 font Avenir-BookOblique
java.io.IOException: Expected INTEGER or REAL but got NAME
at org.apache.fontbox.type1.Type1Parser.arrayToNumbers(Type1Parser.java:235)
at org.apache.fontbox.type1.Type1Parser.parseASCII(Type1Parser.java:188)",0,"Tilman Hausherr","simon steiner",0,2,"24/Jul/14 14:29","17/Mar/16 19:08","24/Jul/14 20:30"
PDFBOX-2243,PDFBOX,"java.lang.IllegalArgumentException: negative dash phase",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Parsing,None,,"I get this exception with the attached file:
java.lang.IllegalArgumentException: negative dash phase
        at java.awt.BasicStroke.<init>(Unknown Source)
        at org.apache.pdfbox.rendering.PageDrawer.getStroke(PageDrawer.java:691)
        at org.apache.pdfbox.rendering.PageDrawer.strokePath(PageDrawer.java:707)
        at org.apache.pdfbox.util.operator.graphics.StrokePath.process(StrokePath.java:36)
        at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:564)
The reason is this:
[2.88 2.88 2.88 2.88 2.88 2.88 2.88 2.88 ]-2407.142 d
It doesn't make sense to have a negative dash phase start, so I will adjust negative numbers to 0 and put out a warning.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"26/Jul/14 12:04","19/Sep/14 14:40","26/Jul/14 12:20"
PDFBOX-2244,PDFBOX,"java.lang.IndexOutOfBoundsException in callothersubr",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,type1font,,"I get this exception with the attached file:
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
 at java.util.ArrayList.rangeCheck(Unknown Source)
 at java.util.ArrayList.get(Unknown Source)
 at org.apache.fontbox.cff.Type1CharString.callothersubr(Type1CharString.java:291)
 at org.apache.fontbox.cff.Type1CharString.handleCommand(Type1CharString.java:233)
 at org.apache.fontbox.cff.Type1CharString.access$000(Type1CharString.java:39)
 at org.apache.fontbox.cff.Type1CharString$1.handleCommand(Type1CharString.java:135)
 at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:45)
 at org.apache.fontbox.cff.Type1CharString.render(Type1CharString.java:138)
 at org.apache.fontbox.cff.Type1CharString.getPath(Type1CharString.java:110)
 at org.apache.pdfbox.rendering.font.Type1Glyph2D.<init>(Type1Glyph2D.java:90)
 at org.apache.pdfbox.rendering.font.Type1Glyph2D.<init>(Type1Glyph2D.java:62)
 at org.apache.pdfbox.rendering.PageDrawer.createGlyph2D(PageDrawer.java:548)",0,"John Hewson","Tilman Hausherr",0,3,"26/Jul/14 16:09","17/Mar/16 19:07","05/Aug/14 18:53"
PDFBOX-2245,PDFBOX,"java.lang.StringIndexOutOfBoundsException in PDTrueTypeFont.getGIDForCharacterCode",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"I get this exception with the attached file:
java.lang.StringIndexOutOfBoundsException: String index out of range: 0
        at java.lang.String.codePointAt(Unknown Source)
        at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getGIDForCharacterCode(PDTrueTypeFont.java:452)
        at org.apache.pdfbox.rendering.font.TTFGlyph2D.getGIDForCharacterCode(TTFGlyph2D.java:178)
        at org.apache.pdfbox.rendering.font.TTFGlyph2D.getPathForCharacterCode(TTFGlyph2D.java:150)
        at org.apache.pdfbox.rendering.PageDrawer.drawGlyph2D(PageDrawer.java:354)
        at org.apache.pdfbox.rendering.PageDrawer.processGlyph(PageDrawer.java:325)
The cause is that Encoding.getCharacterForName(characterName) returns an empty string. This is because characterName is ".notdef". Adobe Reader displays a gap. This can be seen at "Alumni Weekend" and "health professions". A copy & paste into an editor shows that Adobe returns a hex 1 code. My change ignores the wrong code, outputs an error message and the file renders like in adobe reader.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"26/Jul/14 19:09","17/Mar/16 19:07","26/Jul/14 19:13"
PDFBOX-2247,PDFBOX,"Regression in text extraction between 1.8.5 and 1.8.6",Bug,CLOSED,Minor,Fixed,1.8.6,"1.8.7, 2.0.0","Text extraction",None,,"Looks like a character mapping issue crept in some time between 1.8.5 and 1.8.6 on this file?
With both seq and NonSeq parsers, the correct text was extracted via ExtractText in 1.8.5. In 1.8.6, java -jar pdfbox-app-1.8.6.jar ExtractText yields text starting with:
7>PFLK>I 9>NH ;BNRF@B
=%;% .BM>NPJBKP LC PEB 3KPBNFLN
9>@FCF@ -L>OP ;@FBK@B >KA 5B>NKFKD -BKPBN
:BOB>N@E 9NLGB@P ;QJJ>NT .B@BJ?BN (&&*
"&++&,-+Æ$( #&+-&%+$-& !).&)-*+Æ&,",0,"Andreas Lehmkühler","Tim Allison",0,4,"28/Jul/14 13:13","23/Sep/14 19:31","29/Jul/14 19:46"
PDFBOX-2248,PDFBOX,"nullpointerexception on validImageColorSpace",Bug,CLOSED,Critical,Duplicate,"1.8.5, 1.8.6",None,Preflight,"ContentStreamEngine ","windows, linux","java.lang.NullPointerException
at org.apache.pdfbox.preflight.content.ContentStreamEngine.validImageColorSpace(ContentStreamEngine.java:330)
at org.apache.pdfbox.preflight.content.ContentStreamWrapper.processOperator(ContentStreamWrapper.java:178)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validPageContentStream(ContentStreamWrapper.java:76)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateContent(SinglePageValidationProcess.java:179)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:87)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
i cannot submit an exemple PDF, because the one with the errors are confidential.
they were generated with PDFCreator (winword 2010, print into)
not all the PDF generated the same way have the same error
critical for us because we need to validate the PDFs before uploading them to our server.",0,"Tilman Hausherr","samuel lumière",0,2,"29/Jul/14 13:47","29/Jul/14 18:50","29/Jul/14 18:50"
PDFBOX-2249,PDFBOX,"Listbox controls render incorrectly in Adobe Acrobat or Adobe Reader",Bug,CLOSED,Major,Fixed,1.8.6,1.8.7,AcroForm,Appearance,"windows 7","I have a form with a listbox. I update the value in the listbox using the following code:
PDChoiceField c = (PDChoiceField)f;
((PDChoiceField)f).setValue("2");
I have a combo box that uses the same choices, and it works fine. The issue has to do with the rendering of the field. The update of the value (i.e. setValue method) works fine, but when I look at the resulting output PDF the choices have become unreadable because the font has gone way large.
I have searched the mailing list, and posted a question regarding this that no one has answered, so I am now assuming this is an unknown bug.
Thanks",0,"Maruan Sahyoun","John McDonald",0,5,"31/Jul/14 17:39","19/Sep/14 14:40","09/Sep/14 21:31"
PDFBOX-2250,PDFBOX,"Improve XRef self healing mechanism",Improvement,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"PDFBOX-1769 introduced a "self healing" mechanism to repair corrupt XRef offsets. But that one was just a starter and there remain a lot of issues to be solved. I'm planing to solve at least some of them.
All fixes and improvements are targeting the non-sequential parser and I won't port those changes to the old parser.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,7,"01/Aug/14 15:14","13/Dec/14 14:15","20/Oct/14 17:12"
PDFBOX-2251,PDFBOX,"NoSuchElementException when reading cmap format 4 subtable",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",FontBox,None,,"I get this with the attached file:
Exception in thread "main" java.util.NoSuchElementException
        at java.util.HashMap$HashIterator.nextEntry(Unknown Source)
        at java.util.HashMap$KeyIterator.next(Unknown Source)
        at java.util.Collections.max(Unknown Source)
        at org.apache.fontbox.ttf.CMAPEncodingEntry.processSubtype4(CMAPEncodingEntry.java:404)
        at org.apache.fontbox.ttf.CMAPEncodingEntry.initSubtable(CMAPEncodingEntry.java:92)
        at org.apache.fontbox.ttf.CMAPTable.read(CMAPTable.java:72)
        at org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:277)
        at org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:143)
        at org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:124)
        at org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:98)
While the 1.8 version recovers, the 2.0 version doesn't. My fix prevents the exception and puts out a warning. Adobe Reader can render the file, although there is a weird glyph between "program" and "administration", and between "claimants" and "eligibility".",0,"Tilman Hausherr","Tilman Hausherr",0,2,"02/Aug/14 20:33","19/Sep/14 14:40","02/Aug/14 20:42"
PDFBOX-2252,PDFBOX,"PDFTextStripper has problem with documents with mixed language directions",Bug,CLOSED,Critical,Fixed,"1.8.6, 2.0.0",2.0.0,"Text extraction",Bidi,,"When the input document of PDFTextStripper is a combination of right-to-left and left-to-right languages, the output characters of one language is reversed.
A sample bilingual pdf document is attached.
PDFTextStripper has a variable "isRtlDominant" in "writePage" function, which is defined as follows: boolean isRtlDominant = rtlCount > ltrCount;
This class clearly count the number of rtl characters and decide if the whole content should be revered or not. It's not true, it must operate on each word, not the whole document.",0,"Maruan Sahyoun",Amir,0,9,"03/Aug/14 04:43","20/Mar/17 11:14","03/Jan/17 07:37"
PDFBOX-2256,PDFBOX,"Text size renders wrong",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"File from PDFBOX-1421
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage ha.pdf
File from PDFBOX-679
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage zzz.pdf",0,"John Hewson","simon steiner",0,2,"04/Aug/14 14:02","17/Mar/16 19:08","30/Aug/14 03:11"
PDFBOX-2257,PDFBOX,"BufferedInputStream wrapped in BufferedInputStream",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Parsing,None,,"If i call this input gets wrapped in BufferedInputStream:
public static PDDocument load(InputStream input, RandomAccess scratchFile) throws IOException
then this is called by above which wraps again in BufferedInputStream:
public BaseParser(InputStream input, boolean forceParsingValue)",0,"Tilman Hausherr","simon steiner",0,3,"05/Aug/14 10:28","19/Sep/14 14:40","05/Aug/14 15:50"
PDFBOX-2261,PDFBOX,"Extremely long hang during getFields() on a few PDF files",Bug,CLOSED,Minor,Fixed,1.8.6,2.0.0,AcroForm,None,,"When I run oap.examples.fdf.PrintFields from trunk, the code seems to hang during acroForm.getFields(). This is a heavy load hang.",0,"Andreas Lehmkühler","Tim Allison",0,6,"07/Aug/14 00:32","17/Mar/16 19:07","11/Sep/14 16:56"
PDFBOX-2262,PDFBOX,"Remove usage of AWT fonts",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,"PDModel, Rendering",None,,"We're still using AWT fonts to render the "standard 14" built-in fonts, which causes rendering problems and encoding issues (see PDFBOX-2140). We're also using AWT for some fallback fonts.
Removal of these AWT fonts isn't too difficult, we need to load the fonts using the existing PDFFontManager mechanism which has recently been added. All missing TrueType fonts loaded from disk have been using SystemFontManager for a number of weeks now.
We should ship some sensible default fonts with PDFBox, such as the Liberation fonts (see PDFBOX-2169, PDFBOX-2263), in case PDFFontManager can't find anything suitable, rather than falling back to the default TTF font, but by default we'll probe the system for suitable fonts.",0,"John Hewson","John Hewson",1,6,"07/Aug/14 01:54","17/Mar/16 19:07","30/Aug/14 02:55"
PDFBOX-2265,PDFBOX,"ArrayIndexOutOfBoundsException in PDICCBased.loadICCProfile",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"I get this exception with the attached file:
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 1
 at org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.loadICCProfile(PDICCBased.java:116)
 at org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.<init>(PDICCBased.java:84)
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create(PDColorSpace.java:135)
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create(PDColorSpace.java:55)
 at org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN.<init>(PDDeviceN.java:87)
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create(PDColorSpace.java:123)
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create(PDColorSpace.java:55)
 at org.apache.pdfbox.pdmodel.graphics.shading.PDShading.getColorSpace(PDShading.java:212)
The cause is this line:
float[] initial = new float[getColorSpaceType()];
replacing it with this line that makes more sense
float[] initial = new float[getNumberOfComponents()];
gets rid of the exception. I assume that this is a typo, i.e. wrong line was hit in the IDE in the popup.
The file now renders without exception. There's a different exception in 1.8, see PDFBOX-2267.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Aug/14 14:54","17/Mar/16 19:08","08/Aug/14 14:58"
PDFBOX-2266,PDFBOX,"NPE when converting page to image",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"I have a pdf that throws an NPE in version 2.0.0 when rendering a specific page to an image. I've tested the pdf with 1.8.6 and it worked correctly. It logged a warning (java.io.IOException: Error: Unknown shading type 0) but did not throw any exceptions. I will attach the pdf. Let me know if you need any more info.
! java.lang.NullPointerException: null
! at org.apache.pdfbox.pdmodel.graphics.color.PDPattern.toPaint(PDPattern.java:125) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]
! at org.apache.pdfbox.rendering.PageDrawer.getNonStrokingPaint(PageDrawer.java:710) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]
! at org.apache.pdfbox.rendering.PageDrawer.fillPath(PageDrawer.java:773) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]
! at org.apache.pdfbox.util.operator.graphics.FillNonZeroRule.process(FillNonZeroRule.java:36) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]
! at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:564) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]
! at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]
! at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]
! at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:189) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]
! at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:168) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]
! at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:228) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]
! at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:160) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]
! at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:83) ~[pdfbox-2.0.0-SNAPSHOT.jar:na]",0,"Tilman Hausherr","Jen Huang",0,4,"09/Aug/14 03:43","17/Mar/16 19:08","12/Aug/14 16:12"
PDFBOX-2267,PDFBOX,"IOException and partial rendering and colorspace creation error",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0","Parsing, Rendering",None,,"I get this exception with the attached PDF, and the upper arc of the image is not rendered:
java.io.IOException: Unknown colorspace type:COSDictionary{(COSName{BlackPoint}:COSArray{[COSFloat{0.0}, COSFloat{0.0}, COSFloat{0.0}]}) (COSName{Range}:COSArray{[COSFloat{-128.0}, COSFloat{127.0}, COSFloat{-128.0}, COSFloat{127.0}]}) (COSName{WhitePoint}:COSArray{[COSFloat{0.964203}, COSFloat{1.0}, COSFloat{0.824905}]}) }
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpaceFactory.createColorSpace(PDColorSpaceFactory.java:159)
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpaceFactory.createColorSpace(PDColorSpaceFactory.java:78)
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpaceFactory.createColorSpace(PDColorSpaceFactory.java:62)
 at org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.getAlternateColorSpaces(PDICCBased.java:291)
 at org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.createColorSpace(PDICCBased.java:154)
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.getJavaColorSpace(PDColorSpace.java:85)
 at org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN.createColorSpace(PDDeviceN.java:124)
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.getJavaColorSpace(PDColorSpace.java:85)
There are several causes: (1) in PDICCBased.createColorSpace() the variable numberOfComponents is -1; (2) the exception is not caught correctly. Both are fixed in the 2.0 version but not in the 1.8 version. Because the exception isn't caught correctly, the alternate color space is to be used. (3) The implementation of getAlternateColorSpaces() (that part existed before it became an apache project) thinks that this is an array of colorspaces.This
[/Lab<</BlackPoint[0.0 0.0 0.0]/Range[-128.0 127.0 -128.0 127.0]/WhitePoint[0.964203 1.0 0.824905]>>]
is considered an array of two colorspaces. This is contrary to the spec, which mentions "An alternate colour space". I will fix the bug without changing the API in 1.8, but will change the API in 2.0, which will be
public PDColorSpace getAlternateColorSpace() throws IOException
instead of
public List<PDColorSpace> getAlternateColorSpaces() throws IOException",0,"Tilman Hausherr","Tilman Hausherr",0,3,"11/Aug/14 16:31","19/Sep/14 14:40","11/Aug/14 17:47"
PDFBOX-2270,PDFBOX,"PDField.getFullyQualifiedName() returns name adding suffix '.null'",Bug,CLOSED,Major,Fixed,"1.5.0, 1.7.1, 1.8.0, 1.8.6","1.8.7, 2.0.0",AcroForm,"PDAcroForm PDField g",jse,"We have several pdf files where each one contains one pdf form with their own fields. We need to read all pdf fields and list them into a txt file.
The problem comes when a pdf form has duplicated field names, so the field.getFullyQualifiedName() returns the name of the field wrong, adding '.null' at the final of field's names.
-->Situation:
1) PDf file containing a pdf form
2) The pdf form contains lot of fields, some of their field's names are duplicated, like for example 'Applicant.city'.
3) When I try to list all of field's names, duplicate field's names comes with a suffix '.null' --> this only happends on duplicated field's names.
----------------------------------------------------------------------------------------------
-->Example:
1) PDF Form with 4 fields whos names are: 'Applicant.name', 'Applicant.phone', 'Applicant.ssn', 'Applicant.name'.
2)After running the code shown bellow, the result list is: 'Applicant.name.null', 'Applicant.phone', 'Applicant.ssn', 'Applicant.name.null'.
----------------------------------------------------------------------------------------------
-->Attach the code for listing all pdf form field's names:
public static Set<String> printFields( PDDocument doc ) throws IOException {
PDDocumentCatalog docCatalog = doc.getDocumentCatalog();
PDAcroForm acroForm = docCatalog.getAcroForm();
List fields = acroForm.getFields();
Iterator fieldsIter = fields.iterator();
Set<String> fieldSet = new HashSet<String>();
while ( fieldsIter.hasNext() )
{ PDField field = (PDField)fieldsIter.next(); // String fieldFullName = processField(field); fieldSet.addAll( processField( field ) ); }
return fieldSet;
}
private static Set<String> processField( PDField field ) throws IOException {
List kids = field.getKids();
Set<String> result = new HashSet<String>();
if( kids != null ){
Iterator kidsIter = kids.iterator();
while ( kidsIter.hasNext() ){
Object pdfObj = kidsIter.next();
if( pdfObj instanceof PDField )
{ PDField kid = (PDField)pdfObj; result.addAll( processField( kid ) ); }
}
}else
{ //System.out.println( "field.getFullyQualifiedName(): " + field.getFullyQualifiedName() ); result.add( field.getFullyQualifiedName() ); }
return result;
}
--------------------------------------------------------------------------------
field.getFullyQualifiedName() is returning duplicated field's names with a prefix '.null'.
Thanks in advance.",0,"Andreas Lehmkühler","Javier García Sánchez",0,4,"12/Aug/14 14:38","19/Sep/14 14:40","30/Aug/14 16:06"
PDFBOX-2271,PDFBOX,"Potential NPE in PDAppearanceString.java",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,AcroForm,Appearance,,"containsMarkedContent() in o.a.p.pdmodel.interactive.form.PDAppearanceString.java might throw an NPE if the parameters passed to the getStreamTokens() methods are null as the List variable tokens is initialized to null.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"16/Aug/14 14:43","17/Mar/16 19:08","16/Aug/14 15:43"
PDFBOX-2275,PDFBOX,"ClassCastException in PDResources",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"The code (added in revision 1606860)
COSObject cosObject = (COSObject)dict.getItem(objName);
in the method getXObjects() in PDResources fails with a ClassCastException:
org.apache.pdfbox.cos.COSStream cannot be cast to org.apache.pdfbox.cos.COSObject
The document issuing this exception is created using the following code:
PDDocument doc = new PDDocument(); 
PDPage page = new PDPage();
doc.addPage(page);
PDImageXObject image = JPEGFactory.createFromStream(doc, imageStream);
try (PDPageContentStream contentStream = new PDPageContentStream(doc, page, false, false)) {
    contentStream.drawImage(image, 20, 20);
}",0,"Tilman Hausherr","Dominic Tubach",0,5,"18/Aug/14 09:17","17/Mar/16 19:07","22/Aug/14 18:06"
PDFBOX-2276,PDFBOX,"Remove Jempbox subproject","New Feature",CLOSED,Major,Fixed,2.0.0,2.0.0,JempBox,None,,"Following up PDFBOX-2107 I'm finally going to remove the Jempbox subproject.
We discussed that topic several times, IMHO always with the same result: discontinue Jempbox in favor of XMPBox.
Those users who still prefer Jempbox might use the 1.8.x version, which still should work even in combination with 2.0",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"19/Aug/14 10:33","17/Mar/16 19:07","23/Aug/14 12:18"
PDFBOX-2277,PDFBOX,"Text overflow in field",Bug,CLOSED,Major,Duplicate,2.0.0,None,Rendering,acroform,,"In pdf from PDFBOX-563
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage PDFBOX563-TestFax_merged.pdf",0,"John Hewson","simon steiner",0,4,"19/Aug/14 11:03","22/Aug/14 19:41","22/Aug/14 16:15"
PDFBOX-2278,PDFBOX,"Exception in thread "main" java.lang.IllegalStateException: Call to processSubStream() before processStream() or initStream()",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,AcroForm,,"In pdf from PDFBOX-607
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage example2.pdf
Exception in thread "main" java.lang.IllegalStateException: Call to processSubStream() before processStream() or initStream()",0,"Tilman Hausherr","simon steiner",0,3,"19/Aug/14 11:07","17/Mar/16 19:07","30/Aug/14 12:54"
PDFBOX-2279,PDFBOX,"Text with gradient not shown",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"From pdf from PDFBOX-678
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage example_026.pdf",0,"John Hewson","simon steiner",0,3,"19/Aug/14 11:21","17/Mar/16 19:07","30/Aug/14 03:09"
PDFBOX-2280,PDFBOX,"Text not italic",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"PDF from PDFBOX-448
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage WBPaper00003120.pdf",0,"John Hewson","simon steiner",0,3,"19/Aug/14 11:53","17/Mar/16 19:07","30/Aug/14 03:06"
PDFBOX-2281,PDFBOX,"Yellow box shown",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,Annotations,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage image.pdf",0,"Tilman Hausherr","simon steiner",0,4,"20/Aug/14 10:10","17/Mar/16 19:07","04/Feb/15 14:42"
PDFBOX-2283,PDFBOX,"Incorrect transform for annotations / appearance streams",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0",2.0.0,Rendering,"AcroForm Annotations",,"The attached file (from the ghostscript installation) doesn't render properly, especially page 3, where the images are about double the size. The cause is that the transform for the appearance stream must be calculated based on the BBox and the appearance rectangle and the matrix (if available). This is described in "Algorithm: Appearance streams" in the "Appearance Streams" section of the spec.
I have already prepared a fix, which I will commit after PDFBOX-2262.
Update: this issue is also about signatures and acroform fields, because these have also appearance streams that are rendered with the same code.",0,"Tilman Hausherr","Tilman Hausherr",0,5,"21/Aug/14 17:09","17/Mar/16 19:07","30/Aug/14 14:22"
PDFBOX-2284,PDFBOX,"NullPointerException in PDFieldTreeNode",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,AcroForm,,"Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.interactive.form.PDFieldTreeNode.getFullyQualifiedName(PDFieldTreeNode.java:556)
at com.monday.webforms.common.pdf.Test.main(Test.java:19)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)",0,"Andreas Lehmkühler","Dirk Schrödter",0,2,"24/Aug/14 16:42","17/Mar/16 19:08","11/Sep/14 16:57"
PDFBOX-2285,PDFBOX,"debugLogMetadata doesn't log",Bug,CLOSED,Trivial,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Writing,None,,"typo in debugLogMetadata(), it does nothing if debug is enabled.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Aug/14 22:57","19/Sep/14 14:40","24/Aug/14 23:00"
PDFBOX-2287,PDFBOX,"[PATCH] COSStream loses contents in setFilters()",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"When the setFilters method of COSStream is called when no decoding has been done before, the stream contents are lost.",0,"Tilman Hausherr","Dominic Tubach",0,2,"25/Aug/14 13:09","17/Mar/16 19:07","29/Aug/14 19:52"
PDFBOX-2291,PDFBOX,"Differences in Overlay stamping between version 1.8.2 and 1.8.6",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7","1.8.7, 2.0.0",Utilities,"Overlay Regression","java 1.7","Hello,
I try to overlay PDF File with other PDF Pages.
So to say to stamp the first page with a title page and for the following pages I want to stamp the head and also the foot of each page.
I want to use the version 1.8.6 of pdfbox.
I tried last time with the version 1.8.2 with success, but now I struggle because my PDF view tells me that the stamped PDF is demaged.
Just to explain the attached files:
Dok1.pdf = original
Out.2.pdf = stamped with 1.8.6
Out.3.pdf = stamped with 1.8.2
So what is the difference between 1.8.2 and 1.8.6 in this case?
Kind regards
Markus",0,"Andreas Lehmkühler","Markus Sticker",0,4,"27/Aug/14 05:33","19/Sep/14 14:40","30/Aug/14 15:31"
PDFBOX-2292,PDFBOX,"Saving of decrypted version of password protected document gives an error",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",None,decrypt,"java 1.6","For a sample owner-password-protected pdf that I can decrypt and save to another file in Pdfbox 1.8.5, however, in the 2.0.0 build created using the repository checked out of svn, I get an exception while saving.
java.io.IOException: Cannot save a document which has been closed
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1229)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1215)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1203)
The code snippet is as follows-
pd = PDDocument.load(is);
if (pd.isEncrypted()) {
  try {
   pd.decrypt("");
   pd.setAllSecurityToBeRemoved(true);
          fNameStr = fName.substring(0, fName.lastIndexOf('.'))
       + "_new.pdf";
          System.out.println(pd.getCurrentAccessPermission()
    pd.save(fNameStr);  // java.IOException at this line
 } catch (Exception e) {
  e.printStackTrace();
 } finally {
                       pd.close();
   if (is != null) {
     is.close();
   }
     
 }",0,"Tilman Hausherr","v gangolli",0,3,"27/Aug/14 17:34","23/Oct/14 15:49","27/Aug/14 20:53"
PDFBOX-2294,PDFBOX,"Improve vertical text drawing as an experiment",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Rendering,None,"windows 7, java 1.7","When I converted some PDF into image using PDFToImage, I got unexpected image which has horizontally located text even its encoding was Identity-V.
After trying attached patch file as workaround, I could see improvement.
(Even though it remains deviations of text location partially..)
(Related article)
http://mail-archives.apache.org/mod_mbox/pdfbox-users/201408.mbox/%3C53FC4BC8.8070003%40marino.co.jp%3E",0,"John Hewson",tani,0,4,"28/Aug/14 04:32","17/Mar/16 19:07","30/Aug/14 03:03"
PDFBOX-2295,PDFBOX,"Checkboxes missing",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"PDF
http://svn.apache.org/viewvc/incubator/pdfbox/trunk/test/input/c21-5916%20.pdf?revision=682412&view=co&pathrev=793348
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage c21-5916.pdf",0,"John Hewson","simon steiner",0,3,"28/Aug/14 09:09","17/Mar/16 19:08","01/Sep/14 22:11"
PDFBOX-2296,PDFBOX,"Wrong stream length",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"The file of PDFBOX-2048 has a wrong encoded font length, it is 4412 in the PDF but it is really about 27350. This wrong length is used to read the encoded font stream and this results in further trouble (EOF).
The problem is that the wrong length is passed to createFilteredStream() instead of just calling it without parameters. In cosStream.doDecode() unFilteredStream = filteredStream (there is a FIXME there!!!), and in doDecode(COSName filterName, int filterIndex) unFilteredStream.getLength() is used, which returns the expectedLength.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/Aug/14 22:14","07/Feb/15 22:47","16/Oct/14 17:07"
PDFBOX-2299,PDFBOX,"Isartor tests don't work anymore",Bug,CLOSED,Critical,Fixed,2.0.0,2.0.0,Preflight,"Isartor regression",,"Sorry, I hadn't thought about this when testing the no-awt version, but the Isartor tests don't work anymore (I have them enabled for my own version since PDFBOX-2179).
-------------------------------------------------------------------------------
Test set: org.apache.pdfbox.preflight.TestIsartor
-------------------------------------------------------------------------------
Tests run: 204, Failures: 35, Errors: 0, Skipped: 0, Time elapsed: 29.485 sec <<< FAILURE! - in org.apache.pdfbox.preflight.TestIsartor
validate[target\pdfs\Isartor testsuite\PDFA-1b\6.2 Graphics\6.2.3 Colour spaces\6.2.3.3 Uncalibrated colour spaces\isartor-6-2-3-3-t02-fail-h.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.092 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-2-3-3-t02-fail-h.pdf : IllegalArgumentException raised , message=Built-in Encoding required for symbolic font
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.2 Graphics\6.2.3 Colour spaces\6.2.3.3 Uncalibrated colour spaces\isartor-6-2-3-3-t02-fail-i.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.006 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-2-3-3-t02-fail-i.pdf : IllegalArgumentException raised , message=Built-in Encoding required for symbolic font
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.2 Font types\isartor-6-3-2-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 1.837 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-2-t01-fail-b.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.3 Composite fonts\6.3.3.1 General\isartor-6-3-3-1-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.191 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-3-1-t01-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.3 Composite fonts\6.3.3.1 General\isartor-6-3-3-1-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.051 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-3-1-t01-fail-b.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.3 Composite fonts\6.3.3.2 CIDFonts\isartor-6-3-3-2-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.051 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-3-2-t01-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.3 Composite fonts\6.3.3.3 CMaps\isartor-6-3-3-3-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.199 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-3-3-t01-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.3 Composite fonts\6.3.3.3 CMaps\isartor-6-3-3-3-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.042 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-3-3-t02-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.4 Embedded font programs\isartor-6-3-4-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.046 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-4-t01-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.4 Embedded font programs\isartor-6-3-4-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-4-t01-fail-b.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.4 Embedded font programs\isartor-6-3-4-t01-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.03 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-4-t01-fail-c.pdf : UnsupportedOperationException raised , message=not implemented: missing CFF
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.4 Embedded font programs\isartor-6-3-4-t01-fail-d.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.01 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-4-t01-fail-d.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.4 Embedded font programs\isartor-6-3-4-t01-fail-e.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-4-t01-fail-e.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.4 Embedded font programs\isartor-6-3-4-t01-fail-f.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.027 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-4-t01-fail-f.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.4 Embedded font programs\isartor-6-3-4-t01-fail-g.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-4-t01-fail-g.pdf : IllegalArgumentException raised , message=Built-in Encoding required for symbolic font
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.4 Embedded font programs\isartor-6-3-4-t01-fail-h.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.01 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-4-t01-fail-h.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.5 Font subsets\isartor-6-3-5-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.029 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-5-t01-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.5 Font subsets\isartor-6-3-5-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-5-t01-fail-b.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.5 Font subsets\isartor-6-3-5-t01-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.036 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-5-t01-fail-c.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.5 Font subsets\isartor-6-3-5-t01-fail-d.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.088 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-5-t01-fail-d.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.5 Font subsets\isartor-6-3-5-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-5-t02-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.5 Font subsets\isartor-6-3-5-t03-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.001 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-5-t03-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.6 Font metrics\isartor-6-3-6-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.053 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-6-t01-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.6 Font metrics\isartor-6-3-6-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.067 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-6-t01-fail-b.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.6 Font metrics\isartor-6-3-6-t01-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.08 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-6-t01-fail-c.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.7 Character encodings\isartor-6-3-7-t01-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.022 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-7-t01-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.7 Character encodings\isartor-6-3-7-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-7-t02-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.3 Fonts\6.3.7 Character encodings\isartor-6-3-7-t03-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.023 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-3-7-t03-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.5 Annotations\6.5.2 Annotation types\isartor-6-5-2-t01-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-5-2-t01-fail-b.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.5 Annotations\6.5.3 Annotation dictionaries\isartor-6-5-3-t04-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.004 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-5-3-t04-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.5 Annotations\6.5.3 Annotation dictionaries\isartor-6-5-3-t04-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.014 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-5-3-t04-fail-b.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.5 Annotations\6.5.3 Annotation dictionaries\isartor-6-5-3-t04-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.013 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-5-3-t04-fail-c.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.5 Annotations\6.5.3 Annotation dictionaries\isartor-6-5-3-t04-fail-d.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.011 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-5-3-t04-fail-d.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.9 Interactive Forms\isartor-6-9-t02-fail-a.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.019 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-9-t02-fail-a.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)

validate[target\pdfs\Isartor testsuite\PDFA-1b\6.9 Interactive Forms\isartor-6-9-t02-fail-b.pdf](org.apache.pdfbox.preflight.TestIsartor)  Time elapsed: 0.032 sec  <<< FAILURE!
java.lang.AssertionError: isartor-6-9-t02-fail-b.pdf : NullPointerException raised , message=null
 at org.junit.Assert.fail(Assert.java:88)
 at org.apache.pdfbox.preflight.TestIsartor.validate(TestIsartor.java:175)",0,"John Hewson","Tilman Hausherr",1,4,"30/Aug/14 14:28","17/Mar/16 19:08","09/Oct/14 07:49"
PDFBOX-2300,PDFBOX,"Glyphs rendered at wrong position",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,regression,,"The attached file PDF_Spec-Shading-23.pdf has a difference that I missed in the no-awt tests, because at some time I had removed all shading related test files to save time.",0,"John Hewson","Tilman Hausherr",0,1,"30/Aug/14 14:31","17/Mar/16 19:08","05/Sep/14 19:44"
PDFBOX-2301,PDFBOX,"RandomAccessBuffer consumes too much memory.",Bug,CLOSED,Blocker,Fixed,"1.8.6, 2.0.0",2.0.0,PDModel,None,,"RandomAccessBuffer holds uncompressed image during operation because it is what exactly pdfbox ExtractImages do.
but holding uncompressed image instead of compressed one in memory consumes too much memory, not excluding many PDF XObjects that can use filter to compress itself. It would be good if pdfbox provides option that reverts to COSObject state just before the RandomAccess object created(the state that pdf XObject stream parsed and COSDictionary objects haven't created because user doesn't requested it using get____() method.) It is crucial feature so that pdfbox can analyze huge pdf file(>100MB).
In current source, one must close COSStream unless required(and I know closed stream cannot reopened again.)
Class Name | Shallow Heap | Retained Heap
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
org.apache.pdfbox.cos.COSObject @ 0x5ad4940 | 24 | 8,187,264
<class> class org.apache.pdfbox.cos.COSObject @ 0x58c4020
0 0
generationNumber org.apache.pdfbox.cos.COSInteger @ 0x5ad0080
24 24
baseObject org.apache.pdfbox.cos.COSStream @ 0x5b25ea0
32 8,187,216
  <class> class org.apache.pdfbox.cos.COSStream @ 0x58c3e00
8 8
  items java.util.LinkedHashMap @ 0x5b2a0f0
56 552
  file org.apache.pdfbox.io.RandomAccessBuffer @ 0x5b2a128
48 8,186,528
    <class> class org.apache.pdfbox.io.RandomAccessBuffer @ 0x5ad2b00
8 8
    currentBuffer byte[16384] @ 0x590f360 16,400
16,400
    bufferList java.util.ArrayList @ 0x5b2e200
24 8,170,080
  '- Total: 3 entries  
  filteredStream org.apache.pdfbox.io.RandomAccessFileOutputStream @ 0x5b2a158
32 32
  decodeResult org.apache.pdfbox.filter.DecodeResult @ 0xa65f618
16 16
  unFilteredStream org.apache.pdfbox.io.RandomAccessFileOutputStream @ 0xa71ab18
32 32
'- Total: 6 entries  
objectNumber org.apache.pdfbox.cos.COSInteger @ 0x5b25ec0
24 24
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",0,"Andreas Lehmkühler",gee,3,10,"30/Aug/14 14:56","17/Mar/16 19:07","20/Jul/15 10:23"
PDFBOX-2302,PDFBOX,"Make better use of RenderingHints",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Rendering,None,,"PageDrawer doesn't make effective use of Java 2D's RenderingHints. The situation now is a little odd due to code having been moved around and copied and pasted. Most of the time we're not making use of higher quality renderings which are available to us.
Some examples of strangeness:
drawTilingPattern sets VALUE_FRACTIONALMETRICS_ON, yet this applies only to AWT fonts
drawGlyph2D sets VALUE_ANTIALIAS_ON but strokePath and fillPath set it to VALUE_ANTIALIAS_OFF
drawBufferedImage sets KEY_INTERPOLATION to VALUE_INTERPOLATION_NEAREST_NEIGHBOR which is the lowest quality image scaling method
shadingFill sets VALUE_ANTIALIAS_OFF (but that might make more sense because we're Paint-ing these ourselves, OTOH if the canvas is buffered already for anti-aliasing do we save anything by disabling it?)
drawPage sets VALUE_ANTIALIAS_ON but this is always overridden by the various drawing methods
Currently we're missing out on anti-aliasing for paths (other than glyphs) and we're getting low-quality resizing of images, which makes Type 3 fonts look particularly ugly. Setting the appropriate rendering hints would improve this greatly.",0,"John Hewson","John Hewson",0,3,"31/Aug/14 01:27","17/Mar/16 19:07","06/Sep/14 17:13"
PDFBOX-2303,PDFBOX,"Lazy loading of glyphs in TrueType fonts",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,FontBox,None,,"FontBox's TTF GlyphTable reads the entire glyph table and constructs an object for each glyph. However this is very slow for large external fonts (e.g. Asian) such as "STXihei" which is 15.7MB and has 37255 glyphs. On my machine it takes around 9 seconds for FontBox to load that font just to render 15 glyphs from it.
We can modify GlyphTable to make it lazy so that glyphs are read individually only when needed.",0,"John Hewson","John Hewson",0,2,"31/Aug/14 02:14","17/Mar/16 19:06","31/Aug/14 02:24"
PDFBOX-2304,PDFBOX,"square glyphs missing",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"FontBox, Rendering",None,,"In the file PDFBOX-2294-TaroUTR50SortedList112.pdf e.g. on page 17 (but some others too) the squares and the X-ed squares are missing in the rendering.",0,"John Hewson","Tilman Hausherr",0,3,"31/Aug/14 12:04","17/Mar/16 19:07","19/Sep/14 21:25"
PDFBOX-2306,PDFBOX,"Error reading stream, expected='endstream' actual='endobj'",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"I get this exception with the file of PDFBOX-269:
java.io.IOException: Error reading stream, expected='endstream' actual='endobj' at offset 183468
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseCOSStream(NonSequentialPDFParser.java:1578)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1249)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1176)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseDictObjects(NonSequentialPDFParser.java:1152)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:487)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:755)
 at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1155)
 at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1138)
The cause is that a stream ends with endobj instead of endstream. This is accepted in the non sequential parser in readUntilEndStream() but later it isn't. It is a problem that was fixed in the old parser many years ago. My fix is for the sequential parser. I also changed a misleading error message nearby.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"02/Sep/14 16:30","13/Dec/14 14:14","17/Sep/14 18:44"
PDFBOX-2307,PDFBOX,"NPE in TrueTypeFont.getWidth",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"I get this exception with the attached file (p2):
java.lang.NullPointerException
 at org.apache.fontbox.ttf.TrueTypeFont.getWidth(TrueTypeFont.java:453)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.getWidthFromFont(PDType1Font.java:297)
 at org.apache.pdfbox.rendering.PageDrawer.drawGlyph2D(PageDrawer.java:429)
 at org.apache.pdfbox.rendering.PageDrawer.showGlyph(PageDrawer.java:368)
 at org.apache.pdfbox.util.PDFStreamEngine.showText(PDFStreamEngine.java:421)
 at org.apache.pdfbox.rendering.PageDrawer.showText(PageDrawer.java:342)
 at org.apache.pdfbox.util.PDFStreamEngine.showText(PDFStreamEngine.java:326)
 at org.apache.pdfbox.util.operator.text.ShowText.process(ShowText.java:39)
 at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:500)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:279)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:237)
 at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:191)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:176)",0,"John Hewson","Tilman Hausherr",0,3,"02/Sep/14 20:39","17/Mar/16 19:08","05/Sep/14 02:10"
PDFBOX-2308,PDFBOX,"setPageSeparator method in PDFTextStripper class has no effect",Bug,CLOSED,Minor,"Not A Problem","1.8.6, 1.8.7, 2.0.0",None,Rendering,None,"windows, eclipse","I tried to use the setPageSeparator method within the PDFTextStripper class but it had no effect.
After a check within the sources at a glance I discovered that the writePageSeparator method that uses the pageSeparator attribute is never called or used anywhere.
Thus, to work normally, It seems to my point of view that a call to the writePageSeparator should be added for example at the beginning of the writePage() method. Could someone of the core team check it to say me if i'am right ?",0,"Andreas Lehmkühler","Julien Savoyet",0,3,"03/Sep/14 12:02","25/Oct/14 12:13","25/Oct/14 12:13"
PDFBOX-2309,PDFBOX,"UnsupportedOperationException: not implemented: missing CFF",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"PDModel, Rendering",None,,"PDF from PDFBOX-147
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage PDFBOX147-corporate_guide.pdf
Exception in thread "main" java.lang.UnsupportedOperationException: not implemented: missing CFF
at org.apache.pdfbox.pdmodel.font.PDCIDFontType0.<init>(PDCIDFontType0.java:102)",0,"John Hewson","simon steiner",0,3,"03/Sep/14 12:43","17/Mar/16 19:07","03/Sep/14 20:33"
PDFBOX-2310,PDFBOX,"codeToGID NPE",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage expected.pdf
Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.font.PDType0Font.codeToGID(PDType0Font.java:306)",0,"John Hewson","simon steiner",0,4,"03/Sep/14 12:45","17/Mar/16 19:07","03/Sep/14 17:05"
PDFBOX-2312,PDFBOX,"IllegalArgumentException: Built-in Encoding required for symbolic font",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage out.pdf
Exception in thread "main" java.lang.IllegalArgumentException: Built-in Encoding required for symbolic font
at org.apache.pdfbox.encoding.DictionaryEncoding.<init>(DictionaryEncoding.java:84)",0,"John Hewson","simon steiner",0,3,"03/Sep/14 12:52","17/Mar/16 19:07","03/Sep/14 17:50"
PDFBOX-2313,PDFBOX,"ExtractImages finds never-rendered images",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"The file from PDFBOX-2101 is still causing unexpectedly high memory use with ExtractImages when compared to PDFToImage. Given that PDFToImage uses the same caching strategy, it's not really a caching issue, though we might still want to think about that.
The PDF contains 55 images on the first page which are never rendered and ExtractImages runs out of memory trying to extract them all. Given that PDFs often contain junk like this, I suggest that ExtractImages only extract images which are actually drawn to the page at some point.",0,"John Hewson","John Hewson",0,3,"03/Sep/14 22:16","17/Mar/16 19:08","05/Sep/14 17:42"
PDFBOX-2314,PDFBOX,"Restore backward compatibility between Overlay and OverlayPDF",Bug,CLOSED,Major,Fixed,1.8.6,"1.8.7, 2.0.0",Utilities,None,,"There is a major difference with the way the overlay pages are handled between the Overlay tool from PDFBox 1.6.x and the latest OverlayPDF in 1.8.6.
In the original version, when using a multi-page PDF overlay, all pages from the overlay would be combined with the original document. The latest version only uses the first page of the overlay.
Example with a 6 page document and a 2 page (A, B) overlay:
Expected behavior:
A, B, A, B, A, B
Current behavior:
A, A, A, A, A, A
Here's the reference to the documentation of the original behavior taken from http://svn.apache.org/viewvc/pdfbox/tags/1.6.0/pdfbox/src/main/java/org/apache/pdfbox/Overlay.java?view=markup
/**
* Overlay on document with another one.<br>
* e.g. Overlay an invoice with your company layout<br>
* <br>
* How it (should) work:<br>
* If the document has 10 pages, and the layout 2 the following is the result:<br>
* <pre>
* Document: 1234567890
* Layout  : 1212121212
* </pre>
* <br>
*
* @author Mario Ivankovits (mario@ops.co.at)
* @author <a href="ben@benlitchfield.com">Ben Litchfield</a>
*
* @version $Revision: 1.7 $
*/
public class Overlay
{
...",0,"Andreas Lehmkühler","Laurent Yaish",2,3,"04/Sep/14 06:27","19/Sep/14 14:40","15/Sep/14 18:23"
PDFBOX-2315,PDFBOX,"Found Token[kind=NAME, text=ND] but expected ND",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"PDF from PDFBOX-759
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage Mathematik_Stochastik.pdf
java.io.IOException: Found Token[kind=NAME, text=ND] but expected ND
at org.apache.fontbox.type1.Type1Parser.readDef(Type1Parser.java:698)",0,"John Hewson","simon steiner",0,4,"04/Sep/14 08:03","17/Mar/16 19:08","05/Sep/14 17:42"
PDFBOX-2316,PDFBOX,"Updated ant script providing ikvm for all components of pdfbox 1.8.6 and eventually future versions",Bug,CLOSED,Major,"Won't Fix",1.8.6,None,.NET,None,,"Updated Ant script for the pdfbox version 1.8.6 now also providing IKVM for all of the components of the 1.8.6 version. To download here https://www.dropbox.com/sh/0d8fi6owsa3vhh6/AADp1IlpKP8yd76QuVaLr9wSa?dl=0",0,"Andreas Lehmkühler","Michal Zatkalik",0,2,"04/Sep/14 10:30","12/Mar/15 07:54","12/Mar/15 07:54"
PDFBOX-2317,PDFBOX,"ZapfDingbats should use its own glyph list",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Rendering the file from PDFBOX-2307-159827 (p2) results in the log message:
WARNING: No Unicode mapping for a73 (1) in font ZapfDingbats
The reason is that Zapf Dingbats doesn't use the Adobe Glyph List, it uses its own special glyph list. This is part of the PDF spec, and the download can be found at http://sourceforge.net/adobe/aglfn/wiki/Home/
We need to make use of this glyph list specifically for the ZapfDingbats font, the most flexible approach is probably to have GlyphList instances associated with PDFonts.",0,"John Hewson","John Hewson",0,2,"04/Sep/14 17:11","17/Mar/16 19:08","06/Sep/14 19:20"
PDFBOX-2318,PDFBOX,"NPE in new DomXmpParser when no type is found",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,XmpBox,patch,,"Discovered this bug while trying to sync both TIKA and PDFBOX to their current SNAPSHOT builds.
Issue came to light when running Tika's JpegParserTest.testJPEGEmptyEXIFDateTime() junit test case since the test file contains the following property photoshop:LegacyIPTCDigest which is a non defined property in the PhotoshopSchema.
This causes a null Type to be created in DomXmpParser.parseDescriptionRoot(). The solution in my patch is to default to text for any undefined types. It may be beneficial to also log a warning about such types so that the schema files can be properly amended. (Currently the LegacyIPTCDigest has not been added to the Schema in this patch)
Relates to work done via Tika in TIKA-1285",0,"Andreas Lehmkühler","Jeremy Anderson",0,3,"04/Sep/14 18:24","17/Mar/16 19:08","12/Oct/14 13:39"
PDFBOX-2319,PDFBOX,"Date Converter needs to handle miliseconds and other formats",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,XmpBox,None,,"Currently date converter (xmpbox.DateConverter) fails on some extended formats, especially ones that contain milliseconds.
ie:
2010-07-28T11:02:12.000CEST
see
PDFBOX-1633",0,"Maruan Sahyoun","Jeremy Anderson",0,4,"04/Sep/14 19:24","17/Mar/16 19:08","03/Feb/15 01:31"
PDFBOX-2320,PDFBOX,"IOException: Could not read embedded TTF for font TimesNewRoman",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage -nonSeq TEST_SetCharSpacing_Error.pdf
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.pdfparser.NonSequentialPDFParser validateStreamLength
SEVERE: The end of the stream doesn't point to the correct offset, using workaround to read the stream
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.pdfparser.NonSequentialPDFParser validateStreamLength
SEVERE: The end of the stream doesn't point to the correct offset, using workaround to read the stream
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException
Sep 5, 2014 10:56:40 AM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: FlateFilter: stop reading corrupt stream due to a DataFormatException

Exception in thread "main" java.io.IOException: Could not read embedded TTF for font TimesNewRoman
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:116)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:73)
 at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:171)
 at org.apache.pdfbox.util.PDFStreamEngine.getFonts(PDFStreamEngine.java:543)
 at org.apache.pdfbox.util.operator.text.SetTextFont.process(SetTextFont.java:48)
 at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:510)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:275)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:240)
 at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:194)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:176)
 at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:228)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:160)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:109)
 at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:265)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
 at java.lang.reflect.Method.invoke(Method.java:597)
 at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)
Caused by: java.io.IOException: java.util.zip.DataFormatException: invalid block type
 at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)
 at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:365)
 at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:286)
 at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:189)
 at org.apache.pdfbox.pdmodel.common.PDStream.createInputStream(PDStream.java:232)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:108)
 ... 18 more
Caused by: java.util.zip.DataFormatException: invalid block type
 at java.util.zip.Inflater.inflateBytes(Native Method)
 at java.util.zip.Inflater.inflate(Inflater.java:238)
 at java.util.zip.Inflater.inflate(Inflater.java:256)
 at org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:101)
 at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:74)
 ... 23 more",0,"Tilman Hausherr","simon steiner",0,5,"05/Sep/14 08:47","13/Dec/14 14:14","17/Sep/14 19:32"
PDFBOX-2323,PDFBOX,"More flexible image caching (OOM)",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"PDModel, Rendering",None,,"Image caching in PDImageXObject can cause very high memory usage which has resulted in issues PDFBOX-2313, PDFBOX-2310, PDFBOX-2101. Images are just so large that the current "on size fits all" caching isn't working well.
Pushing responsibility for caching down to callers of PDImage#getImage() would allow for use-case specific caching strategies, for example PDFRenderer could cache small images for the duration of a document being rendered, rather than having to re-create the PDImageXObject again for every page on which it appears. Likewise caching of large images could be limited to a single page, or not at all.",0,"John Hewson","John Hewson",0,5,"05/Sep/14 18:06","22/Jul/17 09:54","09/Jul/15 05:36"
PDFBOX-2324,PDFBOX,"Failure to render DeviceN image",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,"CIELAB DeviceN",,"For the attached test PDF, the left image is rendered incorrect.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/Sep/14 18:56","17/Mar/16 19:07","12/Dec/14 11:20"
PDFBOX-2325,PDFBOX,"Failure to render OpenType (TrueType)",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,OpenType,,"For the attached test PDF, the "OpenType (TrueType)" text line is not rendered correctly.",0,"John Hewson","Tilman Hausherr",0,3,"05/Sep/14 19:01","17/Mar/16 19:08","06/Sep/14 18:07"
PDFBOX-2326,PDFBOX,"IllegalArgumentException: Use PDType1CFont for FontFile3",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,MMType1,,"I get this exception with the attached file:
Exception in thread "main" java.lang.IllegalArgumentException: Use PDType1CFont for FontFile3
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:210)
 at org.apache.pdfbox.pdmodel.font.PDMMType1Font.<init>(PDMMType1Font.java:37)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:69)
 at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:171)
 at org.apache.pdfbox.util.PDFStreamEngine.getFonts(PDFStreamEngine.java:554)
 at org.apache.pdfbox.util.operator.text.SetTextFont.process(SetTextFont.java:48)
The troublesome font is the MMType1 font ExPontoMM.
John Hewson Should the FONT_FILE3 handling that is done in PDFontFactory.createFont() also be done for MM_TYPE1? I get a correct rendering with that solution.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"05/Sep/14 19:07","17/Mar/16 19:07","06/Sep/14 05:57"
PDFBOX-2327,PDFBOX,"Glyph list ligatures are decomposed too early",Bug,CLOSED,Minor,Fixed,None,2.0.0,PDModel,None,,"The following code in GlyphList was moved from the Encoding class:
        DEFAULT.nameToUnicode.put("fi", "fi");
        DEFAULT.nameToUnicode.put("fl", "fl");
        DEFAULT.nameToUnicode.put("ffi", "ffi");
        DEFAULT.nameToUnicode.put("ff", "ff");
        DEFAULT.nameToUnicode.put("pi", "pi");
Which overrides the Adobe Glyph List (AGL) entries for certain ligature characters, replacing them with their decomposition. This is used by TextStripper so that it may output decomposed ligatures. However, it breaks the glyph list because the entires have been overwritten with values which are not in the AGL.
If TextStripper wants decomposed ligatures it can perform a Unicode compatibility decomposition on the output strings, alternatively it can implement this simple lookup itself, where it won't adversely impact the rest of PDFBox.",0,"John Hewson","John Hewson",0,1,"06/Sep/14 18:52","17/Mar/16 19:08","06/Sep/14 19:20"
PDFBOX-2328,PDFBOX,"Give PDColor access to its underling PDColorSpace",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"Because colors and colorspaces are always set together, it's safe for a PDColor to hold a reference to its PDColorSpace, which would allow us to add a toRGB() method to PDColor instead of just toRGB(PDColorSpace colorSpace).",0,"John Hewson","John Hewson",0,2,"06/Sep/14 19:31","17/Mar/16 19:08","23/Sep/14 18:43"
PDFBOX-2329,PDFBOX,"add toString method to PDRange",Improvement,CLOSED,Trivial,Fixed,2.0.0,2.0.0,None,None,,"add a toString method to PDRange which helps when debugging.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Sep/14 20:23","17/Mar/16 19:08","07/Sep/14 20:24"
PDFBOX-2330,PDFBOX,"Typo on usage message; "PDFDBox" instead of "PDFBox"",Bug,CLOSED,Trivial,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Utilities,typo,,"Silly diff below
Index: tools/src/main/java/org/apache/pdfbox/tools/PDFBox.java
===================================================================
— tools/src/main/java/org/apache/pdfbox/tools/PDFBox.java (revision 1623301)
+++ tools/src/main/java/org/apache/pdfbox/tools/PDFBox.java (working copy)
@@ -113,7 +113,7 @@
private static void showMessageAndExit()
{
System.err.println("PDFDBox version: \""+ Version.getVersion()+ "\"");
+ System.err.println("PDFBox version: \""+ Version.getVersion()+ "\"");
System.err.println("\nUsage: java pdfbox-app-x.y.z.jar <command> <args..>");
System.err.println("\nPossible commands are:\n");
System.err.println(" ConvertColorspace");",0,"Tilman Hausherr","Francisco Demartino",0,3,"08/Sep/14 06:39","19/Sep/14 14:40","08/Sep/14 09:10"
PDFBOX-2332,PDFBOX,"Error reading stream, expected='endstream' actual='endstream8' at offset 1993",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"PDF from PDFBOX-195
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage -nonSeq test_bad.pdf
Exception in thread "main" java.io.IOException: Error reading stream, expected='endstream' actual='endstream8' at offset 1993
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseCOSStream(NonSequentialPDFParser.java:1576)",0,"Tilman Hausherr","simon steiner",0,4,"08/Sep/14 08:21","13/Dec/14 14:15","17/Sep/14 19:38"
PDFBOX-2333,PDFBOX,"Overhaul the appearance generation for PDF forms",Improvement,CLOSED,Critical,Fixed,2.0.0,2.0.0,AcroForm,None,,"The appearance handling for forms in 1.x is limited and does not reflect all settings possible for form fields. In addition the current code is not very modular and does not follow the box model used for form fields.
Unfortunately only the basics of form handling are defined in the PDF spec. The details like padding of boxes, text placement etc. have to be determined by looking at how Adobe forms are generated.
Update: The file from PDFBOX-2310 has bad rendering which might be related?",0,"Maruan Sahyoun","Maruan Sahyoun",0,5,"09/Sep/14 15:04","17/Mar/16 19:08","20/Jul/15 21:18"
PDFBOX-2334,PDFBOX,"codeToGID NPE",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"I get an NPE with the attached file:
Sep 09, 2014 9:05:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode
WARNUNG: No Unicode mapping for character code 82 in font Arial
Exception in thread "main" java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.codeToGID(PDTrueTypeFont.java:291)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getWidthFromFont(PDTrueTypeFont.java:250)
 at org.apache.pdfbox.pdmodel.font.PDFont.getWidth(PDFont.java:216)
 at org.apache.pdfbox.pdmodel.font.PDFont.getDisplacement(PDFont.java:182)
 at org.apache.pdfbox.util.PDFStreamEngine.showText(PDFStreamEngine.java:449)
Don't know if it is related to PDFBOX-2310.",0,"John Hewson","Tilman Hausherr",0,3,"09/Sep/14 19:08","17/Mar/16 19:08","19/Sep/14 18:57"
PDFBOX-2335,PDFBOX,"NPE in DictionaryEncoding constructor",Bug,CLOSED,Major,"Cannot Reproduce",2.0.0,None,FontBox,None,,"I get an NPE with the attached file:
Sep 09, 2014 9:16:57 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>
WARNUNG: Using fallback font 'TimesNewRomanPSMT' for 'ZapfDingbats'
Exception in thread "main" java.lang.NullPointerException
 at org.apache.pdfbox.encoding.DictionaryEncoding.<init>(DictionaryEncoding.java:91)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.readEncoding(PDSimpleFont.java:126)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:256)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:65)
 at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:171)
 at org.apache.pdfbox.util.PDFStreamEngine.getFonts(PDFStreamEngine.java:556)
 at org.apache.pdfbox.util.operator.text.SetTextFont.process(SetTextFont.java:48)",0,"John Hewson","Tilman Hausherr",0,2,"09/Sep/14 19:18","12/Oct/14 11:44","12/Oct/14 11:44"
PDFBOX-2338,PDFBOX,"IllegalStateException: recursive definition",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"I get this exception with the attached file:
WARNUNG: Using fallback font 'TimesNewRomanPSMT' for 'Symbol,Italic'
Sep 10, 2014 12:59:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode
WARNUNG: No Unicode mapping for character code 119 in font Symbol,Italic
Exception in thread "AWT-EventQueue-0" java.lang.IllegalStateException: recursive definition
        at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isFontSymbolic(PDSimpleFont.java:186)
        at org.apache.pdfbox.pdmodel.font.PDFont.isSymbolic(PDFont.java:370)
        at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.codeToGID(PDTrueTypeFont.java:289)
        at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getWidthFromFont(PDTrueTypeFont.java:250)
        at org.apache.pdfbox.pdmodel.font.PDFont.getWidth(PDFont.java:216)
The file probably does have a problem, AR claims that the /BBox value for "Symbol,Italic" is incorrect. However it displays the file, and so does GSView.",0,"John Hewson","Tilman Hausherr",0,3,"10/Sep/14 11:06","17/Mar/16 19:07","19/Sep/14 19:36"
PDFBOX-2339,PDFBOX,"ArrayIndexOutOfBoundsException when type1 font is empty",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"Exception when rendering page 2 of the attached file:
Exception in thread "AWT-EventQueue-0" java.lang.ArrayIndexOutOfBoundsException: 0
        at org.apache.fontbox.type1.Type1Parser.parseASCII(Type1Parser.java:77)
        at org.apache.fontbox.type1.Type1Parser.parse(Type1Parser.java:62)
        at org.apache.fontbox.type1.Type1Font.createWithSegments(Type1Font.java:70)
The font is empty:
249 0 obj
<< 
/FontFile 250 0 R 
/Type /FontDescriptor 
/Ascent 833 
/CapHeight 708 
/Descent 250 
/Flags 34 
/FontBBox [ -170 -251 1020 934 ] 
/FontName /Bodoni-Italic 
/ItalicAngle 0 
/StemV 0 
>> 
endobj
250 0 obj
<< /Length 3 /Filter [ /ASCII85Decode ] /Length1 0 /Length2 0 /Length3 0 >> 
stream
~>
endstream
endobj
AR brings a warning, but is able to render the page.
Skipping the parse call in PDType1Font.java can also render the page. Changing type1Parser.parse() to return null if the font is empty might also succeed, although I didn't test that.",0,"John Hewson","Tilman Hausherr",0,3,"10/Sep/14 13:23","17/Mar/16 19:07","16/Dec/14 03:56"
PDFBOX-2340,PDFBOX,"Overhaul PDFBox Documentation",Improvement,CLOSED,Critical,Fixed,2.0.0,None,Documentation,None,,"In oder to make it easier for users of PDFBox to work with the library there shall be an enhanced documentation consisting of an introduction, API references and more well documented examples and code snippets (Cookbook).
In order to make it easier to contribute the Cookbook shall be build automatically from the examples/snippet ‚repository‘.",0,"Maruan Sahyoun","Maruan Sahyoun",0,5,"10/Sep/14 21:50","27/Apr/16 11:33","27/Apr/16 11:33"
PDFBOX-2341,PDFBOX,"WriteDecodedDoc cant decrypt pdf correctly",Bug,CLOSED,Major,"Won't Fix",2.0.0,None,Parsing,None,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar WriteDecodedDoc aes256_57.pdf tmp.pdf
"Kind Regards" missing
I guess you will ask me to use nonseq",0,"Tilman Hausherr","simon steiner",0,2,"11/Sep/14 10:33","11/Sep/14 15:50","11/Sep/14 15:08"
PDFBOX-2342,PDFBOX,"WriteDecodedDoc cant decrypt pdf form correctly",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar WriteDecodedDoc -nonSeq test.pdf
country selection is wrong",0,"Tilman Hausherr","simon steiner",0,3,"11/Sep/14 11:13","13/Dec/14 14:14","17/Sep/14 19:45"
PDFBOX-2343,PDFBOX,"Giving NullPoint exception when we call PDType1Font.HELVETICA_BOLD.getStringWidth("Some String")",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"When we call the PDType1Font.HELVETICA_BOLD.getStringWidth("Some String") it is throwing java.lang.NullPointerException after pdfbox-app-2.0.0-20140903.210612-518 release. Could you please fix this issue.",0,"John Hewson","Gayan Wijenayaka",0,2,"11/Sep/14 13:02","17/Mar/16 19:08","15/Sep/14 20:26"
PDFBOX-2344,PDFBOX,"NegativeArraySizeException in radial shading",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Rendering,shading,,"I get this exception with the attached file:
java.lang.NegativeArraySizeException
 at org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext.calcColorTable(RadialShadingContext.java:186)
 at org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingContext.<init>(RadialShadingContext.java:149)
 at org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingPaint.createContext(RadialShadingPaint.java:68)
 at sun.java2d.pipe.AlphaPaintPipe.startSequence(AlphaPaintPipe.java:83) at sun.java2d.pipe.AlphaPaintPipe.startSequence(AlphaPaintPipe.java:83)
 at sun.java2d.pipe.AAShapePipe.renderTiles(AAShapePipe.java:168)
 at sun.java2d.pipe.AAShapePipe.renderPath(AAShapePipe.java:159)
 at sun.java2d.pipe.AAShapePipe.fill(AAShapePipe.java:68)
 at sun.java2d.pipe.PixelToParallelogramConverter.fill(PixelToParallelogramConverter.java:164)
 at sun.java2d.pipe.ValidatePipe.fill(ValidatePipe.java:160)
 at sun.java2d.SunGraphics2D.fill(SunGraphics2D.java:2466)
 at org.apache.pdfbox.rendering.PageDrawer.shadingFill(PageDrawer.java:984)
 at org.apache.pdfbox.util.operator.graphics.ShadingFill.process(ShadingFill.java:36)
The cause is a negative radius due to a negative scale in the CTM (see also PDFBOX-2217).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"12/Sep/14 10:53","19/Sep/14 14:40","12/Sep/14 12:10"
PDFBOX-2347,PDFBOX,"NPE while creating security handler for decryption",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.7, 2.0.0",Parsing,Encryption,,"The attached file has a NPE with the non sequential parser only:
Exception in thread "main" java.io.IOException: Error (NullPointerException) while creating security handler for decryption
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSe
quentialPDFParser.java:493)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:794)
        at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1156)

        at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1139)

        at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:197)
        at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:89)
Caused by: java.lang.NullPointerException
        at org.apache.pdfbox.pdmodel.encryption.PDEncryption.getFilter(PDEncrypt
ion.java:159)
        at org.apache.pdfbox.pdmodel.encryption.PDEncryption.<init>(PDEncryption.java:96)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSe
quentialPDFParser.java:464)
The file has this:
trailer
<<
/Size
53
/Info
29 0 R
/Encrypt
null
/Root
35 0 R
/Prev
256729
/ID
[
<f571e5c0c658cb76cfe7ad0662f8f6a1>
<1c11ae9224c83622f7682d9e00bd2581>
]
>>
so the encryption item is COSNull which is not the same as "null" when using getItem(). So the solution is to use getDictionaryObject() instead, because it checks for COSNull. This method is already used elsewhere in PDFBox to get /Encrypt.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"14/Sep/14 18:48","19/Sep/14 14:40","14/Sep/14 22:19"
PDFBOX-2350,PDFBOX,"Type1 Parser hangs indefinitely",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,"windows 7, java 1.7","When rendering the first page of my pdf document the Type1Parser (org.apache.fontbox.type1.Type1Parser) hangs in a loop in
parseBinary(byte[] bytes) throws IOException
and "kills" our rendering pipeline. Please find the loop that hangs below:
// find /Private dict
while (!lexer.peekToken().getText().equals("Private"))
{ lexer.nextToken(); }
There is no token named "Private" ever in the list of returned tokens (they're empty all the time).
Furthermore going deeper into the source code it seems the class reading the tokens (Type1Lexer) does never finally advance the buffer position and always returns an empty name token in the readToken(Token prevToken) method.
Looking at the decrypted buffer i cannot get something useful out of it based on my current understanding.
Unfortunately i cannot provide the pdf in question as it contains confidental data.
Acrobat Reader XI Version 11.0.08 renders the document just fine.
In addition it seems the pdf was encrypted (40-Bit RC4) with an empty password and says it's pdf version 1.5.
Does this provide enough information or can i do anything else to help nailing this one down?
I guess this might be a pdf document structure/feature that is not yet supported completely but at least pdfbox should throw an exception instead of failing "silently"...",0,"John Hewson","Daniel Scheibe",0,4,"15/Sep/14 12:56","08/Feb/17 17:59","26/Sep/14 17:25"
PDFBOX-2351,PDFBOX,"/XRefStm content missing in saved file",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.8, 2.0.0",Parsing,None,,"Do this:
open the file immo-kurier_arsenal_93x62.pdf, PDFBOX-1577.pdf, PDFBOX-1756-436857.pdf, PDFBOX-2251-070075.pdf, test-landscape2.pdf or any file that has an /XRefStm with loadNonSeq
call getDocumentCatalog()
save to another file
open that file with loadNonSeq()
java.io.IOException: Error: Expected a long type at offset 688, instead got 'ï»¿"'
 at org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1718)
 at org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber(BaseParser.java:1645)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseXrefObjStream(NonSequentialPDFParser.java:548)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:410)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:794)
 at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1156)
The saved file still has the old /XRefStm value, but no content. I debugged a bit, it is confusing - the /XRefStm is never read, instead the /Prev is used, which leads to an old-style xref table. When saving, the existing /XRefStm value is kept in doWriteXRef() even if PDFBox "believes" it has no XRefStream. But doWriteXRefInc() is smarter and deletes the item if there is no XRefStream.
I haven't tested it with 1.8. We should test it if there's a fix.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"15/Sep/14 15:32","13/Dec/14 14:15","12/Oct/14 17:48"
PDFBOX-2352,PDFBOX,"NegativeArraySizeException in HorizontalMetricsTable.read",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"I get this exception with the attached file:
java.lang.NegativeArraySizeException
 at org.apache.fontbox.ttf.HorizontalMetricsTable.read(HorizontalMetricsTable.java:63)
 at org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:286)
 at org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:146)
 at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:122)
 at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:96)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:108)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:81)
 at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:171)
 at org.apache.pdfbox.util.PDFStreamEngine.getFonts(PDFStreamEngine.java:556)",0,"John Hewson","Tilman Hausherr",0,3,"15/Sep/14 18:38","17/Mar/16 19:08","15/Sep/14 20:36"
PDFBOX-2355,PDFBOX,"newDocuments is private in Splitter",Bug,CLOSED,Major,Fixed,1.8.6,2.0.0,Utilities,pdfbox,"ubuntu, java 1.8","The method `createNewDocument` in `Splitter` is protected, so it can be overridden, but one of the things it needs to do with the new document is add it to the `newDocuments` list, which is private.",0,"John Hewson","G. Ralph Kuntz",0,3,"16/Sep/14 16:01","17/Mar/16 19:07","17/Sep/14 18:01"
PDFBOX-2356,PDFBOX,"Error Validating PDF Archive Document with half hour timezone",Bug,CLOSED,Major,Fixed,"1.8.4, 1.8.5, 1.8.6, (3)","1.8.8, 2.0.0",Preflight,None,,"When trying to validate a PDF archive file (attached to this ticket) we get the following error:
7.2   - Error on MetaData, ModificationDate present in the document catalog dictionary doesn't match with XMP information
This is because the the Modification Date in the Dictionary is parsed differently from the XMP Metadata. The XMP Metadata is correct, but the Date from the Dictionary appends an extra 30 minutes.
The following is the raw COSObject from the PDF File
COSString{D:20140917122850+09'30'}
The Long value should be 1410922730000
The org.apache.pdfbox.util.DateConverter parseDate method returns the Date with Long 1410924530000 which is 30 minutes ahead.
XMP Modification Date is parsed differently and returns the correct date.
This means that validation will fail for PDF Archives.
My suggestion would be to refactor the parseDate function to use the Standard Java library.
Here's an example class which will be compatible with the PDF Specification:
static class DateParser {

 private Map<Integer, SimpleDateFormat> formats =
   new HashMap<Integer, SimpleDateFormat>();
 
 public DateParser() {
   String expr = "";
 
  for(String part: Arrays.asList("yyyy", "MM", "dd", "HH", "mm", "ss", "Z")) {
     expr = expr + part;
     formats.put(expr.length(), new SimpleDateFormat(expr));
   }
 }
 
 public Calendar parseDate(String expr) {
   try {
     expr = expr.replace("D:", "").replace("'", "").replace("Z", "+0000");
     Date date = formats.get(Math.min(expr.length(), 15)).parse(expr);
 
 
     Calendar calendar =  Calendar.getInstance();
     calendar.setTime(date);
 
     return calendar;
   } catch (ParseException e) {
     return null;
   }
 }
}",0,"Tilman Hausherr","Cetra Free",0,3,"17/Sep/14 04:46","13/Dec/14 14:15","18/Sep/14 16:18"
PDFBOX-2357,PDFBOX,"PDTrueTypeFont has no method to load font from stream",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"The PDTrueTypeFont had formely static method to load a font from a stream. Now that method is gone. As far as I can see without a reason. Probably removed by mistake.
Could that method be restored?",0,"John Hewson","Cornelis Hoeflake",0,4,"17/Sep/14 07:00","17/Mar/16 19:06","17/Sep/14 23:08"
PDFBOX-2358,PDFBOX,"ExternalFonts uses classloader of class in font-box",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"ExternalFonts loads some default fonts via the org.apache.fontbox.util.ResourceLoader. That resourceloader uses it's own classloader (ResourceLoader.class.getClassLoader()) for loading the given resource.
The problem is that the resource is in the PDFBox project and the ResourceLoader in the FontBox. In an OSGI environment this is a problem.",0,"John Hewson","Cornelis Hoeflake",0,4,"17/Sep/14 08:16","17/Mar/16 19:06","18/Sep/14 20:13"
PDFBOX-2360,PDFBOX,"PDFont had methods removed",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Add back methods or provide a equivalent to pdfbox so it easier to upgrade to PDFBox 2
PDFont
public int getFirstChar()
public int getLastChar()
public Encoding getFontEncoding()
public CMap getToUnicodeCMap()
public String encode(byte[] c, int offset, int length) throws IOException
PDCIDFont
public long getDefaultWidth()
Encoding
public String getCharacter(int code) throws IOException
CFFFont
public Object getProperty(String name)
public Map<String, byte[]> getCharStringsDict()
public CFFEncoding getEncoding()
CFFCharset
public List<Entry> getEntries()
CFFEncoding
public List<Entry> getEntries()
Cmap
public String lookup( int code, int length )",0,"John Hewson","simon steiner",0,5,"18/Sep/14 13:20","17/Mar/16 19:08","23/Sep/14 17:11"
PDFBOX-2362,PDFBOX,"Remove .properties file usage in PDFStreamEngine",Improvement,CLOSED,Major,Fixed,None,2.0.0,PDModel,None,,"PDFStreamEngine and its subclasses currently load a list of OperatorProcessor classes from .properties files. This makes it difficult to override the classes, as the .properties files also need to be copied and pasted if changes are made. Worse still, subclasses in other modules are known to load .properties files from the pdfbox module which breaks OSGi, as discovered in PDFBOX-2358.
There is currently an API, registerOperatorProcessor() which performs the same role. This should be adapted for use in subclasses, perhaps deprecated and replaced with something less brittle which doesn't require manually assigning operators to specific strings such as "BT" or "T*".",0,"John Hewson","John Hewson",0,3,"18/Sep/14 20:10","17/Mar/16 19:08","18/Sep/14 20:18"
PDFBOX-2363,PDFBOX,"wrong color in rendering",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,regression,,"The circle with "Bellas modas" has the wrong color, it should be white and was white yesterday, and now it is brown.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"18/Sep/14 22:08","17/Mar/16 19:06","19/Sep/14 16:54"
PDFBOX-2365,PDFBOX,"NPE with file with PDFDocEncoding",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,PDFDocEncoding,,"I get an NPE with the attached file:
Sep 19, 2014 11:24:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont readEncoding
WARNUNG: Unknown encoding: COSName{PDFDocEncoding}
Exception in thread "main" java.lang.NullPointerException
 at org.apache.pdfbox.encoding.DictionaryEncoding.<init>(DictionaryEncoding.java:91)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.readEncoding(PDSimpleFont.java:126)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:259)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:65)
 at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:171)
 at org.apache.pdfbox.util.PDFStreamEngine.getFonts(PDFStreamEngine.java:519)
 at org.apache.pdfbox.util.operator.text.SetFontAndSize.process(SetFontAndSize.java:49)
 at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:482)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:241)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:199)
 at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:153)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:181)
 at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:228)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:160)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:109)
 at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:265)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:89)",0,"John Hewson","Tilman Hausherr",0,3,"19/Sep/14 21:24","17/Mar/16 19:07","19/Sep/14 22:49"
PDFBOX-2366,PDFBOX,"Improve high-level font APIs",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"The PDFont and Type1Equivalent APIs could expose some higher-level details, such as a consistent way to get names and Type1Equivalent instances.
Some of the other font formats could also do with APIs exposing some specific useful internals such as GIDs. I'm going to add these as I find that I have a need for them during development and debugging.",0,"John Hewson","John Hewson",0,3,"19/Sep/14 21:29","17/Mar/16 19:08","11/Aug/15 00:24"
PDFBOX-2367,PDFBOX,"Ligature glyph widths wrong",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"The attached PDF has incorrectly rendered ligatures, due to the re-mapped glyph name being looked up in the original AFM.",0,"John Hewson","John Hewson",0,2,"19/Sep/14 22:19","17/Mar/16 19:06","19/Sep/14 22:20"
PDFBOX-2370,PDFBOX,"Move caching outside of PDResources",Improvement,CLOSED,Blocker,Fixed,2.0.0,2.0.0,PDModel,None,,"Note: This issue is based on a discussion which occurred regarding PDFBOX-2301 but is actually a separate issue.
Currently we cache the page resources in PDResources which belongs to a specific PDPage. This causes two problems, 1) users who want to hold many PDPage objects in memory will have high memory use (but this is often by accident*). 2) By caching resources in PDPage we only get to keep that cache for the lifetime of the page, which e.g. in PDFRenderer is a single page only. That means that a font which appears on 40 pages has to be parsed 40 times, which causes slow running times, but also memory thrashing as objects are destroyed frequently only to be re-created.
What PDFRenderer really needs is not page-wide caching but document-wide caching, so that it can cache fonts, cmaps, color profiles, etc. only once. But that won't work for images, because they're too large. What we're beginning to realise is that caching is use-case specific and probably shouldn't be built-in to PDFBox's pdmodel. Instead we should removing resource caching from PDPage/PDResources and implement custom caching in PDFRenderer and other downstream classes such as PDFTextStripper. I'll happily volunteer myself. The existing high-level PDFBox APIs will continue to "just work" and power users will get a level of control that they appreciate.
This strategy could be enhanced by removing memory-hungry methods on PDResources such as getFonts() and getXObjects() which force all resources of a particular type to be loaded, whether or not they are needed, or actually used in the content stream. They would be replaced by methods to retrieve a single resource, e.g. getFont(name).
—
* There probably isn't a legitimate use case for 1) any more, we've solved the issues which we used to have with image caching (in fact, the clearCache() method actually no longer needs to be called by PDFRenderer, though it currently is). The real problem is that it's easy to accidentally retain PDPage objects, the PDDocument#getDocumentCatalog().getAllPages() method is dangerous as looping over it will cause pages to be retained during processing, like so:
for (PDPage page : document.getDocumentCatalog().getAllPages()) // java.util.List
{
     // ... this is idiomatic in PDFBox 1.8
} 
// List returned by getAllPages() kept in scope until here (bad)
I added of couple of methods a while ago to avoid this by fetching each PDPage one at a time, and this is now used internally in PDFBox to avoid the memory problems we used to have:
for (int i = 0; i < document.getNumberOfPages(); i++)
{
    PDPage page = document.getPage(i);
    // ... this is the new 2.0 way
    // current page falls out of scope here (good)
}
To solve this problem, we could change getAllPages() so that instead of returning a List it returns an Iterator<PDPage>, which would provide a nicer API than getPage(int) and most existing code will continue to work. This is also an opportunity to also fix type safety issues due to PDPageNode and incorrect handling of the page tree (this is similar to the issue we had recently with the acroform field tree).",0,"John Hewson","John Hewson",0,5,"20/Sep/14 02:06","08/Sep/16 17:09","29/Sep/15 00:35"
PDFBOX-2371,PDFBOX,"Overlay page off by one when using -useAllPages",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0",1.8.8,Utilities,overlay,,"When using the new -useAllPages option added in 1.8.7, the usePageNum doesn't account for the fact that the specificOverlayPage is indexed by zero and the output ends up with overlay pages shifted
e.g. The output page 1 has page 2 from the overlay.
We need to subtract 1 from the pageNumber when getting the overlay page number.
int usePageNum = (pageNumber - 1) % numberOfOverlayPages;",0,"Andreas Lehmkühler","Laurent Yaish",0,3,"20/Sep/14 05:31","13/Dec/14 14:15","20/Sep/14 14:15"
PDFBOX-2372,PDFBOX,"Trash Glyphs: Regressions 19.9.2014",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,regression,,"There are several regressions from the changes done on the evening of 19.9.2014. Because I can't map these to one single change, I had to open a new issue.
PDFBOX-563-acroform.pdf: trash glyphs at the bottom
PDFBOX-1735-confidential.pdf p7: trash glyphs on the left
PDFBOX-2245-052567.pdf: trash glyphs
PDFBOX-2251-070075.pdf: trash glyphs",0,"John Hewson","Tilman Hausherr",0,3,"20/Sep/14 06:08","09/Nov/17 18:16","25/Sep/14 20:12"
PDFBOX-2373,PDFBOX,"Rendering at 72 dpi crashes java",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0",2.0.0,Rendering,crash,"windows 7, fedora, mac os x","Rendering the attached file crashes java. It happens only at 72 dpi. It can be reproduced with the PDFToImage cmd app, not with PDFReader.",0,"John Hewson","Tilman Hausherr",0,5,"21/Sep/14 10:06","30/May/17 16:25","06/Feb/15 00:46"
PDFBOX-2374,PDFBOX,"Make JavaDocs for trunk builds available via our website",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Documentation,None,,"In order to help people using the latest trunk versions of PDFBox the JavaDocs for the main project and the sub projects shall be made available on our website.",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"21/Sep/14 10:23","17/Mar/16 19:08","06/Jan/15 00:10"
PDFBOX-2376,PDFBOX,"Small regression in text extraction with PDFBox 1.8.7 vs. 1.8.6",Bug,CLOSED,Minor,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,regression,,"On at least one file in govdocs1, less text is being extracted with PDFBox 1.8.7 than was extracted with 1.8.6. When running the app.jar with ExtractText, 1.8.7 is not extracting:
Designated Counties
No Designation
Individual Assistance
All counties are eligible
ITS Mapping & Analysis CenterWashington, DC
05/09/08 -- 09:36 AM EDT
Source: Disaster Federal Registry Notice05/08/2008
Location Map
MapID 196d109cd27
for Hazard Mitigation
from govdocs1's 894770.pdf.",0,"Tilman Hausherr","Tim Allison",0,3,"23/Sep/14 01:04","13/Dec/14 14:15","27/Sep/14 21:38"
PDFBOX-2377,PDFBOX,"Apparent regression in character mapping in a few files from govdocs1",Bug,CLOSED,Minor,Fixed,1.8.7,1.8.8,"Text extraction",regression,,"On a small number of test files in a 50k sample of pdfs from govdocs1, it appears that some characters are no longer being extracted correctly in 1.8.7 when compared to 1.8.6. I ran pdfbox's app.jar with ExtractText
764929.pdf
1.8.6: Lang, Astrophysical Data: Planets and Stars
1.8.7: Lang, AefdaphyeiUSl DSfS: PlSnefe Snd EfSde,
and
312888.pdf
1.8.6: Self-Assessment \u0026 Capability Description
1.8.7: Seff-Ammemmmehn \u0026 Cajabcfcns Demclcjncih",0,"Andreas Lehmkühler","Tim Allison",0,5,"23/Sep/14 01:12","13/Dec/14 14:15","29/Nov/14 18:47"
PDFBOX-2379,PDFBOX,"glyphlist_ext is not OSGI compatible",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"The system property "glyphlist_ext" used in GlyphList is not OSGI compatible (see PDFBOX-2358) as it loads resources from an external module. The mechanism is unsafe and should be replaced with a simple static method, e.g. GlyphList.addGlyphs(Properties).",0,"John Hewson","John Hewson",0,3,"23/Sep/14 18:04","17/Mar/16 19:06","23/Sep/14 18:13"
PDFBOX-2380,PDFBOX,"Glyphlist .properties are not ordered",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"Currently we use .properties files to load the glyph lists, however Java's Properties is not ordered (the properties are stored in a Hashtable) and so the glyphs are not read in the correct order.
This results in incorrect encoding when calling GlyphList.unicodeToName(), because the Adobe glyph lists are ordered: the default mapping comes first, and auxiliary mappings follow it, for example:
space=0020
spacehackarabic=0020
Currently in PDFBox, GlyphList.unicodeToName(0x20) returns "spacehackarabic", which is wrong, we always want the first entry in the glyph list.
We need to move away from using .properties and instead just use Adobe's existing glyph list format, the only difference is that we switch = for ;.",0,"John Hewson","John Hewson",0,3,"24/Sep/14 01:50","17/Mar/16 19:07","26/Sep/14 08:48"
PDFBOX-2383,PDFBOX,"PDFBox tests include copyright files",Bug,CLOSED,Blocker,Fixed,"1.8.7, 2.0.0",2.0.0,None,None,,"The test files for PDFBox, FontBox, and Preflight include several files under copyright which we probably don't have permission to redistribute, and need to be removed (or preferably replaced):
pdfbox/src/test/resources/org/apache/pdfbox/
ttf/ArialMT.ttf (This is actually Bitstream Vera Sans - the license on this might be ok though?)
pdfparser/gdb-refcard.pdf (GPL licensed)
pdmodel/page_label.pdf (Edited by Foxit PDF for Evaluation Only)
pdmodel/font/256.pdf (Copyright 2004 Journal of Combinatorics)
fontbox/src/test/resources/ttf/
testTrueType.ttf (NewBaskerville, Copyright © 2002 Veronika Elsner)
preflight/src/test/resources/org/apache/padaf/preflight/font/
true_type.ttf (Subset of Microsoft Arial)",0,"Tilman Hausherr","John Hewson",0,6,"26/Sep/14 17:45","17/Mar/16 19:07","08/Feb/15 12:13"
PDFBOX-2385,PDFBOX,"inline image with EI at the end incorrectly parsed",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,regression,,"I'm having a look at the files from TIKA-1419 where there's a big decrease in the token count. And I found another problem with inline images. This time, the file is like this:
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffEI
Q
Because of the first change in PDFBOX-2163, PDFBox assumes that this is Ascii85 code but it isn't. From my own tests, deleting the "Ascii85" test [ http://svn.apache.org/r1606177 ] and keeping the second change [ http://svn.apache.org/r1613645 ] (expecting spaces, 1-3 chars, blanks) works fine.
I will have a look at some of the files (those with big token count decrease) mentioned in Tim Allisons csv file over the next few days / weeks.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"26/Sep/14 17:51","13/Dec/14 14:15","27/Sep/14 21:38"
PDFBOX-2391,PDFBOX,"Use an enum for RenderingIntent",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"The rendering intent in the graphics state is currently a String, we should replace it with a RenderingIntent enum.",0,"John Hewson","John Hewson",0,3,"26/Sep/14 21:20","17/Mar/16 19:08","22/Oct/14 06:25"
PDFBOX-2395,PDFBOX,"Signing PDF document changes documentID",Bug,CLOSED,Major,Fixed,1.8.7,"1.8.8, 2.0.0","PDModel, Writing",None,,"When I invoke the method #setDocumentId(...) on PDDocument the document id changes completely.
Following the standard:
Every PDF document should have an ID array in the file trailer. From the PDF 1.7 Reference, "TABLE 3.13 Entries in the file trailer dictionary":
"ID array (Optional, but strongly recommended; PDF 1.1) An array of two byte-strings constituting a file identifier (see Section 10.3, “File Identifiers”) for the file. ..."
In section "10.3 File Identifiers" it says:
"File identifiers are defined by the optional ID entry in a PDF file’s trailer dictionary (see Section 3.4.4, “File Trailer”; see also implementation note 162 in Appendix H). The value of this entry is an array of two byte strings. The first byte string is a permanent identifier based on the contents of the file at the time it was originally created and does not change when the file is incrementally updated. The second byte string is a changing identifier based on the file’s contents at the time it was last updated."
See original issue: https://joinup.ec.europa.eu/asset/sd-dss/issue/signing-pdf-document-sd-dss-changes-id-string
So if I understand well only the second element must change. Please could you provide me with your understanding of the problem.
Thanks / Bob",0,"Andreas Lehmkühler","Robert Bielecki",0,5,"30/Sep/14 19:46","08/Jan/15 19:38","12/Oct/14 17:21"
PDFBOX-2396,PDFBOX,"Comment on `org.apache.pdfbox.util.Splitter.createNewDocumentIfNecessary` is out of date",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,Utilities,comment,,"The header comment on the `createNewDocumentIfNecessary` method suggests that the method can be overridden in subclasses This is not true since the method is private. The example in the method will not work.
The header comment for `splitAtPage` should be updated with the example since it is the method will will be used to implement that example.",0,"John Hewson","G. Ralph Kuntz",0,2,"01/Oct/14 13:01","17/Mar/16 19:08","16/Dec/14 03:47"
PDFBOX-2399,PDFBOX,"font.getFontDescriptor() for PDType1Font.HELVETICA is null",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"private PDType1Font font = PDType1Font.HELVETICA;
font.getFontDescriptor() returns null
I would think it shouldn't.",0,"John Hewson","Daniel Brownell",0,3,"02/Oct/14 11:38","11/Oct/14 04:42","11/Oct/14 04:42"
PDFBOX-2400,PDFBOX,"Add insertPage() method","New Feature",CLOSED,Minor,Fixed,"1.8.7, 2.0.0",2.0.0,PDModel,None,,"It would be nice if PDDocument had an insertPage function similar to addPage, but takes a number to indicate where to add the new page in the current set of pages.",0,"Tilman Hausherr","Patrick Tucker",0,6,"02/Oct/14 16:40","17/Mar/16 19:07","14/Oct/15 07:12"
PDFBOX-2401,PDFBOX,"Image has wrong colors after Merge",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0","PDModel, Utilities",None,,"Marc Davis fronm the user mailing list has provided a file (michael levine.pdf) that, when merged with another file, has a black image on page 17 ("TL-9"). I tried to investigate / narrow this somewhat:
it happens with any other file, or just use the michael levine file twice
extracting p17 with PDFSplit and then merging the result doesn't do it
extracting p1-17 with PDFSplit and then merging the result does do it
extracting p13-17 with PDFSplit and then merging the result does do it, altthough the black is now at the first page
The page is not really "black", the colors are incorrect.
That's all I found out until now. I compared the two files with PDFDebugger and can't see any obvious differences. I looked into the files with NOTEPAD++, there are some differences like that the colorspace is now indirect.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"04/Oct/14 13:29","13/Dec/14 14:15","09/Oct/14 16:13"
PDFBOX-2402,PDFBOX,"NonSequentialPDFParser cannot recover from spurious closing brackets",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"The NonSequentialPDFParser fails if an object has a spurious closing tag (for example, a PDFArray with two closing brackets). In lenient mode, it would be good to at least attempt recovering from that. The attached patch, instead of throwing an exception in case the endObject string is not "endobj" or " obj", skips a character (the spurious character) and tries reading a string. It continues until either the file ends or an "endobj" is found.
I have a document where this worked but I am not allowed to upload it, unfortunately. In any case the patch cannot make things worse, since it replaces throwing an exception with at least attempting to recover from it.",0,"Tilman Hausherr","Michele Balistreri",0,3,"04/Oct/14 17:37","13/Dec/14 14:15","11/Oct/14 13:25"
PDFBOX-2406,PDFBOX,"fix typo "AlpaConstant"",Bug,CLOSED,Trivial,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",PDModel,None,,"fix typo "AlpaConstant"",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Oct/14 19:26","13/Dec/14 14:14","07/Oct/14 19:37"
PDFBOX-2407,PDFBOX,"false negative: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile ?",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,"debian, java 1.7",""PDFA_Conference_2009.pdf" is not valid, error(s) : Tue Oct 07 10:00:30 CEST 2014
1: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
2: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
3: 2.4.3 : Invalid Color space, The operator "f*" can't be used without Color Profile
4: 2.4.3 : Invalid Color space, The operator "f*" can't be used without Color Profile
5: 2.4.3 : Invalid Color space, The operator "f*" can't be used without Color Profile
6: 2.4.3 : Invalid Color space, The operator "f*" can't be used without Color Profile
7: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
8: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
9: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
10: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
11: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
12: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
13: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
14: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
15: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
16: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile
17: 2.4.3 : Invalid Color space, The operator "f" can't be used without Color Profile",0,"John Hewson","Ralf Hauser",0,5,"08/Oct/14 05:36","17/Mar/16 19:08","31/Oct/14 05:11"
PDFBOX-2410,PDFBOX,"if (page != null && page.getRotation() != null)",Bug,CLOSED,Minor,Invalid,2.0.0,None,None,None,"java 1.7, windows","static PDRectangle[] pageSizes = new PDRectangle[5];
static
{ pageSizes[0] = PDPage.PAGE_SIZE_A0; pageSizes[1] = PDPage.PAGE_SIZE_A1; pageSizes[2] = PDPage.PAGE_SIZE_A2; pageSizes[3] = PDPage.PAGE_SIZE_A3; pageSizes[4] = PDPage.PAGE_SIZE_A4; }
page = new PDPage(pageSizes[size]);
...
if (page != null && page.getRotation() == 90) //NPE THROWN
{
}",0,"Tilman Hausherr","Daniel Brownell",0,2,"08/Oct/14 12:01","08/Oct/14 18:38","08/Oct/14 18:38"
PDFBOX-2411,PDFBOX,"Pushback buffer is full on seamingly small PDF",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,RepairMode,,"I am getting a push back buffer full error on a seemingly small PDF, smaller than most i read from this site.",0,"Andreas Lehmkühler","Andy Phillips",0,5,"08/Oct/14 12:24","13/Dec/14 14:15","20/Oct/14 18:11"
PDFBOX-2412,PDFBOX,"Loading XFDF document fails with ClassCastException",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,FDF,"mac os x, java 1.7","When loading the the this XFDF Document
<?xml version="1.0" encoding="UTF-8"?>
<xfdf xmlns="http://ns.adobe.com/xfdf/" xml:space="preserve">
<fields>
<field name="Z2S1"><value>Erblasser</value></field>
</fields>
</xfdf>
using FDFDocument.loadXFDF(new File("ttt.xfdf"));
I get the following exception:
java.lang.ClassCastException: com.sun.org.apache.xerces.internal.dom.DeferredTextImpl cannot be cast to org.w3c.dom.Element
 at org.apache.pdfbox.pdmodel.fdf.FDFDictionary.<init>(FDFDictionary.java:105)
 at org.apache.pdfbox.pdmodel.fdf.FDFCatalog.<init>(FDFCatalog.java:68)
 at org.apache.pdfbox.pdmodel.fdf.FDFDocument.<init>(FDFDocument.java:101)
 at org.apache.pdfbox.pdmodel.fdf.FDFDocument.loadXFDF(FDFDocument.java:251)
 at org.apache.pdfbox.pdmodel.fdf.FDFDocument.loadXFDF(FDFDocument.java:236)
    ...",0,"Andreas Lehmkühler","Thomas Krammer",0,3,"08/Oct/14 13:42","13/Dec/14 14:15","02/Nov/14 13:43"
PDFBOX-2413,PDFBOX,"Loaded FDF document returns null fields",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,FDF,"mac os x, java 1.7","When loading the FDF document below using FDFDocument.load(InputStream) it will load fine but the returned FDFDocument instance returns null when I call fdf.getCatalog().getFDF().getFields().
In the log I get the following warnings:
Oct 08, 2014 4:40:37 PM org.apache.pdfbox.pdfparser.XrefTrailerResolver setTrailer
WARNING: Cannot add trailer because XRef start was not signalled.
Oct 08, 2014 4:40:37 PM org.apache.pdfbox.pdfparser.XrefTrailerResolver setStartxref
WARNING: Did not found XRef object at specified startxref position 0
Loading the same FDF file using PDFBox 1.4.0 works fine. All later versions I tried have the same problem (including 1.8.7).
The FDF document was created using Adobe's FDF Toolkit 6.0 on Windows 8.1.
You can download the FDF file from https://www.sixtyten.de/ifam/erbst_erkl_form.fdf.zip",0,"Andreas Lehmkühler","Thomas Krammer",0,2,"08/Oct/14 14:55","13/Dec/14 14:15","01/Nov/14 09:17"
PDFBOX-2414,PDFBOX,"Allow non-sequential parser for PDFMerger in app",Improvement,CLOSED,Minor,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Utilities,None,,"add -nonSeq option to PDFMerger",0,"Tilman Hausherr","Tilman Hausherr",0,4,"08/Oct/14 19:09","13/Dec/14 14:14","08/Oct/14 19:19"
PDFBOX-2415,PDFBOX,"java.lang.ClassCastException: org.apache.pdfbox.pdmodel.font.PDType1CFont cannot be cast to org.apache.pdfbox.pdmodel.font.PDType1Font",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,"debian, java 1.7","java.lang.ClassCastException: org.apache.pdfbox.pdmodel.font.PDType1CFont cannot be cast to org.apache.pdfbox.pdmodel.font.PDType1Font
at org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.getFontValidator(FontValidationProcess.java:93)
at org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.validate(FontValidationProcess.java:72)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:106)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:84)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:302)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:88)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:164)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:83)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)",0,"John Hewson","Ralf Hauser",0,3,"09/Oct/14 05:35","17/Mar/16 19:08","09/Oct/14 07:51"
PDFBOX-2419,PDFBOX,"XFDF export is not XML compliant",Bug,CLOSED,Major,Fixed,1.8.7,"1.8.8, 2.0.0",AcroForm,FDF,,"The XFDF content is written as a simple string instead of XML nodes.
As a result, field values containing special characters (&, <, >, ...) are not escaped and the resulting XML is invalid.",0,"Andreas Lehmkühler","Laurent Richard",0,3,"09/Oct/14 10:42","13/Dec/14 14:15","02/Nov/14 14:50"
PDFBOX-2420,PDFBOX,"DateConverter doesn't handle time zones outside -12 to +12 range properly",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.2, 2.0.3, (1)","1.8.13, 2.0.3, 3.0.0 PDFBox",Utilities,None,,"DateConverter normalizes time zones in restrainTZoffset(...) to a value that is between -12:00 and +12:00. So a time zone like +13:00 gets normalized to -11:00. However, the date itself is not adapted accordingly. As a result, a time stamp like "2014-7-20T05:0:00+1300" gets changed to "2014-7-20T05:0:00-1100", which is actually 24 hours later! To compensate for the time zone change, 24 hours should have been subtracted from the date: "2014-7-19T05:0:00-1100".
Personally, I'd prefer to leave the time zones untouched completely. Note that XML Schema defines time zones up to +/- 14:00 to be valid: http://www.w3.org/TR/xmlschema-2/#dateTime-timezones. For any time zones out of that range either generate an error or consider a garbage-in-garbage-out policy.",0,"Tilman Hausherr","Arjohn Kampman",0,4,"09/Oct/14 11:55","25/Mar/17 18:12","11/Aug/16 16:47"
PDFBOX-2421,PDFBOX,"Poor text extraction and rendering of file with non embedded type1 font",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0",2.0.0,"FontBox, Rendering",type1font,,"The attached file has a poor text extraction with 1.8.8; with 1.8.6 it was OK. With 2.0 it is also OK.
The rendering was mostly OK in 1.8.6, but not with 1.8.8 and 2.0.",0,"John Hewson","Tilman Hausherr",0,2,"09/Oct/14 20:42","17/Mar/16 19:06","16/Dec/14 18:46"
PDFBOX-2422,PDFBOX,"PDFont.getStringWidth results in stackoverflow",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"When loading a true type font and calling getStringWidth("é") will result in a stackoverflow. Calling the method with a 'regular' character is ok.
Example code
PDDocument doc = new PDDocument();
// load a font which is in PDFBox
PDTrueTypeFont font = PDTrueTypeFont.loadTTF(doc, getClass().getResourceAsStream("/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf"));
font.getStringWidth("éé");",0,"John Hewson","Cornelis Hoeflake",0,4,"10/Oct/14 10:01","17/Mar/16 19:07","14/Oct/14 04:25"
PDFBOX-2423,PDFBOX,"Page tree handling needs rewriting",Improvement,CLOSED,Major,Fixed,"1.8.7, 2.0.0",2.0.0,PDModel,None,,"The way in which PDFBox handles the Page tree needs to be rewritten, preferably from scratch. Currently the document catalog returns the raw objects from the page tree, wrapped in either a PDPage or PDPageNode.
We need to abstract over the page tree and get rid of PDPageNode, we should provide methods which can add/remove PDPage objects only. The existing low-level access to the page tree is not needed at the PD-level.
Inheritance of page properties such as crop box, resources, and rotation should be reimplemented to use whatever new page tree abstraction we invent. We can finally remove the old broken methods which didn't look up the inheritance tree when retrieving these values.",0,"John Hewson","John Hewson",0,7,"10/Oct/14 18:21","25/May/16 15:52","01/Oct/15 21:37"
PDFBOX-2424,PDFBOX,"ClassCastException in getMetaData if no real meta data",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"Here's an exception from Tim Allison latest TIKA test (too lazy to test it myself, the cause is obvious) with the attached file:
org.apache.tika.exception.TikaException: Unexpected RuntimeException from org.apache.tika.parser.pdf.PDFParser
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:249)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:247)
 at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:120)
 at org.apache.tika.parser.RecursiveParserWrapper.parse(RecursiveParserWrapper.java:137)
 at org.apache.tika.batch.fs.RecursiveParserWrapperFSConsumer.processFileResource(RecursiveParserWrapperFSConsumer.java:120)
 at org.apache.tika.batch.FileResourceConsumer._processFileResource(FileResourceConsumer.java:153)
 at org.apache.tika.batch.FileResourceConsumer.call(FileResourceConsumer.java:96)
 at org.apache.tika.batch.FileResourceConsumer.call(FileResourceConsumer.java:38)
 at java.util.concurrent.FutureTask.run(FutureTask.java:262)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
 at java.util.concurrent.FutureTask.run(FutureTask.java:262)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
 at java.lang.Thread.run(Thread.java:724)
Caused by: java.lang.ClassCastException: org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSStream
 at org.apache.pdfbox.pdmodel.PDDocumentCatalog.getMetadata(PDDocumentCatalog.java:312)
 at org.apache.tika.parser.pdf.PDFParser.extractMetadata(PDFParser.java:181)
 at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:158)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:247)
 ... 13 more
"
here's the excerpt in the PDF:
241 0 obj << /Type /Metadata /Subtype /XML >> endobj
the current code is
        COSStream stream = (COSStream)root.getDictionaryObject( COSName.METADATA );
shall we keep it that way or rather put out a warning if the meta data is not a stream and return null? Adobe Reader does nothing when looking for the properties.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"10/Oct/14 19:13","13/Dec/14 14:14","12/Oct/14 20:01"
PDFBOX-2428,PDFBOX,"An error occured when reading table hmtx",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.12, 2.0.0",FontBox,None,,"java -cp pdfbox/preflight/target/preflight-1.8.8-SNAPSHOT.jar:pdfbox/app/target/pdfbox-app-1.8.8-SNAPSHOT.jar:pdfbox/xmpbox/target/xmpbox-1.8.8-SNAPSHOT.jar:lib/commons-io-1.3.1.jar org.apache.pdfbox.preflight.Validator_A1b ttsubset_pdfa.pdf
SEVERE: An error occured when reading table hmtx
java.io.EOFException
at org.apache.fontbox.ttf.MemoryTTFDataStream.readSignedShort(MemoryTTFDataStream.java:139)",0,"John Hewson","simon steiner",0,9,"14/Oct/14 13:54","17/Mar/16 19:08","16/Dec/14 03:37"
PDFBOX-2430,PDFBOX,"Make the non-sequential parser the default parser",Improvement,CLOSED,Blocker,Fixed,2.0.0,2.0.0,Parsing,None,,"As proposed by Maruan on dev@, we should make the non-sequentatial parser the default parser. The different load-methods should be simplified in that context, so that all load/loadNonSeq will be replaced by a load method.",0,"Andreas Lehmkühler","Andreas Lehmkühler",1,5,"15/Oct/14 10:17","17/Mar/16 19:08","23/Nov/14 15:49"
PDFBOX-2434,PDFBOX,"ClassCastException in readVersionInTrailer",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"I get this exception with the attached file:
Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSFloat cannot be cast to org.apache.pdfbox.cos.COSName
        at org.apache.pdfbox.pdfparser.PDFParser.readVersionInTrailer(PDFParser.java:918)
The cause is this:
<< 
/Type /Catalog 
/PageLabels 68 0 R 
/Version 1.39999 
A version must be like this:
/Version /1.4
I'll fix this by ignoring the wrong version and put out a warning.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Oct/14 19:44","13/Dec/14 14:14","16/Oct/14 20:06"
PDFBOX-2435,PDFBOX,"ConvertToImage Appears To Invert Colors",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8",1.8.8,Writing,"CCITTFaxDecode regre",,"the colors are reversed when I call convertToImage API in PDPage class.",0,"Tilman Hausherr",lufeng,0,3,"17/Oct/14 06:23","13/Dec/14 14:15","18/Oct/14 06:31"
PDFBOX-2436,PDFBOX,"Parsing error",Bug,CLOSED,Critical,Fixed,1.8.7,2.0.0,Parsing,None,"java 1.8","PDDocument.load method returns without exception, but document model is incomplete.
You can try it by this code on attached file:
PDDocument document = PDDocument.load(new File(inFN), null);
int size = document.getSignatureDictionaries().size();
System.out.println("Signatures count:" +size);
Output is 1, but there are two signatures in PDF document.
PDFParser.class produces IOException and ignores it on line 196. Rest of the document is ignored.
loadNoSeq method works, but I cannot use it, because I want to attach a new signature.",0,"Andreas Lehmkühler","Jan Vomlel",0,2,"17/Oct/14 07:00","17/Mar/16 19:08","02/Mar/15 19:09"
PDFBOX-2437,PDFBOX,"PDFont isSymbolic() has unexpected return value",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"From the mailing list:
Hello,
I believe the following lines should fallback to false instead of true.
https://github.com/apache/pdfbox/blob/trunk/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java#L401-L402
{
// unless we can prove that the font is symbolic, we assume that it is
not
isSymbolic = true;
}
Thought to let you know.
Best Regards,
Hisham
Either the comment or the return value is wrong, but this code is very brittle so we'll need to do lots of regression testing if any changes are made.",0,"John Hewson","John Hewson",0,2,"18/Oct/14 19:48","17/Mar/16 19:08","11/Aug/15 00:35"
PDFBOX-2440,PDFBOX,"xref stream is saved as table",Improvement,CLOSED,Major,Fixed,1.8.7,2.0.0,Writing,None,,"When saving a PDDocument, PdfBox seems to always write an xref table, even when the original file contains an xref stream.
To reproduce, load a PDF file (like the one attached) with PDDocument#load (or PDDocument#loadNonSeq, same result) and then save it with PDDocument#save to another file.
It seems to me that the problem is in COSWriter#doWriteXRef. When COSDocument#isXRefStream is true, the xref entries should be wrapped in a stream, but they're written to output one by one. I think that part should look more like its counterpart in COSWriter#doWriteXRefInc.
I made some changes to doWriteXRef accordingly and it seems to work for PDFs that have never been incrementally updated but leads to corrupt files when the PDF has been incrementally updated before",0,"Andreas Lehmkühler",WB,0,4,"20/Oct/14 19:48","17/Mar/16 19:07","02/Jan/15 15:34"
PDFBOX-2441,PDFBOX,"Improve XRef self healing mechanism when more than one xref table",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"This is a follow-up issue to PDFBOX-2250:
the xref repair algorithm simply searches for the nearest offset, which may fail if more than one xref table is present
...
Once we have a sample pdf which can't be parsed with the simple algorithm, we can open a new issue.
And here's one:
Exception in thread "main" java.io.IOException: Error: Expected a long type at offset 1180, instead got '50/Filter/FlateDecode/DecodeParms'
        at org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1690)
That file does have more than one xref table.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"21/Oct/14 06:53","13/Dec/14 14:14","23/Oct/14 09:56"
PDFBOX-2442,PDFBOX,"false negative? 3.1.6 : Invalid Font definition, Width (633.0) of the character "60" in the font program "BNGLNN+LucidaMath-Symbol" is inconsistent with the width (0.0) in the PDF dictionary.",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,"java 1.7, debian","org.apache.pdfbox.preflight.font.util.GlyphException: Width (633.0) of the character "60" in the font program "BNGLNN+LucidaMath-Symbol" is inconsistent with the width (0.0) in the PDF dictionary.
at org.apache.pdfbox.preflight.font.container.FontContainer.checkWidthsConsistency(FontContainer.java:181)
at org.apache.pdfbox.preflight.font.container.FontContainer.checkGlyphWidth(FontContainer.java:130)
at org.apache.pdfbox.preflight.content.PreflightContentStream.validText(PreflightContentStream.java:342)
at org.apache.pdfbox.preflight.content.PreflightContentStream.validStringArray(PreflightContentStream.java:276)
at org.apache.pdfbox.preflight.content.PreflightContentStream.validStringArray(PreflightContentStream.java:272)
at org.apache.pdfbox.preflight.content.PreflightContentStream.checkShowTextOperators(PreflightContentStream.java:190)
at org.apache.pdfbox.preflight.content.PreflightContentStream.processOperator(PreflightContentStream.java:155)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processSubStream(PDFStreamEngine.java:226)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processSubStream(PDFStreamEngine.java:196)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:152)
at org.apache.pdfbox.preflight.content.PreflightContentStream.validPageContentStream(PreflightContentStream.java:76)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateContent(SinglePageValidationProcess.java:184)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:87)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:56)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:45)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)",0,"John Hewson","Ralf Hauser",0,4,"21/Oct/14 10:33","17/Mar/16 19:38","02/Nov/14 19:35"
PDFBOX-2443,PDFBOX,"About to return NULL from unhandled branch when constructing a PDJpeg",Bug,CLOSED,Minor,Fixed,"1.8.7, 1.8.8",1.8.8,PDModel,None,,"The INFO "About to return NULL from unhandled branch" appears when creating a PDJpeg from a stream. Although the message is an INFO and not a WARNING or an ERROR, it scares users.
The message happens because getRGBImage() calls getColorSpace() although the colorspace isn't known yet, it is determined after the call to getRGBImage(), which loads the image.
The image objects were completely redesigned in 2.0, so it makes no sense to waste time for a real solution to this. I am setting the message to DEBUG instead, and make it less scary.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Oct/14 17:10","13/Dec/14 14:15","21/Oct/14 17:12"
PDFBOX-2444,PDFBOX,"Add radial shading example",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Utilities,shading,,"Add radial shading to the example created in PDFBOX-2211. Use both methods of adding a shading that emerged from PDFBOX-2370.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Oct/14 17:50","17/Mar/16 19:07","21/Oct/14 18:05"
PDFBOX-2447,PDFBOX,""Cannot save a document which has been closed" when encrypting",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,"java 1.7, debian","InputStream content = ...;
int keyLength = 256;
AccessPermission ap = new AccessPermission();
StandardProtectionPolicy spp = new StandardProtectionPolicy(
symmPw, symmPw, ap);
spp.setEncryptionKeyLength(keyLength);
document.protect(spp);
ByteArrayOutputStream baos = new ByteArrayOutputStream();
document.save(baos);
in the save() the above mentioned exception is thrown (wasn't with the 2013-11 snapshot)",0,"Tilman Hausherr","Ralf Hauser",0,4,"23/Oct/14 13:03","17/Mar/16 19:07","24/Oct/14 19:00"
PDFBOX-2448,PDFBOX,"ligatures and some glyphs missing",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,type1,,"Ligatures are missing in the attached file ("filter", "identification") and some glyphs (on first page, below "BAT Observations" a glyph is missing after the italic "T").",0,"John Hewson","Tilman Hausherr",0,2,"23/Oct/14 20:42","17/Mar/16 19:08","16/Dec/14 20:17"
PDFBOX-2449,PDFBOX,"Character missing in text extraction",Bug,CLOSED,Major,Fixed,1.8.8,1.8.8,None,None,,"The attached file brings this text extraction:
1.8.6:
For safe! clean! abundant water?in our homes!
rivers! lakes! and streams?is one of our
1.8.7:
For safe! clean! abundant water?in our homes!
rivers! lakes! and streams?is one of our
1.8.8:
For safe! clean! abundant water?n our homes!
rivers! lakes! and streams?s one of our
2.0:
For safe! clean! abundant waterin our homes!
rivers! lakes! and streamsis one of our
AR:
For safe! clean! abundant waterin our homes!
rivers! lakes! and streamsis one of our
So the "i" has been lost in the 1.8.8 version. (2.0 and AR have a character that is invisible when viewing this issue, but can be seen when editing)",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"23/Oct/14 20:53","13/Dec/14 14:15","29/Nov/14 18:35"
PDFBOX-2452,PDFBOX,"Continuous log "Nonsymbolic Type 0 font: SNCFYS+ARStdKai"",Improvement,CLOSED,Blocker,Fixed,2.0.0,2.0.0,PDModel,font,,"When printing, PDFBox continuous log:
2014-10-24 15:37:07,768 [ WARN] g.apache.pdfbox.pdmodel.font.PDType0Font:  71 - Nonsymbolic Type 0 font: SNCFYS+ARStdKai
2014-10-24 15:37:07,771 [ WARN] g.apache.pdfbox.pdmodel.font.PDType0Font:  71 - Nonsymbolic Type 0 font: SNCFYS+ARStdKai
What can I response to this Warning? Or the message should be logged with lower severity?",0,"John Hewson","Pei-Tang Huang",0,4,"24/Oct/14 08:05","17/Mar/16 19:07","16/Dec/14 19:39"
PDFBOX-2453,PDFBOX,"Building on OpenJDK throws javax.imageio.IIOException",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Originally captured here: http://stackoverflow.com/questions/26531191/pdfbox-throws-writeimage-error-when-building-on-openjdk
I get this error when building with OpenJDK:
-------------------------------------------------------------------------------
Test set: org.apache.pdfbox.pdmodel.graphics.image.JPEGFactoryTest
-------------------------------------------------------------------------------
Tests run: 6, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 0.804 sec <<< FAILURE! - in org.apache.pdfbox.pdmodel.graphics.image.JPEGFactoryTest
testCreateFromImageINT_ARGB(org.apache.pdfbox.pdmodel.graphics.image.JPEGFactoryTest)  Time elapsed: 0.387 sec  <<< ERROR!
javax.imageio.IIOException: Invalid argument to native writeImage
        at com.sun.imageio.plugins.jpeg.JPEGImageWriter.writeImage(Native Method)
        at com.sun.imageio.plugins.jpeg.JPEGImageWriter.writeOnThread(JPEGImageWriter.java:1058)
        at com.sun.imageio.plugins.jpeg.JPEGImageWriter.write(JPEGImageWriter.java:360)
        at javax.imageio.ImageWriter.write(ImageWriter.java:615)
        at javax.imageio.ImageIO.doWrite(ImageIO.java:1612)
        at javax.imageio.ImageIO.write(ImageIO.java:1578)
        at org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate(ValidateXImage.java:63)
        at org.apache.pdfbox.pdmodel.graphics.image.JPEGFactoryTest.testCreateFromImageINT_ARGB(JPEGFactoryTest.java:141)

testCreateFromImage4BYTE_ABGR(org.apache.pdfbox.pdmodel.graphics.image.JPEGFactoryTest)  Time elapsed: 0.147 sec  <<< ERROR!
javax.imageio.IIOException: Invalid argument to native writeImage
        at com.sun.imageio.plugins.jpeg.JPEGImageWriter.writeImage(Native Method)
        at com.sun.imageio.plugins.jpeg.JPEGImageWriter.writeOnThread(JPEGImageWriter.java:1058)
        at com.sun.imageio.plugins.jpeg.JPEGImageWriter.write(JPEGImageWriter.java:360)
        at javax.imageio.ImageWriter.write(ImageWriter.java:615)
        at javax.imageio.ImageIO.doWrite(ImageIO.java:1612)
        at javax.imageio.ImageIO.write(ImageIO.java:1578)
        at org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate(ValidateXImage.java:63)
        at org.apache.pdfbox.pdmodel.graphics.image.JPEGFactoryTest.testCreateFromImage4BYTE_ABGR(JPEGFactoryTest.java:182)
I'm aware OpenJDK does not have a native JPEG encoder, and I can build with Oracle JDK:
JAVA_HOME="/path/to/oracle/jdk" mvn clean compile",0,"Tilman Hausherr","Juan Uys",0,6,"24/Oct/14 11:50","17/Mar/16 19:08","24/Oct/14 19:17"
PDFBOX-2454,PDFBOX,"[PATCH] Couldn't link the profiles error on multithreaded system",Bug,CLOSED,Major,"Won't Fix",2.0.0,None,Rendering,None,,"java.awt.color.CMMException: LCMS error 13: Couldn't link the profiles
at sun.java2d.cmm.lcms.LCMS.createNativeTransform(Native Method)
at sun.java2d.cmm.lcms.LCMS.createTransform(LCMS.java:156)
at sun.java2d.cmm.lcms.LCMSTransform.doTransform(LCMSTransform.java:155)
at sun.java2d.cmm.lcms.LCMSTransform.colorConvert(LCMSTransform.java:268)
at java.awt.image.ColorConvertOp.ICCBIFilter(ColorConvertOp.java:355)
at java.awt.image.ColorConvertOp.filter(ColorConvertOp.java:282)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.toRGBImageAWT(PDColorSpace.java:237)",0,"John Hewson","simon steiner",0,3,"24/Oct/14 13:01","13/Oct/16 14:48","06/Jan/15 05:32"
PDFBOX-2455,PDFBOX,"NonSequentialParser does not tolerate missing %%EOF markers",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"The NonSequentialParser throws an exception when parsing a file with a missing or corrupted %%EOF marker. All PDF-viewers I tried however handle this kind of documents without problems.
The attached patch makes the parser ignore missing %%EOF when in lenient mode. I cannot attach the original file presenting this problem, since it is a bank statement, but I have attached a small document with the same issue that I have created for testing.",0,"Andreas Lehmkühler","Michele Balistreri",0,3,"24/Oct/14 20:45","13/Dec/14 14:15","30/Oct/14 18:48"
PDFBOX-2456,PDFBOX,"create TestSymmetricKeyEncryption.java",Improvement,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Utilities,AES256,"debian, java 1.7","similarly to org.apache.pdfbox.encryption.TestPublicKeyEncryption, also test password based encryption
1) 128bit
2) 256bit AES PDFBOX-1594",0,"Tilman Hausherr","Ralf Hauser",0,8,"25/Oct/14 09:49","11/Nov/15 17:39","15/Nov/14 16:57"
PDFBOX-2457,PDFBOX,"LogFactory is intialized with a wrong class",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"In some classes the LogFactory is initialized with a wrong class. I guess it's a copy & paste issue.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"25/Oct/14 12:32","17/Mar/16 19:08","25/Oct/14 12:34"
PDFBOX-2458,PDFBOX,"Signing doesn't work anymore using BC 1.51 instead of 1.50",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Signing,None,,"Due to a report of David Wall on users@ signing no longer works using BC 1.51 instead of 1.50.
I'm now getting an invalid digital signature that I created on PDFs we generate (via wkhtmltopdf and PDFBox 1.8.7). It says "At least one signature is invalid" but I previously could create them with valid signatures. This occurred when going from BouncyCastle 1.50 to 1.51, and if I go back to 1.50, it works fine.
The invalid signature complains that the "Document has been altered or corrupted since it was signed".
Here's a link to an existing PDF that has an invalid signature:
http://open.esignforms.com/pdfboxlist/MyDocumentsGOOD.pdf (using BC 1.50)
http://open.esignforms.com/pdfboxlist/MyDocumentsBAD.pdf (using BC 1.51)",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"26/Oct/14 12:45","13/Dec/14 14:15","26/Oct/14 12:50"
PDFBOX-2459,PDFBOX,"Share functionality between Page Tree and Field Tree",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"The PDFs page tree and AcroForms field tree share some common functionality e.g. resolving inheritable attributes, iterating through leafs and such which could be combined into a PDTree class.",0,"John Hewson","Maruan Sahyoun",0,3,"27/Oct/14 09:58","17/Mar/16 19:07","19/May/15 20:40"
PDFBOX-2460,PDFBOX,"fix TestPublicKeyEncryption.java",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,"java 1.7, debian","as reported by Tilman in PDFBOX-2456",0,"Tilman Hausherr","Ralf Hauser",0,5,"27/Oct/14 14:17","17/Mar/16 19:08","30/Oct/14 19:25"
PDFBOX-2461,PDFBOX,"Clear Checkstyle errors in source",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"There are several checkstyle errors and warnings occurring for the current source code. Make sure that the errors are fixed.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"27/Oct/14 18:34","17/Mar/16 19:07","02/Nov/14 17:20"
PDFBOX-2462,PDFBOX,"NullPointerException in <init>(PDFStreamParser.java:109)",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,"debian, java 1.7","java.lang.NullPointerException
at org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:109)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:288)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:245)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processChildStream(PDFStreamEngine.java:233)
at org.apache.pdfbox.preflight.font.util.PreflightType3Stream.showType3Character(PreflightType3Stream.java:61)
at org.apache.pdfbox.preflight.font.Type3FontValidator.getWidthFromCharProc(Type3FontValidator.java:371)
at org.apache.pdfbox.preflight.font.Type3FontValidator.checkCharProcsAndMetrics(Type3FontValidator.java:302)
at org.apache.pdfbox.preflight.font.Type3FontValidator.validate(Type3FontValidator.java:84)
at org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.validate(FontValidationProcess.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:98)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:76)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:167)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:82)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:56)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:45)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)",0,"John Hewson","Ralf Hauser",0,4,"28/Oct/14 05:22","17/Mar/16 19:07","31/Oct/14 09:05"
PDFBOX-2464,PDFBOX,"Document crypto build dependencies",Improvement,CLOSED,Blocker,Fixed,2.0.0,2.0.0,Documentation,None,,"We need to document a new build dependency:
Since PDFBOX-2460, building PDFBox now requires a JDK with "unlimited strength" cryptography. Which requires extra files to be installed.
For JDK 7: http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html
Users without these files will see the message:
Failed tests:
  TestPublicKeyEncryption.setUp:70 JCE unlimited strength jurisdiction policy files are not installed
  TestPublicKeyEncryption.setUp:70 JCE unlimited strength jurisdiction policy files are not installed
  TestPublicKeyEncryption.setUp:70 JCE unlimited strength jurisdiction policy files are not installed
  TestSymmetricKeyEncryption.setUp:80 JCE unlimited strength jurisdiction policy files are not installed",0,"Maruan Sahyoun","John Hewson",0,3,"30/Oct/14 19:30","17/Mar/16 19:08","31/Oct/14 05:53"
PDFBOX-2465,PDFBOX,"NPE in PdfaExtensionHelper.populateSchemaMapping",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",XmpBox,None,,"I get this exception by running preflight on the attached files:
java.lang.NullPointerException
 at org.apache.xmpbox.xml.PdfaExtensionHelper.populateSchemaMapping(PdfaExtensionHelper.java:198)
 at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:202)
 at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:114)
 at org.apache.pdfbox.preflight.process.MetadataValidationProcess.validate(MetadataValidationProcess.java:67)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
 at org.apache.pdfbox.util.TestPDFToImage.doTestFile(TestPDFToImage.java:337)
 at org.apache.pdfbox.util.TestPDFToImage.testRenderImage(TestPDFToImage.java:382)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:606)
 at junit.framework.TestCase.runTest(TestCase.java:176)
 at junit.framework.TestCase.runBare(TestCase.java:141)
 at junit.framework.TestResult$1.protect(TestResult.java:122)
 at junit.framework.TestResult.runProtected(TestResult.java:142)
 at junit.framework.TestResult.run(TestResult.java:125)
 at junit.framework.TestCase.run(TestCase.java:129)
 at junit.framework.TestSuite.runTest(TestSuite.java:255)
 at junit.framework.TestSuite.run(TestSuite.java:250)
 at junit.textui.TestRunner.doRun(TestRunner.java:116)
 at junit.textui.TestRunner.start(TestRunner.java:183)
 at junit.textui.TestRunner.main(TestRunner.java:137)
 at org.apache.pdfbox.util.TestPDFToImage.main(TestPDFToImage.java:432)",0,"Tilman Hausherr","Tilman Hausherr",0,4,"30/Oct/14 23:02","13/Dec/14 14:15","31/Oct/14 18:06"
PDFBOX-2467,PDFBOX,""Arial,Bold" always substituted with "Helvetica-Bold"",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"The ExternalFonts class does some substitute logic for fonts. There is a static map which holds the substitutes and is loaded in the ExternalClass file and some substitutes are got from Standards14.
Next that map also contains some substitutes for registry fonts (I don't know what it is), but it feels a bit like misusing the substitutes mechanism (with prepending a $ to omit conflicts).
As user of PDFBox I want to have the control over substitutes. For example when a PDF has font TrueType Arial,Bold (windows style), and my font provider has only a Type1 font for Arial Bold, the current mechanism returns the Helvetica Bold font True Type font (if have one in my fontprovider).
So I wrote a patch which allows you to wrap a fontprovider in a SubstituteFontProvider. That SubstituteFontProvider does the substitute logic like ExternalFonts did before. The user is in control to wrap (or let ExternalFonts wrap) his own fontprovider in the SubstituteFontProvider.
The registry fonts issue is kept in ExternalFonts and uses an own map.",0,"John Hewson","Cornelis Hoeflake",0,3,"31/Oct/14 09:56","17/Mar/16 19:07","22/Nov/14 01:20"
PDFBOX-2468,PDFBOX,"Switch FDFDocument.load from PDFParser to NonSequentialParser",Improvement,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"The PDFParser requires a startxref offset but FDFs don't necessarily have one. As the non-sequential parser is able to read all objects of a pdf/fdf without a startxref-offset/xref table (see PDFBOX-1595) we have to switch from the old sequential parser to the non-sequential parser when loading a FDF file.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"31/Oct/14 11:09","13/Dec/14 14:14","01/Nov/14 09:15"
PDFBOX-2469,PDFBOX,"javax.crypto.BadPaddingException in PDFBox 1.8.8-SNAPSHOT",Bug,CLOSED,Minor,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",PDModel,AES128,,"Nick Burch noticed that one of our old test files fails a Tika test now with PDFBox 1.8.7 and Java 1.6.
I just tested the pure PDFBox app built with PDFBox 1.8.8-SNAPSHOT, and I'm getting the same exception with Java 1.6 and Java 1.7.
Stacktrace:
ExtractText failed with the following exception:
java.io.IOException: javax.crypto.BadPaddingException: Given final block not properly padded
        at javax.crypto.CipherInputStream.getMoreData(CipherInputStream.java:118)
        at javax.crypto.CipherInputStream.read(CipherInputStream.java:236)
        at javax.crypto.CipherInputStream.read(CipherInputStream.java:212)
        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:316)
        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream(SecurityHandler.java:421)
        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decrypt(SecurityHandler.java:390)
        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptObject(SecurityHandler.java:365)
        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.proceedDecryption(SecurityHandler.java:196)
        at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.decryptDocument(StandardSecurityHandler.java:158)
        at org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1598)
        at org.apache.pdfbox.ExtractText.startExtraction(ExtractText.java:216)
        at org.apache.pdfbox.ExtractText.main(ExtractText.java:85)
        at org.apache.pdfbox.PDFBox.main(PDFBox.java:58)
Caused by: javax.crypto.BadPaddingException: Given final block not properly padded
        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:811)
        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:676)
        at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:423)
        at javax.crypto.Cipher.doFinal(Cipher.java:1708)
        at javax.crypto.CipherInputStream.getMoreData(CipherInputStream.java:112)
        ... 12 more
java version "1.7.0_71"
OpenJDK Runtime Environment (rhel-2.5.3.1.el6-x86_64 u71-b14)
OpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode)
and
java version "1.6.0_33"
OpenJDK Runtime Environment (IcedTea6 1.13.5) (rhel-1.13.5.0.el6_6-x86_64)
OpenJDK 64-Bit Server VM (build 23.25-b01, mixed mode)",0,"Andreas Lehmkühler","Tim Allison",1,9,"31/Oct/14 11:34","13/Dec/14 14:15","18/Nov/14 10:12"
PDFBOX-2473,PDFBOX,"Remove the CopyDoc example",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Parsing,None,,"I'm going to remove the CopyDoc example as It doens't make sense to copy a pdf by parsing it and writing it afterwards. It's easier and faster to simply copy the file itself.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"02/Nov/14 16:34","17/Mar/16 19:07","02/Nov/14 16:40"
PDFBOX-2474,PDFBOX,"Remove the direct usage of PDFParser",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"2 of the examples provided by PDFBox are still using the PDFParser directly instead of using PDDocument#load",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"02/Nov/14 16:35","17/Mar/16 19:08","02/Nov/14 16:39"
PDFBOX-2475,PDFBOX,"Fix Checkstyle errors in the 1.8 branch",Improvement,CLOSED,Minor,Fixed,1.8.7,1.8.8,None,None,,"There are some Checkstyle validation errors in the 1.8 branch which shall be cleared.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"03/Nov/14 12:02","13/Dec/14 14:15","03/Nov/14 14:06"
PDFBOX-2477,PDFBOX,"NPE in DomXmpParser.createProperty",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",XmpBox,None,,"I get this NPE with the attached file:
Exception in thread "main" java.lang.NullPointerException
 at org.apache.xmpbox.xml.DomXmpParser.createProperty(DomXmpParser.java:352)
 at org.apache.xmpbox.xml.DomXmpParser.parseDescriptionRoot(DomXmpParser.java:292)
 at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:206)
 at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:114)
 at org.apache.pdfbox.preflight.process.MetadataValidationProcess.validate(MetadataValidationProcess.java:67)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
 at org.apache.pdfbox.preflight.Validator_A1b.runSimple(Validator_A1b.java:161)
 at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:126)
The cause is this:
<xapMM:DerivedFrom rdf:parseType="Resource"/>
According to the XMP spec, that part can have missing elements, i.e. it is not an error. So I'll just add a null check.
There are more potiential NPE risks in that code, however I prefer to get examples.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"03/Nov/14 18:58","13/Dec/14 14:15","03/Nov/14 19:16"
PDFBOX-2478,PDFBOX,"NPE in XObjImageValidator.checkColorSpaceAndImageMask",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Preflight,None,,"I get this with the file PDFBOX-2376-087731.pdf:
java.lang.NullPointerException
PDFBOX-2376-179204-EMC.pdf
 at org.apache.pdfbox.preflight.xobject.XObjImageValidator.checkColorSpaceAndImageMask(XObjImageValidator.java:132)
 at org.apache.pdfbox.preflight.xobject.XObjImageValidator.validate(XObjImageValidator.java:183)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:167)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:82)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:56)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:45)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
 at pdfboxpageimageextraction.PreflightTest.main(PreflightTest.java:47)
The cause is this piece of code:
            Integer bitsPerCompValue = COSUtils.getAsInteger(bitsPerComp, cosDocument);
            if (bitsPerCompValue != 1)
which fails on this input:
44 0 obj<</Length 289/Filter/CCITTFaxDecode/DecodeParms<</K -1/Columns 282/Rows 40>>/Width 282/Height 40/ImageMask true/Subtype/Image>>
That segment is called only for image masks. The spec does not require BitsPerComponent for image masks, but if it is there, it must be 1. So all I have to do is to add a null check.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"03/Nov/14 20:08","13/Dec/14 14:14","03/Nov/14 21:00"
PDFBOX-2480,PDFBOX,"Add information about Snapshots to download section",Task,CLOSED,Trivial,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Documentation,None,,"As there Snapshot versions of PDFBox are requested on a regular basis add the information where to find these in the downloads section of our website.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"04/Nov/14 08:19","13/Dec/14 14:15","04/Nov/14 08:24"
PDFBOX-2481,PDFBOX,"Adding large TYPE_BYTE_BINARY image to pdf document generates distorted result",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",PDModel,None,,"See attached small.jpg and large.jpg added to attached rgb.pdf and bn.pdf using attached Image2Pdf2ImageBlackAndWhite2PDF.java.
Adding both small.jpg and large.jpg to rgb.pdf is OK
Adding small.jpg, converted to black and white, to bn.pdf is OK
Adding large.jpg, converted to black and white, to bn.pdf is NOK: the resulting image is distorted.",0,"Tilman Hausherr","Julien Béti",0,3,"04/Nov/14 09:58","13/Dec/14 14:15","05/Nov/14 05:55"
PDFBOX-2483,PDFBOX,"StackOverflowError in preflight",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Preflight,None,,"I get a stack overflow with the attached file. I can't even get the full trace.
Exception in thread "main" java.lang.StackOverflowError
 at java.util.regex.Pattern$Single.<init>(Unknown Source)
 at java.util.regex.Pattern.newSingle(Unknown Source)
 at java.util.regex.Pattern.atom(Unknown Source)
 at java.util.regex.Pattern.sequence(Unknown Source)
 at java.util.regex.Pattern.expr(Unknown Source)
 at java.util.regex.Pattern.compile(Unknown Source)
 at java.util.regex.Pattern.<init>(Unknown Source)
 at java.util.regex.Pattern.compile(Unknown Source)
 at java.lang.String.replaceAll(Unknown Source)
 at org.apache.pdfbox.pdmodel.font.ExternalFonts.getSubstitutes(ExternalFonts.java:208)
 at org.apache.pdfbox.pdmodel.font.ExternalFonts.getTrueTypeFont(ExternalFonts.java:384)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:144)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:81)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.getFonts(ResourcesValidationProcess.java:127)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:93)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:76)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectResources(XObjFormValidator.java:178)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:75)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:70)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:288)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"04/Nov/14 23:14","13/Dec/14 14:14","20/Nov/14 22:25"
PDFBOX-2484,PDFBOX,"Cannot decrypt AES256 encrypted files with nonSeq parser",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,AES256,,"It is not possible to open the attached file (password: 1234567890abcdefghijk1234567890abcdefghijk ) with the nonSeq parser:
WARNUNG: Verification of permissions failed (-64 != -3392)
Nov 06, 2014 7:54:35 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSArray
WARNUNG: Corrupt object reference at offset 123
Nov 06, 2014 7:54:35 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSArray
WARNUNG: Corrupt object reference at offset 151
Nov 06, 2014 7:54:35 AM org.apache.pdfbox.filter.FlateFilter decode
SCHWERWIEGEND: FlateFilter: stop reading corrupt stream due to a DataFormatException",0,"Andreas Lehmkühler","Tilman Hausherr",0,4,"06/Nov/14 07:05","13/Dec/14 14:15","09/Nov/14 15:04"
PDFBOX-2485,PDFBOX,"IllegalArgumentException in TypeMapping.instanciateSimpleProperty",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,XmpBox,None,,"I get this with the attached file:
004144.pdf preflight fail: java.lang.IllegalArgumentException: Failed to instanciate property
 at org.apache.xmpbox.type.TypeMapping.instanciateSimpleProperty(TypeMapping.java:204)
 at org.apache.xmpbox.xml.DomXmpParser.manageSimpleType(DomXmpParser.java:399)
 at org.apache.xmpbox.xml.DomXmpParser.createProperty(DomXmpParser.java:338)
 at org.apache.xmpbox.xml.DomXmpParser.parseDescriptionRoot(DomXmpParser.java:292)
 at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:206)
 at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:114)
 at org.apache.pdfbox.preflight.process.MetadataValidationProcess.validate(MetadataValidationProcess.java:67)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
 at pdfboxpageimageextraction.PreflightTest.main(PreflightTest.java:41)
Caused by: java.lang.reflect.InvocationTargetException
 at sun.reflect.GeneratedConstructorAccessor23.newInstance(Unknown Source)
 at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
 at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
 at org.apache.xmpbox.type.TypeMapping.instanciateSimpleProperty(TypeMapping.java:184)
 ... 10 more
Caused by: java.lang.IllegalArgumentException: Value given is not allowed for the Date type : class java.lang.String
 at org.apache.xmpbox.type.DateType.setValue(DateType.java:110)
 at org.apache.xmpbox.type.AbstractSimpleProperty.<init>(AbstractSimpleProperty.java:50)
 at org.apache.xmpbox.type.DateType.<init>(DateType.java:50)
 ... 14 more
The cause is this line in the XMP:
<xap:CreateDate>0-01-01T00:00:00Z</xap:CreateDate>
The cause is the "Z".",0,"Tilman Hausherr","Tilman Hausherr",0,2,"06/Nov/14 20:25","17/Mar/16 19:06","29/Nov/14 22:12"
PDFBOX-2486,PDFBOX,"ClassCastException in preflight: PDNonTerminalField cannot be cast to PDField",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"AcroForm, Preflight",None,,"I get this with the attached files:
Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField cannot be cast to org.apache.pdfbox.pdmodel.interactive.form.PDField
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.exploreFields(AcroFormValidationProcess.java:107)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.validate(AcroFormValidationProcess.java:60)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
 at org.apache.pdfbox.preflight.Validator_A1b.runSimple(Validator_A1b.java:161)
 at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:126)",0,"Tilman Hausherr","Tilman Hausherr",1,5,"06/Nov/14 20:38","17/Mar/16 19:07","18/Nov/14 17:43"
PDFBOX-2487,PDFBOX,"ArrayIndexOutOfBoundsException in Type1CharString",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"I get this with the attached file:
java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 3
 at java.util.Vector.get(Vector.java:744)
 at org.apache.fontbox.cff.Type1CharString.handleCommand(Type1CharString.java:204)
 at org.apache.fontbox.cff.Type1CharString.access$000(Type1CharString.java:39)
 at org.apache.fontbox.cff.Type1CharString$1.handleCommand(Type1CharString.java:143)
 at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:45)
 at org.apache.fontbox.cff.Type1CharString.render(Type1CharString.java:146)
 at org.apache.fontbox.cff.Type1CharString.getWidth(Type1CharString.java:105)
 at org.apache.fontbox.type1.Type1Font.getWidth(Type1Font.java:159)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.getWidthFromFont(PDType1Font.java:286)
 at org.apache.pdfbox.preflight.font.container.FontContainer.checkGlyphWidth(FontContainer.java:129)
 at org.apache.pdfbox.preflight.content.PreflightContentStream.validText(PreflightContentStream.java:340)
 at org.apache.pdfbox.preflight.content.PreflightContentStream.validStringDefinition(PreflightContentStream.java:243)
 at org.apache.pdfbox.preflight.content.PreflightContentStream.checkShowTextOperators(PreflightContentStream.java:183)
 at org.apache.pdfbox.preflight.content.PreflightContentStream.processOperator(PreflightContentStream.java:153)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:461)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:425)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:398)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:164)
 at org.apache.pdfbox.preflight.content.PreflightContentStream.validPageContentStream(PreflightContentStream.java:72)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateContent(SinglePageValidationProcess.java:182)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:87)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:56)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:45)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
 at pdfboxpageimageextraction.PreflightTest.main(PreflightTest.java:41)",0,"John Hewson","Tilman Hausherr",0,2,"06/Nov/14 21:00","17/Mar/16 19:08","18/Aug/15 18:28"
PDFBOX-2488,PDFBOX,"NPE in FontValidator.isSubSet in preflight",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Preflight,None,,"java.lang.NullPointerException
 at org.apache.pdfbox.preflight.font.FontValidator.isSubSet(FontValidator.java:48) at org.apache.pdfbox.preflight.font.FontValidator.isSubSet(FontValidator.java:48)
 at org.apache.pdfbox.preflight.font.descriptor.Type1DescriptorHelper.checkMandatoryFields(Type1DescriptorHelper.java:59)
 at org.apache.pdfbox.preflight.font.descriptor.FontDescriptorHelper.validate(FontDescriptorHelper.java:96)
 at org.apache.pdfbox.preflight.font.SimpleFontValidator.processFontDescriptorValidation(SimpleFontValidator.java:121)
 at org.apache.pdfbox.preflight.font.SimpleFontValidator.validate(SimpleFontValidator.java:60)
 at org.apache.pdfbox.preflight.process.reflect.FontValidationProcess.validate(FontValidationProcess.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:98)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:76)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:167)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:82)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:52)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:56)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:45)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
 at pdfboxpageimageextraction.PreflightTest.main(PreflightTest.java:41)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"06/Nov/14 22:47","13/Dec/14 14:15","19/Nov/14 17:24"
PDFBOX-2489,PDFBOX,"StackOverflowError in PDSimpleFont.isFontSymbolic",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"java.lang.StackOverflowError
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isFontSymbolic(PDSimpleFont.java:177)
 at org.apache.pdfbox.pdmodel.font.PDFont.isSymbolic(PDFont.java:394)
 at org.apache.pdfbox.pdmodel.font.PDFont.isStandard14(PDFont.java:517)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isStandard14(PDSimpleFont.java:338)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isFontSymbolic(PDSimpleFont.java:182)
 at org.apache.pdfbox.pdmodel.font.PDFont.isSymbolic(PDFont.java:394)
 at org.apache.pdfbox.pdmodel.font.PDFont.isStandard14(PDFont.java:517)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isStandard14(PDSimpleFont.java:338)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isFontSymbolic(PDSimpleFont.java:182)
 at org.apache.pdfbox.pdmodel.font.PDFont.isSymbolic(PDFont.java:394)
 at org.apache.pdfbox.pdmodel.font.PDFont.isStandard14(PDFont.java:517)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isStandard14(PDSimpleFont.java:338)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isFontSymbolic(PDSimpleFont.java:182)
 at org.apache.pdfbox.pdmodel.font.PDFont.isSymbolic(PDFont.java:394)
 at org.apache.pdfbox.pdmodel.font.PDFont.isStandard14(PDFont.java:517)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isStandard14(PDSimpleFont.java:338)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isFontSymbolic(PDSimpleFont.java:182)
 at org.apache.pdfbox.pdmodel.font.PDFont.isSymbolic(PDFont.java:394)
 at org.apache.pdfbox.pdmodel.font.PDFont.isStandard14(PDFont.java:517)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isStandard14(PDSimpleFont.java:338)
....
this happens both with rendering and with preflight. AR displays an error that the BBox value is incorrect.",0,"John Hewson","Tilman Hausherr",0,2,"06/Nov/14 22:59","17/Mar/16 19:08","16/Dec/14 04:29"
PDFBOX-2490,PDFBOX,"Return value of COSDocument#isEncrypted is unclear",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0","Parsing, PDModel",Encryption,,"According to the java doc COSDocument#isEncrypted provides if a pdf is encrypted or not. But it's not clear what it really means:
is the pdf somehow encrypted
is an encrypted pdf already decrypted after parsing
I guess the first case was the origin intention of this method. Although a comment in the code indicates that the information is needed within the non-sequential parser I can't find any call of COSDocument#isEncrypted anywhere in the non-sequential parser.
I'm going to change the behaviour of isEncrypted so that it follows the origin intention and I'll add a new method isDecrypted as well.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"08/Nov/14 13:12","13/Dec/14 14:15","08/Nov/14 14:02"
PDFBOX-2491,PDFBOX,"NPE in PDFAIdentificationValidation.checkConformanceLevel()",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.7, 2.0.0","1.8.8, 2.0.0",Preflight,None,,"java.lang.NullPointerException
    at org.apache.pdfbox.preflight.metadata.PDFAIdentificationValidation.checkConformanceLevel(PDFAIdentificationValidation.java:105)
    at org.apache.pdfbox.preflight.metadata.PDFAIdentificationValidation.validatePDFAIdentifer(PDFAIdentificationValidation.java:81)
    at org.apache.pdfbox.preflight.process.MetadataValidationProcess.validate(MetadataValidationProcess.java:87)
    at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
    at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
    at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Nov/14 17:40","13/Dec/14 14:14","08/Nov/14 17:44"
PDFBOX-2492,PDFBOX,"Java 8u25 IllegalBlockSizeException decrypting pdf",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",PDModel,None,,"Java 8u20 is ok
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage out.pdf
Exception in thread "main" java.io.IOException: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher
at javax.crypto.CipherInputStream.getMoreData(CipherInputStream.java:115)
at javax.crypto.CipherInputStream.read(CipherInputStream.java:233)
at javax.crypto.CipherInputStream.read(CipherInputStream.java:209)
at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:331)
http://lucene.472066.n3.nabble.com/PDF-test-failing-on-trunk-td4166517.html",0,"Andreas Lehmkühler","simon steiner",0,3,"11/Nov/14 10:32","13/Dec/14 14:15","18/Nov/14 15:09"
PDFBOX-2494,PDFBOX,NumberFormatException,Bug,CLOSED,Major,Duplicate,2.0.0,None,Rendering,None,,"Maybe from PDFBOX-2423
PDF from PDFBOX-1359
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage 10946_2004_Article_340818.pdf
java.lang.NumberFormatException
at java.math.BigDecimal.<init>(BigDecimal.java:494)
at java.math.BigDecimal.<init>(BigDecimal.java:383)
at java.math.BigDecimal.<init>(BigDecimal.java:806)
at org.apache.pdfbox.cos.COSFloat.setValue(COSFloat.java:73)
at org.apache.pdfbox.cos.COSFloat.<init>(COSFloat.java:41)
at org.apache.pdfbox.pdmodel.common.PDRectangle.setUpperRightX(PDRectangle.java:237)",0,"John Hewson","simon steiner",1,4,"11/Nov/14 12:56","06/Dec/14 12:39","06/Dec/14 12:39"
PDFBOX-2495,PDFBOX,"Black shapes in the background of some rendered pages of some PDFs",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"Rendering the sample PDF attached to images results in black shapes in the background of some rendered pages as appearing in the attached sample images (1-4), page 5 is rendered properly.
The images attached were generated using
java -jar pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage black-pages-sample.pdf
against the latest codebase on the trunk as of today (2014-11-11 at 11:15 AM GMT).",0,"John Hewson","Hisham Said",0,5,"11/Nov/14 18:35","17/Mar/16 19:07","06/Jan/15 17:31"
PDFBOX-2499,PDFBOX,"EOF and NPE in PDType1CFont.getFontMatrix",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"Nov 15, 2014 2:30:48 PM org.apache.pdfbox.pdmodel.font.PDType1CFont <init>
SCHWERWIEGEND: Can't read the embedded Type1C font AOFDJB+Optima
java.io.EOFException
 at org.apache.fontbox.cff.DataInput.readUnsignedByte(DataInput.java:100)
 at org.apache.fontbox.cff.DataInput.readByte(DataInput.java:87)
 at org.apache.fontbox.cff.DataInput.readBytes(DataInput.java:175)
 at org.apache.fontbox.cff.CFFParser.readTagName(CFFParser.java:118)
 at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:55)
 at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:93)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:91)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:50)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:806)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:471)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:435)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:408)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:174)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:164)
 at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:213)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:147)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:96)
 at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:265)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:89)

Nov 15, 2014 2:30:48 PM org.apache.pdfbox.pdmodel.font.PDType1CFont <init>
WARNUNG: Using fallback font ArialMT for AOFDJB+Optima
Exception in thread "main" java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.font.PDType1CFont.getFontMatrix(PDType1CFont.java:190)
 at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:123)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:91)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:50)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:806)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:471)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:435)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:408)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:174)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:164)
 at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:213)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:147)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:96)
 at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:265)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:89)",0,"John Hewson","Tilman Hausherr",0,2,"15/Nov/14 13:31","17/Mar/16 19:07","16/Dec/14 01:19"
PDFBOX-2501,PDFBOX,"Page render without barcode",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 1.8.9, 1.8.10","1.8.10, 2.0.0",PDModel,None,"ubuntu, java 1.8","I have tryed this code:
        try {
            PDDocument doc = PDDocument.load(f);
            PDPage page = (PDPage) doc.getDocumentCatalog().getAllPages().get(0);
            BufferedImage image;
            image = page.convertToImage();
            File outputfile = new File("/home/daniel/image.png");
            ImageIO.write(image, "png", outputfile);
        } catch (IOException ex) {
            Logger.getLogger(Impresora.class.getName()).log(Level.SEVERE, null, ex);
        }
Using the PDF attached
And get the PNG attached
In the rendering process I get the following error... in the 'convertToImage()' call
2014-11-14 13:56:12,592 WARN [org.apache.pdfbox.util.PDFStreamEngine] - <java.lang.ArrayIndexOutOfBoundsException>
java.lang.ArrayIndexOutOfBoundsException
    at java.lang.System.arraycopy(Native Method)
    at org.apache.pdfbox.pdmodel.graphics.xobject.PDInlinedImage.createImage(PDInlinedImage.java:218)
    at org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage.process(BeginInlineImage.java:69)
    at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)
    at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
    at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
    at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
    at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:139)
    at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:801)
    at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:732)
One for each of the 4 barcodes in PDF file
As you can see, te page is rendered OK but without any barcode
How could I render completily OK?",0,"Tilman Hausherr","Daniel Egea",0,3,"17/Nov/14 07:29","23/Jul/15 06:35","18/Nov/14 17:50"
PDFBOX-2504,PDFBOX,"ClassCastException in preflight: PDAnnotationWidget cannot be cast to PDField",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Preflight,None,,"java.lang.ClassCastException: org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget cannot be cast to org.apache.pdfbox.pdmodel.interactive.form.PDField
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.exploreFields(AcroFormValidationProcess.java:107)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.valideField(AcroFormValidationProcess.java:155)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.exploreFields(AcroFormValidationProcess.java:107)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.valideField(AcroFormValidationProcess.java:155)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.exploreFields(AcroFormValidationProcess.java:107)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.valideField(AcroFormValidationProcess.java:155)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.exploreFields(AcroFormValidationProcess.java:107)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.valideField(AcroFormValidationProcess.java:155)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.exploreFields(AcroFormValidationProcess.java:107)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.validate(AcroFormValidationProcess.java:60)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:73)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:88)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
 at pdfboxpageimageextraction.PreflightTest.main(PreflightTest.java:44)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"18/Nov/14 07:21","13/Dec/14 14:15","18/Nov/14 18:58"
PDFBOX-2508,PDFBOX,"Text extraction getting zero font height, bad widths, and ? for text in this PDF with Type 3 Fonts",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.11, 2.0.0","Text extraction",type3,,"Attached file is just line one from a file where every piece of text has these problems. All the other lines were removed with Nitro to make a small test case.
This is the output from PrintTextLocations example:
String[211.92,356.8801 fs=58.0 xscale=58.0 height=1.75392 space=190528.28 width=1.7052002]?
String[129.84,347.04 fs=58.0 xscale=58.0 height=2.72832 space=288435.66 width=2.679596]?
String[70.32,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=7.0643997]?
String[77.3844,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=4.8720016]?
String[82.2564,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?
String[88.590004,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.577202]?
String[95.167206,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?
String[101.2572,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?
String[107.590805,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?
String[113.6808,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=4.8720016]?
String[118.5528,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=3.1668015]?
String[121.719604,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.333603]?
String[128.0532,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.577194]?
String[134.63042,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=6.0899963]?
String[140.72041,299.28 fs=58.0 xscale=58.0 height=3.31296 space=349985.12 width=3.1667938]?
String[522.95984,293.28 fs=58.0 xscale=58.0 height=1.36416 space=150394.36 width=1.4616089]?
Fontsize is way too big (should be more like 8), value for space is ridiculous, height is too small. And each character is coming through as a '?'. The original file has this on every piece of text.
In Acrobat everything looks fine, both in the original and in this test case.",0,"Tilman Hausherr","Fred Andrews",0,3,"19/Nov/14 05:03","18/Jan/16 12:01","01/Nov/15 13:45"
PDFBOX-2509,PDFBOX,"Korean Text font substitution issues",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"http://acroeng.adobe.com/Test_Files/fonts/asian%20font%20files/Korean/nonembedded/K4SystemFontsNotEmbeded218.PDF
and
http://acroeng.adobe.com/Test_Files/fonts/asian%20font%20files/Korean/nonembedded/KGulimcheNotembeded218.PDF
and
http://acroeng.adobe.com/Test_Files/fonts/asian%20font%20files/Korean/nonembedded/VariousKFontsNotembeded218.PDF
and
http://acroeng.adobe.com/Test_Files/fonts//EmbeddedCmap.pdf
and
http://acroeng.adobe.com/Test_Files/fonts/asian%20font%20files/Japanese/nonembedded/Jun101.pdf
and
http://acroeng.adobe.com/Test_Files/fonts/asian%20font%20files/Japanese/nonembedded/ACPTJ_WIN_MSGothic.DOC.pdf
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage K4SystemFontsNotEmbeded218.PDF",0,"John Hewson","simon steiner",0,3,"19/Nov/14 12:39","17/Mar/16 19:08","10/Jul/15 08:01"
PDFBOX-2512,PDFBOX,"OutOfMemory while signing large documents",Bug,CLOSED,Major,Fixed,1.8.7,1.8.8,"Parsing, Signing",None,,"While working with large documents, we found some memory issues.
1. The method close() in the COSDocument, clones the objectpool and does not clean it properly. The cloning in getObjects() cause a OutOfMemory exception.
2.The COSWriter copy the whole pdf into the memory for signing and does not use BufferedInputStream for the FileInputStream which also has a big performance impact. (PDFBOX-1798)
3. The cloning of COSStreams cause a OutOfMemory exception
I used the CreateSignature example with a about 150 MB big document from here:
https://cdn-reichelt.de/bilder/downloads/reichelt_01-2015_DE_B_HQ.pdf
Additionaly I add a RandomAccessFile to the PDDocument.load in the CreateSignature class.
PDDocument doc = PDDocument.load(document,new RandomAccessFile(new File("d:
temp.bin"), "rw")); (this prevent the OOM for the third case)
The use of a BuffedInputStream in case two, will increase the signing speed from more than 5 minutes to less than 1 minute.",0,"Thomas Chojecki","Thomas Chojecki",0,4,"20/Nov/14 15:04","14/Dec/14 12:55","08/Dec/14 09:11"
PDFBOX-2513,PDFBOX,"false negative? RuntimeException: EOL encountered in white run",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,CCITTFaxDecode,"java 1.7, debian","java.lang.RuntimeException: EOL encountered in white run.
at org.apache.pdfbox.filter.ccitt.TIFFFaxDecoder.decodeWhiteCodeWord(TIFFFaxDecoder.java:1168)
at org.apache.pdfbox.filter.ccitt.TIFFFaxDecoder.decodeT6(TIFFFaxDecoder.java:980)
at org.apache.pdfbox.filter.CCITTFaxFilter.decode(CCITTFaxFilter.java:95)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:386)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:335)
at org.apache.pdfbox.cos.COSStream.getDecodeResult(COSStream.java:290)
at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.<init>(PDImageXObject.java:115)
at org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject(PDXObject.java:65)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:285)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:80)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:81)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:54)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:167)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:82)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:81)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:54)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:56)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:45)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:81)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:118)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)",0,"Tilman Hausherr","Ralf Hauser",0,4,"21/Nov/14 08:55","17/Mar/16 19:07","12/Dec/14 18:40"
PDFBOX-2515,PDFBOX,"Improve the non sequential parser to be used when signing a pdf",Improvement,CLOSED,Blocker,Fixed,2.0.0,2.0.0,Parsing,signature,,"After removing/replacing the usage of the old parser (see PDFBOX-2430), there is just one purpose left which still requires the old parser, signing a pdf. We have to improve the non sequential pars, so that we can finally remove the old one.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"23/Nov/14 15:46","17/Mar/16 19:07","15/Feb/15 17:43"
PDFBOX-2516,PDFBOX,"Further align AcroForms and Fields PDModel with PDF specification",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,None,,"The PDModel for AcroForms and the fields being part of it (o.a.p.pdmodel.interactive.form) needs to be enhanced. Sample issues:
RadioButton and Checkbox don’t support DV entries although they should
inheritable attributes only support inheritance either form their parent or the root of the AcroForms model which is not inline with the specification",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"23/Nov/14 17:57","17/Mar/16 19:07","17/Jan/15 19:50"
PDFBOX-2517,PDFBOX,"Better error message on pdfA identification",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Preflight,None,"java 1.7","see also PDFBOX-1674",0,"Tilman Hausherr","Ralf Hauser",0,3,"24/Nov/14 07:39","13/Dec/14 14:15","24/Nov/14 07:47"
PDFBOX-2519,PDFBOX,"Regression: Box color missing",Bug,CLOSED,Major,Duplicate,2.0.0,2.0.0,Rendering,None,,"PDF from PDFBOX-372
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage Webmail02.pdf",0,"John Hewson","simon steiner",0,2,"24/Nov/14 13:30","01/Jan/15 23:47","01/Jan/15 23:47"
PDFBOX-2520,PDFBOX,"Don't decrypt already decrypted pdfs",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"The PDFTextStripper class tries to decrypt any encrypted pdf although it ight be already decrypted",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"24/Nov/14 19:25","13/Dec/14 14:15","24/Nov/14 19:41"
PDFBOX-2521,PDFBOX,"Don't throw IOException if stream length is missing in lenient mode",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"The non-sequential parser throws an IOException if the lenght of a stream is missing. This should be avoided in lenient mode, escpacially as the parser checks the length afterwards add uses the fallback readUntilEnd if the length is invalid.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"24/Nov/14 19:50","13/Dec/14 14:15","24/Nov/14 19:55"
PDFBOX-2522,PDFBOX,"javax.crypto.IllegalBlockSizeException in ExtractText",Bug,CLOSED,Major,Fixed,1.8.8,1.8.8,"Parsing, Text extraction",None,,"The attached file can be viewed, but ExtractText is not possible:
Exception in thread "main" java.io.IOException: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:361)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream(SecurityHandler.java:448)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decrypt(SecurityHandler.java:413)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptObject(SecurityHandler.java:389)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.proceedDecryption(SecurityHandler.java:178)
 at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.decryptDocument(StandardSecurityHandler.java:164)
 at org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1224)
 at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:265)
 at org.apache.pdfbox.tools.ExtractText.startExtraction(ExtractText.java:241)
 at org.apache.pdfbox.tools.ExtractText.main(ExtractText.java:84)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:55)
Caused by: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher
 at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:750)
 at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:676)
 at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:313)
 at javax.crypto.Cipher.doFinal(Cipher.java:2145)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:343)
 ... 10 more",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"25/Nov/14 20:28","13/Dec/14 14:14","25/Nov/14 22:17"
PDFBOX-2523,PDFBOX,"IOException: Error: Expected a long type at offset 1218571, instead got 'xref'",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"I get this with the attached file when using the non-sequential parser only:
Exception in thread "main" java.io.IOException: Error: Expected a long type at offset 1218571, instead got 'xref'
        at org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1689)

        at org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber(BaseParser.java:1617)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseXrefObjStream(NonSequentialPDFParser.java:746)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseXref(NonSequentialPDFParser.java:697)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:480)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:1013)
        at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:951)",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"26/Nov/14 07:26","06/Jan/15 14:16","28/Nov/14 19:01"
PDFBOX-2524,PDFBOX,"[PATCH] Two PDFont to create PDF documents in CJK and non-ISO-8859-1 languages",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Writing,None,,"I made two PDFont classes for creating PDF documents in CJK and non-ISO-8859-1 languages.
One is PDType0CJKFont. This is for using CJK fonts included in the Asian font package of Adobe Reader. This font doesn't require the target font at the time of creating PDF documentary. This font uses UTF-16 as a text code and supports surrogate pair characters.
The other is PDType0UnicodeFont. This is for using TrueType Type0 Font which can deal with any Unicode characters like a ArialUnicodeMS. Only the characters which are used actually in the document are embedde. Realizing this, you have to call the PDType0Unicode.reloadFont() method just before closing PDPageContentStream. I think this specification is ugly, but I could not thought of a suitable way to remove this spec. This font uses the original glyph code of the embedded font as a text code and supports surrogate pair characters too.
Example programs using these two fonts are also attached.",0,"John Hewson","Keiji Suzuki",0,6,"27/Nov/14 07:57","02/Nov/17 09:27","14/Dec/14 04:07"
PDFBOX-2525,PDFBOX,"Overlay: data black & white after import",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.9, 2.0.0",Utilities,None,,"After overlaying two documents, everything in the source is black & white only. I uploaded a screenshot to
https://oc.evopark.de/public.php?service=files&t=0d7e4e172c30c23b260d3c96cc4986b5
May relate to PDFBOX-2401.
Some more details: I'm doing everything in-memory, not operating on files. This is the sample code:
    public static byte[] mergeOntoLetterhead(byte[] originalPdf) throws IOException, COSVisitorException {
        PDDocument pdf = PDDocument.load(new ByteArrayInputStream(originalPdf));
        if (pdf.getNumberOfPages() == 0) {
            return originalPdf;
        }
        PDDocument template = readTemplate();
        if (null != template) {
            Overlay overlay = new Overlay();
            pdf = overlay.overlay(template, pdf);
        } else {
            logger.error("Could not load letterhead PDF");
            return originalPdf;
        }
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        pdf.save(outputStream);
        return outputStream.toByteArray();
    }",0,"Andreas Lehmkühler","Marcus Ilgner",0,3,"27/Nov/14 12:24","28/Mar/15 14:10","23/Dec/14 17:13"
PDFBOX-2527,PDFBOX,"IOException: Negative seek offset in NonSequentialPDFParser",Bug,CLOSED,Minor,Fixed,"1.8.8, 2.0.0",2.0.0,Parsing,None,,"Exception in thread "main" java.io.IOException: Negative seek offset
 at java.io.RandomAccessFile.seek(Native Method)
 at org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek(RandomAccessBufferedFileInputStream.java:116)
 at org.apache.pdfbox.io.PushBackInputStream.seek(PushBackInputStream.java:234)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:492)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:1013)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:951)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:897)
 at org.apache.pdfbox.tools.PDFReader.parseDocument(PDFReader.java:375)
 at org.apache.pdfbox.tools.PDFReader.openPDFFile(PDFReader.java:340)
 at org.apache.pdfbox.tools.PDFReader.main(PDFReader.java:326)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:80)
This happens with several malformed PDFs from the test set in TIKA-1442. These files (303385, 069020, 303385, 742141, 982996) all have some trash at the end.",0,"Andreas Lehmkühler","Tilman Hausherr",1,4,"27/Nov/14 20:02","17/Mar/16 19:07","02/Mar/15 18:58"
PDFBOX-2528,PDFBOX,"IOException: Object must be defined and must not be compressed object: 0:0",Bug,CLOSED,Minor,Fixed,"1.8.8, 2.0.0","1.8.8, 2.0.0",None,None,,"Exception in thread "main" java.io.IOException: Object must be defined and must not be compressed object: 0:0
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1477)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1614)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1441)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:513)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:1013)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:951)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:897)
 at org.apache.pdfbox.tools.PDFReader.parseDocument(PDFReader.java:375)
 at org.apache.pdfbox.tools.PDFReader.openPDFFile(PDFReader.java:340)
 at org.apache.pdfbox.tools.PDFReader.main(PDFReader.java:326)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:80)
The xref table looks like this:
xref
0 142
0000000000 65535 f
0000000000 00000 n
0000303104 00000 n
0000000000 00000 n
0000303104 00000 n",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"27/Nov/14 20:12","13/Dec/14 14:15","28/Nov/14 17:23"
PDFBOX-2529,PDFBOX,"Preflight: mention the page on which a problem has been found",Sub-task,CLOSED,Minor,Fixed,2.0.0,2.0.0,Preflight,None,,"As suggested by Ralf Hauser: if not on page 1, say on which page the error occurs.",0,"Tilman Hausherr","Tilman Hausherr",1,3,"28/Nov/14 07:02","17/Mar/16 19:07","03/Dec/14 09:59"
PDFBOX-2530,PDFBOX,"Improve PDFDebugger",Improvement,CLOSED,Major,Fixed,"1.8.8, 2.0.0",2.0.0,Utilities,gsoc2015,,"(This is an idea for the Google Summer of Code 2015)
Our command line utility PDFDebugger (part of the command line pdfbox-app get it here, read description here, see the source code here) needs some improvements:
hex view
view of non printable characters
✓ saving streams
binary copy & paste
✓ Create a status line that shows where we are in the tree. (Like in the Windows REGEDIT)
✓ Copy the current tree string into the clipboard (useful in discussions about details of a PDF)
✓ (Optional, not sure if easy) Jump to specific place in the tree by entering tree string
✓ ability to search in streams (very useful for content streams and meta data)
✓ show images that are streams
✓ show PDIndexed color lookup table, show the index value, the base and RGB color value sets when the mouse moves
✓ show PDSeparation color
✓ show PDDeviceN colors
optional, idea should be developed a bit: show meaningful explanation on some attributes, e.g. "appearance stream" when hovering over /AP
show font encodings and characters
✓ display flag bits (e.g. Annotation flags) in a way that is easy to understand. There are probably others, I assume that the main work needs to be done only once
edit attributes (should be possible to enter values as decimal, hex or binary)
edit streams, while keeping or changing the compression filter
save altered PDF
✓ color mark of certain PDF operators, especially Q...q and text operators (BT...ET). Ideally, it should help the user understand the "bracketing" of these operators, i.e. understand where a sequence starts and where it ends. (See "operator summary" in the PDF Spec) Other "important" operators I can think of are the matrix, font and color operators. A cool advanced thing would be to show the current color or the font in a popup when hovering above such an operator.
To see a product with a similar purpose that is better than PDFDebugger, watch this video.
I'm not asking to implement a clone of that product (I don't use it, all I know is that video), but we at PDFBox really need something that makes PDF debugging easier. As an example of how the current PDFDebugger prevented me from finding a bug quickly, see PDFBOX-2401 and search for "PDFDebugger".
Prerequisites:
java programming, especially the GUI components
the ability to understand existing source code
Using external software components is possible (must have Apache License or a compatible one), but should be decided on a case-by-case basis, we don't want to get too big.
Development strategy: go from the easy to the difficult. The wished features are already sorted this way (mostly).
Get introduced: download the source code with svn and build it with maven. Run PDFDebugger and view some PDFs to see the components of a PDF. Start with the file of PDFBOX-2401. Read up something about the structure of PDF on the web or from the PDF Specification.
Mentor: Tilman Hausherr (European timezone, languages: german, english, french). To see the GSoC2014 project I mentored, go to PDFBOX-1915.",0,"khyrul bashar","Tilman Hausherr",1,8,"28/Nov/14 21:23","17/Mar/16 19:08","21/Aug/15 19:02"
PDFBOX-2531,PDFBOX,"better error message on not yet read stream",Sub-task,CLOSED,Minor,Fixed,2.0.0,2.0.0,Preflight,None,"java 1.7, debian","patch1675_2513.txt says which filter supposedly should be used to decode the stream.
The error message would even be better if it also reported an ID of the COSStream such that duplicate mentions could be easily identified",0,"Tilman Hausherr","Ralf Hauser",0,3,"29/Nov/14 14:19","17/Mar/16 19:08","29/Nov/14 17:01"
PDFBOX-2533,PDFBOX,"Poor rendering with non-sequential parser",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"p39 + 40 of the attached file are poorly rendered with the non-Sequential parser. With the old parser, while the glyphs are not perfect, they represent the correct character. This is for 1.8.8.
In 2.0 the rendering is incorrect, but I didn't test with the old parser because that one is no longer available from the command line.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"30/Nov/14 22:18","13/Dec/14 14:15","01/Dec/14 21:37"
PDFBOX-2534,PDFBOX,"Less pages shown with the non-sequential parser",Bug,CLOSED,Major,"Not A Problem","1.8.8, 2.0.0",None,Parsing,None,,"The attached file has 3 pages when rendered with the non-Sequential parser and 7 pages when rendered with the old parser.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"30/Nov/14 22:45","01/Dec/14 18:16","01/Dec/14 18:16"
PDFBOX-2535,PDFBOX,"mention subtype in COSStream IOException",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,,"and not only in ResourcesValidationProcess.java",0,"Tilman Hausherr","Ralf Hauser",0,3,"02/Dec/14 10:39","17/Mar/16 19:07","02/Dec/14 18:11"
PDFBOX-2536,PDFBOX,"More specific TIFFFaxDecoder exceptions",Sub-task,CLOSED,Trivial,Fixed,2.0.0,2.0.0,Preflight,None,,,0,"Tilman Hausherr","Ralf Hauser",0,2,"03/Dec/14 08:13","17/Mar/16 19:07","05/Dec/14 07:17"
PDFBOX-2537,PDFBOX,"do not discard underlying cause when creating validation error",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,,,0,"Tilman Hausherr","Ralf Hauser",0,2,"03/Dec/14 08:18","17/Mar/16 19:07","05/Dec/14 07:27"
PDFBOX-2540,PDFBOX,"ArrayIndexOutOfBoundsException in Type1Parser.parseASCII",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,FontBox,None,,"I get this with the file 451024.pdf:
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 0
        at org.apache.fontbox.type1.Type1Parser.parseASCII(Type1Parser.java:76)
        at org.apache.fontbox.type1.Type1Parser.parse(Type1Parser.java:61)
The cause is an empty /FontFile and the failure to expect this, the fix is easy.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"03/Dec/14 18:44","17/Mar/16 19:08","05/Dec/14 06:55"
PDFBOX-2541,PDFBOX,"ClassCastException in BaseParser.parseCOSDictionaryValue",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,None,,"java.lang.ClassCastException: org.apache.pdfbox.cos.COSArray cannot be cast to org.apache.pdfbox.cos.COSInteger
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:265)
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:351)
 at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1258)
 at org.apache.pdfbox.preflight.parser.PreflightParser.parseDirObject(PreflightParser.java:612)
 at org.apache.pdfbox.preflight.parser.PreflightParser.parseObjectDynamically(PreflightParser.java:730)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1441)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseDictObjects(NonSequentialPDFParser.java:1417)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:544)
 at org.apache.pdfbox.preflight.parser.PreflightParser.initialParse(PreflightParser.java:244)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:1013)
 at org.apache.pdfbox.preflight.parser.PreflightParser.parse(PreflightParser.java:192)
 at org.apache.pdfbox.preflight.parser.PreflightParser.parse(PreflightParser.java:174)
 at org.apache.pdfbox.preflight.parser.PreflightParser.parse(PreflightParser.java:162)
 at pdfboxpageimageextraction.PreflightTest.main(PreflightTest.java:57)
The cause is this:
/Dest [ 7 0 R /XYZ null null null ] 0 R
My fix doesn't allow to view the file, but at least it doesn't throw a lang exception.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"03/Dec/14 19:12","13/Dec/14 14:14","05/Dec/14 07:08"
PDFBOX-2542,PDFBOX,"IllegalArgumentException: root must be of type Pages",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"java.lang.IllegalArgumentException: root must be of type Pages
 at org.apache.pdfbox.pdmodel.PDPageTree.<init>(PDPageTree.java:66)
 at org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages(PDDocumentCatalog.java:125)
 at org.apache.pdfbox.pdmodel.PDDocument.getNumberOfPages(PDDocument.java:1175)
The cause is this
<<
/Count 11 
/Kids [ 100 0 R 141 0 R ]
>>
endobj
/Type /Pages is missing.",0,"John Hewson","Tilman Hausherr",0,2,"03/Dec/14 19:57","17/Mar/16 19:07","08/Dec/14 20:55"
PDFBOX-2543,PDFBOX,"ClassCastException in PDFontDescriptor.getFontFile2",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,Parsing,None,,"java.lang.ClassCastException: org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSStream
 at org.apache.pdfbox.pdmodel.font.PDFontDescriptor.getFontFile2(PDFontDescriptor.java:766)
The cause:
/FontFile2 880 0 R 
>> 
endobj
880 0 obj
<< 
/Type /Font 
/Name /Helv 
/BaseFont /Helvetica 
/Subtype /Type1 
/Encoding 881 0 R 
>> 
endobj
I will change all three getFontFile methods to check for the correct class instance instead of for null.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"04/Dec/14 20:11","17/Mar/16 19:08","05/Dec/14 06:58"
PDFBOX-2546,PDFBOX,"IllegalArgumentException: resourceDictionary is null in PDFMerger",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"This was first mentioned on the user mailing list by Gilad Denneboom:
When merging the PDF 1.7 spec with another PDF file this exception appears:
Exception in thread "main" java.lang.IllegalArgumentException: resourceDictionary is null
 at org.apache.pdfbox.pdmodel.PDResources.<init>(PDResources.java:68)
 at org.apache.pdfbox.util.PDFMergerUtility.appendDocument(PDFMergerUtility.java:448)
 at org.apache.pdfbox.util.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:190)
 at org.apache.pdfbox.tools.PDFMerger.merge(PDFMerger.java:70)
 at org.apache.pdfbox.tools.PDFMerger.main(PDFMerger.java:46)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:76)
I did some debugging, it happens on the very first page. The resources is indeed null, but it exists when viewing with PDFDebugger.",0,"John Hewson","Tilman Hausherr",0,4,"06/Dec/14 15:35","24/Aug/16 16:37","08/Dec/14 21:31"
PDFBOX-2549,PDFBOX,"TIFF-Predictor with 16 bits per component not supported",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 2.0.0","1.8.9, 2.0.0",Rendering,Predictor,,"The attached image GWG181_16Bit_CMYK_X4.pdf from the Ghent Workgroup test suite is not displayed, PDFBox throws the mentioned exception. One open source and one closed source product display an "X", but gswin renders the image properly.
The upcoming patch handles the 16bit case. I won't implement 1, 2 or 4 bpc because I don't have test images.
I'll add my patch to 1.8 after the cut.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Dec/14 17:09","18/Sep/17 21:08","10/Dec/14 17:24"
PDFBOX-2550,PDFBOX,"ClassCastException in PDAnnotation.getColour",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",Parsing,Annotations,,"java.lang.ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSArray
 at org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation.getColour(PDAnnotation.java:644)
 at org.apache.pdfbox.preflight.annotation.AnnotationValidator.checkColors(AnnotationValidator.java:134)
The cause is this:
/C 19 0 R
The current code doesn't expect it to be an indirect object.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Dec/14 07:42","28/Mar/15 14:10","10/Dec/14 17:09"
PDFBOX-2552,PDFBOX,"Blank rendering when negative page rotation",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 1.8.9, 2.0.0","1.8.9, 2.0.0",Rendering,None,,"http://acroeng.adobe.com/Test_Files/images//altimage.pdf
http://acroeng.adobe.com/Test_Files/images//GermanPaper.pdf
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage altimage.pdf",0,"Tilman Hausherr","simon steiner",0,3,"10/Dec/14 11:32","28/Mar/15 14:10","12/Dec/14 22:53"
PDFBOX-2553,PDFBOX,"CalRGB colors different",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,CalRGB,,"http://acroeng.adobe.com/Test_Files/images/jpeg2000//Anna-IptImgx330.pdf
java -cp pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar:/path/jai_imageio.jar org.apache.pdfbox.tools.PDFToImage Anna-IptImgx330.pdf",0,"Tilman Hausherr","simon steiner",0,3,"10/Dec/14 11:41","17/Mar/16 19:08","14/Dec/14 17:57"
PDFBOX-2555,PDFBOX,"Knockout text missing",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"http://acroeng.adobe.com/Test_Files/images//Knockout-text.pdf
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage Knockout-text.pdf",0,"Andreas Lehmkühler","simon steiner",0,3,"10/Dec/14 11:56","27/Feb/17 15:51","27/Feb/17 15:51"
PDFBOX-2557,PDFBOX,"Yellow text not using heavy font",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"http://acroeng.adobe.com/Test_Files/images/jpeg2000//SF-TripleBonus_02.pdf
java -cp pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar:lib/jai_imageio.jar org.apache.pdfbox.tools.PDFToImage SF-TripleBonus_02.pdf",0,"John Hewson","simon steiner",0,3,"10/Dec/14 12:15","17/Mar/16 19:07","12/Dec/14 18:17"
PDFBOX-2559,PDFBOX,"TTF font cannot be loaded",Bug,CLOSED,Major,Fixed,"1.8.6, 2.0.0","1.8.9, 2.0.0",PDModel,None,"mac os x","I'm trying to use TextToPDF from the main bundle of PDFBox.
To make different encodings work I've read that the font Doulus should be used.
http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=DoulosSIL_download
However upload specifying the font with the -ttf options I'm seeing the following exception:
pacsaar:jocon-test-local mbergmann$ java -jar lib/pdfbox-app-1.8.6.jar TextToPDF -ttf ~/Downloads/DoulosSIL-5.000/DoulosSIL-R.ttf Test33-pdfbox.pdf Test33-TextJP-UTF8.txt 
java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.common.PDStream.<init>(PDStream.java:120)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:189)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:175)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:162)
 at org.apache.pdfbox.TextToPDF.main(TextToPDF.java:193)
 at org.apache.pdfbox.PDFBox.main(PDFBox.java:100)",0,"John Hewson","Manfred Bergmann",0,3,"11/Dec/14 20:18","28/Mar/15 14:10","12/Dec/14 09:18"
PDFBOX-2560,PDFBOX,"Arial Truetype CID font rendering incorrect",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"The rendering of the attached file shows entirely wrong glyphs.",0,"John Hewson","Tilman Hausherr",0,2,"11/Dec/14 22:35","17/Mar/16 19:07","16/Dec/14 19:37"
PDFBOX-2561,PDFBOX,"Rendering of PDIndexed line incorrect",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"Page 4 of the attached file ( http://www.jagpdf.org/doc/samples/jagpdf_doc_color_spaces.pdf , linked from http://www.jagpdf.org/doc/jagpdf/usersguide/graphics.htm ) has three colors that are rendered incorrectly. The initialization is correct, however toRGB() gets passed float values that are indices, i.e. 0.0, 1.0, 2.0, so it is wrong to multiply them with 255.
See also PDFBOX-1997 and [ https://svn.apache.org/r1607674 ] which had a similar problem.
Before committing I'll first run my test suite.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"12/Dec/14 06:44","17/Mar/16 19:07","12/Dec/14 07:44"
PDFBOX-2563,PDFBOX,"[PATCH] Use cmap for Type0/TTF fallback",Bug,CLOSED,Major,"Won't Fix",2.0.0,2.0.0,Rendering,None,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage VariousKFontsNotembeded218.PDF
This patch addresses some of the issues in PDFBOX-2509.",0,"John Hewson","simon steiner",0,1,"12/Dec/14 10:52","17/Mar/16 19:08","10/Jul/15 08:02"
PDFBOX-2565,PDFBOX,"Subset embedded TTF fonts",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Now that PDFBOX-922 is fixed, we have working TTF embedding. However, the entire font is embedded, which is rather large. We already have a TTFSubsetter class in FontBox, which is never used, so we should make use of it.",0,"John Hewson","John Hewson",0,3,"12/Dec/14 22:06","17/Mar/16 19:06","16/Dec/14 00:06"
PDFBOX-2566,PDFBOX,"Remove logging from operator classes",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"I've been trying to get better control over the logging that occurs in the operator classes, but it's not easy to do so. Ideally all logging could pass through PDFStreamEngine so that subclasses can more easily filter what they want. By using exceptions instead of logging for error cases, we allow more fine-grained management of exceptions. For example, in my own code I wish for a missing XObject to be a terminal failure, but it currently just results in a log message, and I have to implement a custom DrawObject operator and copy & paste over most of the code in order to catch this exception rather than logging it.
I'm therefore going to move what little logging there is in the Operator classes over to PDFStreamEngine, and to throw custom exceptions (e.g. MissingResourceException) rather than writing silently to the log. The default implementation of processOperator in PDFStreamEngine will then catch these custom exceptions and simply write them to the log - keeping the current PDFBox behaviour unchanged. Only now consumers of PDFStreamEngine can override processOperator and do their own exception handling, e.g. I can choose to propagate MissingResourceException exception instead of logging it.
This might be useful for Preflight too, as it often wants to throw errors where we would otherwise skip the offending object and just keep processing. Also it probably means that there will no longer be a need for to Preflight implement its own operators in those cases where it was done just to get stricter error handing.",0,"John Hewson","John Hewson",0,1,"14/Dec/14 00:19","17/Mar/16 19:06","14/Dec/14 00:28"
PDFBOX-2569,PDFBOX,"COSNumber fails to parse numbers like "+018" in JRE <= 1.6",Bug,CLOSED,Minor,Fixed,"1.8.8, 2.0.0","1.8.8, 2.0.0",Parsing,patch,"java 1.6","Occasionally I encounter PDFs that have COSNumber's encoded with a preceding plus sign, like "+018", "+1" etc. This is a valid number representation, according to PDF 32000-1:2008 section 7.3.3.
COSNumber fails to parse these on JDK 1.6 and below. JDK 1.7 and above does not have the problem because Long.parseLong parses these correctly (in JDK 1.6 and below the plus sign would causes a NumberFormatException.)
I patched COSNumber with a simple fix on 1.8.8 and and verified that the fix worked against the affected PDFs. The bug exists in later versions of PDFBox, including the trunk. I will attach SVN patches for 1.8.8 and the trunk.",0,"Tilman Hausherr","Arthur Blake",1,3,"15/Dec/14 15:42","17/Mar/16 19:06","15/Dec/14 17:34"
PDFBOX-2571,PDFBOX,"IllegalStateException: Not a CIDFont",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"Exception in thread "main" java.lang.IllegalStateException: Not a CIDFont
 at org.apache.fontbox.cff.CFFCharset.getGIDForCID(CFFCharset.java:134)
 at org.apache.fontbox.cff.CFFCIDFont.getType2CharString(CFFCIDFont.java:227)
 at org.apache.pdfbox.pdmodel.font.PDCIDFontType0.getType2CharString(PDCIDFontType0.java:224)
 at org.apache.pdfbox.rendering.font.CIDType0Glyph2D.getPathForCharacterCode(CIDType0Glyph2D.java:63)",0,"John Hewson","Tilman Hausherr",0,2,"15/Dec/14 17:07","17/Mar/16 19:07","19/Dec/14 13:02"
PDFBOX-2572,PDFBOX,"ArrayIndexOutOfBoundsException in CmapSubtable.processSubtype12",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 1634
 at org.apache.fontbox.ttf.CmapSubtable.processSubtype12(CmapSubtable.java:258)
 at org.apache.fontbox.ttf.CmapSubtable.initSubtable(CmapSubtable.java:107)
 at org.apache.fontbox.ttf.CmapTable.read(CmapTable.java:78)
 at org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:285)
 at org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:146)
 at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:122)
 at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:96)
 at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:83)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont(PDFontFactory.java:131)
 at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:95)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:89)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:91)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:50)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:819)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:477)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:451)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:155)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:163)
 at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:204)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:137)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:96)
 at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:227)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:89)",0,"John Hewson","Tilman Hausherr",0,2,"15/Dec/14 17:09","17/Mar/16 19:07","06/Jan/15 06:11"
PDFBOX-2573,PDFBOX,"IllegalStateException: PDFBox bug: encoding should not be null!",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"This seems to be a follow-up of PDFBOX-2489 (some of the files that had the old bug are now ok, but not this one):
Exception in thread "main" java.lang.IllegalStateException: PDFBox bug: encoding should not be null!
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.isFontSymbolic(PDSimpleFont.java:205)
 at org.apache.pdfbox.pdmodel.font.PDFont.isSymbolic(PDFont.java:440)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.readEncoding(PDSimpleFont.java:111)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:228)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:65)",0,"John Hewson","Tilman Hausherr",0,2,"16/Dec/14 18:53","17/Mar/16 19:07","19/Dec/14 19:13"
PDFBOX-2579,PDFBOX,"Exception in thread "main" java.io.IOException: Error: Expected a long type at offset 1029, instead got '12688(Deleted'",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",Parsing,None,,"A (semi-confidential) file sent to me has an object stream with this content:
....12076 132 12125 133 12616 1 12636 135 12688(Deleted Obj)<</A<</O/Layout/Placement...
So I guess that there's a problem with recognizing the "12688" as a number.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"22/Dec/14 17:19","28/Mar/15 14:10","22/Dec/14 19:23"
PDFBOX-2580,PDFBOX,"Decouple implementation specific forms handling from interactive.form PD Model",Improvement,CLOSED,Major,"Won't Fix",None,2.0.0,AcroForm,None,,"The interactive.form PD model currently holds classes reflecting the various fields intermixed with appearance generation and layout handling.
In order to separate the PD model from the service of forms filling and appearance generation this functionality shall be moved into a new package.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"22/Dec/14 23:05","13/Feb/15 22:09","12/Feb/15 10:11"
PDFBOX-2581,PDFBOX,"Text corruption",Bug,CLOSED,Major,Invalid,1.8.8,None,None,None,,"I use PDFBox 1.8.8 and try to add new text to existing pdf file. The problem is that text added by me is looking compressed for this specific pdf
original pdf (i think this file is source of problem)
(it is working for other pdfs).
pdfbox generated file
image of problem with explanation
It was not shown in all originally but i fixed problem with this command (set font display mode)
content.appendRawCommands("0 Tr ");  
I was working with pdf matrix and checked almost everything ... and do not see way how may i fix the problem...
content.setTextMatrix(1, 0, 0, 1, 0, 0);
questions:
1) why pdfbox not ignore page font settings and use default options of font on page?
2) what mode was used in my pdf to archive such kind transformation how i may fix problem to show font correctly?
private static void writePdfBoxStamp(PDDocument document, int page,
        float topLeftX, float topLeftY, float width, float height,
        String text, float  itemFontSize, int[] color, int rotation) throws IOException {

    PDPage pdfPage = (PDPage) document.getDocumentCatalog().getAllPages().get(page);
    PDPageContentStream content = new PDPageContentStream(document, pdfPage, true, true);


    // COSDictionary pageFonts = pdfPage.getResources().getCOSDictionary();


    //border draw
    float lineWidth = 2;

    float bottomLeftX = topLeftX;
    float bottomLeftY = topLeftY - height;
    float topRightX = topLeftX + width;
    float topRightY = topLeftY;

    float radius = 10;

    content.setLineWidth(lineWidth);
    content.setStrokingColor(new Color(color[0], color[1], color[2]));


    content.setNonStrokingColor(new Color(color[0], color[1], color[2]));

    PDFont font = PDType1Font.HELVETICA_BOLD;
    int fontSize = (int) itemFontSize;


    float linesHeight = font.getFontDescriptor().getFontBoundingBox()
            .getHeight()
            / 1000 * fontSize;
    float txtLineWidth = font.getStringWidth(text)
            / 1000 * fontSize;

    content.setFont(font, fontSize);

    content.beginText();

    content.setFont(font, fontSize);

    float  posTextX = topLeftX + (width-txtLineWidth)/2;
    float  posTextY = topLeftY  - height/2 - linesHeight/2 + lineWidth;



    if (rotation > 0) {
        int  step = 0;
        // clockwise rotation
        if (rotation == 90) {
            step = 6;
            posTextX = topLeftX + (width + linesHeight)/2 - lineWidth;
            posTextY = topLeftY - (height + txtLineWidth)/2;
        }
        if (rotation == 270) {
            step = -6;
            posTextX = topLeftX + (width - linesHeight/2)/2;
            posTextY = topLeftY - (height - txtLineWidth)/2;
        }
        content.setTextRotation(-step*Math.PI*0.25, posTextX, posTextY);

    } else {
        content.moveTextPositionByAmount(posTextX,posTextY);

    }

    content.appendRawCommands("0 Tr "); //set normal text procession

    content.drawString(text);


    content.endText();

    content.stroke();


    content.close();
}",0,"Andreas Lehmkühler",pupkin,0,2,"23/Dec/14 10:57","24/Dec/14 20:18","23/Dec/14 12:51"
PDFBOX-2582,PDFBOX,"Form fields missing entirely or incorrect in PDField list",Bug,CLOSED,Major,"Not A Problem","1.8.8, 2.0.0","1.8.9, 2.0.0",AcroForm,acroform,"windows 7, java 1.8","Running this code on the attached file results in incorrect and missing results:
PDDocument doc = PDDocument.load( new File(filePath) );
PDAcroForm form = doc.getDocumentCatalog().getAcroForm();
List<PDField> fields = form.getFields();
for ( int i=0; i<fields.size(); i++ ) {
System.out.println("Name:" + fields.get.getFullyQualifiedName());
}
The output is:
Name:2
Name:Step 2
Name:Image 2
Name:Button 2
Name:Button 5
Name:Image 5
The file was generated in InDesign and the form fields created there, so they should be recognizable. You can see that the part of the form fields after the dot was removed and the two fields on page 4 are missing entirely.
I tested it using 1.8.8 and a very recent 2.0.0 snapshot, both yielded the same results.",0,"Maruan Sahyoun","Gilad Denneboom",0,3,"23/Dec/14 19:58","28/Mar/15 14:10","11/Jan/15 18:50"
PDFBOX-2583,PDFBOX,"Error when rendering a PDF with annotations",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",Rendering,None,,"I am using the 2.0.0-SNAPSHOT version deployed on the 23rd of December. When I try to render the attached PDF, I get the following error:
java.io.IOException: Expected 'Font' dictionary but found 'Subtype'
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:51) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:91) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:50) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:809) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:471) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
at org.apache.pdfbox.contentstream.PDFStreamEngine.processAnnotation(PDFStreamEngine.java:312) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
at org.apache.pdfbox.contentstream.PDFStreamEngine.showAnnotation(PDFStreamEngine.java:390) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
at org.apache.pdfbox.rendering.PageDrawer.showAnnotation(PageDrawer.java:776) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:167) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:204) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:137) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:70) ~[pdfbox-2.0.0-20141223.230019-865.jar:?]
I tried to render the same PDF with the 1.8.7 version and it works. There seems to be a regression.",0,"Andreas Lehmkühler","Kevin Morin",0,3,"24/Dec/14 12:36","28/Mar/15 14:10","24/Dec/14 13:32"
PDFBOX-2585,PDFBOX,"Can't render PDF with ccitt compressed inline image",Bug,CLOSED,Major,"Not A Problem","1.8.8, 1.8.9, 2.0.0",None,Rendering,"CCITTFaxDecode ccitt",,"The attached file with inline ccitt encoded images throws a tiff-related exception when rendering. In the attached file, there is an LF that is included in the image stream. (We had a similar problem with stream...endstream when the length is incorrect or not available, see PDFBOX-2079 and PDFBOX-2120). I have several solutions and but will make tests first, not only on my usual files but also on some digitalcorpora files that threw tiff exceptions.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"29/Dec/14 20:41","05/May/16 09:18","05/May/16 09:18"
PDFBOX-2586,PDFBOX,"IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,AES256,,"On java version "1.7.0_72", java version "1.8.0_20" works ok
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage test.pdf
Exception in thread "main" java.io.IOException: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher
at javax.crypto.CipherInputStream.getMoreData(CipherInputStream.java:115)",0,"Andreas Lehmkühler","simon steiner",0,4,"02/Jan/15 12:54","17/Mar/16 19:07","01/Feb/15 17:59"
PDFBOX-2588,PDFBOX,"Text fields if initialy empty in AcroForms do not contain a COSName.V in its dictionary and therefore does not get rendered.",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,easyfix,,"When filling pdf acro forms if a text field initialy does not contain a value ( is empty) then the fieldTreeNode does not set COSName.V in it's dictionary and therefore calling setValue does not update the value and does not render.
This is solved by calling
field.getDictionary().setItem(COSName.V, new COSString("some new value"));
instead of setValue. This is probobally not desired. So either add it to constructor or somewhere else. This affects the trunk version (downloaded on 5.1.2015)",0,"Maruan Sahyoun","Anze Sustar",0,3,"06/Jan/15 13:40","17/Mar/16 19:07","09/Jan/15 08:51"
PDFBOX-2590,PDFBOX,"Improve PDPageContentStream API",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"The PDPageContentStream API uses some methods with incorrect and misleading names, and some unusual choices of parameters. These can be fairly easily cleaned up.",0,"John Hewson","John Hewson",0,3,"06/Jan/15 18:37","17/Mar/16 19:07","29/Jan/16 10:47"
PDFBOX-2592,PDFBOX,"Allow sharing of COS objects between different documents",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"A number of users on the mailing list have asked about how to import pages from other PDFs as forms, our current solution is LayerUtility, which is depends on PDFCloneUtility. Both these classes are surprisingly complex for what should be a simple task.
The two main tasks which these classes perform is copying the page's COSStream and cloning every relevant COS object. However, there seems to be no real need to do any of this copying and cloning - there's nothing about any of the COS objects which is specific to a given document. While a COSStream can share the same backing file as the COSDocument, this isn't a problem for COSWriter, even then we need only make sure that an exception is thrown if a COSStream is used after its parent COSDocument is closed.
Note that there is one artificial dependency between COSDictionary and COSArrays and their parent COSDocument, that is that calling close() on the COSDocument clears the contents of all child COSDictionary and COSArrays. However, there's no need for this, it seems to have come about due to some long past confusion regarding how garbage collection works in Java - we all know that it's not necessary to set objects to null or clear lists when we are done with them.
I propose that we get rid of the unnecessary object and list clearing in COSDocument#close() and add some checks to COSStream to throw user-friendly exceptions when reading from a closed backing stream. This will allow us to directly share COS objects between different COSDocuments, allowing simple "x = y" copying and making LayerUtility and PDFCloneUtility unnecessary. Instead of:
COSStream pageStream = (COSStream)page.getStream().getCOSObject();
PDStream newStream = new PDStream(targetDoc, pageStream.getUnfilteredStream(), false);
PDFormXObject form = new PDFormXObject(newStream);

PDResources pageRes = page.getResources();
PDResources formRes = new PDResources();
PDFCloneUtility cloner = new PDFCloneUtility(document);
cloner.cloneMerge(pageRes, formRes);
form.setResources(formRes);
We could have:
PDFormXObject form = new PDFormXObject(page.getStream());
form.setResources(page.getResources());",0,"John Hewson","John Hewson",0,3,"07/Jan/15 21:18","17/Mar/16 19:08","13/Jan/15 23:37"
PDFBOX-2593,PDFBOX,"Clean up old SVN directories",Improvement,CLOSED,Major,Fixed,None,None,None,None,,"Hi,

Am 06.01.2015 um 18:43 schrieb John Hewson:
Hi All,

Can we delete the top-level "fontbox", "jempbox", and "site" from our SVN root as
these are no longer used?
+1, as those data won't be really deleted one can access them if needed.

http://svn.apache.org/viewvc/pdfbox/

-- John

BR
Andreas Lehmkühler",0,"John Hewson","John Hewson",0,1,"07/Jan/15 21:45","17/Mar/16 19:42","13/Jan/15 23:05"
PDFBOX-2594,PDFBOX,"Set default params in JBIG2Filter",Improvement,CLOSED,Major,Fixed,"1.8.8, 1.8.9, 2.0.0","1.8.9, 2.0.0",Rendering,JBIG2,,"Currently JBIG2Filter does not set read params. This causes noise because jbig2-imageio logs this before using default params (e.g. see this comment). This patch explicitly uses the default params, which would solve that:
Index: pdfbox/src/main/java/org/apache/pdfbox/filter/JBIG2Filter.java
===================================================================
--- pdfbox/src/main/java/org/apache/pdfbox/filter/JBIG2Filter.java      (revision 1650041)
+++ pdfbox/src/main/java/org/apache/pdfbox/filter/JBIG2Filter.java      (working copy)
@@ -85,7 +85,7 @@
             BufferedImage image;
             try
             {
-                image = reader.read(0);
+                image = reader.read(0, reader.getDefaultReadParam());
             }
             catch (Exception e)
             {",0,"Tilman Hausherr","Daniel Bonniot de Ruisselet",1,3,"08/Jan/15 12:29","28/Mar/15 14:10","09/Jan/15 22:38"
PDFBOX-2595,PDFBOX,"Pdfbox always sets the second part of documentID to the same value",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",PDModel,None,,"From COSWriter.java lines 1268 (trunk) 1500 (1.8)
COSString firstID = missingID ? new COSString( md5.digest() ) : (COSString)idArray.get(0);
COSString secondID = new COSString( md5.digest() );
Notice that digest is called in both lines
The javadoc for md5.digest() goes
"Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made."
So, if missingID == true then the secondID will always be the hash of the empty string.
Acrobat reader uses this value for it's search index, as hinted at here
https://stackoverflow.com/a/20201670",0,"Andreas Lehmkühler","Asger Askov Blekinge",1,5,"08/Jan/15 15:51","28/Mar/15 14:10","26/Jan/15 19:07"
PDFBOX-2597,PDFBOX,"Provide easier access to AcroForm field tree",Improvement,CLOSED,Minor,Fixed,None,2.0.0,AcroForm,None,,"The current implementation of the AcroForm field retrieval methods don’t provide an easy access to get to all fields as
one needs to retrieve the documents root fields
check if these are non-terminal fields
retrieve their childs
move on until all terminal fields have been retrieved
There should be a way to easier get access to all terminal fields",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"11/Jan/15 18:46","17/Mar/16 19:08","16/Sep/15 18:09"
PDFBOX-2599,PDFBOX,"failure to render file with utf8 CID TT fonts",Bug,CLOSED,Major,Fixed,"1.8.8, 1.8.9, 2.0.0",2.0.0,FontBox,None,,"The glyphs in the attached file are not rendered correctly. From Sanyam G. in the user mailing list:
I tried to convert the first page of the attached pdf to image and got the attached resulting output
Please note This PDF uses UTF8 character set and not ASCII character set.
For ASCII character set pdfs it works fine.",0,"John Hewson","Tilman Hausherr",0,2,"12/Jan/15 20:02","17/Mar/16 19:07","13/Jan/15 21:00"
PDFBOX-2600,PDFBOX,"Remove old parser",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"After making the non-sequential parser the default parser (PDFBOX-2430) and enabling signing with the non-sequential parser it is time to remove the old one.",0,"Andreas Lehmkühler","Andreas Lehmkühler",2,4,"13/Jan/15 18:43","17/Mar/16 19:08","25/Jan/15 15:50"
PDFBOX-2601,PDFBOX,"fix getHashObjectIdentifier in TSAClient",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"TSAClient.java asks for the ASN1ObjectIdentifier of "SHA-394". What is really meant is "SHA-384". "SHA-394" is the model number of a chinese centre-pull hand towel dispenser.
I also found the correct object identifiers in various places within Bouncy Castle code and will insert them.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"15/Jan/15 19:19","17/Mar/16 19:07","15/Jan/15 19:22"
PDFBOX-2605,PDFBOX,"Multiple text operations on page cause NPE in TTFSubsetter",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,"java 1.7, mac os x","When multiple beginText/endText pairs are called within one page, the contentStream.close() fails with:
java.lang.NullPointerException
 at org.apache.fontbox.ttf.TTFSubsetter.getUnicodeCmap(TTFSubsetter.java:96)
 at org.apache.fontbox.ttf.TTFSubsetter.<init>(TTFSubsetter.java:85)
 at org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder.subset(TrueTypeEmbedder.java:296)
 at org.apache.pdfbox.pdmodel.font.PDType0Font.subset(PDType0Font.java:112)
 at org.apache.pdfbox.pdmodel.edit.PDPageContentStream.close(PDPageContentStream.java:2049)
 at org.marsik.elshelves.backend.services.StickerServiceTest.testFailingUnicodePDF(StickerServiceTest.java:60)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
 at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
 at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
 at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
 at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
 at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
 at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
 at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)
 at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)
 at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)
This can be reproduced using the following test case.
package org.marsik.elshelves.backend.services;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType0Font;
import org.junit.Test;

public class StickerServiceTest {
    @Test
    public void testWorkingUnicodePDF() throws Exception {
        PDDocument document = new PDDocument();

        PDFont titleFont = PDType0Font.load(document, this.getClass().getResourceAsStream("/DejaVuSans-Bold.ttf"));

        PDPage page = new PDPage(PDRectangle.A4);
        document.addPage(page);
        PDPageContentStream contentStream = new PDPageContentStream(document, page);

        contentStream.beginText();
        contentStream.setFont(titleFont, 12);
        contentStream.newLineAtOffset(0, 100);
        contentStream.showText("Pěkný žluťoučký kůň úpěl ďábelské ódy");
        contentStream.endText();

        contentStream.close();

        document.close();
    }

    @Test
    public void testFailingUnicodePDF() throws Exception {
        PDDocument document = new PDDocument();

        PDFont titleFont = PDType0Font.load(document, this.getClass().getResourceAsStream("/DejaVuSans-Bold.ttf"));

        PDPage page = new PDPage(PDRectangle.A4);
        document.addPage(page);
        PDPageContentStream contentStream = new PDPageContentStream(document, page);

        contentStream.beginText();
        contentStream.setFont(titleFont, 12);
        contentStream.newLineAtOffset(0, 100);
        contentStream.showText("Pěkný žluťoučký kůň úpěl ďábelské ódy");
        contentStream.endText();

        contentStream.beginText();
        contentStream.setFont(titleFont, 12);
        contentStream.newLineAtOffset(0, 200);
        contentStream.showText("Pěkný žluťoučký kůň úpěl ďábelské ódy");
        contentStream.endText();

        contentStream.close();

        document.close();
    }
}",0,"John Hewson","Martin Sivák",0,2,"18/Jan/15 23:23","17/Mar/16 19:07","19/Jan/15 06:42"
PDFBOX-2606,PDFBOX,"Support OS with no fonts",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"when /usr/share/fonts is not available:
Jan 16, 2015 11:32:57 AM org.apache.pdfbox.pdmodel.font.ExternalFonts getType1FallbackFont
SEVERE: No fallback font for 'Helvetica-Bold', dumping debug information:
Jan 16, 2015 11:32:57 AM org.apache.pdfbox.pdmodel.font.ExternalFonts getType1FallbackFont
SEVERE:
Exception in thread "main" java.lang.IllegalStateException: No fonts available on the system for Helvetica-Bold
at org.apache.pdfbox.pdmodel.font.ExternalFonts.getType1FallbackFont(ExternalFonts.java:270)
See the discussion in PDFBOX-2263.",0,"John Hewson","simon steiner",1,3,"19/Jan/15 09:08","17/Mar/16 19:07","19/Jan/15 19:39"
PDFBOX-2607,PDFBOX,"Failed reading embedded Font",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"Hi,
I try to extract an image out of the attatched pdf. PDFViewer like "Acrobat Reader" or the Ubuntu "Document Viewer" are able to display the PDF in a correct way. pdfbox is throwing exception:
SCHWERWIEGEND: Can't read the embedded Type1 font GLCNUS+StempelGaramond-Roman
java.io.IOException: Invalid start of ASCII segment
 at org.apache.fontbox.type1.Type1Parser.parseASCII(Type1Parser.java:83)
 at org.apache.fontbox.type1.Type1Parser.parse(Type1Parser.java:61)
 at org.apache.fontbox.type1.Type1Font.createWithSegments(Type1Font.java:70)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:174)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:65)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:92)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:50)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:803)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:465)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:439)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
 at org.apache.pdfbox.tools.ExtractImages$ImageGraphicsEngine.run(ExtractImages.java:195)
 at org.apache.pdfbox.tools.ExtractImages.extract(ExtractImages.java:174)
 at org.apache.pdfbox.tools.ExtractImages.run(ExtractImages.java:139)
 at org.apache.pdfbox.tools.ExtractImages.main(ExtractImages.java:83)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:59)
Checked with the latest version from git.
java -jar pdfbox-app-2.0.0-SNAPSHOT.jar ExtractImages /home/hf/Downloads/0023-4834_t1_1.pdf",0,"John Hewson","Holger Floerke",0,4,"19/Jan/15 10:52","17/Mar/16 19:06","20/Jan/15 17:35"
PDFBOX-2608,PDFBOX,"false negative on pdf/A validation?",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,"debian, java 1.8","1.4.10 : Trailer Syntax error, File contains data after the last %%EOF sequence at offset 0
3.2.2 : Font damaged, TJSEEP+Arial-ItalicMT: The FontFile can't be read",0,"John Hewson","Ralf Hauser",0,2,"19/Jan/15 11:58","17/Mar/16 19:08","19/Jan/15 21:31"
PDFBOX-2610,PDFBOX,"Expand Isartor test for Bavaria test suite and other tests",Task,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,photoshop,,"1) Expand the isartor test code so that it can also check conforming documents, i.e. documents that should not bring any errors. Support JBIG2.
2) Test the files from the Bavaria suite with preflight. I'll create sub-issues on that one. I counted 16 where something doesn't work as intented.
3) Include the Bavaria tests in the build. Only if we agree on this one. If not, I'll just keep it for myself as an additional regression test.",0,"Tilman Hausherr","Tilman Hausherr",0,4,"19/Jan/15 17:25","17/Mar/16 19:07","15/Feb/15 16:24"
PDFBOX-2611,PDFBOX,"possibly incorrect error message "Hexa String must have only Hexadecimal Characters" in preflight",Sub-task,CLOSED,Minor,Fixed,2.0.0,2.0.0,Preflight,None,,"I get with the files pdfa_article_v11.pdf and PDFExportDialog2.pdf of the "unclear" part of the Bavaria test suite. The cause is text like this in a PDF:
9D978E 6C6456 CECBC7 B5B1AA F3F2F1 E6E5E3 473D2C 857E73 DAD8D5 F3CFD2 DB6E7A 544A3A 605748 C2BEB8 E79EA6 D24A58
918B81 FCF3F4 A9A49C EDB6BC D55663 F6DBDD 787165 E18790 F9E7E9 F0C2C7 D8626F DE7B85 E4939B EAAAB1 CF3E4D 3B301E
In a comment to PDFExportDialog2.pdf, pdflib tells "Unclear: hexadecimal string with whitespace characters (ambiguous in ISO 19005-1)" and "PDFlib opinion: whitespace in hex strings should be ignored". The PDF-Tools validator says it is a valid PDF. Solid Documents is unable to process the file.
Maruan Sahyoun do you know if this has been clarified in PDF/A-2b or PDF/A-3b? It is valid in "ordinary" PDF files.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"19/Jan/15 18:48","17/Mar/16 19:08","20/Jan/15 17:44"
PDFBOX-2612,PDFBOX,"error "Destination contains invalid page reference 'null'" is not detected by preflight",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,,"The attached file from the Bavaria test suite should bring the mentioned error, but doesn't.
139 0 obj
<</Parent 132 0 R/A 138 0 R/Next 141 0 R/Prev 137 0 R/Title(3. Possibilities to Introduce Hydrophilic Spacer Groups into Amphiphilic Polymers)>>
endobj
138 0 obj
<</D[null/FitH 430]/S/GoTo>>
endobj",0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Jan/15 20:15","17/Mar/16 19:07","20/Jan/15 18:22"
PDFBOX-2613,PDFBOX,"Conflicting /N information for OutputIntent not detected by preflight",Sub-task,CLOSED,Major,Fixed,"1.8.8, 2.0.0",2.0.0,Preflight,None,,"<</Metadata 2 0 R/OpenAction[12 0 R/XYZ null null 0]/Outlines 6 0 R/OutputIntents[<</DestOutputProfile 28 0 R/Info(sRGB IEC61966-2.1)/OutputCondition()/OutputConditionIdentifier(Custom)/RegistryName(http://www.color.org)/S/GTS_PDFA1/Type/OutputIntent>>]/Pages 8 0 R/Type/Catalog>>
endobj
<</Filter/FlateDecode/Length 2574/N 4>>stream
This contradiction that an ICC profile has a different # of components than the N item is not detected by preflight, but should be (PDFTools does it, and the Bavaria test suite requires it).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"20/Jan/15 18:25","17/Mar/16 19:07","20/Jan/15 18:45"
PDFBOX-2614,PDFBOX,"missing /Type/FontDescriptor not detected by preflight",Sub-task,CLOSED,Major,Fixed,"1.8.8, 2.0.0",2.0.0,Preflight,None,,"171 0 obj
<</Subtype/Type1/FontDescriptor 174 0 R/LastChar 168/Widths 173 0 R/BaseFont/QEQUHA+NimbusRomNo9L-Regu/FirstChar 40/Encoding 172 0 R/Type/Font>>
endobj
174 0 obj
<</StemV 85/FontName/QEQUHA+NimbusRomNo9L-Regu/FontFile 175 0 R/Flags 4/Descent -216/FontBBox[-168 -281 1000 924]/Ascent 678/XHeight 450/CapHeight 651/ItalicAngle 0/CharSet(/parenleft/parenright/comma/hyphen/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon/B/C/D/E/G/H/I/N/P/R/S/U/V/Z/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/r/s/t/u/v/w/x/y/z/dieresis)>>
endobj
The missing /Type/FontDescriptor is not detected by preflight, but should be, according to the Bavaria test suite.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"20/Jan/15 18:26","17/Mar/16 19:08","20/Jan/15 18:45"
PDFBOX-2615,PDFBOX,"IllegalArgumentException in PDPageTree constructor: root cannot be null",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",Parsing,None,,"Exception in thread "main" java.lang.IllegalArgumentException: root cannot be null
        at org.apache.pdfbox.pdmodel.PDPageTree.<init>(PDPageTree.java:62)
        at org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages(PDDocumentCatalog.java:125)
        at org.apache.pdfbox.pdmodel.PDDocument.getPages(PDDocument.java:970)
        at org.apache.pdfbox.tools.PDFReader.openPDFFile(PDFReader.java:341)
        at org.apache.pdfbox.tools.PDFReader.main(PDFReader.java:326)
        at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:80)",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"20/Jan/15 22:15","28/Mar/15 14:10","23/Jan/15 18:47"
PDFBOX-2617,PDFBOX,"Group of Button fields treated as a Radio Button group",Bug,CLOSED,Minor,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",AcroForm,None,"windows 7, eclipse, java 1.8","When creating a group of identical button fields PDFBox reads them as a group of radio-button fields, with each widget as a check-box, which is incorrect.
The main field has the class PDRadioCollection and each kid is a PDCheckbox.
Run the following code on the attached file:
PDDocument doc = PDDocument.load( new File("test.pdf") );
PDAcroForm form = doc.getDocumentCatalog().getAcroForm();
List<PDField> fields = form.getFields();
for (PDField f: fields) {
System.out.println("Name:" + f.getFullyQualifiedName());
System.out.println("Type:" + f.getFieldType());
System.out.println("Class:" + f.getClass());
List<COSObjectable> kids = f.getKids();
if (kids!=null) {
for (COSObjectable c : kids)
{ System.out.println("Kid Class: " + c.getClass()); }
}
}
The results are:
Name:Test
Type:Btn
Class:class org.apache.pdfbox.pdmodel.interactive.form.PDRadioCollection
Kid Class: class org.apache.pdfbox.pdmodel.interactive.form.PDCheckbox
Kid Class: class org.apache.pdfbox.pdmodel.interactive.form.PDCheckbox",0,"Maruan Sahyoun","Gilad Denneboom",0,6,"21/Jan/15 13:10","23/Nov/15 18:40","27/Jan/15 09:04"
PDFBOX-2619,PDFBOX,"XMP dates contain time zone, while document info dates do not, and this isn't detected by preflight",Sub-task,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",Preflight,None,,"Another one from the Bavaria test suite:
/CreationDate(D:20090317081112) 
/ModDate(D:20090317081112)
<xmp:CreateDate>2009-03-17T08:11:12Z</xmp:CreateDate>
<xmp:ModifyDate>2009-03-17T08:11:12Z</xmp:ModifyDate>
The info dates do not have a timezone, but the xmp dates do (Z = "Zulu"). This information (whether there was a timezone information in the string) is "lost" in our conversion methods
Amusingly, PDF Tools says the file is valid.",0,"Maruan Sahyoun","Tilman Hausherr",0,3,"21/Jan/15 17:57","06/Oct/18 18:50","19/Feb/15 09:58"
PDFBOX-2620,PDFBOX,"Support named actions",Bug,CLOSED,Major,Fixed,"1.8.8, 1.8.9, 2.0.0","1.8.9, 2.0.0","Parsing, PDModel",None,,"PDFBox does not support named actions, see this question:
https://stackoverflow.com/questions/28060866/
The user has this code
<< /Type /Annot /Subtype /Link /Rect [0.0 0.0 100.0 100.0] /H /P /BS 1049 0 R /A 1050 0 R >>

1050 0 obj <</N /GoBack /S /Named>>
The solution is to derive a new class from PDAction and also to change to PDActionFactory.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Jan/15 18:08","28/Mar/15 14:10","21/Jan/15 23:28"
PDFBOX-2622,PDFBOX,"PDAnnotationLink::getBorderStyle() don't understand external border style",Bug,CLOSED,Major,Fixed,"1.8.8, 1.8.9, 2.0.0","1.8.9, 2.0.0",PDModel,None,"ubuntu, java 1.7","getBorderStyle() trying to get "BS" property and convert it to COSDictionary:
 COSDictionary bs = (COSDictionary) this.getDictionary().getItem(
                COSName.getPDFName( "BS" ) );
But it doesn't work when style is in external object and linked by reference (see example attached in project zip):
Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSDictionary
at org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink.getBorderStyle(PDAnnotationLink.java:131)
at org.accusoft.example.Bug.main(Bug.java:17)
I think it need something like conditional second getDictionary() here.",0,"Tilman Hausherr","Alexey Kulentsov",0,3,"22/Jan/15 02:27","28/Mar/15 14:10","22/Jan/15 18:12"
PDFBOX-2623,PDFBOX,"PDFPrinter.getPrintable returns Pageable instead of PDFPageable for easier extending",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Utilities,PDFPrint,,"Widen the returning type of PDFPrinter.getPageable from PDFPageable to simply Pageable, so that one can reuse any existing Pageable classes like java.awt.print.Book easily.",0,"John Hewson","Pei-Tang Huang",0,3,"22/Jan/15 06:41","17/Mar/16 19:07","23/Jan/15 01:22"
PDFBOX-2624,PDFBOX,""CIDSet entry is missing for the Composite Subset" when creating PDF/A-1b file with PDType0Font.load()","New Feature",CLOSED,Major,Fixed,2.0.0,2.0.0,"PDModel, Utilities",None,,"PDTrueTypeFont.loadTTF() is deprecated. So I tried to change CreatePDFA.java to call PDType0Font.load() instead, but the preflight validation fails:
3.1.11: Invalid Font definition, AAAXQL+LiberationSans: The CIDSet entry is missing for the Composite Subset",0,"John Hewson","Tilman Hausherr",0,5,"22/Jan/15 17:07","17/Mar/16 19:08","31/Jan/15 18:26"
PDFBOX-2625,PDFBOX,"Preflight error: The character with CID 0 should have a width equals to 57.0, but has 57.78",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,"FontBox, Preflight",type3,,"Preflight brings these error message for the attached file. This is related to two type3 "fonts".
3.1.6 : Invalid Font definition, T1: The character with CID 0 should have a width equals to 57.0, but has 57.78 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 2 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 3 should have a width equals to 17.0, but has 17.75999 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 4 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 6 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 8 should have a width equals to 57.0, but has 57.78 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 9 should have a width equals to 53.0, but has 53.34 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 3 should have a width equals to 17.0, but has 17.75999 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 10 should have a width equals to 40.0, but has 40.02 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 12 should have a width equals to 17.0, but has 17.76 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 13 should have a width equals to 40.0, but has 40.02 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 15 should have a width equals to 26.0, but has 26.64 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 2 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 1 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 16 should have a width equals to 40.0, but has 40.02 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 17 should have a width equals to 53.0, but has 53.34 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 3 should have a width equals to 17.0, but has 17.75999 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 1 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 13 should have a width equals to 40.0, but has 40.02 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 14 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 2 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 1 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 18 should have a width equals to 26.0, but has 26.64 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 19 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 17 should have a width equals to 53.0, but has 53.34 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 20 should have a width equals to 26.0, but has 26.64 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 21 should have a width equals to 48.0, but has 48.84 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 15 should have a width equals to 26.0, but has 26.64 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 14 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 13 should have a width equals to 40.0, but has 40.02 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 14 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 2 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 1 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 22 should have a width equals to 53.0, but has 53.34 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 23 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 3 should have a width equals to 17.0, but has 17.75999 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 24 should have a width equals to 57.0, but has 57.78 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 1 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 15 should have a width equals to 26.0, but has 26.64 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 1 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 25 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 1 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 12 should have a width equals to 17.0, but has 17.76 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 26 should have a width equals to 66.0, but has 66.60001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 27 should have a width equals to 53.0, but has 53.34 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 13 should have a width equals to 40.0, but has 40.02 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 28 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 1 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 29 should have a width equals to 48.0, but has 48.84 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 30 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 11 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 0 should have a width equals to 57.0, but has 57.78 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 2 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 3 should have a width equals to 17.0, but has 17.75999 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 13 should have a width equals to 40.0, but has 40.02 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 11 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 12 should have a width equals to 17.0, but has 17.76 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 15 should have a width equals to 26.0, but has 26.64 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 31 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 15 should have a width equals to 26.0, but has 26.64 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 26 should have a width equals to 66.0, but has 66.60001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 2 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 14 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 4 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 27 should have a width equals to 53.0, but has 53.34 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 32 should have a width equals to 57.0, but has 57.78 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 21 should have a width equals to 48.0, but has 48.84 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 24 should have a width equals to 57.0, but has 57.78 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 27 should have a width equals to 53.0, but has 53.34 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 21 should have a width equals to 48.0, but has 48.84 on page 50
3.1.6 : Invalid Font definition, T1: The character with CID 21 should have a width equals to 48.0, but has 48.84 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 0 should have a width equals to 53.0, but has 53.34 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 1 should have a width equals to 40.0, but has 40.02 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 4 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 5 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 4 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 6 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 7 should have a width equals to 26.0, but has 26.64 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 8 should have a width equals to 40.0, but has 40.02 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 9 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 10 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 12 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 4 should have a width equals to 22.0, but has 22.2 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 6 should have a width equals to 44.0, but has 44.46001 on page 50
3.1.6 : Invalid Font definition, T2: The character with CID 8 should have a width equals to 40.0, but has 40.02 on page 50
The widths on the left of the error messages can be seen below, they are truncated to int in Type3FontValidator.getWidths().
459 0 obj
<</Subtype/Type3/LastChar 33/Widths[57.78 44.46 22.2 17.76 44.46 44.46 44.46 62.22 57.78 53.34 40.02 44.46 17.76 40.02 44.46 26.64 40.02 53.34 26.64 22.2 26.64 48.84 53.34 44.46 57.78 44.46 66.6 53.34 44.46 48.84 44.46 22.2 57.78 53.34]/Name/T1/FirstChar 0/FontMatrix[0.01 0 0 0.01 0 0]/FontBBox[-53.16 -25.98 159.96 80.46]/Resources 105 0 R/Encoding 106 0 R/Type/Font/CharProcs 141 0 R>>
endobj
460 0 obj
<</Subtype/Type3/LastChar 12/Widths[53.34 40.02 40.02 17.76 22.2 44.46 44.46 26.64 40.02 22.2 44.46 44.46 44.46]/Name/T2/FirstChar 0/FontMatrix[0.01 0 0 0.01 0 0]/FontBBox[-80.88 -26.34 180.78 86.22]/Resources 142 0 R/Encoding 143 0 R/Type/Font/CharProcs 157 0 R>>
endobj
The widths on the right of the error messages can be found in the type3 "font" streams and are set by the first parameter of the d0 or the d1 operator. They are indeed 44.46001, 17.75999, 66.60001, 17.75999.
Maruan Sahyoun Does the PDF/A-1b specification request identity, integer identity, or difference below a fractional value for the widths?",0,"Tilman Hausherr","Tilman Hausherr",0,3,"22/Jan/15 22:53","17/Mar/16 19:07","23/Jan/15 18:17"
PDFBOX-2627,PDFBOX,"Add block composer to handle multiline text",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,None,,"In order to generate the appearance for multiline text a basic plain text block composer needs to be developed.
Features
box model
paragraph separation
line breaking
horizontal and vertical alignment
font setting, line height …
Conceptually it should also include writing mode likely with the only initial implementation being lr-tb.
There should be no new dependencies on projects such as ICU which will limit the capabilities but should be acceptable to the needs of form filling.
To not create the false assumption that this is a generic composer it will be sub packaged within the (AcroForms) forms package(s).",0,"Maruan Sahyoun","Maruan Sahyoun",0,1,"23/Jan/15 12:00","17/Mar/16 19:07","15/Mar/15 22:00"
PDFBOX-2628,PDFBOX,"XmpSerializer will never throw XmpSerializationException",Improvement,CLOSED,Major,Fixed,None,2.0.0,XmpBox,None,,"The constructor of XmpSerializer throws XmpSerializationException if DocumentBuilderFactory#newDocumentBuilder throws XmpSerializationException. However, that will never happen because we don't call #setAttributes() on the DocumentBuilderFactory before calling #newDocumentBuilder - if you look at the source code for DocumentBuilderFactory, you'll see that this means that ParserConfigurationException is never thrown when attributes = null.",0,"John Hewson","John Hewson",0,1,"23/Jan/15 18:56","17/Mar/16 19:07","23/Jan/15 19:11"
PDFBOX-2629,PDFBOX,"PDAnnotation should not use PDGamma for colors",Bug,CLOSED,Major,Fixed,None,2.0.0,PDModel,None,,"PDAnnotation uses PDGamma to represent colors in "setColour" and "getColour". It should be using PDColor.
The same problem is also present in PDAnnotationLine, PDAnnotationSquareCircle, and PDAppearanceCharacteristicsDictionary.",0,"John Hewson","John Hewson",0,2,"23/Jan/15 19:12","17/Mar/16 19:08","23/Jan/15 19:40"
PDFBOX-2630,PDFBOX,""loop in destinations" not detected by preflight",Sub-task,CLOSED,Major,Fixed,"1.8.8, 1.8.9, 2.0.0",2.0.0,Preflight,None,,"The Bavaria testsuite requests to detect "Contains loops in destinations" in the attached file. I'm not sure what they mean, but PDF-Tools detects this and we don't:
The value of the key Prev is 212 0 R but must be 0 0 R.
The value of the key Prev is 214 0 R but must be 0 0 R.
The value of the key Prev is 215 0 R but must be 214 0 R.
The value of the key Prev is 213 0 R but must be 212 0 R.
The value of the key Prev is 217 0 R but must be 0 0 R.
The value of the key Prev is 218 0 R but must be 217 0 R.
The value of the key Prev is 219 0 R but must be 218 0 R.
The value of the key Prev is 216 0 R but must be 213 0 R.
The value of the key Prev is 220 0 R but must be 216 0 R.
The value of the key Prev is 222 0 R but must be 0 0 R.
The value of the key Prev is 223 0 R but must be 222 0 R.
The value of the key Prev is 224 0 R but must be 223 0 R.
The value of the key Prev is 221 0 R but must be 220 0 R.
The value of the key Prev is 226 0 R but must be 0 0 R.
The value of the key Prev is 225 0 R but must be 221 0 R.
The value of the key Prev is 211 0 R but must be 0 0 R.
The value of the key Prev is 210 0 R but must be 0 0 R.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Jan/15 14:18","17/Mar/16 19:07","25/Jan/15 12:05"
PDFBOX-2631,PDFBOX,"Single radio-button group has no children",Bug,CLOSED,Minor,"Not A Problem",1.8.8,None,AcroForm,None,"windows 7, eclipse, java 1.8","(Continuation of https://issues.apache.org/jira/browse/PDFBOX-2617)
A group of radio-buttons is an object of the PDRadioCollection class and each child of that group is an PDCheckbox object.
However, if the group only contains one widget the getKids method of the PDRadioCollection object returns null.
There should be at least one child for any such group.",0,"Maruan Sahyoun","Gilad Denneboom",0,1,"24/Jan/15 14:42","29/Jan/15 13:31","29/Jan/15 13:31"
PDFBOX-2632,PDFBOX,"Lost output when mixing subset and non-subset of the same font",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"On behalf of Michael Klink:
There still is a small bug in that font subsetting in the current SNAPSHOT: If on the same page you first use a font without subsetting
stream.setFont(font, 12, false);
then add some text, then use the same font with subsetting
stream.setFont(font, 12, true);
then add some more text, the text drawn up to the second font setting operation may be incomplete.",0,"John Hewson","Tilman Hausherr",0,2,"26/Jan/15 11:59","17/Mar/16 19:07","29/Jan/15 02:50"
PDFBOX-2634,PDFBOX,"Multiple text operations on multiple pages cause NPE in TTFSubsetter",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"Problem seems to be of the same nature as in PDFBOX-2605, in a slightly different scenario.
NullPTest.java
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType0Font;
import org.junit.Test;

public class NullPTest {

    @Test
    public void testMultipageUnicodePDF() throws Exception {
        PDDocument document = new PDDocument();

        PDFont titleFont = PDType0Font.load(document, this.getClass().getResourceAsStream("/Arial Unicode.ttf"));

        PDPage page = new PDPage(PDRectangle.A4);
        document.addPage(page);
        PDPageContentStream contentStream = new PDPageContentStream(document, page);

        contentStream.beginText();
        contentStream.setFont(titleFont, 12);
        contentStream.newLineAtOffset(0, 100);
        contentStream.showText("Pěkný žluťoučký kůň úpěl ďábelské ódy");
        contentStream.endText();
        contentStream.close();
        

        page = new PDPage(PDRectangle.A4);
        document.addPage(page);
        contentStream = new PDPageContentStream(document, page);
        contentStream.beginText();
        contentStream.setFont(titleFont, 12);
        contentStream.newLineAtOffset(0, 200);
        contentStream.showText("Pěkný žluťoučký kůň úpěl ďábelské ódy");
        contentStream.endText();
        contentStream.close();

        document.close();
    }
}",0,"John Hewson","Alex Nevidomsky",0,3,"27/Jan/15 23:09","17/Mar/16 19:08","29/Jan/15 02:49"
PDFBOX-2635,PDFBOX,"PrintImageLocations outputs utter nonsense",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"As observed by Michael Klink in this answer:
The current 2.0.0-SNAPSHOT version of that sample returns utter nonsense; you might want to fix this
And yes he's right. I compared the output of both versions, the 1.8 is correct, while the 2.0 version brings some tiny values.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"27/Jan/15 23:28","17/Mar/16 19:08","27/Jan/15 23:39"
PDFBOX-2636,PDFBOX,"Colorspaces of annotations not treated correctly",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Parsing, Preflight",None,,"I get this exception with preflight
java.lang.ArrayIndexOutOfBoundsException: -1
 at java.util.ArrayList.elementData(Unknown Source)
 at java.util.ArrayList.get(Unknown Source)
 at org.apache.pdfbox.cos.COSArray.get(COSArray.java:210)
 at org.apache.pdfbox.pdmodel.graphics.color.PDColor.<init>(PDColor.java:48)
 at org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation.getColor(PDAnnotation.java:647)
 at org.apache.pdfbox.preflight.annotation.AnnotationValidator.checkColors(AnnotationValidator.java:133)
at first, it looks like a regression by PDFBOX-2629 but the code was never correct even before: the "C" (and IC, BC, BG) property of annotations can have different colorspaces or none:
An array of numbers in the range 0.0 to 1.0, representing a colour used for the following purposes: (...)
The number of array elements determines the colour space in which the colour shall be defined:
0 No colour; transparent
1 DeviceGray
3 DeviceRGB
4 DeviceCMYK
The same problem exists for the IC and BC items of an annotation.
Maruan Sahyoun - could you please look whether PDF/A-1b has a requirement that only RGB is allowed for annotations? In ordinary PDF, Gray, RGB, CMYK or None are allowed, but currently PDFBox Preflight forbids CMYK or Gray, instead of checking that the output intent matches the color space. I've also read that DeviceGray accepts an RGB or CMYK icc profile.
http://www.pdfa.org/2011/09/pdfa-und-farbe/?lang=de#zugelassene_farbraeume",0,"Tilman Hausherr","Tilman Hausherr",0,3,"28/Jan/15 17:16","17/Mar/16 19:07","31/Jan/15 18:24"
PDFBOX-2638,PDFBOX,"PDF files content lost when multiples pdf files merged in to one file",Bug,CLOSED,Major,"Not A Problem",1.8.2,None,Rendering,None,linux,"I am trying to merge six pdf files. In the merged document, I am seeing
some boxes in place of text.
Text got replaced by boxes and images got lost.
The code used for merging is given below:
public static void main (String args[])
{
String[] docletNamesAsPdf =
{ "RP_OverviewPart1.pdf", "RP_OverviewPart2.pdf", "RP_OverviewPart3.pdf", "RP_OverviewPart4.pdf", "RP_OverviewPart5.pdf", "RP_OverviewPart6.pdf" }
;
PDDocument dest = PDDocument.load(docletNamesAsPdf[0]);
PDDocument src = PDDocument.load(docletNamesAsPdf[1]);
dest = mergePdfs(dest, src);
for (int i = 2; i < docletNamesAsPdf.length; i++)
{ src = PDDocument.load(docletNamesAsPdf[i]); dest = mergePdfs(dest, src); }
try
{ dest.save("MergedDoc.pdf"); }
catch (COSVisitorException e)
{ ; }
src.close();
dest.close();
}
public PDDocument mergePdfs(PDDocument dest, PDDocument src) throws
IOException
{ new PDFMergerUtility().appendDocument(dest, src); return dest; }
Please let me know what is wrong with the code and how can we resolve
this issue.",0,"Andreas Lehmkühler","MANISHA SHARMA",0,2,"29/Jan/15 11:00","29/Jan/15 11:42","29/Jan/15 11:42"
PDFBOX-2640,PDFBOX,"Fields within a fields kids entry are not correctly recognized",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,None,,"From the users mailing list:
I'm using latest PDFBox 2.0.0 snaphots for filling out a form. Processing was working fine both for AcroForm fields and for XFA, but latest changes (probably sometimes between Jan 22 - Jan 25) caused that fields in a form are not discovered.
The file I'm using is available here: http://www.msmt.cz/file/34489_1_1/
When I run PrintFields from examples - http://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/fdf/PrintFields.java?view=markup - on the file, the output I get is:
1 top-level fields were found on the form
--topmostSubform[0]
But when I use older version of 2.0.0 branch, all fields are printed:
1 top-level fields were found on the form
--topmostSubform[0]
  --topmostSubform[0].Page1[0]
    --topmostSubform[0].Page1[0]._01_Subtitul[0], type=org.apache.pdfbox.pdmodel.interactive.form.PDComboBox
    --topmostSubform[0].Page1[0]._02_Registrovany_Nazev[0], type=org.apache.pdfbox.pdmodel.interactive.form.PDTextField
    --topmostSubform[0].Page1[0]._03_Ulice[0], type=org.apache.pdfbox.pdmodel.interactive.form.PDTextField
    --topmostSubform[0].Page1[0]._04_Mesto[0], type=org.apache.pdfbox.pdmodel.interactive.form.PDTextField
    --topmostSubform[0].Page1[0]._05_PSC[0], type=org.apache.pdfbox.pdmodel.interactive.form.PDTextField
...
The problem seems to be at the line:
List<COSObjectable> kids = field.getKids();
The list is empty for the top-level field. Anyone has a clue what could be wrong?",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"29/Jan/15 14:04","17/Mar/16 19:08","03/Feb/15 01:34"
PDFBOX-2641,PDFBOX,"ArrayIndexOutOfBoundsException in PDType1Font constructor",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"java.lang.ArrayIndexOutOfBoundsException: 0
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:168)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)",0,"John Hewson","Tilman Hausherr",0,2,"29/Jan/15 17:43","17/Mar/16 19:08","30/Jan/15 19:06"
PDFBOX-2644,PDFBOX,"Load FDF document creates Temp file when called with file parameter",Bug,CLOSED,Major,Fixed,1.8.8,1.8.9,Parsing,None,,"Load FDF document creates Temp file when called with file parameter, as shown by this stack trace from
https://stackoverflow.com/questions/28229085/temp-file-creation-error-on-gae-with-pdfbox
com.sun.jersey.spi.container.ContainerResponse mapMappableContainerException: The RuntimeException could not be mapped to a response, re-throwing to the HTTP container
java.lang.SecurityException: Unable to create temporary file
 at java.io.File.checkAndCreate(File.java:1873)
 at java.io.File.createTempFile(File.java:1968)
 at java.io.File.createTempFile(File.java:2013)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.createTmpFile(NonSequentialPDFParser.java:298)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.<init>(NonSequentialPDFParser.java:278)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.<init>(NonSequentialPDFParser.java:264)
 at org.apache.pdfbox.pdmodel.fdf.FDFDocument.load(FDFDocument.java:200)
 at org.apache.pdfbox.pdmodel.fdf.FDFDocument.load(FDFDocument.java:172)
and this source code
        File pdfFile = new File("resources/GenerateFDF.pdf");
        File fdfFile = new File("resources/fdftest.fdf");

        PDDocument pdfDoc = PDDocument.load(pdfFile);
        FDFDocument fdfDoc = FDFDocument.load(fdfFile);
I had a quick look at the sources of FDFDocument:
    public static FDFDocument load( File file ) throws IOException
    {
        return load( new BufferedInputStream( new FileInputStream( file ) ) );
    }
Is it needed this way, i.e. can't the NonSequentialPDFParser constructor be called instead, as it is done when opening a *P*DF Document?",0,"Tilman Hausherr","Tilman Hausherr",0,3,"30/Jan/15 07:37","28/Mar/15 14:10","01/Feb/15 19:56"
PDFBOX-2645,PDFBOX,"Open PDF file from byte array without temp file",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"On behalf of Michael Klink
wouldn't it be worth considering a PDFParser extension which accepts a byte array and sets raStream to a RandomAccessBufferedFileInputStream facade operating in memory on the array alone? That would allow use in contexts where the program has no file system access permissions.
Yes this would be a good idea, and I actually had the same thought while looking at the sources while we both commented on
https://stackoverflow.com/questions/28135026/ (where the person asking the question had some misconceptions about how stuff works)",0,"Andreas Lehmkühler","Tilman Hausherr",0,4,"30/Jan/15 08:28","17/Mar/16 19:07","07/Jun/15 16:19"
PDFBOX-2646,PDFBOX,"A text including single-quote is malformed with Embedded TTF font",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"When a text including single quote is output by an embedded TTF font, it turns into garbage. This can be reproduced by an attached code.
This is because the cid code of single quote is 0x0A and escaped in COSWriter.writeString(). The attached patch fixes this.",0,"John Hewson","Keiji Suzuki",0,2,"30/Jan/15 09:04","17/Mar/16 19:07","30/Jan/15 20:54"
PDFBOX-2647,PDFBOX,"Check thumbnails in XMP metadata",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,,"The Bavaria testsuite has another requirement for the file PDFA_Conference_2009_nc.pdf from PDFBOX-2643, that thumbnails are checked for validity. I'll add this, checking height, width, format and content.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"30/Jan/15 18:33","17/Mar/16 19:07","30/Jan/15 18:48"
PDFBOX-2649,PDFBOX,"Character widths incorrect in a loaded font",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"@Test
testRelativeWidth() {
PDFont font = PDType0Font.load(document, this.getClass().getResourceAsStream("/LiberationSans-Regular.ttf"));
float wO = font.getStringWidth("O");
float wP = font.getStringWidth("P");
float wN = font.getStringWidth("N");
Assert.assertTrue("O must be wider than P", wO>wP);
Assert.assertTrue("O must be wider than N", wO>wN);
}
I can see that there is a confusion in the process between GID and CID values. The reason may not be entirely clear to me, but PDCIDFontType2Embedder.buildWidths(COSDictionary cidFont) seems to name "cid" something that in my opinion is still a glyph id. And when it comes to PDCIDFont.getWidth(int), the "widths" map that should presumably contain cid->width values in reality contains git->width.",0,"John Hewson","Alex Nevidomsky",0,2,"31/Jan/15 16:15","17/Mar/16 19:07","31/Jan/15 22:00"
PDFBOX-2650,PDFBOX,"Type1Equivalent: TrueType must use 'cmap' when 'post' table is empty",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"Originally from Andreas Lüdtke on the mailing list:
All glyphs are missing in the Helvetica font on Windows 8.1.
D:\__test>java -jar pdfbox-app-2.0.0-20150129.180809-996.jar PDFToImage rg-1234567890BA.pdf
Jan 31, 2015 2:34:34 PM org.apache.pdfbox.rendering.font.Type1Glyph2D getPathForCharacterCode
WARNUNG: No glyph for 77 (.notdef) in font Helvetica
Jan 31, 2015 2:34:34 PM org.apache.pdfbox.rendering.font.Type1Glyph2D getPathForCharacterCode
WARNUNG: No glyph for 97 (.notdef) in font Helvetica
Jan 31, 2015 2:34:34 PM org.apache.pdfbox.rendering.font.Type1Glyph2D getPathForCharacterCode
WARNUNG: No glyph for 114 (.notdef) in font Helvetica
Jan 31, 2015 2:34:34 PM org.apache.pdfbox.rendering.font.Type1Glyph2D getPathForCharacterCode
WARNUNG: No glyph for 107 (.notdef) in font Helvetica
Jan 31, 2015 2:34:34 PM org.apache.pdfbox.rendering.font.Type1Glyph2D getPathForCharacterCode
WARNUNG: No glyph for 117 (.notdef) in font Helvetica
Some research shows that this is because the 'post' table in Arial.ttf no longer contains names (it's now format 3), which FontBox was relying on. We must fallback to the 'cmap' table in this case.",0,"John Hewson","John Hewson",0,1,"31/Jan/15 19:21","17/Mar/16 19:06","04/Feb/15 01:07"
PDFBOX-2651,PDFBOX,"Preflight doesn't check for valid destination syntax",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,,"This is sortof a followup on PDFBOX-2612. While working on that one, I noticed that preflight doesn't check for a valid 2nd parameter in the destination. In other words, the fix in PDFBOX-2612 helps to pass the Bavaria test, but we're not really doing ALL that needs to be done, i.e. check against what's mentioned in "TABLE 8.2 Destination syntax".
To be sure, I tested the file rolfs_diss_A1b.pdf with this change with the online check of PDF-Tools:
<</D[406 0 R/FxtH 664]/S/GoTo>>
It should be /FitH, and PDF-Tools flags the error. So should we.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"31/Jan/15 20:45","17/Mar/16 19:06","31/Jan/15 23:11"
PDFBOX-2652,PDFBOX,"Document Outlines (Bookmark) and Link Annotation validation do not validate /Dest item",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,,"The BookmarkValidationProcess and LinkAnnotationValidator classes does not validate the /Dest item. It should do so like is already done in GoToAction.
Destinations may be associated with outline items (see Section 8.2.2, "Document Outline"), annotations ("Link Annotations" on page 622), or actions ("Go-To Actions" on page 654 and "Remote Go-To Actions" on page 655).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"31/Jan/15 21:57","17/Mar/16 19:08","01/Feb/15 19:55"
PDFBOX-2653,PDFBOX,"Image extraction fails with attached PDF",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",Utilities,CCITTFaxDecode,linuxmint,"ExtractImages failed with the following exception:
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.graphics.xobject.PDCcitt$TiffWrapper.buildHeader(PDCcitt.java:651)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDCcitt$TiffWrapper.<init>(PDCcitt.java:497)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDCcitt$TiffWrapper.<init>(PDCcitt.java:488)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDCcitt.write2OutputStream(PDCcitt.java:237)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file(PDXObjectImage.java:265)
at org.apache.pdfbox.ExtractImages.processResources(ExtractImages.java:255)
at org.apache.pdfbox.ExtractImages.extractImages(ExtractImages.java:180)
at org.apache.pdfbox.ExtractImages.main(ExtractImages.java:80)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:62)",0,"Tilman Hausherr","Paco Avila",0,5,"01/Feb/15 08:46","28/Mar/15 14:10","18/Feb/15 20:06"
PDFBOX-2654,PDFBOX,"NullPointerException when reading a GIF file with a transparent color",Bug,CLOSED,Major,Fixed,"1.8.8, 1.8.9, 2.0.0","1.8.9, 2.0.0",PDModel,None,"java 1.7, mac os x","NullPointerException while reading a gif file before writing it to a pdf file. I am able to write jpg's successfully to the pdf. The code snippet that I use to write to a pdf. Can you please help ?
public void generatePDF() throws IOException,COSVisitorException,FileNotFoundException
 {
  PDDocument report_pdf = new PDDocument();
  PDPage pdfpage1 = new PDPage(PDPage.PAGE_SIZE_LETTER);
  PDRectangle text_dimensions = pdfpage1.getMediaBox();
  PDXObjectImage pdfImage = null;
  PDPageContentStream stream = new PDPageContentStream(report_pdf, pdfpage1);
  stream.setFont(PDType1Font.HELVETICA, 30);
  stream.beginText();
  stream.moveTextPositionByAmount(130,text_dimensions.getHeight()-50);
  stream.drawString("Hello");
  stream.endText();
  BufferedImage awtImage = ImageIO.read(new File("/var/tmp/test1.gif"));
   //pdfImage = new PDJpeg(report_pdf,awtImage);
  pdfImage = new PDPixelMap(report_pdf, awtImage);
  stream.drawImage(pdfImage, 60, 120 );
        //stream.drawXObject(pdfImage, 150, 400, pdfImage.getWidth()*10, pdfImage.getHeight()*20);
  stream.close();
  report_pdf.addPage(pdfpage1);
  report_pdf.save(new File("/var/tmp/report.pdf"));
 }
Throws an error
Exception in thread "main" java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.extractAlphaImage(PDXObjectImage.java:499)
 at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.createImageStream(PDPixelMap.java:122)
 at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.<init>(PDPixelMap.java:86)
 at org.reports.ReportGenerator.ReportGenerator.generatePDF(ReportGenerator.java:122)",0,"Tilman Hausherr","Shiva Sathiraju",0,3,"01/Feb/15 14:40","28/Mar/15 14:10","05/Feb/15 22:18"
PDFBOX-2655,PDFBOX,"PDCIDFontType2Embedder.buildCIDSet() ArrayOutOfBounds",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"byte[] bytes = new byte[(Collections.max(cidToGid.keySet()) + 7) / 8];
...
bytes[cid / 8] |= mask;
Problem:
[(N+7)/8] is not enough to store N/8 when N=8k (for example, 8).
(N+8)/8 or N/8+1 seem to solve the problem, but not sure about the potential remote consequences.
Test case:
  PDDocument document = new PDDocument();
  PDPage page = new PDPage(PDRectangle.A4);
  document.addPage(page);
  String dir = "../../resources/";
  PDType0Font font = PDType0Font.load(document, new File(dir + "LiberationSans-Regular.ttf"));
  PDPageContentStream stream = new PDPageContentStream(document, page);
  stream.beginText();
  stream.setFont(font, 12);
  stream.setLeading(12 * 1.2);
  stream.newLineAtOffset(50, 600);
  //This particular Russian letter has been
  //a trouble maker in computer system for decades )
  stream.showText("я");

  stream.endText();
  stream.close();
  document.save("example.pdf");
  document.close();",0,"John Hewson","Alex Nevidomsky",0,3,"01/Feb/15 22:35","17/Mar/16 19:08","04/Feb/15 00:57"
PDFBOX-2656,PDFBOX,"Trailer isn't written when signing a PDF",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Signing,None,,"Isaias Barroso reported an issue on users@pdfbox. Obviously the trailer is missing in the signed pdf when signing a pdf using a xref table.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"02/Feb/15 18:52","17/Mar/16 19:08","02/Feb/15 19:10"
PDFBOX-2660,PDFBOX,"Text missing",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage out2.pdf",0,"John Hewson","simon steiner",0,4,"03/Feb/15 15:59","17/Mar/16 19:08","04/Feb/15 21:22"
PDFBOX-2663,PDFBOX,"CMap handling bug",Bug,CLOSED,Major,"Won't Fix",1.8.8,None,FontBox,None,"windows 7","Some CMap includes another CMap using the "usecmap" command in the CMap resource file. For example, "ETenms-B5-H" includes "ETen-B5-H" CMap. The command in resource file is "/ETen-B5-H usecmap"
The CMapParser does handle this case. Please find the coding below:
if (op.op.equals(USECMAP))
{
    LiteralName useCmapName = (LiteralName) previousToken;
    InputStream useStream = ResourceLoader.loadResource(resourceRoot + useCmapName.name);
    if (useStream == null)
    {
        throw new IOException("Error: Could not find referenced cmap stream " + useCmapName.name);
    }
    CMap useCMap = parse(resourceRoot, useStream);
    result.useCmap(useCMap);
}

But the useCmap method of CMap class doesn't copy the cidRanges list from the child CMap. Please find the coding below:

    public void useCmap( CMap cmap )
    {
        this.codeSpaceRanges.addAll( cmap.codeSpaceRanges );
        this.singleByteMappings.putAll( cmap.singleByteMappings );
        this.doubleByteMappings.putAll( cmap.doubleByteMappings );
    }
Without the cidRanges from the included CMap, PDFBox doesn't know a text can be solved by the CMap and return "?" finally.
Suggest to add the following coding to useCmap method of CMap class to solve the problem.
this.cidRanges.addAll( cmap.cidRanges);",0,"John Hewson","Matthew GAO",0,1,"04/Feb/15 11:07","05/Feb/15 21:00","05/Feb/15 21:00"
PDFBOX-2664,PDFBOX,"PDDocumentInformation shouldn't throw IOException",Bug,CLOSED,Trivial,Fixed,2.0.0,2.0.0,PDModel,None,,"As part of PDFBOX-1803 the DateConverter.toCalendar doesn't throw IOException anymore. This is correctly reflected in the COSDictionary.getDate but not in the PDDocumentInformation.getCreationDate and getCreationDate.getModificationDate which are forcing the user to surround with a try/catch for an exception that is never thrown.",0,"Tilman Hausherr","Andrea Vacondio",0,3,"04/Feb/15 11:30","17/Mar/16 19:07","15/Feb/15 21:23"
PDFBOX-2665,PDFBOX,"PDType1Font (HELVETICA) encode getting NullPointerException",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,"windows 7, java 1.7, jboss","Hi,
I have been trying to revert to previous pdfbox-2.0.0 versions, which is why the error is from a previous build, but this is applicable to the latest (2.0.0-20150204.015951-1042) too.
I am getting this error, which I was not getting a month ago.
Regards...
Error: java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.font.PDType1Font.encode(PDType1Font.java:309) [pdfbox-2.0.0-20150129.080600-1013.jar:2.0.0-SNAPSHOT]
at org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:267) [pdfbox-2.0.0-20150129.080600-1013.jar:2.0.0-SNAPSHOT]
at org.apache.pdfbox.pdmodel.PDPageContentStream.showText(PDPageContentStream.java:316) [pdfbox-2.0.0-20150129.080600-1013.jar:2.0.0-SNAPSHOT]",0,"John Hewson","Daniel Brownell",0,2,"04/Feb/15 14:53","17/Mar/16 19:08","06/Feb/15 00:44"
PDFBOX-2668,PDFBOX,"intersectClippingPath does a shallow copy",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"While working on PDFBOX-2660 I discovered that PDGraphicsState#intersectClippingPath performs a shallow copy of the Area, which means that it will retain any mutation which occurs in following states.
I don't have a PDF file which is known to trigger this problem, but I've confirmed that it exists with a debugger.",0,"John Hewson","John Hewson",0,2,"05/Feb/15 04:52","17/Mar/16 19:07","05/Feb/15 21:12"
PDFBOX-2669,PDFBOX,"Make internal PageDrawer font classes package-private",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Rendering,None,,"We still have some internal classes used only by PageDrawer which are still public. These internal APIs are still evolving and should be made package-private.
If anybody wants or needs any of the functionality of these APIs publicly, we can add it to the appropriate PDFont subclass, as that's where it belongs.",0,"John Hewson","John Hewson",0,1,"06/Feb/15 00:49","17/Mar/16 19:07","06/Feb/15 00:55"
PDFBOX-2670,PDFBOX,"Move orphaned COSObjectKey class",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"COSObjectKey is orphaned in the persistence.util module, yet it's clearly a part of our COS model, indeed COSDocument which is in org.apache.pdfbox.cos, depends on it.
We should move COSObjectKey to org.apache.pdfbox.cos.",0,"John Hewson","John Hewson",0,1,"06/Feb/15 00:58","17/Mar/16 19:08","06/Feb/15 01:02"
PDFBOX-2673,PDFBOX,"Add output path prefix param in PDFSplit/Splitter","New Feature",CLOSED,Minor,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",Utilities,None,,"Stateless framework (like php) must randomization output for concurrency safe split document from command line.
Please add a parameter -outputPrefix as seen in PDFToImage: https://github.com/apache/pdfbox/blob/1.8/pdfbox/src/main/java/org/apache/pdfbox/PDFToImage.java",0,"Tilman Hausherr","Arsen Borovinskiy",0,3,"07/Feb/15 19:08","28/Mar/15 14:10","17/Feb/15 20:15"
PDFBOX-2674,PDFBOX,"Remove two unused methods from COSStream",Task,CLOSED,Trivial,Fixed,2.0.0,2.0.0,None,None,,"Remove two methods I added 3 months ago to COSStream in PDFBOX-2296 / [ https://svn.apache.org/r1632382 ], this was related to length repair in the old parser. Because the old parser no longer exists, these two methods can be removed.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Feb/15 22:41","17/Mar/16 19:06","07/Feb/15 22:47"
PDFBOX-2675,PDFBOX,"PDOutlineNode.getParent uses /P item as fallback for /Parent",Bug,CLOSED,Minor,Fixed,"1.8.8, 1.8.9, 2.0.0",2.0.0,PDModel,None,,"On behalf of Andrea Vacondio:
I was writing unit test for the PDOutlineNode.getParent which gets the
parent node looking for a PARENT or a P key in the outline item dictionary.
Now according to table 153 of the specs only PARENT should be there so I
was wandering if someone knows better why the P is there and if it should
be covered by the unit.
Indeed, the /P is not in the spec. This has been there since 2008, and we don't have the prior history. Probably somebody copied code from elsewhere. I'll remove it.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Feb/15 09:55","17/Mar/16 19:07","08/Feb/15 09:58"
PDFBOX-2676,PDFBOX,"PDPageLabelRange.setLabelItem() should not allow negative startPage",Bug,CLOSED,Minor,Fixed,"1.8.8, 1.8.9, 2.0.0","1.8.9, 2.0.0",PDModel,None,,"This code
        PDPageLabels pl = new PDPageLabels(doc);
        PDPageLabelRange plr0 = new PDPageLabelRange();
        plr0.setPrefix("bad");
        pl.setLabelItem(-1, plr0);
should throw an exception, because the startPage parameter should not be negative.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Feb/15 14:39","28/Mar/15 14:10","08/Feb/15 14:47"
PDFBOX-2677,PDFBOX,"Negative Outlines COUNT and various issues",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,outline,,"Hi,
I started playing with the outline package few days ago mostly writing unit tests but I found the current implementation has a number of issues and started fixing them. I ended up with a quite substantial patch I'm going to attach.
So far I only addressed the addition of nodes.
Current implementation suffers of some issues:
insertSiblingAfter doesn't set the LAST on its parent in case it's the last node
Outlines COUNT can be negative (and often is) despite the spec table 152 states "The value cannot be negative."
invalid outline hierarchy with wrong COUNT can be created with no warning with code like:
 PDDocumentOutline outline = new PDDocumentOutline();
        PDOutlineItem root = new PDOutlineItem();
        root.setTitle("Root");
        PDOutlineItem child1 = new PDOutlineItem();
        child1.setTitle("child1");
        PDOutlineItem child11 = new PDOutlineItem();
        child11.setTitle("child11");
        PDOutlineItem child12 = new PDOutlineItem();
        child12.setTitle("child12");
        PDOutlineItem child13 = new PDOutlineItem();
        child13.setTitle("child13");
        child11.insertSiblingAfter(child12);
        child12.insertSiblingAfter(child13);
        child1.appendChild(child12);
        root.appendChild(child1);
        outline.appendChild(root);
 
I'm going to attach a couple of generated pdf showing the mentioned issues.
The patch addresses:
PDFBOX-156
PDFBOX-996
PDFBOX-1209
Outlines COUNT is always positive (table 152 "Total number of visible outline items at all levels of the outline")
Outline items COUNT is correctly calculated
NEXT, PREV, LAST and FIRST are are consistently set
unit tested
I added a restriction to methods adding nodes (children or siblings) that throws an exception in case the node is already part of a list (i.e it has a prev or a next) so basically with the patch you cannot create a list of nodes and then add one of them as last child of another node but you'll have to first add the first child and then add siblings to the child.
Those scenarios are currently silently accepted creating invalid outlines (see the attached outline_wrong_first_has_prev.pdf) and would require quite some work to handle all of them so, I'm not sure it's the best solution but at least the user is guided with a message instead of creating an outline where the FIRST item has a PREV.
It breaks the current API and it might be reworked to be less intrusive but since you are on 2.0.0-SNAPSHOT I thought it was ok.
Please let me know if there's anything I can help with.",0,"Tilman Hausherr","Andrea Vacondio",1,5,"11/Feb/15 16:32","17/Mar/16 19:08","14/Feb/15 13:27"
PDFBOX-2678,PDFBOX,"possible NPE in ExtractText tool of trunk",Bug,CLOSED,Minor,Fixed,"1.8.8, 1.8.9, 2.0.0","1.8.9, 2.0.0","Text extraction",None,,"With some PDFs an NPE is thrown.
Here's the patch for it (referring to trunk):
Index: tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java
===================================================================
--- tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java (Revision 1658905)
+++ tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java (Working Copy)
@@ -252,7 +252,7 @@
                                 }
                                 PDComplexFileSpecification spec = (PDComplexFileSpecification) ent.getValue();
                                 PDEmbeddedFile file = spec.getEmbeddedFile();
-                                if (file != null && file.getSubtype().equals("application/pdf"))
+                                if (file != null && file.getSubtype() != null && file.getSubtype().equals("application/pdf"))
                                 {
                                     if (debug)
                                     {",0,"Tilman Hausherr",nullpointer,0,3,"11/Feb/15 17:46","28/Mar/15 14:10","11/Feb/15 18:07"
PDFBOX-2679,PDFBOX,"Blank page rendered with wrong xref start objid",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"From Kevin M. on the users mailing list:
A confidential file doesn't display its image because the objid is unaccessible, due to a malformed xref table:
xref
1 7
0000000000 65535 f
0000000009 00000 n
0000358745 00000 n
0000358842 00000 n
0000359029 00000 n
0000359087 00000 n
0000359138 00000 n
trailer 
The first number (1) means the number of the first object. So it would be 1. The second number(7) is the size of the table. The number 1 is incorrect, it should be 0, because "0000000000 65535 f" is the dummy object 0.
From the pdf spec:
The free entries in the cross-reference table form a linked list, with each free entry containing the object number of the next. The first entry in the table (object number 0) is always free and has a generation number of 65,535; it is the head of the linked list of free objects
The error messages are:
Can't find the object 7 0 (origin offset 359138)
Missing XObject: Im1 (Im1 is the object at 7 0, and is the missing image)",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"11/Feb/15 21:42","17/Mar/16 19:08","24/Mar/15 10:58"
PDFBOX-2680,PDFBOX,"Move multi-pdf classes from util into their own package",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"In PDFBOX-2580 Maruan mentioned that rendering and printing classes were unusual in that they were not in the util package, which made me wonder if some of the classes in util might be better of being in another package. Since the command line utilities were moved into the tools package, util has become the home of helper classes such as Matrix and Hex. However it's also home to some classes which were related to the old command line tools and would now be better off elsewhere:
the 'text' package should contain PDFTextStripper, PDFTextStripperByArea, and PDFMarkedContentExtractor. This would remove the cyclic dependency which currently exists between 'text' and 'util'. Moving PDFTextStreamEngine to 'text' would also allow a cyclic dependency between 'contentstream' and 'util' to be broken.
likewise, a new 'multipdf' package could contain PageExtractor, PDFCloneUtility, PDFMergerUtility, LayerUtility, Overlay, and Splitter. This creates a proper home for classes which handle multiple PDFs and so are not a part of PD and ensures a separation of concern between them and the helper util classes.
This would give us a cleaner foundation for 2.0 moving forwards and reduce the number of Sonar warnings regarding cyclic dependencies.",0,"John Hewson","John Hewson",0,4,"12/Feb/15 00:48","17/Mar/16 19:07","25/Feb/15 21:58"
PDFBOX-2683,PDFBOX,"Remove SignatureInterface dependency from COSDocument",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"COSDocument holds a reference of the SignatureInterface for signing. This should be moved somewhere to the pdmodel package, maybe into PDDocument.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"12/Feb/15 21:59","17/Mar/16 19:07","13/Feb/15 18:59"
PDFBOX-2684,PDFBOX,"Javadoc for COSBase.setNeedToBeUpdate",Improvement,CLOSED,Minor,Fixed,"1.8.8, 2.0.0","2.0.6, 3.0.0 PDFBox",PDModel,None,,"I tried to understand what the COSBase needToBeUpdate flag stands for and I only found this in the COSWriter.
            if(actual != null && objectKeys.containsKey(actual) &&
                    !object.isNeedToBeUpdate() && (cosBase!= null &&
                    !cosBase.isNeedToBeUpdate()))
            {
                return;
            }
I kind of think I got what it's used for but maybe someone who knows better could add some javadoc?
Thanks",0,"Tilman Hausherr","Andrea Vacondio",0,3,"13/Feb/15 10:15","15/May/17 20:28","20/Apr/17 18:53"
PDFBOX-2687,PDFBOX,"ClassCastException when trying to get OutputIntents or add to it",Bug,CLOSED,Major,Fixed,"1.8.6, 1.8.8, 2.0.0","1.8.9, 2.0.0",PDModel,None,,"Form the users mailing list:
Im trying to call "List<PDOutputIntent> outputIntents = doc.getDocumentCatalog().getOutputIntent();" on https://www.dropbox.com/s/u7gwgxpq1656x4d/acme_invoice-42_a1b.pdf?dl=0 <https://www.dropbox.com/s/u7gwgxpq1656x4d/acme_invoice-42_a1b.pdf?dl=0>
The Stacktrace is:
Caused by: java.lang.ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSArray
at org.apache.pdfbox.pdmodel.PDDocumentCatalog.addOutputIntent(PDDocumentCatalog.java:474)
Should the code really contain a cast in PDDocumentCatalog.java:474",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"17/Feb/15 17:25","28/Mar/15 14:10","19/Feb/15 09:56"
PDFBOX-2689,PDFBOX,"Implement page transitions",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,transitions,,"I implemented page transitions as described in the spec 32000-1:2008 chapter 12.4.4.1
I'm attaching the diff file and the test pdf document. Feel free to use it and/or change it.",0,"Tilman Hausherr","Andrea Vacondio",0,4,"18/Feb/15 18:09","17/Mar/16 19:07","19/Feb/15 22:36"
PDFBOX-2692,PDFBOX,"Possibility to use our own and/or overwrite PageDrawer class",Wish,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,features,"java 1.8, windows 7","We use PDFBox to render PDF's. Additionally, we have the posibility to add different kinds of annotation (stamp, marks, free text, notes..) like in a wysiwyg-editor. To do this, it is necessary that we paint these annotations on our own.
Another reason is not to paint all parts: for example we have a pdf with an embedded picture. Behind the picture we have the OCR-text to this picture. This text is only needed for searching und should not be painted.
Thus it would be useful to use our own derived PageDrawer. As I see there are some things to change.
a.) remove the final from PagerDrawer-class.
b.) make some global-variables (graphics, xform, pageSize...) protected,
c.) also some methods like setRenderingHints should be protected
d.) maybe the possibility to say to the PDFRender which PageDrawer should be used.",0,"Andreas Lehmkühler","Manfred Pock",2,7,"25/Feb/15 13:53","17/Mar/16 19:07","07/Jul/15 04:30"
PDFBOX-2693,PDFBOX,"OutOfMemoryError at org.apache.fontbox.cff.IndexData.initData(IndexData.java:95)",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",FontBox,None,,"When trying to render the attached PDF, the following exception is thrown:
~~~
at org.apache.fontbox.cff.IndexData.initData(IndexData.java:95)
at org.apache.fontbox.cff.CFFParser.readIndexData(CFFParser.java:151)
at org.apache.fontbox.cff.CFFParser.parseCIDFontDicts(CFFParser.java:474)
at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:429)
at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:109)
at org.apache.pdfbox.pdmodel.font.PDCIDFontType0.<init>(PDCIDFontType0.java:90)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont(PDFontFactory.java:121)
at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:108)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:93)
at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:50)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:802)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:464)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:438)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:160)
at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:203)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:136)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:69)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:56)
...
~~~
The PDF has its issues - the warning is shown when opening in Adobe Reader: Embedded font YWWLAR+CairoFont-1-0 cannot be selected. Some characters may not be shown or printed correctly.
The expected behavior is to either ignore the error with some characters rendered incorrectly, or to throw a better exception.",0,"Tilman Hausherr","Peter Prikryl",0,3,"26/Feb/15 13:47","18/Jan/16 12:01","26/Feb/15 21:02"
PDFBOX-2695,PDFBOX,"Iterate PDOutlineNode children",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,outline,,"Give an outline item, I need to walk through all its children. The items at each level of the hierarchy form a linked list, chained together through their Prev and Next entries and accessed through the First and Last entries in the parent item so I created a simple patch to allow this kind of code:
if(node !=null){
       for (PDOutlineItem current : node.children()) {
                //do something with the            
       }
}
Given an item, PDOutlineNode.children returns an Iterable that walks through the children until there is no NEXT or NEXT is equals to the starting element.",0,"Tilman Hausherr","Andrea Vacondio",0,3,"02/Mar/15 14:39","17/Mar/16 19:08","02/Mar/15 21:24"
PDFBOX-2698,PDFBOX,"PDFToImage IndexOutOfBoundsException",Bug,CLOSED,Major,Fixed,"1.8.8, 1.8.9, 2.0.0","1.8.9, 2.0.0",None,None,,"When I convert the pdf test file to image I get a Exception :
(I test with the latest trunk commit git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1663941)
> java -jar ./app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage -imageType png testFile.pdf
Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
at java.util.ArrayList.rangeCheck(ArrayList.java:635)
at java.util.ArrayList.get(ArrayList.java:411)
at org.apache.pdfbox.contentstream.operator.text.ShowText.process(ShowText.java:38)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:802)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:464)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processAnnotation(PDFStreamEngine.java:301)
at org.apache.pdfbox.contentstream.PDFStreamEngine.showAnnotation(PDFStreamEngine.java:382)
at org.apache.pdfbox.rendering.PageDrawer.showAnnotation(PageDrawer.java:791)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:164)
at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:203)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:136)
at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:95)
at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:236)
at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:89)
Pages 1 to 6 are ok, only the seventh page is ko",0,"Tilman Hausherr",ccouturi,0,3,"04/Mar/15 21:05","28/Mar/15 14:10","04/Mar/15 21:21"
PDFBOX-2700,PDFBOX,"support JPEG color space code 11 (JCS_YCCK)",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Rendering,None,,"In DCTFilter we have a work around for 4-component images which handles certain color space codes to decide for YCCK and CMYK color space. I have a document (C&EN journal issue, http://cen.acs.org/index.html) with some images returning color space code 11 which should be JCS_YCCK. Adding this code for YCCK type the images display fine.",0,"Timo Boehme","Timo Boehme",0,3,"06/Mar/15 10:57","17/Mar/16 19:07","06/Mar/15 16:01"
PDFBOX-2703,PDFBOX,"Remove javacc generated PDFParser from preflight",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,,"The javacc generated PDFParser within preflight isn't used anymore (I couldn't find any usage in the past going back to 1.8.3) and can be removed.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"10/Mar/15 17:23","17/Mar/16 19:06","10/Mar/15 17:50"
PDFBOX-2704,PDFBOX,"PDPageTree.indexOf doesn't find page numbers",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,PDPageTree,,"I know PDFBOX-2423 is not closed yet so I'm not sure if the issues I'm having are a cause of that.
I'm using the latest trunk and I have issues with the PDPageTree.indexOf method. The javadoc reads Returns the index of the given page, or -1 if it does not exist. which I understand it means in returns -1 if the given page is not found in the page tree correct? If so, the following unit test fails:
 @Test
    public void indexOfNotFoundPage() throws IOException {
        PDDocument doc1 = PDDocument.load(getClass().getClassLoader()
                .getResourceAsStream("pdf/bigger_outline_test.pdf"));
        assertEquals(-1, doc1.getPages().indexOf(new PDPage()));
    }
Another similar issue I have is that PDPageTree.indexOf doesn't find the correct index for a PDPage returned by the PDOutlineItem.findDestinationPage:
@Test
    public void indexOfPageFromOutlineDestination() throws IOException {
        PDDocument doc = PDDocument
                .load(getClass().getClassLoader().getResourceAsStream("pdf/bigger_outline_test.pdf"));
        PDDocumentOutline outline = doc.getDocumentCatalog().getDocumentOutline();
        for (PDOutlineItem current : outline.children()) {
            if (current.getTitle().contains("Second")) {
                assertEquals(3, doc.getPages().indexOf(current.findDestinationPage(doc)));
            }
        }
    }
Also note that indexOf is used by PDPageDestination.findPageNumber which also returns a wrong result.",0,"Tilman Hausherr","Andrea Vacondio",2,4,"10/Mar/15 18:11","17/Mar/16 19:08","23/Apr/15 18:20"
PDFBOX-2707,PDFBOX,"Remove redundant IOUtils.closeQuietly",Improvement,CLOSED,Trivial,Fixed,2.0.0,2.0.0,PDModel,None,,"IOUtils has 4 closeQuietly methods where one with Closeable argument would do.",0,"Tilman Hausherr","Andrea Vacondio",0,3,"11/Mar/15 18:22","17/Mar/16 19:08","11/Mar/15 21:11"
PDFBOX-2708,PDFBOX,"PDDocument.removePage() deletes the last page regardless of parameter passed",Bug,CLOSED,Blocker,Fixed,2.0.0,2.0.0,PDModel,regression,,"This can be easily reproduced using provided example
org.apache.pdfbox.examples.pdmodel.RemoveFirstPage that will delete the last page from document instead the first one.
I think this bug was introduced within the last 3 months as my older snapshot build worked fine.",0,"Tilman Hausherr","Radomir Mladenovic",0,3,"12/Mar/15 22:18","17/Mar/16 19:07","14/Mar/15 16:31"
PDFBOX-2709,PDFBOX,"XFDF import fails when using a field with a "." in the name",Bug,CLOSED,Major,Incomplete,1.8.8,None,AcroForm,None,"java 1.7","When trying to import an XFDF into a simple PDF form with a single field with a decimal in the field name, e.g.: 'name.first', the PDF saved from importFDF has a blank field.",0,"Maruan Sahyoun","Justin Rovang",0,2,"13/Mar/15 22:11","01/Nov/16 17:23","01/Nov/16 17:23"
PDFBOX-2710,PDFBOX,"Form fields missing in 1.8.9 version",Bug,CLOSED,Major,Fixed,1.8.9,1.8.9,AcroForm,None,,"With the 1.8.8 version, printfields outputs:
1 top-level fields were found on the form
|--LKALLLJCAELEPOKIHONKIICKICONPEJB
|  |--LKALLLJCAELEPOKIHONKIICKICONPEJB.form1
|  |  |--LKALLLJCAELEPOKIHONKIICKICONPEJB.form1.x
|  |  |  |--LKALLLJCAELEPOKIHONKIICKICONPEJB.form1.x.f1 = no value available,  type=org.apache.pdfbox.pdmodel.interactive.form.PDTextbox
|  |  |--LKALLLJCAELEPOKIHONKIICKICONPEJB.form1.f2 = no value available,  type=org.apache.pdfbox.pdmodel.interactive.form.PDPushButton
|  |--LKALLLJCAELEPOKIHONKIICKICONPEJB.form2
|  |  |--LKALLLJCAELEPOKIHONKIICKICONPEJB.form2.x
|  |  |  |--LKALLLJCAELEPOKIHONKIICKICONPEJB.form2.x.f1 = Education and Resources > Intro to Clean Benches,  type=org.apache.pdfbox.pdmodel.interactive.form.PDTextbox
|  |  |  |--LKALLLJCAELEPOKIHONKIICKICONPEJB.form2.x.f2 = Intro to Clean Benches,  type=org.apache.pdfbox.pdmodel.interactive.form.PDTextbox
|  |  |--LKALLLJCAELEPOKIHONKIICKICONPEJB.form2.f3 = no value available,  type=org.apache.pdfbox.pdmodel.interactive.form.PDPushButton
With the 1.8.9 version, it outputs:
1 top-level fields were found on the form
|--LKALLLJCAELEPOKIHONKIICKICONPEJB",0,"Maruan Sahyoun","Tilman Hausherr",0,5,"15/Mar/15 12:29","28/Mar/15 14:10","23/Mar/15 10:56"
PDFBOX-2711,PDFBOX,"Japanese text not extracted",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0",2.0.0,None,None,,"ExtractText does not return the text content of this PDF. There are just a few real characters when running 1.8.8, and none with today's 2.0.0 snapshot.
I also attach the output from pdftotext 0.26.5 (from poppler-utils), which seems to get it mostly right.",0,"John Hewson","Daniel Bonniot de Ruisselet",0,3,"16/Mar/15 15:04","17/Mar/16 19:08","08/May/15 23:20"
PDFBOX-2712,PDFBOX,"Remove commented out lines of code",Task,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"In order to clean up the code base commented out lines of code which have not been touched for a longer period of time shall be removed.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"17/Mar/15 11:23","17/Mar/16 19:06","20/Mar/15 11:14"
PDFBOX-2713,PDFBOX,"Preserve the origin pdf version when splitting a pdf",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"PDFBox doesn't preserve the origin pdf version when splitting a pdf. Instead it creates new pdfs using 1.4 as default version.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"17/Mar/15 21:12","17/Mar/16 19:07","17/Mar/15 21:17"
PDFBOX-2714,PDFBOX,"Type1Fonts working on one computer, not another",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,"windows 7, windows","Asked on SO, Tilman suggests I open a JIRA: http://stackoverflow.com/questions/29111310/pdfbox-2-0-0-type1fonts-working-on-one-computer-not-another
I am trying to work out why I'm getting a bunch of `java.lang.IllegalArgumentException: No glyph for U+0057 in font Helvetica-Bold` errors on a Windows 2012 Server dev environment, but not on my local Windows 7 environment.
I built the trunk from scratch, with: `mvn -DskipTests=true install`
on my machine (Win 7), collected the jars and made a very rudimentary test package, by dumping all the jars into a subfolder libs/ and copying the `org/apache/pdfbox/examples `class files to the same directory, to see if the HelloWorld program works.
The [HelloWorld program][1] creates a file, called test.pdf with the message "WHY" as requested, but when I run it on a new machine, I get the following:
C:\EAP-6.3.0\PDFBOXTESTING>java -cp ".;libs/*" org.apache.pdfbox.examples.pdmodel.HelloWorld test.pdf WHY
Exception in thread "main" java.lang.IllegalArgumentException: No glyph for U+0057 in font Helvetica-Bold
at org.apache.pdfbox.pdmodel.font.PDType1Font.encode(PDType1Font.java:303)
at org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:268)
at org.apache.pdfbox.pdmodel.PDPageContentStream.showText(PDPageContentStream.java:316)
at org.apache.pdfbox.examples.pdmodel.HelloWorld.main(HelloWorld.java:59)
I installed Adobe Reader XI on that computer, in case it needed the fonts from Adobe, installed on the system, or who knows.
It's not finding `U+0057`, which is a W, and in my testing, it wasn't finding a bunch of stuff. It basically didn't find anything. so something is fundamentally wrong, maybe the operating system has provided a bad font?
[1]: https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/HelloWorld.java",0,"John Hewson","Daniel Brownell",0,5,"18/Mar/15 06:48","17/Mar/16 19:07","24/Mar/15 20:11"
PDFBOX-2715,PDFBOX,"Pages in a PDF being dropped with just an error-log message",Bug,CLOSED,Major,Fixed,1.8.8,"1.8.8, 2.0.0",PDModel,None,"java 1.7, linux","Trying to excatly pages from PDF documents like this
PDDocument doc = PDDocument.load(new ByteArrayInputStream(pdf));
List allPages = doc.getDocumentCatalog().getAllPages();
But not all pages get read, and the only indication something is wrong is this error-logging:
ERROR org.apache.pdfbox.pdmodel.PDPageNode.getAllKids()#202: No Kids found in getAllKids(). Probably a malformed pdf.
I'm getting one of these error-lines for each page that isn't read. I'm attaching two different files with this problem. One gives me 4 out of 6 pages, and the other gives me none of the 4 pages. Both documents read fine in Acrobat Reader and in Okular where all the pages get shown.",0,"Andreas Lehmkühler","Cecilie Fritzvold",0,3,"18/Mar/15 13:16","19/Mar/15 09:36","18/Mar/15 21:02"
PDFBOX-2716,PDFBOX,"Use saveIncremental() method on a document opened with an InputStream does not work",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Signing,None,,"It does not seem possible to use the saveIncremental() method on a PDF document opened with an InputStream instead of a file.
More details on stackOverflow :
http://stackoverflow.com/questions/29123436/how-to-sign-an-inputstream-from-a-pdf-file-with-pdfbox-2-0-0",0,"Andreas Lehmkühler","Cyril Bremaud",0,6,"18/Mar/15 15:51","09/Apr/16 15:36","28/Jun/15 14:57"
PDFBOX-2717,PDFBOX,"Keep type and subtype for PDWidgetAnnotation created from field",Bug,CLOSED,Minor,Fixed,None,2.0.0,None,None,,"When a PDWidgetAnnotation is created from a field using field.getWidget() the /Type and /Subtype keys are not set. Creating the PDWidgetAnnotation directly sets the fields.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"19/Mar/15 20:55","17/Mar/16 19:07","20/Mar/15 11:14"
PDFBOX-2718,PDFBOX,"Allow to create new AcroForm fields from scratch",Sub-task,CLOSED,Minor,Fixed,2.0.0,2.0.0,AcroForm,None,,"At the moment the PDFBox 1.8 and 2.0 API is targeted to deal with existing form templates. It should be able to instantiate new form fields without creating a stub field dictionary first.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"19/Mar/15 23:57","17/Mar/16 19:07","20/Mar/15 11:13"
PDFBOX-2719,PDFBOX,"The addSignature() method always set the visual signature on the last page of the PDF",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Signing,easyfix,,"The addSignature() method always set the visual signature on the last page of the PDF.
This is certainly due to the following lines in PDDocument class :
PDDocument.java
...
int startIndex = Math.max(Math.min(options.getPage(), 0), pageCount - 1);
PDPage page = catalog.getPages().get(startIndex);
...
I think Math.min and Math.max have been inverted.",0,"Maruan Sahyoun","Cyril Bremaud",0,3,"20/Mar/15 12:00","17/Mar/16 19:07","21/Mar/15 12:17"
PDFBOX-2720,PDFBOX,"Can't sign PDF document with forms or annotations",Bug,CLOSED,Blocker,Fixed,2.0.0,2.0.0,Signing,None,,"It is not possible to sign a PDF document which contains a form.
There is no exception traces.
Please find attached 8 documents :
A document with a visual signature form (does not work) (Doc1)
A probably latex generated document (does not work) (Doc2)
A document with an annotation (does not work) (Doc3WithAnnot)
And the same document without annotation ( which works well ) (Doc3WithoutAnnot)
And their signed release.",0,"Andreas Lehmkühler","Cyril Bremaud",0,5,"20/Mar/15 14:03","24/May/16 14:44","24/May/16 13:50"
PDFBOX-2721,PDFBOX,"Invalid ToUnicode CMap in font",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,FontBox,None,,"Attached PDF file works fine in Adobe Reader, but PDFBox logs warnings:
2015-03-20 15:48:57,573 WARN [org.apache.pdfbox.pdmodel.font.PDFont] (http-0.0.0.0-8080-7) Invalid ToUnicode CMap in font HPDFAA+Thoth-Unicode
It seems that you require "beginbfchar" or "beginbfrange" in CMap. But should it be required?
CMap definition contains "beginnotdefrange" and this is ignored in PDFBox.
PDF Reference says:
beginnotdefchar, endnotdefchar, beginnotdefrange, and endnotdefrange
define notdef mappings from character codes to CIDs. As described in the
section “Handling Undefined Characters” on page 355, a notdef mapping is
used if the normal mapping produces a CID for which no glyph is present in
the associated CIDFont.",0,"Andreas Lehmkühler","Juraj Lonc",0,2,"20/Mar/15 15:01","11/Apr/16 10:28","11/Apr/16 10:28"
PDFBOX-2723,PDFBOX,"PDFBox*.tmp files not deleted by COSParser",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,patch,"windows, linux","When parsing PDFs, temporary files get created under the system temp directory (e.g. PDFBox6525369863339991063.tmp). All files created for each documents are always deleted except for one. So each document parsed adds a new tmp file that never gets deleted. That's likely due to a stream never closed. When processing many PDFs on Linux in the same JVM instance, we get the crashing error: "Too many files open". Changing the max file handle on the OS is not always an option.
I was able to fix this by modifying the COSParser class to close a COSStream instance:
COSParser.java, starting on line 312
    private long parseXrefObjStream(long objByteOffset, boolean isStandalone) throws IOException
    {
        // ---- parse indirect object head
        readObjectNumber();
        readGenerationNumber();
        readExpectedString(OBJ_MARKER, true);

        COSDictionary dict = parseCOSDictionary();
        COSStream xrefStream = parseCOSStream(dict);
        parseXrefStream(xrefStream, (int) objByteOffset, isStandalone);
        xrefStream.close();  // <--- *** NEW LINE ***
        return dict.getLong(COSName.PREV);
    }",0,"Tilman Hausherr","Pascal Essiembre",1,4,"22/Mar/15 04:45","17/Mar/16 19:08","23/Mar/15 05:55"
PDFBOX-2724,PDFBOX,"Importing a XFDF file doesn't populate the field value",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,None,,"As discussed on http://stackoverflow.com/questions/29119002/filling-pdf-fields-with-chinese-characters-garbled/ there seems to be an issue with importing field data from an XFDF file.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"22/Mar/15 16:19","17/Mar/16 19:07","22/Mar/15 17:10"
PDFBOX-2726,PDFBOX,"org.apache.pdfbox.cos.COSArray cannot be cast to org.apache.pdfbox.cos.COSDictionary",Bug,CLOSED,Major,Fixed,"1.8.8, 1.8.9, 2.0.0","1.8.9, 2.0.0",None,JBIG2,,"When I start .convertToImage() this error is occur:
org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap getRGBImage
SEVERE: java.lang.ClassCastException: org.apache.pdfbox.cos.COSArray cannot be cast to org.apache.pdfbox.cos.COSDictionary
java.lang.ClassCastException: org.apache.pdfbox.cos.COSArray cannot be cast to org.apache.pdfbox.cos.COSDictionary
at org.apache.pdfbox.filter.JBIG2Filter.decode(JBIG2Filter.java:73)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:351)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:299)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:225)
at org.apache.pdfbox.pdmodel.common.PDStream.createInputStream(PDStream.java:232)
at org.apache.pdfbox.pdmodel.common.PDStream.getByteArray(PDStream.java:510)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:254)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.mask(PDXObjectImage.java:221)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.applyMasks(PDXObjectImage.java:154)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:365)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:87)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:139)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:801)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:732)
at com.sign.PDFCutter.PDFCut(PDFCutter.java:75)
at com.sign.CopyFileTree.visitFile(CopyFileTree.java:103)
at com.sign.CopyFileTree.visitFile(CopyFileTree.java:21)
at java.nio.file.Files.walkFileTree(Files.java:2667)
at java.nio.file.Files.walkFileTree(Files.java:2739)
at com.sign.Copy.main(Copy.java:158)
and some resulting images are blank, some images in grey shades with fading text",0,"Tilman Hausherr","Dmitry Andreev",0,3,"23/Mar/15 09:25","28/Mar/15 14:10","24/Mar/15 07:32"
PDFBOX-2727,PDFBOX,"Cache color space instances",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Rendering,None,,"I have a PDF from a customer which contains a lot of calls of SetNonStrokingColorSpace and SetStrokingColorSpace. Each time, an embedded color profile resource is loaded via ICC_Profile.getInstance(InputStream). I have attempted to cache the result in PDResources.java as shown in the attached patch. For this particular PDF, this change improves the performance of PDFToImage from 27 seconds down to 5 seconds (the PDF has two pages). I cannot share the customer PDF, so I have attempted to find a similar free one. Unfortunately, in my test suite, I did not find anything with a comparable improvement. The best example I found is in the attached PDF. There the improvement is from 4.9 seconds without caching to 4.1 with caching.",0,"John Hewson","Petr Slaby",1,2,"23/Mar/15 14:47","17/Mar/16 19:08","09/Jul/15 10:11"
PDFBOX-2728,PDFBOX,"java.awt.geom.IllegalPathStateException: missing initial moveto in path definition",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"I get this exception :
java.awt.geom.IllegalPathStateException: missing initial moveto in path definition
 at java.awt.geom.Path2D$Float.needRoom(Path2D.java:280)
 at java.awt.geom.Path2D.closePath(Path2D.java:1769)
 at org.apache.pdfbox.rendering.PageDrawer.closePath(PageDrawer.java:693)
 at org.apache.pdfbox.contentstream.operator.graphics.ClosePath.process(ClosePath.java:35)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:788)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:454)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:425)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:398)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:164)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:164)
 at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:213)
similar to PDFBOX-2189.
I can't include the PDF file for privacy reason but I think a similar solution applied for the other bug could fix this problem too",0,"Tilman Hausherr","Massimo Franzoni",1,3,"25/Mar/15 14:46","17/Mar/16 19:08","30/Mar/15 16:47"
PDFBOX-2729,PDFBOX,"Can't sign encrypted PDF files",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Signing,None,,"It is not possible to sign an encrypted PDF document.
More details here :
http://stackoverflow.com/questions/29232684/signing-an-encrypted-pdf-document-with-pdfbox-2-0-0",0,"Tilman Hausherr","Cyril Bremaud",0,6,"26/Mar/15 12:23","07/Sep/16 17:42","23/Jan/16 12:24"
PDFBOX-2730,PDFBOX,"PDFSplit slow and keeps unused pages",Bug,CLOSED,Major,Fixed,"1.8.9, 2.0.0","1.8.10, 2.0.0",Utilities,None,,"PDF from PDFBOX-1298
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFSplit document.pdf",0,"Andreas Lehmkühler","simon steiner",0,4,"26/Mar/15 12:32","23/Jul/15 06:35","31/Mar/15 17:22"
PDFBOX-2733,PDFBOX,"Nullpointer exception in PDFXrefStreamParser.parse",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0",Parsing,None,"windows 7","with some pdf, an nullpointer is sent during the parsing
Here is the trace :
Caused by: java.lang.NullPointerException
at org.apache.pdfbox.pdfparser.PDFXrefStreamParser.parse(PDFXrefStreamParser.java:91)
at org.apache.pdfbox.pdfparser.COSParser.parseXrefStream(COSParser.java:1836)
at org.apache.pdfbox.pdfparser.COSParser.parseXrefObjStream(COSParser.java:320)
at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:280)
at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:314)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:373)
at ch.ge.afc.ael.commun.piecejointe.UtiPdf.loadDocument(UtiPdf.java:439)",0,"Tilman Hausherr","jerome girardini",1,4,"27/Mar/15 13:56","23/Jul/15 06:35","28/Mar/15 19:21"
PDFBOX-2734,PDFBOX,"Can't create PDF with DeviceN colorspace",Bug,CLOSED,Major,Fixed,"1.8.8, 1.8.9, 2.0.0","1.8.10, 2.0.0",PDModel,DeviceN,,"Reported by Floris in the user mailing list. His PDF didn't have the attributes:
6 0 obj
<<
/Cs1 /DeviceGray
/Cs2 /DeviceN
 >>
endobj
Reasons:
local array overwrites base array
getCOSObject returns name instead of array
setAttributes inflates the array too much (likely accidentally introduced in rev 1429524)
PDF after the fix:
6 0 obj
<<
/Cs1 /DeviceGray
/Cs2 [/DeviceN [/Cyan /Magenta /Yellow /Black /Orange /Green]
 /DeviceCMYK 8 0 R 9 0 R]
>>
endobj
One of the bugs is also in the trunk, I will test this later.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"27/Mar/15 17:32","23/Jul/15 06:35","31/Mar/15 19:10"
PDFBOX-2735,PDFBOX,"Keyboard shortcuts in PDFReader",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,"Swing GUI",patch,,"Some intuitive keyboard shortcuts for pdfreader.
scrolling in the page with up-down arrow keys
Navigating pages with PgUp-PgDn. Although this is now present via +,- keys
Printing with ctrl+p
Opening file with ctrl+o
I've a fix for this which I'm attaching. All previous functionalities are preserved.",0,"Tilman Hausherr","khyrul bashar",0,3,"29/Mar/15 17:58","17/Mar/16 19:07","10/Apr/15 18:10"
PDFBOX-2736,PDFBOX,"First page and last page navigation with keyboard shortcuts in PDFReader",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,"Swing GUI","easyfix patch",,"For navigating first page and last pages of a pdf file, there is no keyboard shortcut like other PDF readers. It's a simple yet intuitive functionality for any PDF reader.
Generally ctrl+End, End are used to jump to the last page while ctrl+Home, Home are used to jump to the first page.
I've written a patch for this.
In View menu, two new entry is added i.e "First page", "Last Page" along with keyboard shortcuts. And view menu items are made responsive e.g. when I'm in the first page "previous page" and "first page" menu entries are disabled.",0,"Tilman Hausherr","khyrul bashar",0,3,"30/Mar/15 19:04","17/Mar/16 19:08","30/Mar/15 21:31"
PDFBOX-2737,PDFBOX,"PDF not converted to Image",Bug,CLOSED,Major,Fixed,1.8.9,1.8.10,Rendering,JPEG2000,"windows 8","Converting the enclosed test.pdf to an image gives me a white page.
Acrobat Reader shows the pdf without a problem.
This is the output of PDFToImage:
Mõr 31, 2015 10:09:09 AM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFORMATION: unsupported/disabled operation: BMC
Mõr 31, 2015 10:09:09 AM org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap getRGBImage
SCHWERWIEGEND: Something went wrong ... the pixelmap doesn't contain any data.
Mõr 31, 2015 10:09:09 AM org.apache.pdfbox.util.operator.pagedrawer.Invoke process
WARNUNG: getRGBImage returned NULL
Mõr 31, 2015 10:09:09 AM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFORMATION: unsupported/disabled operation: EMC
Mõr 31, 2015 10:09:09 AM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFORMATION: unsupported/disabled operation: BDC
Mõr 31, 2015 10:09:09 AM org.apache.pdfbox.util.PDFImageWriter writeImage
INFORMATION: Writing: test1.jpg",0,"Tilman Hausherr","Martin Withake",0,3,"31/Mar/15 08:23","23/Jul/15 06:35","31/Mar/15 16:10"
PDFBOX-2738,PDFBOX,"Make org.apache.pdfbox.pdmodel.PDDocument#getFontsToSubset public",Wish,CLOSED,Trivial,Invalid,2.0.0,2.0.0,PDModel,None,,"Making org.apache.pdfbox.pdmodel.PDDocument#getFontsToSubset public would be great for developers working with their own implementations of org.apache.pdfbox.pdmodel.PDPageContentStream",0,"John Hewson","Vladimir Sinelnikov",0,2,"31/Mar/15 08:40","31/Mar/15 17:28","31/Mar/15 17:26"
PDFBOX-2739,PDFBOX,"Saving merged documents causes IOException",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Writing,None,"windows 7","When some documents are used within a merge, it is not more possible to save the resulting PDDocument, calling method PDDocument.save() throws "java.io.IOException: COSStream has been closed and cannot be read. Perhaps its enclosing PDDocument has been closed?"
Exception in thread "main" java.io.IOException: COSStream has been closed and cannot be read. Perhaps its enclosing PDDocument has been closed?
 at org.apache.pdfbox.cos.COSStream.getFilteredStream(COSStream.java:163)
 at org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1147)
 at org.apache.pdfbox.cos.COSStream.accept(COSStream.java:280)
 at org.apache.pdfbox.cos.COSObject.accept(COSObject.java:158)
 at org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:538)
 at org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:450)
 at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1031)
 at org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:464)
 at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1307)
 at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1215)
 at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:944)
 at ch.ge.afc.ael.commun.piecejointe.Test.main(Test.java:37)
For instance, problem occures with testPopupAnnotation.pdf when I try to merge it to testPDF.pdf (see http://svn.apache.org/repos/asf/tika/trunk/tika-parsers/src/test/resources/test-documents/ for these 2 documents)
Test.java
public static void main(String[] args) throws Exception {
 File dir = new File("D:/temp/b");

 PDFMergerUtility pdfMerge = new PDFMergerUtility();
 PDDocument targetDocument = new PDDocument();


 PDFParser ns = new PDFParser(new File(dir, "testPDF.pdf"));
 ns.parse();
 PDDocument pddDocument1 = ns.getPDDocument();
 pdfMerge.appendDocument(targetDocument, pddDocument1);
 pddDocument1.close();

 ns = new PDFParser(new File(dir, "testPopupAnnotation.pdf"));
 ns.parse();
 PDDocument pddDocument2 = ns.getPDDocument();
 pdfMerge.appendDocument(targetDocument, pddDocument2);
 pddDocument2.close();

 pdfMerge.mergeDocuments();

 FileOutputStream fout = new FileOutputStream(new File(dir, "targetDocument.pdf"));
 targetDocument.save(fout);

}",0,"Tilman Hausherr","jerome girardini",0,4,"01/Apr/15 07:30","17/Mar/16 19:06","01/Apr/15 16:36"
PDFBOX-2740,PDFBOX,"Text extraction failed on Korean PDF",Bug,CLOSED,Major,"Not A Problem","1.8.7, 1.8.8, 1.8.9, 2.0.0",None,"Text extraction",None,,"Trying to extract text on a Korean PDF gives me a lot of warnings :
WARNING: No Unicode mapping for US (33) in font DVCAYA+WtKoBaeumMyungjoL063zb4?Pw
avr. 01, 2015 12:05:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode
WARNING: No Unicode mapping for NAK (33) in font JYLDGG+WtKoBaeumMyungjoL053zb4?Pw
avr. 01, 2015 12:05:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode
WARNING: No Unicode mapping for RS (38) in font WRYULE+WtKoBaeumMyungjoL013zb4?Pw
avr. 01, 2015 12:05:32 PM org.apache.pdfbox.pdmodel.font.PDFont <init>
WARNING: Invalid ToUnicode CMap in font FZEFOY+WtKoBaeumGothicL0422b4?Pw
avr. 01, 2015 12:05:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode
WARNING: No Unicode mapping for DEL (33) in font FZEFOY+WtKoBaeumGothicL0422b4?Pw
avr. 01, 2015 12:05:32 PM org.apache.pdfbox.pdmodel.font.PDFont <init>
WARNING: Invalid ToUnicode CMap in font OOLNBG+WtKoBaeumGothicL0122b4?Pw
avr. 01, 2015 12:05:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode
WARNING: No Unicode mapping for SOH (33) in font OOLNBG+WtKoBaeumGothicL0122b4?Pw
and the result is not readable. The pdf is containing the necessary conversion table because every pdf reader (Desktop or Mobile) let me copy and past the text without problem.",0,"John Hewson","Julien Ortega",1,5,"01/Apr/15 18:24","23/Feb/16 19:20","23/Feb/16 19:20"
PDFBOX-2741,PDFBOX,"IndexOutOfBoundsException when calling PDSeparation.setAlternateColorSpace",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0",PDModel,Separation,,"From Floris in the user mailing list:
I am trying to define a Separation color space but get the following error message if I try to run the program posted beneath. The error seems to be quite local; coming only from the setAlternateColorSpace. What is going on here? I am using org.apache.pdfbox:pdfbox:app-1.8.10-20150327.210556-4 (in this version DeviceN is working) and java version 1.8.0_40-ea.
Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 2, Size: 2
    at java.util.ArrayList.rangeCheck(ArrayList.java:653)
    at java.util.ArrayList.set(ArrayList.java:444)
    at org.apache.pdfbox.cos.COSArray.set(COSArray.java:148)
    at org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.setAlternateColorSpace(PDSeparation.java:182)
    at com.here.devicentest.DeviceNTest.WriteSeprationPDF(DeviceNTest.java:463)
    at com.here.devicentest.DeviceNTest.main(DeviceNTest.java:43) 
The cause is this initialisation:
public PDSeparation()
    {
        array = new COSArray();
        array.add( COSName.SEPARATION );
        array.add( COSName.getPDFName( "" ) );
    }
However the separation colorspace has 4 elements.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"01/Apr/15 18:53","23/Jul/15 06:35","01/Apr/15 22:02"
PDFBOX-2742,PDFBOX,"PDFSplit ignores global resources",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10",1.8.10,"Utilities, Writing",None,"linux, java","When using PDFsplit to split the attached one page doc in single pages the result page is incomplete.",0,"Andreas Lehmkühler","Wolfgang S. Kechel",0,4,"01/Apr/15 19:42","23/Jul/15 06:35","18/Jul/15 14:34"
PDFBOX-2743,PDFBOX,"Can't create PDF with PDIndexed colorspace",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10",1.8.10,PDModel,None,,"The PDIndexed class has the same two bugs that I fixed for the PDSeparation class in PDFBOX-2741: array overwrites base field and should be deleted, getCOSObject should be overriden to return array.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"01/Apr/15 21:46","23/Jul/15 06:35","01/Apr/15 22:02"
PDFBOX-2744,PDFBOX,"Add validation check for setNonStrokingColor and setStrokingColor",Improvement,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0",Writing,None,,"Validate parameters and check that the correct colorspace is active. Currently this isn't done, see here, where a user was able to call a method meant for DeviceGray although the selected colorspace was Separation:
https://mail-archives.apache.org/mod_mbox/pdfbox-users/201504.mbox/%3C551C8867.1000805%40gmail.com%3E",0,"Tilman Hausherr","Tilman Hausherr",0,2,"02/Apr/15 17:45","23/Jul/15 06:35","03/Apr/15 14:07"
PDFBOX-2745,PDFBOX,"PDPageXYZDestination zoom property can't be set lower than 100%",Bug,CLOSED,Minor,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0",PDModel,None,"windows 7, java 1.8, eclipse","The zoom property of PDPageXYZDestination is currently an int, which means it can't be anything that isn't a multiple of 100%, as the zoom level is measured between 0 (=0%) and 1 (=100%), or higher, not between 0 and 100.
Therefore it should be changed to a float.",0,"Tilman Hausherr","Gilad Denneboom",0,3,"03/Apr/15 20:47","23/Jul/15 06:35","03/Apr/15 22:38"
PDFBOX-2746,PDFBOX,"PDPageContentStream.saveGraphicsState() saves wrong nonStrokingColor and throws an exception",Bug,CLOSED,Blocker,Fixed,2.0.0,2.0.0,PDModel,None,,"Method PDPageContentStream.saveGraphicsState() has the following code:
if (!nonStrokingColorSpaceStack.isEmpty())
{
nonStrokingColorSpaceStack.push(strokingColorSpaceStack.peek());
}
Notice peek of strokingColorSpaceStack instead of nonStrokingColorSpaceStack. Needless to say it also throws an exception if strokingColorSpaceStack was not set.",0,"Tilman Hausherr","Radomir Mladenovic",0,3,"04/Apr/15 19:57","17/Mar/16 19:08","04/Apr/15 20:08"
PDFBOX-2748,PDFBOX,"Recent files in PDF reader",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,"Swing GUI",patch,,"A recently opened file list containing menu in pdf reader will be a nice feature in PDF reader.
I've made a patch for this. A new package under org.apache.pdfbox.tools is created named util which contains the class RecentFiles so that this can be used in feature improvement of other GUI tools PDFBox provides.
In RecentFiles class, file path string is saved in preference by converting and breaking them into byte array. To do That, I've followed this post .
I'm saying this to help PDFBox to make an informed decision concerning licences issues if there is any.",0,"Tilman Hausherr","khyrul bashar",1,5,"07/Apr/15 10:40","17/Mar/16 19:07","14/Apr/15 17:43"
PDFBOX-2750,PDFBOX,"Rendering in poor quality in 2.0 but not in 1.8.*",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"The attached PDF is rendered in poor quality in 2.0, but not in 1.8.* (submitted by Vanja K. on the user mailing list).",0,"John Hewson","Tilman Hausherr",0,4,"07/Apr/15 18:01","17/Mar/16 19:07","08/Apr/15 22:36"
PDFBOX-2751,PDFBOX,"Are there any option to read bookmarks rather than table of contents. I have noticed that getDocumentCatalog().getDocumentOutline() reads only table of contents not bookmarks.",Bug,CLOSED,Major,"Not A Problem",1.8.0,None,PDModel,None,,"Are there any option to read bookmarks rather than table of contents. I have noticed that getDocumentCatalog().getDocumentOutline() reads only table of contents not bookmarks.",0,"Tilman Hausherr","Senthilvinayaham Murugan",0,2,"07/Apr/15 18:29","07/Apr/15 20:15","07/Apr/15 20:15"
PDFBOX-2752,PDFBOX,"Support TTC font files","New Feature",CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"We need to support TrueType collections (TTC) files. It shouldn't be too difficult as they are simply a bundle of TTF files in a single container.",0,"John Hewson","John Hewson",1,2,"08/Apr/15 22:43","17/Mar/16 19:08","09/Apr/15 18:47"
PDFBOX-2753,PDFBOX,"Improve rendering of filled thin lines",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"While working on PDFBOX-1658 I noticed that the file also contains some thin lines which disappear when rendering at lower resolutions. The problem is due to the PDF having filled paths with a width < 1px being used, rather than using stroked paths. Because these paths are rectangular, they're triggering our heuristic gradient detector which disables anti-aliasing.
The solution is to increase the threshold for disabling anti-aliasing to paths with a width and height > 1, and this file now renders perfectly, even at 72 dpi.
See the discussion in PDFBOX-1658 for further information.",0,"John Hewson","John Hewson",0,2,"09/Apr/15 18:57","17/Mar/16 19:06","11/Aug/15 00:43"
PDFBOX-2758,PDFBOX,"Support additional annotation types when importing XFDF files",Improvement,CLOSED,Major,Fixed,"1.8.9, 2.0.0",2.0.0,PDModel,None,,"When importing an XFDF file an IOException is generated if the annotation type is not text",0,"Maruan Sahyoun","Maruan Sahyoun",1,5,"16/Apr/15 12:14","17/Mar/16 19:08","14/Jun/15 07:33"
PDFBOX-2759,PDFBOX,"NPE in BaseParser.parseCOSDictionaryValue() due to object reference in content stream",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"java.lang.NullPointerException
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:235)
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:311)
 at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:217)
 at org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:47)
 at org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:144)
 at org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:157)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:477)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:456)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:167)
 at org.apache.pdfbox.preflight.content.PreflightContentStream.validatePageContentStream(PreflightContentStream.java:72)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateContent(SinglePageValidationProcess.java:186)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:89)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:83)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:55)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:60)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:48)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:83)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:121)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:164)
 at com.mycompany.preflightmasstest.PreflightChecker.run(PreflightChecker.java:49)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 at java.lang.Thread.run(Unknown Source)
The cause is a malformed content stream:
(186) Tj
-132.88 -0.24 TD
/F1 10.00 Tf
(TOTAL RESOURCES:) Tj
162.08 0.00 TD
(\(DAYS\)) Tj
155.92 16.48 TD
(February  15, 2001) Tj
ET
Q 0 g 0 G
endstream
endobj
649 0 obj
4096
endobj
647 0 obj
<<
/Type /Page
/MediaBox [0 0 612 792]
/Parent 3 0 R
/Resources <</ProcSet [ /PDF /Text ] /Font << /F0 12 0 R /F1 13 0 R >> >>
/Contents 648 0 R
/CropBox [0 0 612 792]
>>
endobj
BaseParser.parseCOSDictionaryValue() is used both by PDFParser and by PDFStreamParser because these have a few things in common, e.g. dictionaries. The difference is that "document" is null for a content stream, so document.getObjectFromPool() fails.
However the spec tells us: "Indirect objects and object references shall not be permitted at all" in content streams. I will throw an exception instead.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Apr/15 17:51","17/Mar/16 19:07","16/Apr/15 18:32"
PDFBOX-2760,PDFBOX,"NPE in MoveText.process()",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"java.lang.NullPointerException
 at org.apache.pdfbox.contentstream.operator.text.MoveText.process(MoveText.java:41)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:829)
 at org.apache.pdfbox.preflight.content.PreflightContentStream.processOperator(PreflightContentStream.java:140)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:810)
 at org.apache.pdfbox.contentstream.operator.text.MoveTextSetLeading.process(MoveTextSetLeading.java:45)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:829)
 at org.apache.pdfbox.preflight.content.PreflightContentStream.processOperator(PreflightContentStream.java:140)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:490)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:456)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:167)
 at org.apache.pdfbox.preflight.content.PreflightContentStream.validatePageContentStream(PreflightContentStream.java:72)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateContent(SinglePageValidationProcess.java:186)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:89)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:83)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:55)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:60)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:48)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:83)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:121)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:164)
 at com.mycompany.preflightmasstest.PreflightChecker.run(PreflightChecker.java:49)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 at java.lang.Thread.run(Unknown Source)
The cause is this:
ET
240.48 515.64 1.44 0.6 re
f
243.36 515.64 1.44 0.6 re
f
246.24 515.64 1.44 0.6 re
f
249.12 515.64 1.44 0.6 re
f
252 515.64 1.44 0.6 re
f
254.88 515.64 1.44 0.6 re
f
257.76 515.64 1.44 0.6 re
f
260.64 515.64 1.44 0.6 re
f
263.52 515.64 1.44 0.6 re
f
266.4 515.64 1.44 0.6 re
f
269.28 515.64 1.44 0.6 re
f
23.93.96 1.44 0.6 re
f
1 .0.44--32 -1.18 TD
i.e. the operator is called outsitde of BT...ET.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Apr/15 20:14","17/Mar/16 19:08","16/Apr/15 20:20"
PDFBOX-2762,PDFBOX,"remove parseCOSStream() call from PDFStreamParser",Task,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"This code is found in PDFStreamParser
                if (c == '<')
                {
                    COSDictionary pod = parseCOSDictionary();
                    skipSpaces();
                    if ((char)pdfSource.peek() == 's')
                    {
                        retval = parseCOSStream( pod );
                    }
                    else
                    {
                        retval = pod;
                    }
                }
This is incorrect. PDFStreamParser is for content streams. There are no streams in content streams, the spec requires "All streams shall be indirect objects". An "indirect object" is something between obj and endobj. But indirect objects are not allowed in content streams: "Indirect objects and object references shall not be permitted at all". So parseCOSStream() will never be called. Thus the new code will be
                if (c == '<')
                {
                    retval = parseCOSDictionary();
                }
To be sure, I tested my own test set and the digitalcopora set (250000 files) to see whether parseCOSStream is ever called in PDFStreamParser. No it isn't. How did this incorrect code end up there? Don't know, but it has been there since 2002.
http://pdfbox.cvs.sourceforge.net/viewvc/pdfbox/pdfbox/src/org/pdfbox/pdfparser/PDFStreamParser.java?revision=1.1&view=markup
Why do I care about this? It is related to a posting in a mailing list by Andrea Vacondio who mentioned that there are several versions of parseCOSStream(), so I'm trying to clean up.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Apr/15 16:42","17/Mar/16 19:06","17/Apr/15 16:47"
PDFBOX-2764,PDFBOX,"Allow setting extended graphics state in PDPageContentStream",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"I use PDExtendedGraphicsState to draw with transparency. For this to work, I register the extended graphics state, then call PDPageContentStream.appendRawCommands("/name gs\n");
appendRawCommands() has been deprecated in 2.0.0. I need a way of doing this, so please either un-deprecate appendRawCommands(), or add something like:
public void setExtendedGraphicsState(PDExtendedGraphicsState state)
{
    COSName egsName = resources.add(state);
    writeOperand(egsName);
    writeOperator("gs");
}",0,"Tilman Hausherr","Jesse Long",1,3,"20/Apr/15 10:33","17/Mar/16 19:06","20/Apr/15 19:34"
PDFBOX-2765,PDFBOX,"Add method to subset fonts for document pre-save","New Feature",CLOSED,Minor,"Not A Problem",2.0.0,None,Writing,None,,"I have a custom COSWriter which compresses all streams and runs a SHA1 sum over each object, only writing one instance of each object with the same SHA1 sum.
This really helps compress PDFs.
I use this by calling MyCustomCOSWriter.write(PDDocument);
The trouble is that I have no way of calling the font subsetting that happens in PDDocument.save().
Could we have a method to perform that font subsetting manually?",0,"John Hewson","Jesse Long",0,2,"20/Apr/15 11:35","19/May/15 17:06","19/May/15 17:06"
PDFBOX-2766,PDFBOX,"Missing PDDocument.load() overload","New Feature",CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"Please add public PDDocument.load(InputStream, String password, boolean useScractFile);",0,"Tilman Hausherr","Jesse Long",1,3,"20/Apr/15 11:58","17/Mar/16 19:08","20/Apr/15 17:05"
PDFBOX-2767,PDFBOX,"ClassCastException in PDDocument.addSignature",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0",Signing,None,,"As reported here in 2013:
http://stackoverflow.com/questions/17452869/pdfbox-add-visual-signature-cosobject-cast-error
Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSDictionary at org.apache.pdfbox.pdmodel.PDDocument.addSignature(PDDocument.java:474)
The cause is explained in the answer by Michael Klink, our code fails with an object reference.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"20/Apr/15 21:07","23/Jul/15 06:35","20/Apr/15 21:20"
PDFBOX-2768,PDFBOX,"Remove VisualSignatureParser",Task,CLOSED,Major,Fixed,2.0.0,2.0.0,"Parsing, Signing",None,,"As discussed with Thomas Chojecki in the dev mailing list - remove VisualSignatureParser, and use PDFParser instead. If successful, this will also allow to remove one of two implementations of parseCOSStream(), as suggested by Andrea Vacondio a few weeks ago.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"20/Apr/15 21:32","17/Mar/16 19:08","25/Apr/15 06:26"
PDFBOX-2769,PDFBOX,"NPE when saving encrypted file",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0","Crypto, Writing",None,,"Mailing list user gets this when loading and then saving an encrypted file (of which he didn't know it was encrypted):
java.lang.NullPointerException
    at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.computeRevisionNumber(StandardSecurityHandler.java:129)
    at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareDocumentForEncryption(StandardSecurityHandler.java:332)
    at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1254)
    at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1215)
    at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:958)
    at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:930) 
At the very least, we should bring an IllegalStateException with a useful message telling what to do.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"22/Apr/15 05:38","23/Jul/15 06:35","22/Apr/15 18:40"
PDFBOX-2770,PDFBOX,"Provide the sources along with SNAPSHOT releases",Wish,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"Andrew Munn asked on users@ to provide the sources along with our SNAPSHOT releases.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"22/Apr/15 06:48","17/Mar/16 19:08","31/May/15 10:59"
PDFBOX-2771,PDFBOX,"COSString encodes Euro sign wrongly",Bug,CLOSED,Critical,Fixed,2.0.0,2.0.0,None,None,,"When setting the value of COSString to the Euro sign the encoding is wrong
    COSString string = new COSString("€");
    System.out.println(string);
produces this output
    COSString{¬}
whereas the same code using 1.8 produces the correct result
    COSString{€}",0,"Maruan Sahyoun","Maruan Sahyoun",1,3,"22/Apr/15 08:44","17/Mar/16 19:07","23/Apr/15 06:24"
PDFBOX-2772,PDFBOX,"EI token lost for rewrite",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0","Parsing, Writing",regression,,"From Lukas S. in the dev mailing list:
a co-worker and i are currently developing a service for searching and replacing content in pdf documents based on pdfbox. We started our project with the 1.8.2 version of pdfbox and just trying to migrated to 1.8.8 recently.
On changing to version 1.8.8 we are running into troubles with pdf content concerning inline images. Our code study of the differences between those versions of pdfbox led us to the handling of the EI operator as reason of our troubles.
In version 1.8.2 the method parseNextToken() of the org.apache.pdfbox.pdfparser.PDFStreamParser does an unread of the EI token on inline images. In newer versions this unread of the EI token doesn't exist anymore with the following comment "// the EI operator isn't unread, as it won't be processed anyway".
As a consequence the token sets of a document containing an inline image delivered by the PDFStreamParser can't be used to (re)render a valid pdf document by the ContentStreamWriter.
The reason is the missing token for the EI operator. Maybe, that the EI token doesn't trigger any further processing, but it is still necessary to represent the delimiter in the token sequence.
On the other side if a inline image should be part of a pdf page and is inserted as a token set manually, the EI token must also be present in the token set, so that the ContentStreamWriter is able to create a correct pdf document.
From our point of view there are two simple approaches to get a more consistent internal representation of pdf documents with pdfbox concerning inline images. Either represent the EI operator as a token (revert to handling in version 1.8.2.) explicitly or extend the writeObject method in the ContentStreamWriter to append the EI operator implicitly.
THAT is what I call an excellent bug report I think that the 2nd solution you suggested is the better one.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"22/Apr/15 16:55","23/Jul/15 06:35","22/Apr/15 17:14"
PDFBOX-2773,PDFBOX,"ClassCastException in PDDocumentCatalog.java:339",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0",PDModel,None,,"this issue is similar to PDFBOX-2687. I was calling document.getDocumentCatalog().getOutputIntents();
and got a
java.lang.ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSDictionary
Here is the file where the error occurs the output intent was set with pdfbox 1.8.6/7/8 not sure.
https://www.dropbox.com/s/9fpytrdggzehv7s/20120312-Example.pdf?dl=0",0,"Tilman Hausherr",Vadimo,0,3,"23/Apr/15 21:20","23/Jul/15 06:35","24/Apr/15 08:38"
PDFBOX-2775,PDFBOX,"ArrayIndexOutOfBoundsException in PDFTextStripper.processTextPosition()",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",beads,,"Reported by Andrew M. in the user mailing list:
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 3
 at java.util.Vector.get(Vector.java:744)
 at org.apache.pdfbox.text.PDFTextStripper.processTextPosition(PDFTextStripper.java:903)
 at org.apache.pdfbox.text.PDFTextStripperByArea.processTextPosition(PDFTextStripperByArea.java:132)
 at org.apache.pdfbox.text.PDFTextStreamEngine.showGlyph(PDFTextStreamEngine.java:229)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:717)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.showTextStrings(PDFStreamEngine.java:627)
 at org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted.process(ShowTextAdjusted.java:38)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:829)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:490)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:456)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:167)
 at org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:117)
 at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:347)
 at org.apache.pdfbox.text.PDFTextStripperByArea.extractRegions(PDFTextStripperByArea.java:113)
 at testpdfbox20.ExtractTextError.textFromBox(ExtractTextError.java:25)
 at testpdfbox20.ExtractTextError.main(ExtractTextError.java:45)
public class ExtractTextError
{
    static String textFromBox(PDDocument doc, int x, int y, int w, int h, int page)
            throws IOException
    {
        PDFTextStripperByArea stripper = new PDFTextStripperByArea();
        Rectangle rect = new Rectangle(x, y - h, w, h);
        stripper.addRegion("region", rect);
        int pageCount = doc.getDocumentCatalog().getPages().getCount();
        System.out.println("getting text from page #" + page + " of " + pageCount + " in doc.");
        if (page <= pageCount)
        {
            PDPage pp = doc.getDocumentCatalog().getPages().get(page - 1);
            stripper.extractRegions(pp);
            String text = stripper.getTextForRegion("region");
            System.out.println("text=" + text);
            return text;
        }
        else
        {
            return "No page #" + page;
        }
    }

    public static void main(String[] args) throws IOException
    {
        PDDocument doc = PDDocument.load(new File("jaf-1-150219.pdf"));
        textFromBox(doc, 33, 159, 216, 43, 1);
    }
}",0,"Tilman Hausherr","Tilman Hausherr",0,2,"26/Apr/15 21:20","17/Mar/16 19:08","21/Oct/15 21:13"
PDFBOX-2777,PDFBOX,"Create convenience method to create an XImage object",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"As suggested by John Hewson on the user mailing list. The convenience method PDImageXObject.createFromFile() will replace the long code that is in the ImageToPDF and AddImageToPDF examples.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"28/Apr/15 18:27","17/Mar/16 19:07","28/Apr/15 19:13"
PDFBOX-2778,PDFBOX,"PDF to Image conversion fails with "Invalid code word encountered"",Bug,CLOSED,Major,Fixed,"1.8.9, 2.0.0","1.8.10, 2.0.0",Rendering,"CCITTFaxDecode ccitt",,"One real-life PDF throws
pdfbox-1.8.9> ./pdf-to-image.sh pdf/invalid-code-word-01.pdf
java -jar pdfbox-app-1.8.9.jar PDFToImage pdf/invalid-code-word-01.pdf
Apr 28, 2015 8:57:43 PM org.apache.pdfbox.util.operator.pagedrawer.Invoke process
SEVERE: java.io.IOException: Invalid code word encountered
java.io.IOException: Invalid code word encountered
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode.getNextCodeWord(CCITTFaxG31DDecodeInputStream.java:360)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode.getNextCodeWord(CCITTFaxG31DDecodeInputStream.java:358)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode.getNextCodeWord(CCITTFaxG31DDecodeInputStream.java:358)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode.getNextCodeWord(CCITTFaxG31DDecodeInputStream.java:358)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode.getNextCodeWord(CCITTFaxG31DDecodeInputStream.java:358)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode.getNextCodeWord(CCITTFaxG31DDecodeInputStream.java:358)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode.getNextCodeWord(CCITTFaxG31DDecodeInputStream.java:358)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode.getNextCodeWord(CCITTFaxG31DDecodeInputStream.java:358)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode.getNextCodeWord(CCITTFaxG31DDecodeInputStream.java:358)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode.getNextCodeWord(CCITTFaxG31DDecodeInputStream.java:358)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode.getNextCodeWord(CCITTFaxG31DDecodeInputStream.java:358)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream.decodeLine(CCITTFaxG31DDecodeInputStream.java:143)
at org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream.read(CCITTFaxG31DDecodeInputStream.java:104)
at java.io.InputStream.read(InputStream.java:170)
at java.io.FilterInputStream.read(FilterInputStream.java:133)
at org.apache.pdfbox.io.ccitt.FillOrderChangeInputStream.read(FillOrderChangeInputStream.java:45)
at java.io.FilterInputStream.read(FilterInputStream.java:107)
at org.apache.pdfbox.io.IOUtils.copy(IOUtils.java:68)
at org.apache.pdfbox.io.IOUtils.toByteArray(IOUtils.java:52)
at org.apache.pdfbox.filter.CCITTFaxDecodeFilter.decode(CCITTFaxDecodeFilter.java:110)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:379)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:291)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:225)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDCcitt.getRGBImage(PDCcitt.java:201)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:87)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:139)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:801)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:130)
at org.apache.pdfbox.PDFToImage.main(PDFToImage.java:226)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:96)",0,"Tilman Hausherr","Siegfried Goeschl",1,3,"28/Apr/15 19:05","23/Jul/15 06:35","30/Apr/15 16:55"
PDFBOX-2781,PDFBOX,"Opening pdf document after encrypting it with PDFBox throws IllegalBlockSizeException",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0","Crypto, PDModel, Writing",None,"java 1.7","I'm trying to encrypt pdf document as per [1] like this:
PDDocument doc = PDDocument.loadNonSeq(getClass().getResourceAsStream("/testform_protected.pdf"), null);

int keyLength = 128; // 40 or 128; 256 will be available in version 2.0
AccessPermission ap = doc.getCurrentAccessPermission();

StandardProtectionPolicy spp = new StandardProtectionPolicy("12345", "", ap);
spp.setEncryptionKeyLength(keyLength);
spp.setPermissions(ap);
doc.protect(spp);

File outFile = new File("./target/testform_saved.pdf");

doc.save(outFile);
doc.close();

PDDocument loaded = PDDocument.loadNonSeq(outFile, null);
It works fine but opening the encrypted document with PDFBox (last line of above code) throws:
org.apache.pdfbox.exceptions.WrappedIOException
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:371)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptString(SecurityHandler.java:577)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decryptString(NonSequentialPDFParser.java:1571)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decryptDictionary(NonSequentialPDFParser.java:1535)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decrypt(NonSequentialPDFParser.java:1596)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1460)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1343)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:383)
 at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:886)
 at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1273)
 at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1256)
 at com.remion.bronto.proex.pdf.PDFBoxEncryptionTest.testEncryptDecrypt(PDFBoxEncryptionTest.java:30)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:606)
 at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
 at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
 at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
 at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
 at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
 at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
 at org.testng.TestRunner.privateRun(TestRunner.java:767)
 at org.testng.TestRunner.run(TestRunner.java:617)
 at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
 at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
 at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
 at org.testng.SuiteRunner.run(SuiteRunner.java:240)
 at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
 at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
 at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
 at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
 at org.testng.TestNG.run(TestNG.java:1057)
 at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
 at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
 at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
Caused by: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher
 at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:750)
 at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:676)
 at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:313)
 at javax.crypto.Cipher.doFinal(Cipher.java:1970)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:351)
 ... 35 more
Opening the saved document with Acrobat works fine.
[1] http://pdfbox.apache.org/1.8/cookbook/encryption.html",0,"Tilman Hausherr","Samuli Saarinen",0,3,"29/Apr/15 07:55","23/Jul/15 06:35","29/Apr/15 19:30"
PDFBOX-2782,PDFBOX,"Enhance toString() output for AcroForm fields",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,AcroForm,None,,"As Tilman Hausherr requested there should be some more information provided for an AcroForm field's toString() method",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"30/Apr/15 17:34","17/Mar/16 19:08","30/Apr/15 17:48"
PDFBOX-2786,PDFBOX,"PDPageDestination page index off by one",Bug,CLOSED,Major,Fixed,"1.8.9, 2.0.0","1.8.10, 2.0.0",PDModel,None,,"When creating a new bookmark with the same page number as an existing bookmark, the resulting destination is offset by 1 compared to the old destination.
This results in the bookmark being set for the next page, which could be a non-existing page.
I've added a class with an example pdf and my own output pdf. Run with argument of a path to where you have the pdf, including a trailing slash.",0,"Tilman Hausherr","Johanneke Lamberink",0,4,"04/May/15 14:32","23/Jul/15 06:35","07/May/15 16:48"
PDFBOX-2788,PDFBOX,"Seemingly good document gets semi-corrupted",Bug,CLOSED,Major,Fixed,1.8.9,1.8.10,Writing,None,"java 1.7, ubuntu","I use PdfBox to insert a little bit of text at the top of my PDF-documents. I have found one case (one input document) where the resulting document appears to become semi-corrupted by PdfBox.
I will try to attach to this Jira issue a zip file with the PDF document in case and a small, self-contained Java application that allows you to easily reproduce the problem.
The text I try to insert is inserted okay and is not the problem. The problem is that other parts of the documents seem to get destroyed. You see this by comparing the original document with the processed document in a PDF document viewer.
The problem manifests itself in different ways depending on which PDF document viewer application I use. I have tried Evince (comes as default on Ubuntu Linux 14.04), Firefox (also as default in Ubuntu), Google Chrome, and Adobe Acrobat Reader v.11 (both on Windows 7 Enterprise and in Ubuntu with Wine, the Windows emulator).
I you use for example Adobe ACrobat Reader, look in particular for the logo image in the upper right corner of both pages, the fonts and the formatting of the line on the second page near the bottom that says "Fakturasum: 2 572,50".",0,"Tilman Hausherr","Are Husby",0,3,"06/May/15 09:30","23/Jul/15 06:35","06/May/15 17:40"
PDFBOX-2789,PDFBOX,"TTF encoding issues",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"I've noticed some issues when trying to encode text using embedded TTF fonts (e.g. filling forms). There's a special case where we use the font's built-in encoding via the cmap finding method described in the PDF spec. The problem is that in this special case, we treat the Encoding as null, which breaks some of the assumptions of the encode(...) method.
The first thing to do is to handle the case for TTF where encoding is null.
A second idea is to synthesise and Encoding for the TTF, so that a PDTrueType font has a Encoding just like any other font. That's a bit more tricky, but it would be conceptually much cleaner.",0,"John Hewson","John Hewson",0,1,"06/May/15 17:42","17/Mar/16 19:07","06/May/15 17:44"
PDFBOX-2790,PDFBOX,"Syntax error in DOAP file release section",Bug,CLOSED,Major,Fixed,2.0.0,None,Documentation,DOAP,,"DOAP files can contain details of multiple release Versions, however each must be listed in a separate release section, for example:
<release>
      <Version>
        <name>Apache XYZ</name>
        <created>2015-02-16</created>
        <revision>1.6.2</revision>
      </Version>
</release>
<release>
      <Version>
        <name>Apache XYZ</name>
        <created>2014-09-24</created>
        <revision>1.6.1</revision>
      </Version>
</release>
Please can the project DOAP be corrected accordingly?
Thanks.",0,"Tilman Hausherr",Sebb,0,3,"08/May/15 17:25","18/May/15 17:01","18/May/15 17:01"
PDFBOX-2791,PDFBOX,"Provide access to Type 1 font data",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,FontBox,None,,"I was analysing some PDF files recently and wanted to dump the repaired Type 1 font stream, however there's no API which provides access to this.",0,"John Hewson","John Hewson",0,1,"08/May/15 23:26","17/Mar/16 19:08","08/May/15 23:27"
PDFBOX-2792,PDFBOX,"Text extraction ignores bookmarks",Bug,CLOSED,Major,Fixed,"1.8.9, 2.0.0","1.8.10, 2.0.0","Text extraction",regression,,"As reported by Noam S. on the user mailing list:
My problem is that when trying to getText(doc) form a certain section of the pdf using setStartBookmark(item) and setEndBookmark(item) I get all the text rather than just the text from the specified section.
WhiIe trying to resolve this I realized that the writeText(doc, outputStream) method always calls resetEngine() method. That will reset all the parameters and delete the bookmarks I set.
The two lines that reset the bookmarks were added to resetEngine in PDFBOX-1808 in [ https://svn.apache.org/r1553175 ] in an attempt to save some memory.
Another weird segment can be found in the trunk:
I also found another weird piece of code in the trunk, which would mean that text extraction would fail if start and end bookmarks are identical:
        if (startPage != null && endPage != null &&
            startBookmark.getCOSObject() == endBookmark.getCOSObject())
        {
            // this is a special case where both the start and end bookmark
            // are the same but point to nothing.  In this case
            // we will not extract any text.
            startBookmarkPageNumber = 0;
            endBookmarkPageNumber = 0;
        }
earlier, that segment was:
       if( startBookmarkPageNumber == -1 && startBookmark != null &&
                endBookmarkPageNumber == -1 && endBookmark != null &&
                startBookmark.getCOSObject() == endBookmark.getCOSObject() )
        {
            //this is a special case where both the start and end bookmark
            //are the same but point to nothing.  In this case
            //we will not extract any text.
            startBookmarkPageNumber = 0;
            endBookmarkPageNumber = 0;
        }
which makes more sense. The change was made last year in rev [ https://svn.apache.org/r1634252 ] as part of the pagetree refactoring.
I am writing a test to prevent this from breaking in the future.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/May/15 05:42","23/Jul/15 06:35","10/May/15 14:27"
PDFBOX-2793,PDFBOX,"/Dests dictionary isn't supported",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0",PDModel,None,,"I have received a non public file that has a /Dests dictionary in the /Catalog, and this is not supported by PDFBox. This is a concept from PDF 1.1 that is no longer used since PDF 1.2, but it is legal and not deprecated, only discouraged.
What needs to be done is to include an additional lookup in PDOutlineItem.findDestinationPage() in the PDNamedDestination section. And an additional getter in PDDocumentCatalog, and a new class to encapsulate that "dictionary of names and corresponding destinations".",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/May/15 20:57","12/Sep/15 13:01","12/May/15 17:59"
PDFBOX-2794,PDFBOX,"UnsupportedOperationException: not supported for Type 3 fonts",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,type3,,"As reported by Manfred P. on the user mailing list:
Exception in thread "main" java.lang.UnsupportedOperationException: not supported for Type 3 fonts
        at org.apache.pdfbox.pdmodel.font.PDType3Font.readEncodingFromFont(PDType3Font.java:68)
        at org.apache.pdfbox.pdmodel.font.PDSimpleFont.readEncoding(PDSimpleFont.java:118)
        at org.apache.pdfbox.pdmodel.font.PDType3Font.<init>(PDType3Font.java:56)
        at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:79)",0,"John Hewson","Tilman Hausherr",0,2,"11/May/15 16:39","17/Mar/16 19:08","11/May/15 21:06"
PDFBOX-2795,PDFBOX,"PrintRequestAttributeSet is being ignored",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"The PrintRequestAttributeSet passed to PDFPrinter.print(...) is used to call job.printDialog but not job.print. So the attributes are not used by the actual print job, despite appearing in the print dialog.",0,"John Hewson","John Hewson",0,1,"12/May/15 07:48","17/Mar/16 19:07","12/May/15 17:40"
PDFBOX-2796,PDFBOX,"SecurityHandler should not try to decrypt TU entries",Bug,CLOSED,Major,Invalid,2.0.0,None,PDModel,None,,"The SecurityHandler should not try to decrypt TU entries, just like it does not decrypt CONTENTS of signatures. Patch attached.
Unfortunately I cannot share the file which shows the problem with the current behavior. The issue is that it tries to decrypt something not encrypted in the first place.",0,"Tilman Hausherr","Michele Balistreri",0,2,"13/May/15 16:43","13/May/15 19:37","13/May/15 19:37"
PDFBOX-2798,PDFBOX,"PDTextStream does not support UTF16 with BOM",Bug,CLOSED,Major,Fixed,"1.8.10, 2.0.0",2.0.0,None,None,,"the getAsString() method from PDTextStream is quite useful, but it does not support UTF-16 text. I added a small check on the first two bytes to support UTF-16 content. This is needed because two-bytes encodings do not degrade gracefully like UTF-8, even for plain ASCII text and so the resulting string is unusable.",0,"John Hewson","Michele Balistreri",0,3,"13/May/15 17:20","17/Mar/16 19:08","14/May/15 07:18"
PDFBOX-2799,PDFBOX,"PDOptionalContentProperties.setGroupEnabled not working",Bug,CLOSED,Major,Fixed,"1.8.10, 2.0.0","1.8.10, 2.0.0",PDModel,OCGs,,"PDOptionalContentProperties.setGroupEnabled does not work properly, because it tries to remove the wrong object from the OFF/ON dictionaries (the result of toDictionary, instead of the original object, which can be a different instance so the remove method does not find it). The attached patch fixes this issue.",0,"Tilman Hausherr","Michele Balistreri",0,3,"13/May/15 18:07","23/Jul/15 06:35","16/May/15 12:16"
PDFBOX-2801,PDFBOX,"SecurityHandler does not tolerate plain-text COSString",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.10, 2.0.0",PDModel,None,,"SecurityHandler does not handle the possibility, that a COSString is already plain text if the document is encrypted. This patch makes it tolerant when decrypting COSString, so that if it fails it just logs that and keeps the original content. The code works with all files I have.",0,"Andreas Lehmkühler","Michele Balistreri",0,4,"13/May/15 20:55","22/Dec/15 11:20","22/May/15 18:14"
PDFBOX-2802,PDFBOX,"TestFontEmbedding sometimes fails due to non-determinism",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"TestFontEmbedding sometimes fails if it is run before other tests because "target/test-output" does not exist.
https://travis-ci.org/apache/pdfbox/jobs/62491792",0,"John Hewson","John Hewson",0,1,"14/May/15 04:47","17/Mar/16 19:07","14/May/15 04:48"
PDFBOX-2803,PDFBOX,"NullPointerException into class PDType0Font",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"I find error on trunk (from 12 May 2015 )
Exception in thread "main" java.lang.NullPointerException
    at org.apache.pdfbox.pdmodel.font.PDType0Font.willBeSubset(PDType0Font.java:150)
    at org.apache.pdfbox.pdmodel.PDPageContentStream.setFont(PDPageContentStream.java:304)
    at org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.insertGeneratedAppearance(AppearanceGeneratorHelper.java:295)
    at org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.createAppearanceContent(AppearanceGeneratorHelper.java:227)
    at org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.setAppearanceValue(AppearanceGeneratorHelper.java:202)
    at org.apache.pdfbox.pdmodel.interactive.form.AppearanceGenerator.generateFieldAppearances(AppearanceGenerator.java:61)
    at org.apache.pdfbox.pdmodel.interactive.form.PDField.updateFieldAppearances(PDField.java:110)
    at org.apache.pdfbox.pdmodel.interactive.form.PDTextField.setValue(PDTextField.java:286)
    at pdftext.my_main.main(my_main.java:74)
For me, I fixed error as:
   /**
    * Constructor for reading a Type0 font from a PDF file.
    * 
    * @param fontDictionary The font dictionary according to the PDF specification.
    */
    public PDType0Font(COSDictionary fontDictionary) throws IOException
    {
        super(fontDictionary);
        COSArray descendantFonts = (COSArray)dict.getDictionaryObject(COSName.DESCENDANT_FONTS);
        COSDictionary descendantFontDictionary = (COSDictionary) descendantFonts.getObject(0);

        if (descendantFontDictionary == null)
        {
            throw new IOException("Missing descendant font dictionary");
        }

        descendantFont = PDFontFactory.createDescendantFont(descendantFontDictionary, this);
        readEncoding();
        fetchCMapUCS2();
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        PDType0Font parentFont = PDType0Font.load(new PDDocument(), new File("c:\\Windows\\Fonts\\arial.ttf")); //kostya!!!!
        embedder = parentFont.embedder; //kostya!!!!
    }
embedder has not been initialized in
public PDType0Font(COSDictionary fontDictionary) throws IOException",0,"John Hewson","Konstantin Kakunin",0,3,"17/May/15 13:48","17/Mar/16 19:08","17/May/15 18:37"
PDFBOX-2806,PDFBOX,"The 'kern' table type is not supported.",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"The kerning table ('kern') is not supported by fontbox.",0,"Andreas Lehmkühler","Glenn Adams",0,4,"19/May/15 18:14","26/Apr/16 09:18","25/Jun/15 18:44"
PDFBOX-2807,PDFBOX,"The vertical layout table types 'vhea', 'vmtx', 'VORG' are not supported.",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,,0,"Andreas Lehmkühler","Glenn Adams",0,3,"19/May/15 18:17","17/Mar/16 19:07","31/May/15 10:17"
PDFBOX-2808,PDFBOX,"Can't merge to files with bookmarks",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,regression,,"I was trying to megre 2 files (http://docs.oracle.com/javaee/6/tutorial/doc/javaeetutorial6.pdf) , but I got error:
2015-05-19 16:31:04,334 ERROR [MergeWork:run:68] java.lang.IllegalArgumentException: A single node with no siblings is required
at org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode.requireSingleNode(PDOutlineNode.java:108)
at org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode.addLast(PDOutlineNode.java:80)
at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:357)
at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:191)
at com.vk.pdf.web.utils.PdfUtils.merge(PdfUtils.java:103)
at com.vk.pdf.job.impl.MergeWork.run(MergeWork.java:59)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
at java.lang.Thread.run(Thread.java:745)",0,"Tilman Hausherr",Victor,0,3,"20/May/15 13:14","17/Mar/16 19:06","20/May/15 18:44"
PDFBOX-2809,PDFBOX,"Error trying to read the header of all the pages of a document",Bug,CLOSED,Critical,"Not A Problem",None,None,Parsing,None,java,"I am trying to read a documento with a lot of pages,
and the header of all pages came as another text.
I am sending the test class and the document i am trying to read.",0,"Tilman Hausherr","João Gabriel Ferrazza Dias",0,2,"20/May/15 18:28","20/May/15 19:51","20/May/15 19:04"
PDFBOX-2811,PDFBOX,"Infinite loop within RandomAccessBuffer",Bug,CLOSED,Major,Fixed,"1.8.9, 2.0.0","1.8.10, 2.0.0",PDModel,None,,"I've found an issue with RandomAccessBuffer which is triggered in a very specific corner case only:
the buffer has more than 1 chunk
read(byte[] b, int offset, int length) is used to read the data
the data is read in portions
one of the portions to be read is identical with the last remaining bytes of the current chunk
The current implementation won't advance to the next buffer, but reads the last bytes again and again.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"25/May/15 16:21","23/Jul/15 06:35","25/May/15 16:28"
PDFBOX-2812,PDFBOX,"NPE in PDColorSpaceFactory.createColorSpace with PDICCBased",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10","1.8.10, 2.0.0",PDModel,None,,"java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpaceFactory.createColorSpace(PDColorSpaceFactory.java:269)
 at org.apache.pdfbox.pdmodel.graphics.color.PDICCBasedTest.testConstructor(PDICCBasedTest.java:57)
The cause is a missing assignment in the first constructor of PDICCBased.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"25/May/15 19:06","23/Jul/15 06:35","25/May/15 20:38"
PDFBOX-2816,PDFBOX,"PDFBox makes disallowed changes when signing a signed document",Bug,CLOSED,Major,Fixed,"1.8.9, 2.0.0","1.8.11, 2.0.0",Signing,None,,"It seems PDFBox make disallowed changes when signing a document containing a signature with visual appearance. Using the signing example org.apache.pdfbox.examples.signature.CreateSignature (modified to use BC 1.52) I signed (invisible signature) a document (acrosigned.pdf) containing signature with visual appearance. After signing Adobe Acrobat for the resulted pdf (acrosigned_signed.pdf) shows an error for the first signature:
1 Page(s) Modified
Signature is invalid:
Document has been altered or corrupted since it was signed.

The first revision is intact after signing, but it seems PDFBox made some disallowed changes to the document. Adobe in its technical white paper Adobe Acrobat 9 Digital Signatures, Changes and Improvements disallows such changes for the signed document:
Adding form fields other than signature fields
Changing page content
Unfortunately, I could not identify the changes which caused this error, though I notice these changes in structure after signing:
Default resources (/DR) were droped from AcroForm dictionary;
An array of annotation dictionaries (value of /Annots in page object) became direct;
And probably there are more...
I thought the first change was fundamental, noticed that PDDocument#addSignature() method removes /DR key for invisible signatures. Tried to disable it in 1.8.10-SNAPSHOT sources, but unfortunately it didn't help. Didn't tried to reuse the same array object for /Annots yet.",0,"Maruan Sahyoun",Petras,3,6,"29/May/15 07:11","18/Jan/16 12:01","17/Dec/15 16:34"
PDFBOX-2819,PDFBOX,"invalid ICC Profile when reading from a byte array",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0",Preflight,None,"windows 7","6-1-12-t02-fail-a.pdf has 4 extra fails, that are related to an "invalid" ICC profile. "Invalid" meaning that ICC_Profile.getInstance() fails. Funny thing is that it works when reading from a stream. The following code shows this:
        FileInputStream fis = new FileInputStream(new File("veraPDF test suite 6-1-12-t02-fail-a.icc"));
        ICC_Profile instance = ICC_Profile.getInstance(fis);
        fis.close();
        File iccFile;
        FileInputStream fis2 = new FileInputStream(iccFile = new File("veraPDF test suite 6-1-12-t02-fail-a.icc"));
        byte[] iccBuf = new byte[(int) iccFile.length()];
        fis2.read(iccBuf);
        ICC_Profile instance2 = ICC_Profile.getInstance(iccBuf); // exception
        fis2.close();
That is a java bug
So I'll have to replace the calls in preflight accordingly. It doesn't apply to the main pdfbox project.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"29/May/15 11:21","23/Jul/15 06:35","29/May/15 13:36"
PDFBOX-2821,PDFBOX,"Add PDDocument(boolean) constructor for creating new documents using scratch files","New Feature",CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"Please add a PDDocument(boolean) constructor so that we may create new PDF files using scratch files instead of memory.
Without this, we need to do weird loops to save the document after it has at least one page, then reload it, just so that we use scratch files.",0,"Andreas Lehmkühler","Jesse Long",1,4,"01/Jun/15 10:55","17/Mar/16 19:07","02/Jun/15 20:24"
PDFBOX-2822,PDFBOX,"infinite loop of searching for a key in PDResources",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,regression,,"error in code of class - org.apache.pdfbox.pdmodel.PDResources
    private COSName createKey(COSName kind, String prefix)
    {
        COSDictionary dict = (COSDictionary)resources.getDictionaryObject(kind);
        if (dict == null)
        {
            return COSName.getPDFName(prefix + 1);
        }

        // find a unique key
        String key;
        do
        {
            key = prefix + (dict.keySet().size() + 1);
        }
        while (dict.containsKey(key));    <--------------- infinite loop of searching for a key
        return COSName.getPDFName(key);
    }
my test code:
public class pdfmain_svg {

 public static void main(String[] args) throws Exception {
  System.out.println("hello");
  PDDocument document = PDDocument.load(new File(
    "d:\\Project\\pdfbox-image\\Acro6JSGuide.pdf"));

  float fontSize = 10f;

  PDFont font = PDType0Font.load(document, new File(
    "c:\\Windows\\Fonts\\Arial.TTF"));

  for (int pageIndex = 0; pageIndex < document.getNumberOfPages(); pageIndex++) {
   System.out.println("page index = " + pageIndex);
   PDPage page = document.getPage(pageIndex);  
   PDPageContentStream contentStream = new PDPageContentStream(
     document, page, true, true);
   contentStream.setFont(font, fontSize); <---------------- hang on page 6
   contentStream.setNonStrokingColor(Color.LIGHT_GRAY);
   contentStream.beginText();
   contentStream.newLineAtOffset(100, 100);
   contentStream.showText("Test printing");
   contentStream.endText();
   contentStream.close();
  }
  File f = new File("d:\\work\\kostya.pdf");
  document.save(f);
  document.close();
  System.out.println("f=" + f.getAbsolutePath() + ": " + f.exists());
 }

}",0,"Tilman Hausherr","Konstantin Kakunin",0,3,"02/Jun/15 06:07","17/Mar/16 19:07","02/Jun/15 09:47"
PDFBOX-2823,PDFBOX,"StringIndexOutOfBoundsException when doing DateConverter.parseDate()",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10",1.8.10,Parsing,None,,"From Kevin J. in the user mailing list:
We are currently using Apache Solr / Tika to index documents for searching. The exact version that is being used is version 1.8.8 of PDFBox.
We can across a document that produced this stack trace (trimmed to the relevant part of PDFBox):
Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 1
        at java.lang.String.charAt(String.java:658)
        at org.apache.pdfbox.util.DateConverter.parseDate(DateConverter.java:679)
        at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:808)
        at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:780)
        at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:753)
        at org.apache.pdfbox.cos.COSDictionary.getDate(COSDictionary.java:849)
        at org.apache.pdfbox.pdmodel.PDDocumentInformation.getCreationDate(PDDocumentInformation.java:212)
Inspection of the document's binary revealed that it contained a creationDate consisting of a single white space (ASCII 0x20), which is probably illegal. I managed to create a small reproduction of the error using like so:
File file = new File("/path/to/document/bad.pdf");
InputStream stream = new FileInputStream(file);
PDFParser parser = new PDFParser(stream);
parser.parse();
PDDocumentInformation info = parser.getPDDocument().getDocumentInformation();
Calendar creationDate = info.getCreationDate();
System.out.println(creationDate.toString());
Which produces the same stack trace. I verified this against the latest build from the site on 1.8.9, and the behavior remains. This looks very similar to PDFBOX-1803, however that issue is marked as resolved in 1.8.5. So, my questions:
Is the exception an expected behavior? Ideally Tika would just index the document anyway, the creation date isn't important to us. Tika had an issue for this, TIKA-1233, that marks it as fixed by swallowing the exception, but looking at the comments for it, they removed the try/catch in r1593983 since it is marked as fixed here.
Is this a regression, or slightly different somehow from 1803? Shall I create a new issue or get the existing 1803 re-opened?
The PDF that reproduces the issue can be downloaded here: https://www.dropbox.com/s/tll5rscrlt95xuc/bad.pdf?dl=0",0,"Tilman Hausherr","Tilman Hausherr",0,4,"04/Jun/15 16:49","23/Jul/15 06:35","04/Jun/15 17:12"
PDFBOX-2824,PDFBOX,"ArrayIndexOutOfBoundsException in GlyfSimpleDescript.readFlags() when multithreading",Bug,CLOSED,Critical,Fixed,2.0.0,2.0.0,FontBox,multithreading,,"From Kenneth K. in the mailing list:
I have a client application that convert pdf documents into single page tiff images. Since the user export large quantities of documents I use a multithreaded approach. Each thread loads it own document and converts the pages one by one.
The pdf file is serialized to the client thread and then each thread executes the following code. If I only use 1 thread there is no problem. I checked to make sure objects are shared between threads.
            docin = PDDocument.load(new ByteArrayInputStream(documentResult.getImage().getContent()),true);
            if(null==docin)
              throw new Exception("Invalid PDF document or an occured during retrieval");
               int numPages = docin.getNumberOfPages();
                     String strPath = getPath(numPages);
                     int iPage = 0;
            PDFRenderer renderer = new PDFRenderer(docin);
            for (int i=0;i<numPages;i++)
            {
              PDPage page = docin.getPage(i);
              PDRectangle rect = page.getMediaBox();
              BufferedImage pageImage = null;
              pageImage = renderer.renderImageWithDPI(i, 200f, ImageType.BINARY);
              ...
            }
Array index out of range: 8
       at org.apache.fontbox.ttf.GlyfSimpleDescript.readFlags(GlyfSimpleDescript.java:202)
       at org.apache.fontbox.ttf.GlyfSimpleDescript.<init>(GlyfSimpleDescript.java:77)
       at org.apache.fontbox.ttf.GlyphData.initData(GlyphData.java:58)
       at org.apache.fontbox.ttf.GlyphTable.getGlyph(GlyphTable.java:161)
       at org.apache.pdfbox.rendering.TTFGlyph2D.getPathForGID(TTFGlyph2D.java:140)
       at org.apache.pdfbox.rendering.TTFGlyph2D.getPathForCharacterCode(TTFGlyph2D.java:92)
       at org.apache.pdfbox.rendering.PageDrawer.drawGlyph2D(PageDrawer.java:333)
       at org.apache.pdfbox.rendering.PageDrawer.showFontGlyph(PageDrawer.java:314)
       at org.apache.pdfbox.contentstream.PDFStreamEngine.showGlyph(PDFStreamEngine.java:731)
       at org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:690)
       at org.apache.pdfbox.rendering.PageDrawer.showText(PageDrawer.java:296)
       at org.apache.pdfbox.contentstream.PDFStreamEngine.showTextStrings(PDFStreamEngine.java:600)
       at org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted.process(ShowTextAdjusted.java:38)
       at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:802)
       at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:464)
       at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:438)
       at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
       at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:179)
       at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:205)
       at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:136)
       at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:95)
       at org.ilsos.cm.export.client.rmi.workers.Pdf2SinglePageTiff.processResult(Pdf2SinglePageTiff.java:142)
       at org.ilsos.cm.export.client.rmi.ExportWorker.run(ExportWorker.java:72)
       at java.lang.Thread.run(Thread.java:784)",0,"John Hewson","Tilman Hausherr",0,5,"04/Jun/15 19:27","17/Mar/16 19:06","12/Jun/15 18:40"
PDFBOX-2826,PDFBOX,"Mouse position shown when mouse outside of PDFReader window",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,"Swing GUI",None,,"The PDF Reader keeps a position in the status bar after the mouse has left the window. I'll fix this with a MouseListener. I the future, this structure could also be used to mark a rectangle.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Jun/15 16:38","17/Mar/16 19:07","09/Jun/15 17:10"
PDFBOX-2829,PDFBOX,"PDBox 2.0 Throws IndexOutOfBoundsException (severe offset errors as well)",Bug,CLOSED,Blocker,Fixed,2.0.0,2.0.0,Parsing,None,,"The pdf file comes up in adobe okay. It has an unusally font. And the load complains about incorrect offsets.
Jun 12, 2015 12:27:10 PM org.apache.pdfbox.pdfparser.COSParser validateStreamLength
SEVERE: The end of the stream doesn't point to the correct offset, using workaround to read the stream, found 576 but expected 6095
Jun 12, 2015 12:27:10 PM org.apache.pdfbox.pdfparser.COSParser validateStreamLength
SEVERE: The end of the stream doesn't point to the correct offset, using workaround to read the stream, found 6513 but expected 8951
Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 10, Size: 10
 at java.util.ArrayList.rangeCheck(ArrayList.java:635)
 at java.util.ArrayList.get(ArrayList.java:411)
 at org.apache.pdfbox.io.RandomAccessBuffer.nextBuffer(RandomAccessBuffer.java:395)
 at org.apache.pdfbox.io.RandomAccessBuffer.read(RandomAccessBuffer.java:260)
 at org.apache.pdfbox.pdfparser.BaseParser.readUntilEndStream(BaseParser.java:412)
 at org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:922)
 at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:725)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:686)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:639)
 at org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:600)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:198)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:225)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:976)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:865)
 at com.smartfin.backend.sfreceipts.offline.PdfToImage2_0RedoTesterFor.getImageFromPdf(PdfToImage2_0RedoTesterFor.java:47)
 at com.smartfin.backend.sfreceipts.offline.PdfToImage2_0RedoTesterFor.getImageFromPdf(PdfToImage2_0RedoTesterFor.java:39)
 at com.smartfin.backend.sfreceipts.offline.PdfToImage2_0RedoTesterFor.main(PdfToImage2_0RedoTesterFor.java:199)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:606)
 at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
Process finished with exit code 1",0,"Andreas Lehmkühler",Lori,0,4,"12/Jun/15 16:36","17/Mar/16 19:07","17/Jun/15 00:01"
PDFBOX-2830,PDFBOX,"Can't draw color border around a PDTextBox + create example",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"AcroForm, PDModel",regression,,"There's a thread "Setting a border color on a PDTextBox" in the user mailing list. This relates to version 1.8.*, but I wanted to create an example for 2.0. After doing this for 2.0 with this code
PDAppearanceCharacteristicsDictionary fieldAppearance = 
                new PDAppearanceCharacteristicsDictionary(new COSDictionary());
        PDColor green = new PDColor(new float[] { 0, 1, 0 }, PDDeviceRGB.INSTANCE);
        fieldAppearance.setBorderColour(green);
        widget.setAppearanceCharacteristics(fieldAppearance);
it didn't work. The reason is this in the PDF:
5 0 obj
<<
/FT /Tx
/T (SampleField)
/Type /Annot
/Subtype /Widget
/Rect [50.0 750.0 250.0 800.0]
/MK 7 0 R
/V (English form contents)
/AP 8 0 R
>>
endobj
6 0 obj
<<
/Font 9 0 R
>>
endobj
7 0 obj
<<
/BC [0.0 1.0 0.0 null]  <===================
>>
endobj
The /BC color array has an extra null element which comes from a "patternName" in PDColor:
    public COSArray toCOSArray()
    {
        COSArray array = new COSArray();
        array.setFloatArray(components);
        array.add(patternName);
        return array;
    }
Removing it in the PDF brings a "good" file. I believe this is a regression that came from changing PDGamma to PDColor some time ago in PDFBOX-2629.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"12/Jun/15 19:55","17/Mar/16 19:07","13/Jun/15 11:49"
PDFBOX-2832,PDFBOX,"Remove obsolete methods from fontbox's Encoding",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,FontBox,None,,"FontBox's Encoding class contains some obsolete static methods which always return null. Note that it's not possible to have a correct implementation of these methods as part of an Encoding, because they require knowledge of characters, which actually requires a GlyphList + Encoding, so the removed code was never correct.",0,"John Hewson","John Hewson",0,1,"16/Jun/15 18:20","16/Jun/15 18:23","16/Jun/15 18:23"
PDFBOX-2833,PDFBOX,"Add an API to get the COSObjectKey of a given object",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"When debugging it's useful to be able to get an indirect COS object's generation and id numbers. However, for PD objects there's no way to retrieve the COSObject which points to the result of getCOSObject().
Only COSDocument contains this information, so I'm adding a new method which looks up the COSObjectKey for a given COSBase, assuming that object is indirect (e.g. the target of a COSObject).",0,"John Hewson","John Hewson",0,1,"18/Jun/15 02:05","17/Mar/16 19:08","18/Jun/15 02:24"
PDFBOX-2834,PDFBOX,"Violation in PDOutputIntent.getDestOutputProfile() method",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,"windows 7, java 1.7","Inside this method an Object (the result of dictionary.getItem(COSName.DEST_OUTPUT_PROFILE) method call) is casted to COSStream, but it can be also a COSObject containing COSStream which leads to class cast exception.
public COSStream getDestOutputIntent()
{
     return (COSStream) dictionary.getItem(COSName.DEST_OUTPUT_PROFILE);
}
Possible solutions :
1) Check class instance and handle them in proper way*
2) Usage of visitor pattern
*
public COSStream getDestOutputIntent()
{
        final COSBase item = dictionary.getItem(COSName.DEST_OUTPUT_PROFILE);
        return getDestOutputIntent(item);
}

private COSStream getDestOutputIntent(COSBase object) {
        if (object instanceof COSStream) {
            return (COSStream) object;
        } else if (object instanceof COSObject) {
            return getDestOutputIntent(((COSObject) object).getObject());
        } else {
            return null;
        }
}",0,"Andreas Lehmkühler","Evgeniy Muravitskiy",0,4,"19/Jun/15 08:47","17/Mar/16 19:06","23/Jun/15 17:10"
PDFBOX-2836,PDFBOX,"COSName should be interpreted as UTF-8",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,Parsing,None,,"PDF name objects use UTF-8, however BaseParser is using UTF-16 chars in its parsing code.",0,"John Hewson","John Hewson",0,1,"19/Jun/15 18:30","17/Mar/16 19:07","19/Jun/15 18:31"
PDFBOX-2837,PDFBOX,"PDFBox creates files with EBCDIC code on z/OS",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0",Writing,None,unix,"A PDF file created on z/OS (an IBM mainframe os) has this
xref
ð ù
0000000000 65535 f
the two chars are EBCDIC code for 0 9. The cause is this code that outputs in the system default encoding:
    private void writeXrefRange(long x, long y) throws IOException
    {
        getStandardOutput().write(String.valueOf(x).getBytes());
        getStandardOutput().write(SPACE);
        getStandardOutput().write(String.valueOf(y).getBytes());
        getStandardOutput().writeEOL();
    } 
getBytes should use the specific charset, e.g. getBytes(Charsets.ISO_8859_1).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"20/Jun/15 10:30","23/Jul/15 06:35","22/Jun/15 06:36"
PDFBOX-2838,PDFBOX,"Please make PDPageContentStream non-final",Improvement,CLOSED,Major,"Won't Fix",2.0.0,2.0.0,PDModel,None,,"Please make PDPageContentStream non-final as in certain cases it might be helpful to cache the last set data on an PDPageContentStream (such as the last used Font) to avoid bloating the created PDF. Therefore the methods must be overridable.",0,"John Hewson","Philip Helger",0,1,"22/Jun/15 16:36","20/Jul/16 11:51","27/Sep/15 18:10"
PDFBOX-2841,PDFBOX,"Make it easier to work with RadioButton Groups",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,None,,"The current implementation of Radio Buttons in PDFBox 2.0 should be improved by
renaming getOptions() to make it clearer that this gets the potential export values (although the dictionary entry is called /Opt)
make it easier to inspect the possible values one can set for the various individual buttons",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"25/Jun/15 16:23","17/Mar/16 19:08","15/Jul/15 20:08"
PDFBOX-2842,PDFBOX,"Overhaul font substitution",Improvement,CLOSED,Blocker,Fixed,2.0.0,2.0.0,"FontBox, PDModel",None,,"The improved font substitution mechanisms in 2.0 are not quite sufficient to handle all PDFs. Specifically, CJK substitution and substitution of TTF in place of CFF fonts is not possible with the current design.
The CJK problems can be seen in PDFBOX-2509 and PDFBOX-2563, which does not solve the problem. Additional font API weaknesses can be found in PDFBOX-2578 and PDFBOX-2366. This meta-issue aims to address all of those sub-issues.
The current problems are:
FontBox does not provide a generic font type, so we have handle TrueTypeFont, CFFFont, and Type1Font separately. This hinders cross-format substitution.
ExternalFonts has no knowledge of the CIDSystemInfo which is necessary for CJK substitution
FontProvider contains too much public logic which should be internal to PDFBox, e.g. substitution logic, this makes it brittle and means we won't be able to add additional logic after 2.0 is released, e.g. CJK substitution.
Too much confusion about the role of ExternalFonts, particularly with regards to mapping of built-in fonts and the definition of substitute vs. fallback font.
ExternalFonts is a black box: the user cannot tell whether the font returned is an exact match, or a last-resort fallback.
Confusing font substitution API, users preferred having a flat file format
PDSimpleFont#getEncoding() can return null for TTFs which use built-in encodings. This has caused a lot of bugs - there must be a better way.
We still have some confusing names, for example a CustomEncoding is known as a "built-in encoding" in the spec.
There is no fallback CFF font, we resort to AdobeBlank instead, which has no rendering.",0,"John Hewson","John Hewson",0,6,"25/Jun/15 20:48","17/Mar/16 19:06","15/Jul/15 00:32"
PDFBOX-2844,PDFBOX,"Printing has bigger margins than expected",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"Printing the attached file from PDFReader brings larger margins than expected, and larger than with Adobe Reader. Doing the same with 1.8 has the expected margins (but bad fonts).
From Александр Свиридов / Alex Sviridov in the mailing list:
I printed this pdf file with Adobe Reader in mode 100%. And as expected left and right margins are about 2cm. In comparison when I print using pdfbox left margin is 4.5cm, right about 3.5cm.
The code I use :
PrinterJob job = PrinterJob.getPrinterJob();
Paper paper=new Paper();
paper.setSize(72d*8.267d, 72d*11.692);
PDFPrinter pDFPrinter=new PDFPrinter(document,Scaling.SCALE_TO_FIT, Orientation.PORTRAIT,paper);
pDFPrinter.silentPrint(job);",0,"John Hewson","Tilman Hausherr",0,2,"28/Jun/15 17:37","17/Mar/16 19:07","10/Jul/15 07:17"
PDFBOX-2845,PDFBOX,"Error parsing PDF",Bug,CLOSED,Major,Fixed,"1.8.10, 2.0.0","1.8.11, 2.0.0",Parsing,None,,"I get the following error when parsing this pdf: http://jmlr.csail.mit.edu/proceedings/papers/v28/ranganath13.pdf
java.io.IOException: Object must be defined and must not be compressed object: 554:0
Stack trace:
Exception in thread "main" java.io.IOException: Object must be defined and must not be compressed object: 554:0
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:682)
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:646)
at org.apache.pdfbox.pdfparser.COSParser.getLength(COSParser.java:847)
at org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:906)
at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:732)
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:693)
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:646)
at org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:607)
at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:198)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:225)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:848)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:793)
at org.apache.pdfbox.tools.ExtractText.startExtraction(ExtractText.java:192)
at org.apache.pdfbox.tools.ExtractText.main(ExtractText.java:81)
at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:55)
Note this problem does not occur in 1.8.9",0,"Andreas Lehmkühler","Christopher Clark",0,5,"29/Jun/15 22:03","18/Jan/16 12:01","26/Jul/15 11:20"
PDFBOX-2847,PDFBOX,"mergeDocumentsNonSeq does not utilize scratchFile",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","1.8.10, 2.0.0",Utilities,None,,"I noticed when merging relatively large pdfs (1gb) that the heap would grow by at least the same amount until complete, even when I call mergeDocumentsNonSeq() and supplying a read/write scratchfile.
When I looked at the source for mergeDocuments(bool, RandomAccess), it looks like the scratch file is never used.
private void mergeDocuments(boolean isNonSeq, RandomAccess scratchFile) 
            throws IOException, COSVisitorException
{
//...snip

                if (isNonSeq)
                {
                    source = PDDocument.loadNonSeq(sourceFile, null);
                }
//...snip
}",0,"Tilman Hausherr","Jim deVos",0,3,"30/Jun/15 04:32","23/Jul/15 06:35","30/Jun/15 20:04"
PDFBOX-2851,PDFBOX,"getExportValue() non functional in PDRadioButton",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,AcroForm,None,,"The current implementation of getExportValue in PDRadioButton is non functional with a fixme comment in the source",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"01/Jul/15 20:31","17/Mar/16 19:06","01/Jul/15 20:35"
PDFBOX-2853,PDFBOX,"CCITT: Background is rendered as transparent color",Bug,CLOSED,Major,Fixed,1.8.9,1.8.10,Rendering,CCITTFaxDecode,,"CCITT-Images with colorspace different from PDIndexed are created using PDCCitt.java/getRGBImage:
 if (colorspace instanceof PDIndexed)
        {
           ...
        }
        else
        {
            byte[] map = new byte[] { (byte) 0x00, (byte) 0xFF };
            colorModel = new IndexColorModel(1, map.length, map, map, map, Transparency.OPAQUE);
        }
The value Transparency.OPAQUE (=1) is provided for the parameter "transparentIndex" - this creates an image, in which the white color is treated as transparent.
This bug is especially annoying for some OCR-documents I had to work with (using PageDrawer). They consist of rendered text (as result of the OCR), that has the original content as image rendered on top, fully covering the text. When the white background is rendered as transparent, the rendered page gets messed up, because both texts can be seen,
Proposed Fix/Patch
Replace the value Transparency.OPAQUE with -1, so that no color is transparent.",0,"Tilman Hausherr","Jakob Pyttlik",0,4,"06/Jul/15 11:28","23/Jul/15 06:35","10/Jul/15 05:22"
PDFBOX-2854,PDFBOX,"TTFSubsetter NoSuchElementException",Bug,CLOSED,Major,Fixed,2.0.0,"2.0.3, 3.0.0 PDFBox",FontBox,None,,"Exception in thread "main" java.util.NoSuchElementException
at java.util.TreeMap$PrivateEntryIterator.nextEntry(TreeMap.java:1113)
at java.util.TreeMap$EntryIterator.next(TreeMap.java:1151)
at java.util.TreeMap$EntryIterator.next(TreeMap.java:1146)
at org.apache.fontbox.ttf.TTFSubsetter.buildOS2Table(TTFSubsetter.java:523)
at org.apache.fontbox.ttf.TTFSubsetter.writeToStream(TTFSubsetter.java:1081)
TrueTypeFont x = new TTFParser().parse("Uvb_____.TTF");
new TTFSubsetter(x, null).writeToStream(new ByteArrayOutputStream());",0,"Tilman Hausherr","simon steiner",0,3,"06/Jul/15 11:31","25/Mar/17 18:13","29/Jun/16 19:21"
PDFBOX-2862,PDFBOX,"GlyphList doesn't appear to be thread safe in trunk...or user error?",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,multithreading,,"This could be user error, but I'm getting the following when running trunk in a multithreaded environment.
Caused by: java.util.ConcurrentModificationException
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:922)
        at java.util.HashMap$EntryIterator.next(HashMap.java:962)
        at java.util.HashMap$EntryIterator.next(HashMap.java:960)
        at java.util.HashMap.putAllForCreate(HashMap.java:554)
        at java.util.HashMap.&lt;init&gt;(HashMap.java:298)
        at org.apache.pdfbox.pdmodel.font.encoding.GlyphList.&lt;init&gt;(GlyphList.java:114)
        at org.apache.pdfbox.text.PDFTextStreamEngine.&lt;init&gt;(PDFTextStreamEngine.java:103)
        at org.apache.pdfbox.text.PDFTextStripper.&lt;init&gt;(PDFTextStripper.java:196)
        at org.apache.tika.parser.pdf.PDF2XHTML.&lt;init&gt;(PDF2XHTML.java:106)
        at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:133)
        at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:132)
        at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:281)
        ... 16 more",0,"John Hewson","Tim Allison",0,4,"08/Jul/15 15:54","17/Mar/16 19:08","17/Jul/15 00:21"
PDFBOX-2863,PDFBOX,"Support the comb flag for PDF forms",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,None,,"Support the comb flag for PDF forms:
May be set only if the MaxLen entry is present in the text field dictionary (see Table 229) and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs.
Attached file shows the effect as it is now by setting "IBAN Antragsteller" with "12345678901234567890".",0,"Maruan Sahyoun","Tilman Hausherr",0,3,"08/Jul/15 16:55","17/Mar/16 19:07","13/Jul/15 08:38"
PDFBOX-2866,PDFBOX,"getDocumentCatalog() returns no results",Bug,CLOSED,Major,"Not A Problem",1.8.9,None,PDModel,None,,"Test below fails, getAllPages() returns empty list should return 2 pages (see attached test pdf)
TestPdfToPng.java
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.junit.Assert;
import org.junit.Test;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

public class TestPdfToPng {
    public class PdfToPngTest {

        @Test
        public void testConvert() throws Exception {
            testConvert(TestPdfToPng.class.getResource("/bad-to-png-test-2.pdf"), 2);
        }

        public void testConvert(URL url, int expectedPages) throws IOException {
            final Path outDir2 = Files.createTempDirectory("test-convert-png");
            final List<Path> images2 = toImages(url, outDir2);
            Assert.assertEquals(expectedPages, images2.size());
        }

        public List<Path> toImages(URL url, Path outDir) throws IOException {
            List<Path> images = new ArrayList<>();
            System.out.println("Images copied to Folder: " + outDir);
            try (PDDocument document = PDDocument.load(url)) {
                List<PDPage> list = document.getDocumentCatalog().getAllPages();
                System.out.println("Total files to be converted -> " + list.size());

                int pageNumber = 1;
                for (PDPage page : list) {
                    final Path path = outDir.resolve("test" + "_" + pageNumber + ".png");
                    final File imageFile = path.toFile();
                    imageFile.deleteOnExit();

                    BufferedImage image = page.convertToImage();
                    ImageIO.write(image, "png", imageFile);

                    System.out.println("Image Created -> " + imageFile.getName());
                    images.add(path);
                    pageNumber++;
                }
            }
            return images;
        }
    }
}",0,"Tilman Hausherr","Joseph Jezerinac",0,2,"09/Jul/15 03:07","09/Jul/15 04:40","09/Jul/15 04:40"
PDFBOX-2867,PDFBOX,"Correct use of Float.NaN",Bug,CLOSED,Major,Fixed,"1.8.9, 2.0.0","1.8.10, 2.0.0","Text extraction",None,,"replace
wordSpacing == Float.NaN
with
Float.isNaN(wordSpacing)
because wordSpacing == Float.NaN is always false.
A test by Tim Allison showed 9 differences in TIKA (but "None of the differences were actual words. "), and no difference in a manual test with ExtractText.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Jul/15 18:03","23/Jul/15 06:35","09/Jul/15 18:08"
PDFBOX-2868,PDFBOX,"NPE in Acroform getValueAsString",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,AcroForm,None,,"The most common exception in the first run of 2.0.0-trunk against govdocs1 is this:
java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField.getValueAsString(PDNonTerminalField.java:181)
 at org.apache.tika.parser.pdf.PDF2XHTML.addFieldString(PDF2XHTML.java:615)
 at org.apache.tika.parser.pdf.PDF2XHTML.processAcroField(PDF2XHTML.java:580)
 at org.apache.tika.parser.pdf.PDF2XHTML.extractAcroForm(PDF2XHTML.java:567)
 at org.apache.tika.parser.pdf.PDF2XHTML.endDocument(PDF2XHTML.java:201)
 at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:250)
 at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:137)
 at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:132)",0,"Maruan Sahyoun","Tim Allison",0,3,"10/Jul/15 12:08","17/Mar/16 19:07","13/Jul/15 09:45"
PDFBOX-2869,PDFBOX,"Corruption in ScratchFileBuffer",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"Under some specific circumstances, ScratchFileBuffer can get corrupted when reading.
These circumstances are, when the completely written buffer length is a multiple of 4080, and the read(byte[], int, int) method is used to read till the end of the buffer.
Each page contains 4080 bytes. The last 8 bytes are a pointer to the next page. This next page pointer is only written if the next page is needed, not if the page is full but no further pages are needed.
The bug is in the read(byte[], int, int) method which, after reading all bytes from a page, tries to move to the next page, regardless of whether or not there is actually a next page.
The read(byte[], int, int) method must be changed to only read the next page pointer if the end of buffer is not reached.",0,"Andreas Lehmkühler","Jesse Long",0,3,"10/Jul/15 15:05","17/Mar/16 19:06","10/Jul/15 17:35"
PDFBOX-2870,PDFBOX,"Use animal sniffer maven plugin to detect non java 6 api usage",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"Use the animal sniffer maven plugin to ensure java 6 compatibility when using a jdk newer than java 6 to build PDFBox",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"10/Jul/15 17:42","17/Mar/16 19:07","10/Jul/15 17:52"
PDFBOX-2871,PDFBOX,"Performance issue when filling the first PDTextField of an AcroForm",Bug,CLOSED,Critical,Fixed,2.0.0,2.0.0,AcroForm,Appearance,,"When filling the first PDTextField in a form the performance is slow. All other PDTextFields in the form are handled quickly.
This code
PDTextField field = (PDTextField) doc.getDocumentCatalog().getAcroForm().getField("Textfield01");
long start = System.nanoTime();
field.setValue("ABCD");
long end = System.nanoTime();
double difference = (end - start)/1e6;
System.out.println(difference);

field = (PDTextField) doc.getDocumentCatalog().getAcroForm().getField("Textfield02");
start = System.nanoTime();
field.setValue("ABCD");
end = System.nanoTime();
difference = (end - start)/1e6;
System.out.println(difference);
produces the following output
9713.38
3.904",0,"John Hewson","Maruan Sahyoun",1,3,"11/Jul/15 06:08","17/Mar/16 19:08","13/Jul/15 16:23"
PDFBOX-2872,PDFBOX,"Matrix.toCOSArray() has constant return",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"Another anomaly in the matrix:
    public COSArray toCOSArray()
    {
        COSArray array = new COSArray();
        array.add(new COSFloat(0));
        array.add(new COSFloat(1));
        array.add(new COSFloat(3));
        array.add(new COSFloat(4));
        array.add(new COSFloat(6));
        array.add(new COSFloat(7));
        return array;
    }",0,"Tilman Hausherr","Tilman Hausherr",0,3,"12/Jul/15 14:57","17/Mar/16 19:07","12/Jul/15 15:14"
PDFBOX-2875,PDFBOX,"Type 1 fonts are embedded incorrectly",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"When embedding a Type 1 font, the Widths array is invalid, because the codes are ordered based on the order of the named glyphs in the font file, instead of in encoding order.
Additionally, there's an NPE because no GlyphList is set for a newly embedded PDType1Font.
There's also no way to choose the encoding, it's always taken from the AFM file.",0,"John Hewson","John Hewson",0,1,"13/Jul/15 05:37","17/Mar/16 19:07","13/Jul/15 05:38"
PDFBOX-2876,PDFBOX,"Better support for embedding of simple TrueType fonts",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"PDTrueType font no longer has any non-deprecated methods which support embedding. This is because PDType0Font provides a much better user experience, as Unicode support is usually expected.
However, there are cases where its useful to have simple TrueType embedding but the current code assumes WinAnsiEncoding. Seeing as simple fonts are always tied to an Encoding, I'm going to add a new constructor load(document, inputStream, encoding), which makes this explicit, and will break our reliance on WinAnsiEncoding.",0,"John Hewson","John Hewson",0,1,"13/Jul/15 06:49","17/Mar/16 19:06","13/Jul/15 06:50"
PDFBOX-2877,PDFBOX,"Wrong text placement for autosize fields compared to Adobe generated",Sub-task,CLOSED,Major,Fixed,"1.8.9, 2.0.0",2.0.0,AcroForm,Appearance,,"When a field uses autosizing the generated appearance is wrong as
the text is placed lower than expected
the font size is too large
compared to the appearance generated with Adobe tools",0,"Maruan Sahyoun","Maruan Sahyoun",1,4,"13/Jul/15 08:49","20/Jul/15 20:36","20/Jul/15 20:36"
PDFBOX-2880,PDFBOX,"Allow Type 1 embedding without AFM file",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"PFB files contain the same information as AFM files, yet we require both to embed a Type 1 font. Sometimes only the PFB file is available, so to handle this case we should support reading font metrics from PFBs rather than AFMs when embedding.",0,"John Hewson","John Hewson",0,0,"13/Jul/15 19:27","17/Mar/16 19:07","13/Jul/15 19:32"
PDFBOX-2881,PDFBOX,"Radial and Axial shading steps are calculated incorrectly",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,shading,,"I found a shading bug while writing some code to dump all shadings in a PDF. I don't know if this affects PDF rendering within PageDrawer or not.
RadialShadingContext and AxialShadingContext use the following code in their constructors to calculate the number of steps (pixels) in the shading and build a lookup table for each step:
// transform the distance to actual pixel space
// use transform, because xform.getScaleX() does not return correct scaling on 90° rotated matrix
Point2D point = new Point2D.Double(longestDistance, longestDistance);
matrix.transform(point);
xform.transform(point, point);
factor = (int) Math.max(Math.abs(point.getX()), Math.abs(point.getY()));
colorTable = calcColorTable();
The variable "factor" is the number of steps and "matrix" is the parent stream's matrix + the pattern matrix, so this code is taking the current scale and assuming that that is equal to the number of pixels. This works when a pattern is painted onto a 0...1 scaled surface, but otherwise it produces incorrect results.
There's no way to calculate the number of pixels in the device from its scale, or its matrix. Paint#createContext() provides the device bounds Rectangle, which is what we should be using. Indeed, this is handled correctly in the other shading contexts.",0,"John Hewson","John Hewson",0,2,"14/Jul/15 21:52","17/Mar/16 19:07","17/Jul/15 19:22"
PDFBOX-2882,PDFBOX,"Improve performance when using scratch file",Improvement,CLOSED,Blocker,Fixed,2.0.0,2.0.0,Parsing,None,,"The current scratch file implementation uses many direct I/O calls which slows down parsing compared with in-memory scratch buffer considerably.",0,"Timo Boehme","Timo Boehme",0,5,"14/Jul/15 22:25","17/Mar/16 19:06","28/Sep/15 22:08"
PDFBOX-2883,PDFBOX,"Unify memory handling",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"PDFBOX now has at least 2 different mechanisms to use main memory vs. keeping large data in temporary file: in case of provided input stream the stream is copied to temporary file and all read PDF streams are handled by RandomAccessBuffer/ScratchFile.
In PDFBOX-2882 I've done a re-implementation for ScratchFile which is quite fast and allows to set a maximum amount of memory to be used for its pages before it starts using the scratch file. This implementation could be used as the general 'backend' for all buffered streams and even the file input stream copy. As long as the PDF fits into the allowed maximum memory it should equally fast as RandomAccessBuffer while it allows for good control of memory usage by going to scratch file if needed. This prevents OOM in case of large files.
In order to use this the PDDocument methods should be changed to not have a 'useScratchFile' parameter but to take a MemoryHandling object which details the Buffering strategy (using ScratchFile; what amount of main memory can be used, ...).
I've opened this issue for discussing. Since we need API changes in PDDocument it should be done before 2.0 release.",0,"Timo Boehme","Timo Boehme",1,6,"15/Jul/15 10:38","17/Mar/16 19:06","09/Oct/15 07:16"
PDFBOX-2884,PDFBOX,"NPE in FontMapper.getFont()",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"I get this with the attached broken file:
java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.font.FontMapper.getFont(FontMapper.java:452)
 at org.apache.pdfbox.pdmodel.font.FontMapper.findFont(FontMapper.java:412)
 at org.apache.pdfbox.pdmodel.font.FontMapper.findFontBoxFont(FontMapper.java:377)
 at org.apache.pdfbox.pdmodel.font.FontMapper.getFontBoxFont(FontMapper.java:351)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:249)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:98)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.getFonts(ResourcesValidationProcess.java:128)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:94)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:77)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:57)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:169)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:84)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:57)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:59)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:122)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:163)
 at com.mycompany.preflightmasstest.PreflightChecker.run(PreflightChecker.java:52)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 at java.lang.Thread.run(Unknown Source)",0,"John Hewson","Tilman Hausherr",0,2,"15/Jul/15 16:27","17/Mar/16 19:07","15/Jul/15 19:53"
PDFBOX-2885,PDFBOX,"NPE in PDNonTerminalField.getChildren()",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,None,,"java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.interactive.form.PDNonTerminalField.getChildren(PDNonTerminalField.java:130)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.validateField(AcroFormValidationProcess.java:196)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.exploreFields(AcroFormValidationProcess.java:114)
 at org.apache.pdfbox.preflight.process.AcroFormValidationProcess.validate(AcroFormValidationProcess.java:64)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:122)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:163)
 at com.mycompany.preflightmasstest.PreflightChecker.run(PreflightChecker.java:52)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 at java.lang.Thread.run(Unknown Source)
The "field" / annotation that makes the problem is at "36 0 o", it is the link annotation.
From my understanding, this is an incorrect PDF, a link annotation isn't a field. I tried returning just null, that change works with preflight.",0,"John Hewson","Tilman Hausherr",0,2,"15/Jul/15 16:30","17/Mar/16 19:07","15/Jul/15 19:37"
PDFBOX-2886,PDFBOX,""IllegalArgumentException root cannot be null" in 2.0.0 for file that was parsed in 1.8.x",Bug,CLOSED,Trivial,Fixed,2.0.0,2.0.0,"Parsing, Preflight",None,,"The file is corrupt...can't be opened in Adobe Reader. However, text and an attachment were extracted with 1.8.x.
This could be a one-off and not worth the effort to fix.",0,"Andreas Lehmkühler","Tim Allison",0,4,"16/Jul/15 19:48","17/Mar/16 19:06","01/Aug/15 14:36"
PDFBOX-2888,PDFBOX,"setAllSecurityToBeRemoved(true) before calling protect() should have no effect",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Crypto,None,,"As discussed on the mailing list:
user Roberto Nibali had a problem where a file wasn't saved with encryption. The cause turned out to be that he had called
setAllSecurityToBeRemoved(true)
and then
protect(...)
Although the javadoc of both methods is clear, I see a risk that this happens again, e.g. when people combine existing code.
Solution: set allSecurityToBeRemoved to false when protect() is called and log a warning.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"16/Jul/15 20:27","17/Mar/16 19:08","16/Jul/15 20:32"
PDFBOX-2889,PDFBOX,"Support appearance generation for choice fields",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,Appearance,,"To complete the appearance generation this has to be implemented for choice fields",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"17/Jul/15 06:16","20/Jul/15 20:34","20/Jul/15 20:34"
PDFBOX-2891,PDFBOX,"Use animal sniffer maven plugin to detect non java 5 api usage within the 1.8 branch",Improvement,CLOSED,Major,Fixed,1.8.11,1.8.11,None,None,,"Use the animal sniffer maven plugin to ensure java 5 compatibility when using a jdk newer than java 5 to build PDFBox 1.8",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"18/Jul/15 16:32","18/Jan/16 12:01","12/Jan/16 11:28"
PDFBOX-2892,PDFBOX,"Invisible signature annotation violates PDF/A",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Signing,"PDF/A Signature",,"Using PDFBox v2.0 snapshot I tried to sign PDF/A document with invisible signature. I noticed that invisible signature annotation dictionary, when signature has been created with this method PDDocument#addSignature(:PDSignature, :SignatureInterface), is created with F key’s NoView flag bit set to 1 in Widget annotation dictionary (see: PDDocument.java#247):
// set visibility flags
if (options.getVisualSignature() == null)
{
    signatureField.getWidgets().get(0).setNoView(true);
}
The use of this flag is redundant for making signature field invisible. As ISO 32000 states:
Signature fields that are not intended to be visible shall have an annotation rectangle that has zero height and width. Conforming readers shall treat such signatures as not visible.
Besides, the use of this flag violates PDF/A-1 (and PDF/A-2) requirements for Annotation dictionary F key:
The F key’s Print flag bit shall be set to 1 and its Hidden, Invisible and NoView flag bits shall be set to 0.",0,"Tilman Hausherr",Petras,0,4,"18/Jul/15 16:41","17/Mar/16 19:07","20/Jul/15 16:44"
PDFBOX-2893,PDFBOX,"Simplify COSStream encoding and decoding",Improvement,CLOSED,Blocker,Fixed,2.0.0,2.0.0,None,None,,"Performance issues and memory usage issues surrounding streams are one of the few things blocking the release of 2.0 (see PDFBOX-2301, PDFBOX-2882, PDFBOX-2883).
Though we've managed to reduce some of the memory used by RandomAccessBuffer and to take advantage of buffering of scratch files, we still have problems with the amount of memory which COSStream holds onto. Changes introduced in 2.0 have resulted in COSStreams having a very complex relationship with classes which hold a lot of memory in complex ways (e.g. the fields: tempBuffer, filteredBuffer, unfilteredBuffer, filteredStream, unFilteredStream, scratchFile). Access to scratch file pages in particular does not seem to be well regulated, especially with regards to multithreading (an avenue we'd at least like to leave open).
Given recent flux, I'm doubtful that we can ship the current API for COSStream w.r.t. RandomAccess without shipping performance issues or flaws which will be unfixable without breaking changes.
One of the recent changes to COSStream is that it now exposes a RandomAccess, this is so that PDFStreamParser can parse content streams (as well as other subclasses which handle xref and object streams). However, streams are fundamentally not random access - stream filters are sequential. While the consumer of a stream may wish to buffer the data (in memory or scratch) for random access, COSStream itself does not need to expose such an elaborate API - many pieces of gymnastics are performed inside COSStream to present this illusion, at significant cost. We should remove that.
But what about providing a RandomAccess for PDFStreamParser, PDFObjectStreamParser, and PDFXrefStreamParser? It turns out that those classes don't actually perform random I/O. They perform sequential I/O with a buffer for peek/unread.
We need to simplify to get 2.0 fast, lean, and maintainable. Here's what I think we should do:
1. Split the interfaces for sequential and random I/O
Introduce a new SequentialSource interface for sequential I/O, with thin wrappers for RandomAccessRead and InputStream.
BaseParser will use SequentialSource rather than RandomAccessRead (this will be inherited by PDFStreamParser, PDFObjectStreamParser, and PDFXrefStreamParser).
COSParser will use RandomAccessRead and pass a SequentialSource wrapper to it's superclass, BaseParser.
2. Remove RandomAccess APIs from COSStream, expose only InputStream and OutputStream, as we used to do. We can pass an InputStream to PDFStreamParser using a wrapper which implements SequentialSource. This will remove tempBuffer, filteredBuffer, and unfilteredBuffer from COSStream, all of which hold memory.",0,"John Hewson","John Hewson",1,5,"18/Jul/15 18:38","17/Mar/16 19:07","29/Oct/15 05:18"
PDFBOX-2894,PDFBOX,"Remove COSStreamArray / SequenceRandomAccessRead",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"This ties in with my COSStream simplification in PDFBOX-2893.
COSStreamArray is a troublesome abstraction, it's not a real COS object and it's the only COS object which can be generated after parsing. Look at the implementation of COSStreamArray, most methods throw an exception because it's not a COSStream - it violates the contact of the very thing it claims to be. Even PDPageContentStream has to use instanceof to "peer through" the abstraction of COSStreamArray.
There's no reason to have this class, other than to duck-tape flaws in 1.8's APIs, namely that PDPage#getStream() returns a PDStream and PDFStreamParser expects a PDStream, yet both of these may be arrays of streams.
We can fix this in 2.0 by getting rid of the erroneous PDPage#getStream() and by exposing the array of streams, rather than attempting to hide them. Hopefully this will also fix existing errors which may be lurking throughout the codebase (see first comment, below) which are associated with mistaking COSStreamArray for a COSStream. We can still provide an InputStream API which abstracts over the array of streams, because there's nothing wrong with that - so users can have the same simple and convenient experience.
An added benefit of doing this is that it will allow us to remove SequenceRandomAccessRead, a highly complex memory-holding class.",0,"John Hewson","John Hewson",0,3,"20/Jul/15 20:05","17/Mar/16 19:06","20/Jul/15 21:48"
PDFBOX-2898,PDFBOX,"Incorrect key for color space in PDGroup",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,Transparency,"windows 7, java 1.7","According to the specification of PDF Reference 1.4 (1.7), paragraph 7.5.5, Transparency Group may contain Color Space in the 'CS' key, but in the method PDGroup.getColorSpace () the search is implemented with the use of 'ColorSpace' key.",0,"Tilman Hausherr","Evgeniy Muravitskiy",0,4,"21/Jul/15 10:31","17/Mar/16 19:07","21/Jul/15 16:25"
PDFBOX-2899,PDFBOX,"Text not rendered in mode 7 (2)",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"The attached file is a reduced version of the file from PDFBOX-1350. It should show "T U S" at the bottom left but it doesn't. I believe that the cause is very similar to PDFBOX-2814 (text rendering in mode 7), except that this time, the text is not splitted within one "TJ" segment, but across several "Tj" segments.
BT
7 Tr
/F1 1.00000 Tf
0.01063 0.00000 0.00000 0.00573 0.05521 0.16300 Tm
0 -1.01768 Td
(\000\065) Tj
/F1 1.00000 Tf
0.01063 0.00000 0.00000 0.00573 0.05521 0.16300 Tm
1.38462 -1.01768 Td
(\000\066) Tj
/F1 1.00000 Tf
0.01063 0.00000 0.00000 0.00573 0.05521 0.16300 Tm
1.69789 -1.01768 Td
/F1 1.00000 Tf
0.01063 0.00000 0.00000 0.00573 0.05521 0.16300 Tm
2.01116 -1.01768 Td
/F1 1.00000 Tf
0.01063 0.00000 0.00000 0.00573 0.05521 0.16300 Tm
2.32442 -1.01768 Td
(\000\064) Tj
ET                                                                                              
/Im1 Do",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Jul/15 16:14","10/Feb/17 16:39","28/Jul/15 20:26"
PDFBOX-2900,PDFBOX,"PDF Debugger doesn't print inline images correctly",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,"Swing GUI",debugger,,"The PDF debugger doesn't print correctly inline images in content stream, unfiltered view. It actually prints only the BI operator, no parameters, no image data. I'm attaching a screenshot where you can see the difference from the debugger and printing the the stream to sysout.
Also, looking at the code, the panel prints the parsed tokens (I'm looking at StreamPane::getContentStreamDocument). I find it a little confusing because the combo box says "unfiltered" so I was expecting the raw, unfiltered stream data, not the result of the PDFBox stream parsing.
Side note, it would be nice to be able to select and copy (ctrl-c) the content from the stream panel.",0,"khyrul bashar","Andrea Vacondio",0,4,"22/Jul/15 14:03","17/Mar/16 19:08","23/Jul/15 18:57"
PDFBOX-2901,PDFBOX,"High CPU load and OutOfMemoryError when rendering shading",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Rendering,None,,"By Frank D. from the mailing list:
When we try to convert the attached pdf, the CPU load of tomcat is raising and it seems, that the process hangs. The tomcat process is no more responsive and after a long while, we get an memory overflow. Also the server load is very high meanwhile.
Some debugging at 50 dpi:
PDFOperator{cs}: [COSName{CS0}]
PDFOperator{scn}: [COSName{P0}]
PDFOperator{gs}: [COSName{GS0}]
PDFOperator{m}: [COSFloat{-10551.00391}, COSFloat{667.6051}]
PDFOperator{l}: [COSFloat{-10551.00391}, COSFloat{1447.09143}]
PDFOperator{l}: [COSFloat{9338.57129}, COSFloat{1447.09143}]
PDFOperator{l}: [COSFloat{9338.57129}, COSFloat{667.6051}]
PDFOperator{f}: []

f = Fill path using non zero winding rule

(...wait...)

PDFOperator{cs}: [COSName{CS0}]
PDFOperator{scn}: [COSName{P0}]
PDFOperator{gs}: [COSName{GS0}]
PDFOperator{m}: [COSFloat{-18801.79492}, COSFloat{667.6051}]
PDFOperator{l}: [COSFloat{-18801.79492}, COSFloat{1447.09143}]
PDFOperator{l}: [COSFloat{1087.7804}, COSFloat{1447.09143}]
PDFOperator{l}: [COSFloat{1087.7804}, COSFloat{667.6051}]
PDFOperator{f}: []

(...wait...)

PDFOperator{cs}: [COSName{CS0}]
PDFOperator{scn}: [COSName{P0}]
PDFOperator{gs}: [COSName{GS0}]
PDFOperator{m}: [COSFloat{-18801.79492}, COSFloat{11.15869}]
PDFOperator{l}: [COSFloat{-18801.79492}, COSFloat{790.64502}]
PDFOperator{l}: [COSFloat{1087.7804}, COSFloat{790.64502}]
PDFOperator{l}: [COSFloat{1087.7804}, COSFloat{11.15869}]
PDFOperator{f}: []

(...wait...)
(...wait...)
(...wait...)

PDFOperator{cs}: [COSName{CS0}]
PDFOperator{scn}: [COSName{P0}]
PDFOperator{gs}: [COSName{GS0}]
PDFOperator{m}: [COSFloat{-10551.00391}, COSFloat{667.6051}]
PDFOperator{l}: [COSFloat{-10551.00391}, COSFloat{1447.09143}]
PDFOperator{l}: [COSFloat{9338.57129}, COSFloat{1447.09143}]
PDFOperator{l}: [COSFloat{9338.57129}, COSFloat{667.6051}]
PDFOperator{f}: []

Exception in thread "main" java.lang.OutOfMemoryError: GC overhead limit exceeded
        at sun.java2d.cmm.kcms.CMMImageLayout.<init>(Unknown Source)
        at sun.java2d.cmm.kcms.ICC_Transform.colorConvert(Unknown Source)
        at java.awt.color.ICC_ColorSpace.toRGB(Unknown Source)
        at org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB(PDDeviceRGB.java:82)
        at org.apache.pdfbox.pdmodel.graphics.shading.ShadingContext.convertToRGB(ShadingContext.java:142)
        at org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext.evalFunctionAndConvertToRGB(TriangleBasedShadingContext.java:167)
        at org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext.calcPixelTable(TriangleBasedShadingContext.java:121)
        at org.apache.pdfbox.pdmodel.graphics.shading.GouraudShadingContext.calcPixelTable(GouraudShadingContext.java:111)
        at org.apache.pdfbox.pdmodel.graphics.shading.TriangleBasedShadingContext.createPixelTable(TriangleBasedShadingContext.java:80)
        at org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingContext.<init>(Type4ShadingContext.java:65)
        at org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingPaint.createContext(Type4ShadingPaint.java:66)
        at sun.java2d.pipe.AlphaPaintPipe.startSequence(Unknown Source)
        at sun.java2d.pipe.SpanShapeRenderer$Composite.startSequence(Unknown Source)
        at sun.java2d.pipe.SpanShapeRenderer.renderSpans(Unknown Source)
        at sun.java2d.pipe.SpanShapeRenderer.fill(Unknown Source)
        at sun.java2d.pipe.ValidatePipe.fill(Unknown Source)
        at sun.java2d.SunGraphics2D.fill(Unknown Source)
        at org.apache.pdfbox.rendering.PageDrawer.fillPath(PageDrawer.java:611)
The problem is that a type 4 shading ("gouraud shading") is called with huge triangles (not shown here but I saw it in debugging) and huge device bounds (e.g. x=-10551.004,y=667.6051,w=19889.574,h=779.4863). The shading routines of types 4-7 create a mapping table for the color of every point in a shading triangle. Because these triangles and the device bounds are so huge, the table is huge and takes a long time to be calculated, uses a lot of memory, with the result above.
IMHO it is a java bug, it should consider the clipping when calculating the device bounds when calling Paint.createContext() and not pass device bounds outside of the clipping region. The solution will be (once again ) to do ourselves what java doesn't.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"22/Jul/15 16:21","02/Nov/16 10:35","22/Jul/15 18:58"
PDFBOX-2903,PDFBOX,"ClassCastException at PDFParser:667",Bug,CLOSED,Major,Fixed,1.8.10,1.8.11,Parsing,None,,"from "skenny" in the user mailing list:
I'm using PDFMergerUtility to merge a number of PDF input streams and write
them to an HTTP response output stream. One of the PDFs is failing at line
667 in PDFParser:
    final COSName objectType = (COSName)strmObj.getItem( COSName.TYPE );
The result of getItem(COSName.TYPE) is a COSString (value "Metadata") and
not a COSName.",0,"Tilman Hausherr","Tilman Hausherr",0,4,"24/Jul/15 14:57","18/Jan/16 12:01","25/Jul/15 05:03"
PDFBOX-2905,PDFBOX,"Replace PDFReader with PDFDebugger",Improvement,CLOSED,Blocker,Fixed,2.0.0,2.0.0,None,None,,"As discussed on the mailing list:
Here's an idea: if we switch PDFDebugger to using "View Pages" by default, it will no longer be confusing for casual users. I've found myself using this mode most of the time anyway. We can add page up/down too, of course - preferably using the actual "Page Up" and "Page Down" keys rather than the bizarre choice of the +/- keys which are currently used in PDFReader.",0,"Andreas Lehmkühler","John Hewson",0,6,"27/Jul/15 18:12","17/Mar/16 19:07","30/Sep/15 18:44"
PDFBOX-2906,PDFBOX,"NullPointerException in PDFStreamEngine.showText",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,regression,,"Happens when trying to render page 2:
Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
 at org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:699)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.showTextString(PDFStreamEngine.java:552)
 at org.apache.pdfbox.rendering.PageDrawer.showTextString(PageDrawer.java:289)
 at org.apache.pdfbox.contentstream.operator.text.ShowText.process(ShowText.java:44)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:794)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:460)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:437)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:148)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:180)
 at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:205)
Rendering did work with rev 1633472.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"28/Jul/15 16:48","17/Mar/16 19:08","29/Jul/15 16:37"
PDFBOX-2909,PDFBOX,"NullPointerException when rendering shading with no function",Bug,CLOSED,Minor,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Rendering,"shading shadingpatte",,"Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
        at org.apache.pdfbox.pdmodel.graphics.shading.PDShading.getFunctionsArray(PDShading.java:354)
        at org.apache.pdfbox.pdmodel.graphics.shading.PDShading.evalFunction(PDShading.java:386)
        at org.apache.pdfbox.pdmodel.graphics.shading.PDShading.evalFunction(PDShading.java:374)
        at org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext.calcColorTable(AxialShadingContext.java:151)
        at org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext.<init>(AxialShadingContext.java:128)
        at org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingPaint.createContext(AxialShadingPaint.java:67)
Found at https://github.com/mozilla/pdf.js/issues/5509 . The cause of the bug is that we're not throwing an exception for a missing function. Fun fact: Adobe Reader isn't able to display the file correctly, the contents of the yellow box are missing.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"29/Jul/15 16:44","18/Jan/16 12:01","29/Jul/15 17:23"
PDFBOX-2911,PDFBOX,"Merge does not close input streams",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Utilities,None,,"As explained in the linked SO post: merge closes the source documents, but not the source streams.
One can call addSource() with a File object and then there would be no way for the caller to close the inputstream, so that would be a bug for sure. Not yet sure what to do when called with streams.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"30/Jul/15 15:06","18/Jan/16 12:01","30/Jul/15 18:45"
PDFBOX-2914,PDFBOX,"java.lang.NegativeArraySizeException in org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.createColorModel",Bug,CLOSED,Major,Fixed,1.8.10,1.8.11,None,None,,"The following exception gets logged out when converting some of our PDFs to images:
java.lang.NegativeArraySizeException
at org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.createColorModel(PDDeviceGray.java:99)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:354)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.mask(PDXObjectImage.java:215)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.applyMasks(PDXObjectImage.java:148)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:366)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:87)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:139)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:801)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:130)
at org.apache.pdfbox.PDFToImage.main(PDFToImage.java:226)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:96)
Can be reproduced from the commandline:
java -jar pdfbox-app-1.8.10.jar PDFToImage 67c9515d-f7dd-4208-aada-c4489e91160c.pdf",0,"Tilman Hausherr","Aleksander Blomskøld",0,3,"03/Aug/15 12:46","18/Jan/16 12:01","04/Aug/15 20:22"
PDFBOX-2916,PDFBOX,"ArrayIndexOutOfBoundsException in CmapSubtable.processSubtype6",Bug,CLOSED,Major,Fixed,"1.8.10, 2.0.0","1.8.11, 2.0.0","FontBox, Preflight",None,,"I downloaded a PDF (https://core.tdar.org/document/372138/vanishing-river-volume-1-part-2-other-pre-classic-sites-in-the-lvap-study-area-chapters-5-6) and converted it to a PDF using ABBYY FineReader. In attempting to preflight the PDF I encountered two separate exceptions.
*Note*, these PDFs are not small, hence not attaching them directly, if someone who is looking at the issue needs them, feel free to contact me and I can share them directly.
java.lang.ArrayIndexOutOfBoundsException: -14
 at org.apache.pdfbox.preflight.font.container.CIDType2Container.getFontProgramWidth(CIDType2Container.java:60)
 at org.apache.pdfbox.preflight.font.container.Type0Container.getFontProgramWidth(Type0Container.java:45)
 at org.apache.pdfbox.preflight.font.container.FontContainer.checkGlyphWith(FontContainer.java:115)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validText(ContentStreamWrapper.java:372)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validStringArray(ContentStreamWrapper.java:296)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validStringArray(ContentStreamWrapper.java:292)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.checkShowTextOperators(ContentStreamWrapper.java:208)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.processOperator(ContentStreamWrapper.java:180)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
 at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validPageContentStream(ContentStreamWrapper.java:75)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateContent(SinglePageValidationProcess.java:179)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:87)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:81)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:54)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:81)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:96)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
 at org.tdar.core.parser.PdfaTest.testFile(PdfaTest.java:44)
 at org.tdar.core.parser.PdfaTest.test(PdfaTest.java:21)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:606)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
 at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
 at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
 at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
 at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
 at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
 at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
 at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
and
java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.font.PDType0Font.getFontWidth(PDType0Font.java:188)
 at org.apache.pdfbox.preflight.font.container.FontContainer.checkGlyphWith(FontContainer.java:114)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validText(ContentStreamWrapper.java:372)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validStringArray(ContentStreamWrapper.java:296)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validStringArray(ContentStreamWrapper.java:292)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.checkShowTextOperators(ContentStreamWrapper.java:208)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.processOperator(ContentStreamWrapper.java:180)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:235)
 at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:215)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validPageContentStream(ContentStreamWrapper.java:75)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateContent(SinglePageValidationProcess.java:179)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:87)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:81)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:54)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:81)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:96)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)
 at org.tdar.core.parser.PdfaTest.testFile(PdfaTest.java:44)
 at org.tdar.core.parser.PdfaTest.test(PdfaTest.java:21)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:606)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
 at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
 at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
 at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
 at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
 at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
 at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
 at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
I've tried opening these PDFs in acrobat and Callas PDFTool and validate them and they have no issues.",0,"Andreas Lehmkühler","adam brin",0,4,"05/Aug/15 19:56","18/Jan/16 12:01","11/Aug/15 20:03"
PDFBOX-2917,PDFBOX,"PDF to Image, faint/dim Images",Bug,CLOSED,Trivial,Fixed,2.0.0,"2.0.9, 3.0.0 PDFBox",None,"images newbie","windows 8, java 1.8","pdftoimage.java
PDDocument document = null;
        File file = new File("F:\\Projects\\java\\pdfbox\\complete.pdf");
        document = PDDocument.load( file );

        try {
            // retrieve image
            BufferedImage bi = new PDFRenderer(document).renderImageWithDPI( 0 , 150, ImageType.RGB );
            File outputfile = new File("saved0.png");
            ImageIO.write(bi, "png", outputfile);
        } catch (IOException e) {

        }",0,"Tilman Hausherr","Samuil Goranov",0,5,"05/Aug/15 20:27","24/Mar/18 09:41","19/Feb/18 18:00"
PDFBOX-2919,PDFBOX,"org.apache.fontbox.cff.CFFParser.readEntry sometimes throws java.lang.IllegalArgumentException",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.0, (3)","1.8.13, 2.0.3, 3.0.0 PDFBox",FontBox,pdfbox,"mac os","It happened on one of my PDFs. Traceback:
Processing p5.pdf...
Exception in thread "main" java.lang.reflect.InvocationTargetException
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:483)
at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:58)
Caused by: java.lang.IllegalArgumentException
at org.apache.fontbox.cff.CFFParser.readEntry(CFFParser.java:209)
at org.apache.fontbox.cff.CFFParser.readDictData(CFFParser.java:177)
at org.apache.fontbox.cff.CFFParser.parseType1Dicts(CFFParser.java:608)
at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:466)
at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:115)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:99)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:60)
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:121)
at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:50)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:798)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:460)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:437)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:148)
at org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:117)
at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:303)
at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:248)",0,"Tilman Hausherr",V,0,4,"06/Aug/15 10:50","25/Mar/17 18:13","09/Aug/16 15:27"
PDFBOX-2922,PDFBOX,"Printing issues with landscape pages",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"Would you please remove the final modifier from PDFPrintable and PDFPageable so that one can extending those classes.
UPDATE: I've modified the original title of this issue to reflect the underlying bug, rather than the user wanting to have "final" removed for these classes and fix the bug themselves.",0,"John Hewson","Pei-Tang Huang",0,2,"07/Aug/15 08:36","09/Jul/16 11:25","12/Aug/15 02:39"
PDFBOX-2924,PDFBOX,"ClassCastException when doing PDFSplit",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Utilities,None,,"Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSArray cannot be cast to org.apache.pdfbox.cos.COSDictionary
 at org.apache.pdfbox.pdmodel.PDDocumentCatalog.getViewerPreferences(PDDocumentCatalog.java:136)
 at org.apache.pdfbox.multipdf.Splitter.createNewDocument(Splitter.java:190)
 at org.apache.pdfbox.multipdf.Splitter.createNewDocumentIfNecessary(Splitter.java:154)
 at org.apache.pdfbox.multipdf.Splitter.processPage(Splitter.java:204)
 at org.apache.pdfbox.multipdf.Splitter.processPages(Splitter.java:128)
 at org.apache.pdfbox.multipdf.Splitter.split(Splitter.java:63)
 at org.apache.pdfbox.tools.PDFSplit.split(PDFSplit.java:171)
 at org.apache.pdfbox.tools.PDFSplit.main(PDFSplit.java:59)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:85)
The cause is a file that has ViewerPreferences as an array (should be a dictionary).
1 0 obj
<< /Title (Example Manual)
/Author (Doc Writer)
/Creator (Asciidoctor PDF 1.5.0.alpha.9, based on Prawn 1.3.0)
/Producer (Doc Writer)
/CreationDate (D:20150807192809+02'00')
/ModDate (D:20150807192809+02'00')
>>
endobj
2 0 obj
<< /Type /Catalog
/Pages 3 0 R
/Names 14 0 R
/Outlines 70 0 R
/PageLabels 86 0 R
/PageMode /UseOutlines
/ViewerPreferences [/FitWindow]
>>
endobj
I also opened an issue here:
https://github.com/asciidoctor/asciidoctor-pdf/issues/303",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Aug/15 20:01","18/Jan/16 12:01","07/Aug/15 20:13"
PDFBOX-2925,PDFBOX,"EmptyStackException in PDFStreamEngine.getColorSpaces",Bug,CLOSED,Major,Fixed,1.8.10,1.8.11,Preflight,None,,"From Abel S. in the user mailing list:
I'm testing prawn generated PDFs (https://github.com/prawnpdf/prawn) and I have found that when trying to validate them with PreflightParser, I get an unchecked exception instead of an expected org.apache.pdfbox.preflight.exception.ValidationException.
I attach the PDF (example-manual.pdf) and here is the stacktrace:
Exception in thread "main" java.util.EmptyStackException
 at java.util.Stack.peek(Stack.java:102)
 at org.apache.pdfbox.util.PDFStreamEngine.getColorSpaces(PDFStreamEngine.java:579)
 at org.apache.pdfbox.util.operator.SetNonStrokingColorSpace.process(SetNonStrokingColorSpace.java:50)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.processOperator(ContentStreamWrapper.java:162)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:268)
 at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:244)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validXObjContentStream(ContentStreamWrapper.java:100)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validateXObjectContent(XObjFormValidator.java:113)
 at org.apache.pdfbox.preflight.xobject.XObjFormValidator.validate(XObjFormValidator.java:76)
 at org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess.validate(GraphicObjectPageValidationProcess.java:77)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:81)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:54)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateXObjects(ResourcesValidationProcess.java:191)
 at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:78)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:81)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:54)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:163)
 at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:82)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:81)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:54)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:58)
 at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:47)
 at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:81)
 at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:96)
 at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:168)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Aug/15 06:17","18/Jan/16 12:01","08/Aug/15 06:22"
PDFBOX-2927,PDFBOX,"Print with PrintRanges printRequestAttribute causing document to be cropped",Bug,CLOSED,Major,Unresolved,2.0.0,2.0.0,Rendering,None,,"When printing with PrintRanges printRequestAttribute, the printed out document will be cropped.",0,"John Hewson","Pei-Tang Huang",0,1,"11/Aug/15 08:34","14/Aug/15 04:12","14/Aug/15 04:12"
PDFBOX-2928,PDFBOX,"Add numPages parameter of Book in Printing.printWithPaper example",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,Utilities,Example,,"Book has a constructor taking 3 parameters, is it OK to use this one in Printing.printWithPapaer?
I found the current usage of Book will cause all pages but the first one been omitted.",0,"Andreas Lehmkühler","Pei-Tang Huang",0,3,"11/Aug/15 09:45","17/Mar/16 19:07","05/Oct/15 18:09"
PDFBOX-2929,PDFBOX,""Illegal instruction: 4" with PDFToImage",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,"java 1.8, mac os x","Attached file (page 4 from http://www.researchgate.net/publication/237090017_Paper_110 ) crashes JDK when rendered with 73, 100, 200 or 400 dpi but not with 72 or 300 dpi.",0,"John Hewson","Tilman Hausherr",1,3,"11/Aug/15 22:41","17/Mar/16 19:08","11/Aug/15 23:41"
PDFBOX-2930,PDFBOX,"PDFPageable does not rotate portrait document with 90°/270° rotation well",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"Portrait document produced by JasperReports won't be print correctly by PDFPageable.",0,"John Hewson","Pei-Tang Huang",0,2,"12/Aug/15 06:06","17/Mar/16 19:07","06/Nov/15 00:26"
PDFBOX-2931,PDFBOX,"Make PDFPrintable margin-aligning and centering optional",Improvement,CLOSED,Major,Fixed,None,2.0.0,Rendering,None,,"As mentioned in PDFBOX-2922 , it will be great if there exists option to control whether to margin-aligning / centering or not.
Besides, should pdfbox have a "printing" component in JIRA?",0,"John Hewson","Pei-Tang Huang",0,2,"12/Aug/15 07:59","17/Mar/16 19:08","06/Nov/15 00:37"
PDFBOX-2932,PDFBOX,"NPE in PDSignature.getValuesAsString() when field contains no value",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,None,,"When the signature field has no value an NPE is thrown in PDSignature.getValueAsString()",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"12/Aug/15 10:08","17/Mar/16 19:08","12/Aug/15 10:17"
PDFBOX-2933,PDFBOX,"Drop ant build including .NET build support",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,.NET,None,,"I'm going to remove the redundant and incomplete ant build as we don't need just another build. This will remove the .NET build support as well, which is neither maintained nor supported by the core PDFBox team.
I'm happy to add some .NET build support based on maven, see PDFBOX-2705 for further details.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"12/Aug/15 16:21","17/Mar/16 19:06","12/Aug/15 16:44"
PDFBOX-2934,PDFBOX,"Support smask /S /Alpha",Sub-task,CLOSED,Major,Fixed,2.0.0,"2.0.4, 3.0.0 PDFBox",Rendering,None,,"The smask feature /S /Alpha is either not implemented or not working at all. I have two files that are wrongly rendered with the current software, and correctly rendered when the feature is disabled (!). As a first step, I am disabling it for now and attach test files. Johns proposed patch has also disabled the feature, so I think we can agree on that.",0,"Tilman Hausherr","Tilman Hausherr",0,5,"13/Aug/15 17:28","25/Mar/17 18:12","04/Oct/16 16:28"
PDFBOX-2935,PDFBOX,"Problem while extracting font from PDFontSetting (used in PDExtendedGraphicsState)",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0","Parsing, PDModel",None,,"PDFontSetting.getFont() :
public PDFont getFont() throws IOException
    {
        PDFont retval = null;
        COSBase font = fontSetting.get( 0 );
        if( font instanceof COSDictionary )
        {
            retval = PDFontFactory.createFont( (COSDictionary)font );
        }
        return retval;
    }
If font is referenced as indirect object this method returns null, while font is valid and present in document.
Example :
10 0 obj
<<
/Font [13 0 R 60000]
/Type /ExtGState
>>
endobj

13 0 obj
<<
/BaseFont /ASJKFO+Arial-BoldMT
/Encoding /WinAnsiEncoding
/FirstChar 65
/FontDescriptor 16 0 R
/LastChar 65
/Subtype /TrueType
/Type /Font
/Widths [722]
>>
endobj",0,"Tilman Hausherr","Timur Kamalov",0,3,"14/Aug/15 11:49","18/Jan/16 12:01","17/Aug/15 16:07"
PDFBOX-2936,PDFBOX,"javax.crypto.BadPaddingException: Given final block not properly padded",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0","Crypto, Preflight",DHS,"java 1.8","I get the following stack trace when trying to parse certain pdfs:
org.apache.pdfbox.preflight.exception.SyntaxValidationException
        at org.apache.pdfbox.preflight.parser.PreflightParser.parse(PreflightParser.java:203)
        at org.apache.pdfbox.preflight.parser.PreflightParser.parse(PreflightParser.java:180)
        at org.apache.pdfbox.preflight.parser.PreflightParser.parse(PreflightParser.java:168)
        at PDFBoxTest.main(hello.java:11)
Caused by: org.apache.pdfbox.exceptions.WrappedIOException
        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:376)
        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptString(SecurityHandler.java:578)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decryptString(NonSequentialPDFParser.java:1571)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decryptDictionary(NonSequentialPDFParser.java:1535)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decrypt(NonSequentialPDFParser.java:1596)
        at org.apache.pdfbox.preflight.parser.PreflightParser.parseObjectDynamically(PreflightParser.java:797)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1343)
        at org.apache.pdfbox.preflight.parser.PreflightParser.initialParse(PreflightParser.java:273)
        at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:886)
        at org.apache.pdfbox.preflight.parser.PreflightParser.parse(PreflightParser.java:198)
        ... 3 more
Caused by: javax.crypto.BadPaddingException: Given final block not properly padded
        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:966)
        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:824)
        at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:436)
        at javax.crypto.Cipher.doFinal(Cipher.java:2004)
        at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:352)
        ... 12 more
The parsing code looks something like:
FileDataSource fd = new FileDataSource("i-129.pdf");
PreflightParser parser = new PreflightParser(fd);
parser.parse();",0,"Tilman Hausherr","Daniel Woelfel",0,3,"15/Aug/15 01:35","13/Apr/17 13:48","18/Aug/15 16:20"
PDFBOX-2937,PDFBOX,"Field duplication in PDIndexed color space",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Class PDColorSpace contains field:
protected COSArray array;
But PDIndexed class also has field:
private COSArray array;
Thus, PDColorSpace.getCOSObject return null instead of array from PDIndexed.
Possible solutions:
discard duplicate field from PDIndexed
override method getCOSObject()",0,"Tilman Hausherr","Evgeniy Muravitskiy",0,3,"17/Aug/15 12:00","17/Mar/16 19:07","17/Aug/15 15:53"
PDFBOX-2938,PDFBOX,"Add 1.8.10 javadocs to pdfbox website",Task,CLOSED,Major,Fixed,1.8.10,1.8.11,Documentation,None,,"The 1.8.10 javadocs are missing from our website.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"19/Aug/15 11:56","18/Jan/16 12:01","19/Aug/15 13:50"
PDFBOX-2939,PDFBOX,"PDFRenderer.renderImageWithDPI exception with certain PDFs",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"FontBox, Rendering",None,"widnows 8","I use the PDFRender in my application and noticed that the renderImageWithDPI method throws an exception with certain pdf files. The bug can be reproduced with the pdfbox-app command below. The medibank.pdf file is available via my Google Drive account:
https://drive.google.com/file/d/0B7b7_UXpgIdGb2djYTNDNmVtVTA/view?usp=sharing
$ java -jar pdfbox-app-2.0.0-20150819.113526-1604.jar PDFToImage medibank.pdf
Aug 20, 2015 3:53:43 PM org.apache.pdfbox.rendering.TTFGlyph2D getPathForGID
WARNING: No glyph for 119 (CID 0077) in font GlyphLessFont
Exception in thread "main" java.io.EOFException: premature EOF
at org.apache.fontbox.ttf.TTFDataStream.readUnsignedByte(TTFDataStream.java:117)
at org.apache.fontbox.ttf.GlyfSimpleDescript.readFlags(GlyfSimpleDescript.java:196)
at org.apache.fontbox.ttf.GlyfSimpleDescript.<init>(GlyfSimpleDescript.java:77)
at org.apache.fontbox.ttf.GlyphData.initData(GlyphData.java:58)
at org.apache.fontbox.ttf.GlyphTable.getGlyph(GlyphTable.java:161)
at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.getPath(PDCIDFontType2.java:418)
at org.apache.pdfbox.pdmodel.font.PDType0Font.getPath(PDType0Font.java:486)
at org.apache.pdfbox.rendering.TTFGlyph2D.getPathForGID(TTFGlyph2D.java:141)
at org.apache.pdfbox.rendering.TTFGlyph2D.getPathForCharacterCode(TTFGlyph2D.java:93)
at org.apache.pdfbox.rendering.PageDrawer.drawGlyph2D(PageDrawer.java:343)
at org.apache.pdfbox.rendering.PageDrawer.showFontGlyph(PageDrawer.java:324)
at org.apache.pdfbox.contentstream.PDFStreamEngine.showGlyph(PDFStreamEngine.java:727)
at org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:684)
at org.apache.pdfbox.contentstream.PDFStreamEngine.showTextStrings(PDFStreamEngine.java:592)
at org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted.process(ShowTextAdjusted.java:38)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:798)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:460)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:437)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:148)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:179)
at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:205)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:136)
at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:95)
at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:236)
at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:89)",0,"Tilman Hausherr","Bjoern Krollner",0,3,"20/Aug/15 05:57","17/Mar/16 19:07","20/Aug/15 16:03"
PDFBOX-2940,PDFBOX,"ClassCastException in FDF export",Bug,CLOSED,Major,Fixed,1.8.10,1.8.11,AcroForm,None,,"We have some simple code extracting FDF from a PDF like
PDDocument pdf = PDDocument.load(inputStream);
PDAcroForm form = pdf.getDocumentCatalog().getAcroForm();
FDFDocument fdf = form.exportFDF();
Everything was fine with previous versions of pdfbox (1.8.8 in particular) but version 1.8.10 throws an exception :
java.lang.ClassCastException: org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget cannot be cast to org.apache.pdfbox.pdmodel.interactive.form.PDField
 at org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm.addFieldAndChildren(PDAcroForm.java:168)
 at org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm.exportFDF(PDAcroForm.java:145)
I join the sample PDF that was used for this test",0,"Maruan Sahyoun","Laurent Richard",0,4,"20/Aug/15 15:14","18/Jan/16 12:01","22/Aug/15 09:56"
PDFBOX-2943,PDFBOX,"PDType3Font.getWidthFromFont not supported",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,type3,,"This method is still not implemented.
Does anyone working on this issue? If not I will be happy to contribute and propose implementation.
In fact it's not a very complicated task : you just need to parse d0 or d1 operator from glyph's content stream (stored in CharProcs).",0,"John Hewson","Timur Kamalov",0,4,"24/Aug/15 10:11","17/Mar/16 19:08","15/Oct/15 19:50"
PDFBOX-2945,PDFBOX,"PDType1Font.getNameInFont(String) very slow when Unicode fallback is used",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,"windows 10, java 1.7","When the method is called on a non-embedded font and the unicode fallback is used, the line "String uniName = String.format("uni%04X", unicodes.codePointAt(0));" is called and it is very slow. I suggest either adding a cache (codepoint to uniname) or at least replace the String.format call with something different, as this internally invokes a new RegExp Matcher etc.
Something like the following might do the trick (maybe you have a better utility classes):
        final StringBuilder aID = new StringBuilder (Integer.toString (unicodes.codePointAt (0), 16).toUpperCase (Locale.US));
        while (aID.length () < 4)
             aID.insert (0, '0');
        aID.insert (0, "uni");
        final String uniName = aID.toString ();",0,"Tilman Hausherr","Philip Helger",0,3,"25/Aug/15 16:28","17/Mar/16 19:08","30/Nov/15 17:20"
PDFBOX-2946,PDFBOX,"Symbol glyphs not aligned",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,"windows 7, java 1.7","Symbol glyphs not aligned in rendering",0,"Tilman Hausherr","Tilman Hausherr",0,2,"25/Aug/15 18:41","17/Mar/16 19:07","03/Sep/15 06:31"
PDFBOX-2948,PDFBOX,"NPE in PDStream.createInputStream",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"If there are no filter defined for a stream than PDStream.createInputStream throws a NPE because it does not check if getFilters returned 'null'.",0,"Timo Boehme","Timo Boehme",0,2,"27/Aug/15 13:27","17/Mar/16 19:07","27/Aug/15 13:40"
PDFBOX-2949,PDFBOX,"Rendering to ARGB brings black background",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"As reported by Jon Wu in the user mailing list... instead of the somewhat long thread, here's code I tried:
try (PDDocument document = PDDocument.load(new File(dir, "dora.pdf")))
        {
            PDFRenderer pdfRenderer = new PDFRenderer(document);

            BufferedImage bim = pdfRenderer.renderImageWithDPI(0, 300, ImageType.RGB);
            ImageIO.write(bim, "png", new File(dir, "dorargb.png"));
            bim = pdfRenderer.renderImageWithDPI(0, 300, ImageType.ARGB);
            ImageIO.write(bim, "png", new File(dir, "doraargb.png"));

        }
PDFRenderer has this:
        Graphics2D g = image.createGraphics();
        if (imageType != ImageType.ARGB)
        {
            g.setBackground(Color.WHITE);
        }
We could just remove the line with the "if" and the braces. The question is, is the current behaviour a fault or a feature? Note that the ARGB image has a detail that is invisible in the RGB image.",0,"John Hewson","Tilman Hausherr",0,3,"28/Aug/15 17:51","17/Mar/16 19:08","01/Sep/15 06:05"
PDFBOX-2950,PDFBOX,"Chinese font substitution issue",Bug,CLOSED,Major,Fixed,"1.8.10, 2.0.0",2.0.0,Rendering,None,"windows 8, java 1.7","java -jar pdfbox-app-1.8.10.jar PDFToImage 20150829A01_pdf.pdf",0,"John Hewson",WuYu,0,4,"29/Aug/15 09:51","17/Mar/16 19:07","06/Nov/15 21:48"
PDFBOX-2951,PDFBOX,"quotedbl causes NullPointerException",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,"windows 10","I have a pdf document using (besides others) the font CourierNewPS-BoldMT and text with this font containing a double quote.
When calling PDFont.encode, this results in a NullPointerException due to the following:
The font encoding is built using pdf /DIFFERENCES which overwrites the original "quotedbl" at index 34 with an "A". The entries for quotedblbase/left/right are left unchanged. As a result, the inverted font does not contain "quotedbl" as key.
Within encode, the character code 34 gets assigned the name "quotedbl", which is then not found in the inverse encoding (PDTrueTypeFont.encode -> int code = inverted.get(name))
Right before this code line causing the NullPointerException, there is a check whether ttf.hasGlyph("quotedbl") (which in this case is false) and, if not, whether ttf.hasGlyph("uni0022") (which in this case is true); however, this has no consequence for the continuation of the code, which then crashes, since inverted.get("quotedbl") is null (which is assigned to an int).
I believe, this is a bug in PDFBox, but have no idea, whether the handling within encode should be changed (maybe using the "else" part in case ttf.hasGlyph("quotedbl") is false or whether code 34 should be assigned to quotedblbase in the first place, or even something else.
I attached the file (Test.pdf) where the error occurs and a jar (main is com.juergisApps.pdfConverter.Test) that reproduces the problem.
You may also see http://stackoverflow.com/questions/7140476/pdf-font-mapping-error
Juergen",0,"John Hewson","Juergen Uhl",0,2,"01/Sep/15 10:53","17/Mar/16 19:07","02/Sep/15 20:35"
PDFBOX-2952,PDFBOX,"Log statement on level 'severe' while nothing else indicates error",Improvement,CLOSED,Major,Fixed,1.8.10,1.8.11,FontBox,None,"ubuntu, java 1.7","I use PdfBox to insert a little bit of text at the top of my PDF-documents. I have found one case (one input document) where Fontbox emits a log record on level severe/error, without throwing any exception, and where I cannot see any problems with the output PDF document when inspecting it manually.
The log record causes noise and disturbance for our operations guys, who use some automatic log monitoring tool that will raise an alarm for any log record with level "severe"/"error", and that will even raise a notice for log records with level "warning".
I can configure our logging tool to ignore all logging from the Fontbox Java class as a workaround, but I would prefer not to.
I will try to attach to this Jira issue a zip file with the PDF document in case and a small, self-contained Java application that allows you to easily reproduce the problem.
The log record looks like this:
Sep 01, 2015 1:18:18 PM org.apache.fontbox.cmap.CMap addMapping
SEVERE: Mapping code should be 1 or two bytes and not 4",0,"Tilman Hausherr","Are Husby",0,3,"01/Sep/15 11:38","18/Jan/16 12:01","01/Sep/15 18:11"
PDFBOX-2956,PDFBOX,"PDFontDescriptor doesn't contain method getCIDSet.",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"Hello!
Is there any reason why PDFontDescriptor contains method setCIDSet(), but not getCIDSet()?
Attached a patch with this method if it should be there.",0,"Tilman Hausherr","Timur Kamalov",0,3,"03/Sep/15 08:23","17/Mar/16 19:08","03/Sep/15 17:41"
PDFBOX-2957,PDFBOX,"Glyphs rendered as gibberish",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"FontBox, Rendering",None,,"Glyphs rendered as gibberish
See also the fix in PDF.js
https://github.com/mozilla/pdf.js/pull/6270
https://github.com/mozilla/pdf.js/pull/6270/files",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"04/Sep/15 22:32","17/Mar/16 19:07","11/Feb/16 11:17"
PDFBOX-2958,PDFBOX,"TIFF-Predictor with 1 bit per component not supported",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Rendering,None,,"Support TIFF-Predictor with 1 bit per component, test file found in PDF.js attached.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/Sep/15 11:28","18/Jan/16 12:01","05/Sep/15 13:51"
PDFBOX-2959,PDFBOX,"type3 font glyphs overlapped",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,type3,,"Page 6 of this file
http://chrishecker.com/images/3/33/Gdmogl.pdf
(the author insists that it isn't put on another website)
Above the box there is the text "FOR FURTHER INFO" but the glyphs are overlapping each other.
Problem is in the T5 font at Root/Pages/Kids/[5]/Resources/Font/T5",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/Sep/15 18:19","17/Mar/16 19:06","06/Sep/15 11:24"
PDFBOX-2960,PDFBOX,"ClassCastException when pattern name is indirect object",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,None,,"Exception in thread "AWT-EventQueue-0" java.lang.ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSName
        at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create(PDColorSpace.java:134)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/Sep/15 18:55","17/Mar/16 19:07","05/Sep/15 19:00"
PDFBOX-2961,PDFBOX,"Checkbox with multiple widgets doesn't reflect check() state.",Bug,CLOSED,Major,Fixed,"1.8.10, 2.0.0",2.0.0,AcroForm,Appearance,,"If a checkbox has multiple annotations (i.e. the same checkbox field occurs multiple times within the form) the appearance state for the annotation widgets is not correctly set.
This has been reported on the users mailing list:
Hi,
I have a simple document with two PDCheckbox fields, and one of those fields has two AnnotationWidgets. I am able to successfully call check() on the first field and see the result in the output document, but calling check() on the field with multiple AnnotationWidgets has no effect.
My understanding of duplicated fields is that only a single PDField exists but that an AnnotationWidget kid will exist for each instance of the field in the document, so setting the PDField parent once should affect all of the children. Am I misunderstanding how this should work?
Attached is the document I am testing as well as a small Java class that reproduces the issue by calling check() on everything in getFields(). I have tried this with PDFBox 1.8.9, 1.8.10, and the 09/03 Snapshot of 2.0.0. I am viewing the document with Adobe Acrobat Reader DC Version 2015.008.20082.
Any insight would be appreciated.
Thanks,
Bart.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"06/Sep/15 16:42","17/Mar/16 19:08","08/Sep/15 14:24"
PDFBOX-2962,PDFBOX,"Handle TIFF predictor for bpc 2 and 4 / optimize existing predictor code",Improvement,CLOSED,Minor,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Rendering,None,,"I created code that will work for TIFF predictors with bpc 2 and 4. Because there are no test images, the code is written so that it can work with bpc 1, 2, 4 and 8 (but not 16) and has been tested on what we have, which are the corner cases bpc 1 and 8. The bit sequence retrieval / assignment methods have tests so the risk is small.
If anyone wants to optimize the new code, it should be retested with the same method, i.e. disable the (faster) code for bpc 1 and 8. And if it comes out that optimization went wrong, we'll still have this code as a fallback. However optimization isn't really needed, almost all files "in the wild" are bpc 8.
I also did some slight optimizations of the existing code, p - bytesPerPixel >= 0 ? ... can be removed by starting the for loop at bytesPerPixel.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Sep/15 16:43","18/Jan/16 12:01","07/Sep/15 17:28"
PDFBOX-2963,PDFBOX,"Remove Bouncy Castle Provider Reference",Improvement,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0","2.0.7, 3.0.0 PDFBox","Crypto, PDModel",None,,"PDFBox Versions 1.8.X and 2.0.X add Bouncy Castle as a security provider explicitly (Hard coded)
Referencing bouncy castle explicitly ties PDF box to a specific provider implementation.
Instead of referencing BouncyCastleProvider explicitly provide an option to select another provider or alternatively allow a way to override the default.
Version 1.8.X:
https://github.com/apache/pdfbox/blob/1.8.10/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandlersManager.java
public static SecurityHandlersManager getInstance()
    {
        if(instance == null)
        {
            instance = new SecurityHandlersManager();
            Security.addProvider(new BouncyCastleProvider());
        }
        return instance;
    }
Version 2.0.0:
https://github.com/apache/pdfbox/blob/trunk/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandlerFactory.java
   static
    {
        Security.addProvider(new BouncyCastleProvider());
    }",0,"Andreas Lehmkühler","Johnny Minty",2,6,"08/Sep/15 04:55","21/Jul/17 04:40","16/Jun/17 09:26"
PDFBOX-2964,PDFBOX,"Checkbox getOnValue() throws NPE",Bug,CLOSED,Major,Fixed,1.8.10,1.8.11,AcroForm,None,,"calling getOnValue() results in an NPE if the checkbox has multiple widgets assigned to it.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"08/Sep/15 16:04","18/Jan/16 12:01","09/Sep/15 06:21"
PDFBOX-2965,PDFBOX,"NPE in PDAcroForm.getField() if the /Fields entry is missing",Bug,CLOSED,Major,Fixed,"1.8.10, 2.0.0","1.8.11, 2.0.0",AcroForm,None,,"Form the users mailing list
I get a lot of weird documents. When I try to set a particular field value, some of them throw NullPointerExceptions from line PDAcroForm.getField(), line 291:
287: COSArray fields =
288: (COSArray) acroForm.getDictionaryObject(
289: COSName.getPDFName("Fields"));
290:
291: for (int i = 0; i < fields.size() && retval == null; i++)
292:{
To avoid this, at first I was calling PDAcroForm.getFields() and checking that to see if that was NULL but I realized that it would usually create a new fields array to return which seemed wasteful.
Is the most efficient way to avoid this to first call:
COSArray fields = (COSArray) acroForm.getDictionaryObject( COSName.getPDFName("Fields"));
myself and check if that is NULL?
Secondary Question:
The method PDAcroForm.getFields() does a not-NULL check of fields before calling fields.size().
Is there a reason that this check is not performed in getField()?",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"08/Sep/15 17:33","18/Jan/16 12:01","09/Sep/15 06:50"
PDFBOX-2966,PDFBOX,"Glyphs overlapping in rendering",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"See attachment, this is reduced (but uncompressed) from the original pdf. All the glyphs render at about the same position. I did some tracing, the widths of the glyphs are about the same as the values within TJ.",0,"John Hewson","Tilman Hausherr",0,3,"10/Sep/15 15:47","27/Feb/18 06:33","29/Oct/15 06:03"
PDFBOX-2969,PDFBOX,"RandomAccessBuffer clone is broken for non-default chunk size",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"When RandomAccessBuffer is initialized with an array it uses the array length as chunkSize. This is not respected by RandomAccessBuffer.clone which sets default length chunkSize but generates cloned buffers in the source chunkSize length. Thus a corrupt clone is created.",0,"Timo Boehme","Timo Boehme",0,2,"14/Sep/15 12:37","17/Mar/16 19:07","14/Sep/15 12:56"
PDFBOX-2970,PDFBOX,"Add capability to flatten AcroForm form fields",Improvement,CLOSED,Major,Fixed,"1.8.10, 2.0.0",2.0.0,AcroForm,None,,"There should be a capability to flatten AcroForm form fields.",0,"Maruan Sahyoun","Maruan Sahyoun",0,5,"14/Sep/15 16:39","17/Mar/16 19:07","05/Feb/16 17:35"
PDFBOX-2971,PDFBOX,"CalGray white rendered as cyan",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,None,CalGray,,"The attached PDF uses CalGray colors. When converted to a jpeg using PdfToImage, there is a cyan rectangle visible. Acrobat shows the same rectangle as white.
The PDF uses a CalGray having white point (0.9505, 1, 1.089). The color value after applying gamma is 1.0, i.e. white was intended. The class PDCalGray multiplies the value by the white point to get X, Y, Z and sends it to the java built-in CIEXYZ profile to convert it into sRGB. I believe the problem is that the white point of CIEXYZ in java is (0.9642, 1.0000, 0.8249) and we need to adapt the white point before sending the values to it. There are several methods to do that, but the easiest one is a simple scaling. In our case it would meant to multiply the color value by the CIEXYZ white point instead of the white point given in the CalGray.
I would not like to pretend that I am an expert in this area. I found the information in the internet and in the java sources of ColorSpace and ICC_ColorSpace and this is how I interpret it. An insight of someone who really understands the color management stuff would be appreciated. But my main point is that the result looks different compared to what is shown in Acrobat.
The PDF originally comes from a customer and contains text above the rectangles. I have removed the texts.",0,"Tilman Hausherr","Petr Slaby",0,3,"16/Sep/15 08:03","17/Mar/16 19:07","20/Sep/15 17:40"
PDFBOX-2972,PDFBOX,"Exception when RenderingIntent value is not one of the predefined.",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Hello!
Due to pdf specification there are four possible rendering intents : RelativeColorimetric, AbsoluteColorimetric, Perceptual or Saturation. But also there's a remark that "If the viewer application does not
recognize the specified name, it uses the RelativeColorimetric intent by default."
PDFBox throws exception while encountering unknown RenderingIntent which seems to be incorrect behavior.
Look at org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent.fromString",0,"Tilman Hausherr","Timur Kamalov",0,3,"16/Sep/15 11:05","17/Mar/16 19:08","16/Sep/15 18:32"
PDFBOX-2973,PDFBOX,"Actions shortage",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"According to PDF Reference 1.4, chapter 8.5.3 and 8.6.4, pdf document may contain actions of following types: Thread, Sound, Movie, Hide, Submit-Form, Reset-Form, Import-Data. But this action types is not implemented.",0,"Tilman Hausherr","Evgeniy Muravitskiy",0,2,"17/Sep/15 12:08","09/Jul/16 13:54","17/Sep/15 18:09"
PDFBOX-2974,PDFBOX,"Multi Page print doesn't work with "book.append(new PDFPrintable(document), pageFormat);"",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,None,"example multipage pr",,"In the method printWithPaper of Printing.java example,
if I use java.awt.print.Book as in the example:
Book book = new Book();
book.append(new PDFPrintable(document), pageFormat);
job.setPageable(book);
when I execute job.print(); it print only the first page of the document.
I solved this issue by replacing the three rows mentioned above with:
job.setPrintable(new PDFPrintable(document), pageFormat);
by that all pages are printed.
I hope this is useful for someone.
Matteo",0,"Andreas Lehmkühler","Matteo Carminati",0,2,"17/Sep/15 21:42","25/Sep/15 17:53","25/Sep/15 17:53"
PDFBOX-2976,PDFBOX,"java.util.zip.DataFormatException: incorrect data check",Bug,CLOSED,Major,Fixed,2.0.0,"1.8.11, 2.0.0",Parsing,None,"linuxmint, java 1.7, glassfish","When trying to open certain PDF files (examples attached, also any MSDS available at http://www.scbt.com/datasheet-356376.html ), an expection is thrown resulting in the file not being parsed:
java.io.IOException: java.util.zip.DataFormatException: incorrect data check
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)
at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:78)
at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:160)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:143)
at org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:148)
at org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:450)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:437)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:148)
at org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:117)
at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:303)
at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:248)
at org.apache.pdfbox.text.PDFTextStripper.getText(PDFTextStripper.java:209)
– or –
java.io.IOException: java.util.zip.DataFormatException: incorrect data check
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)
at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:78)
at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:160)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:143)
at org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:148)
at org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:450)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:437)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:148)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:179)
at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:205)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:136)",0,"Andreas Lehmkühler","Felix Rudolphi",0,5,"18/Sep/15 10:21","18/Jan/16 12:01","29/Oct/15 16:56"
PDFBOX-2977,PDFBOX,"Test case for "Cannot read while there is an open stream writer"",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,None,"test unit-test",,"This is a minimal regression test case related to PDFBOX-2893.
https://gist.github.com/Vad1mo/767f52a46e229dcaa5a6",0,"Tilman Hausherr",Vadimo,0,2,"20/Sep/15 13:41","20/Sep/15 21:28","20/Sep/15 15:16"
PDFBOX-2978,PDFBOX,"Add support for grouped checkboxes",Improvement,CLOSED,Major,Fixed,"1.8.10, 2.0.0",2.0.0,AcroForm,None,,"Checkboxes can be grouped together so they no longer act individually but similar to radio buttons (with some differences dependent on the field flags)",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"20/Sep/15 17:31","17/Mar/16 19:07","21/Sep/15 10:44"
PDFBOX-2981,PDFBOX,"Not correct support of incremental save",Bug,CLOSED,Major,Duplicate,2.0.0,None,Writing,None,,"When write code like follows:
try {
   PDDocument document = PDDocument.load(new File(SOURCE_PATH));
   // SOME_OBJECT is not object number of catalog, info dictionary or encrypt
   COSObjectKey key = new COSObjectKey(SOME_OBJECT, 0);
   COSObject objectFromPool = document.getDocument().getObjectFromPool(key);
   COSDictionary object = (COSDictionary) objectFromPool.getObject();
   object.setItem(COSName.getPDFName("Test"), COSBoolean.TRUE);
   object.setNeedToBeUpdated(true);
   OutputStream writer = new BufferedOutputStream(new FileOutputStream(OUTPUT_PATH));
   document.saveIncremental(writer);
   writer.close();
   document.close();
  } catch (IOException e) {
   e.printStackTrace();
  }
in result file I`ve got nothing. It`s related with next problem: when we use PDDocument.save(OutputStream) - OutputStream is real output stream (for example, FileOutputStream or BufferedOutputStream), but incremental save use ByteArrayOutputStream which not store data in some file and only keep it in memory. Also when save is incremental data from source file is not send to result file.",0,"Andreas Lehmkühler","Evgeniy Muravitskiy",0,3,"21/Sep/15 15:16","20/Sep/18 18:06","05/Mar/17 21:15"
PDFBOX-2982,PDFBOX,"fix ClassCastExceptions in operator methods",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Parsing,None,,"fix ClassCastExceptions reported in TIKA-1737 (see attachment there), like this one:
java.lang.ClassCastException: org.apache.pdfbox.cos.COSInteger cannot be cast to org.apache.pdfbox.cos.COSString
 at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:49) ~[ShowText.class:na]
 at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:557) [PDFStreamEngine.class:na]",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Sep/15 17:39","18/Jan/16 12:01","21/Sep/15 20:47"
PDFBOX-2983,PDFBOX,"Corrupted PDF after adding text",Bug,CLOSED,Major,"Won't Fix","1.8.9, 1.8.10",None,Writing,None,,"We have a web application which writes an official stamp to PDF documents after they have been approved. Recently some PDFs have become corrupted after the stamp is written to the document. The stamp appears on the document, but all other content is removed. Adobe Reader also displays a dialogue box indicating the document has been corrupted.",0,"Andreas Lehmkühler","Brian Schmoll",0,4,"21/Sep/15 21:51","19/Feb/16 16:48","19/Feb/16 16:48"
PDFBOX-2984,PDFBOX,"PDFTextStripper adds extra word/line delimiters when PDF page orientation is 180 degrees",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0, (3)","2.0.3, 3.0.0 PDFBox","Text extraction",None,"windows, linux, java 1.7","The PDFTextStripper adds word delimiters between each character and new-line after each word when page orientation is 180 degrees.
This happens because the PDFStreamEngine uses the raw scaling factor Matrix.getXScale() from the transformation Matrix to scale width/font-size which are used to calculate spacing between characters.
=========================================================
Output of the PDFTextStripper.getText(pdDoc);
T h i s i s
a t e s t 1 ! ! !
T h i s
i s
a t e s t
2
! ! !
T h i s i s
a
t e s t 3
! ! !
T h i s i s
a t e s t 4 ! ! !
=========================================================
Example: The following will result in negative spaceWidthDisp / font-size in PDFTextStripper
180 degrees = [-1, 0, 0; 0, -1, 0, w, h, 1]; therefore the textMatrix.getXScale() == -1
float spaceWidthDisp = spaceWidthText * fontSizeText * horizontalScalingText * textMatrix.getXScale() * ctm.getXScale()
fontSizeText * textMatrix.getXScale()",0,"Tilman Hausherr","dariusz dusberger",1,5,"22/Sep/15 01:19","25/Mar/17 18:12","27/Aug/16 15:04"
PDFBOX-2985,PDFBOX,"Potential NPE in PDMarkedContent#getMCID()",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",PDModel,None,,"I do not have a test case, but this method in PDMarkedContent is obviously wrong:
    public int getMCID()
    {
        return this.getProperties() == null ? null :
            this.getProperties().getInt(COSName.MCID);
    }
if getProperties() is null, the method tries to convert null Integer value to an int. I believe the intention was rather:
...
        return this.getProperties() == null ? 0 :
...",0,"Tilman Hausherr","Petr Slaby",0,3,"22/Sep/15 07:56","18/Jan/16 12:01","22/Sep/15 18:10"
PDFBOX-2986,PDFBOX,"Potential resource leak in TTFParser's use of RAFDataStream",Bug,CLOSED,Minor,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",FontBox,None,,"TTFParser offers a method that parses a file. It looks like the RandomAccessFile is never closed if there is an exception – I initially discovered this via running Tika batch on Common Crawl data, and code review confirms this. There should probably be a try/finally->close RAFDataStream in the parse#File method.",0,"Tilman Hausherr","Tim Allison",0,3,"22/Sep/15 15:39","18/Jan/16 12:01","23/Sep/15 19:11"
PDFBOX-2987,PDFBOX,"NPE in PDTrueTypeFont.extractCMaps",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11",1.8.11,PDModel,None,,"java.lang.NullPointerException: null
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.extractCMaps(PDTrueTypeFont.java:792) ~[PDTrueTypeFont.class:na]
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getGlyphcode(PDTrueTypeFont.java:698) ~[PDTrueTypeFont.class:na]
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getFontWidth(PDTrueTypeFont.java:676) ~[PDTrueTypeFont.class:na]
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.getFontWidth(PDSimpleFont.java:231) ~[PDSimpleFont.class:na]
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.getSpaceWidth(PDSimpleFont.java:533) ~[PDSimpleFont.class:na]",0,"Tilman Hausherr","Tilman Hausherr",0,3,"22/Sep/15 19:13","18/Jan/16 12:01","22/Sep/15 19:14"
PDFBOX-2988,PDFBOX,"Infinite recursion in ExtractImages 1.8.11-SNAPSHOT",Bug,CLOSED,Minor,Fixed,"1.8.10, 1.8.11",1.8.11,"PDModel, Utilities",None,,"On TIKA-1742, Nate Dire reported that a particular PDF causes an infinite recursion/stack overflow while trying to extract images.
I confirmed that this also happens with pure PDFBox 1.8.11-SNAPSHOT's ExtractImages.
The file.",0,"Tilman Hausherr","Tim Allison",0,3,"23/Sep/15 11:28","18/Jan/16 12:01","23/Sep/15 16:53"
PDFBOX-2989,PDFBOX,"LZW decode filter shouldn't throw IndexOutOfBoundsException",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",PDModel,None,,"Files 228638 and 440129 of the digitalcorpora site throw IndexOutOfBoundsException. I'll check the bounds and throw IOException instead.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Sep/15 15:50","18/Jan/16 12:01","24/Sep/15 15:56"
PDFBOX-2990,PDFBOX,"PDDocument.load fails to load a PDF document.",Bug,CLOSED,Major,Fixed,"1.8.8, 1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Parsing,None,,"PDDocument.load fails to load a PDF document.
PDDocument doc = null;
try {
doc = PDDocument.load(new ByteArrayInputStream(pdf.getContent()));
PDDocument.load(new ByteArrayInputStream(pdf.getContent())) = >Exception occurred in target VM: Error expected floating point number actual='0.00000-33917698'<
That failure is produced only with the attached file "eComm Mobile Loyalty.pdf".
That PDF document opens fine at PDF reader.",0,"Tilman Hausherr","Cristian Mafferra",0,5,"24/Sep/15 20:51","12/Jan/18 18:05","25/Sep/15 19:01"
PDFBOX-2992,PDFBOX,"Add .gitignore",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,"Git Github",,"I cloned pdfbox from https://github.com/apache/pdfbox and then built it. Now git is showing all the compiled files as files that I've added",0,"Tilman Hausherr","Ben McCann",0,3,"25/Sep/15 22:48","17/Mar/16 19:07","14/Oct/15 22:08"
PDFBOX-2995,PDFBOX,"PDAcroForm getDefaultAppearance throws NPE if DA is not defined",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,AcroForm,acroform,,"In the form dictionary the DA key is optional. Current implementation throws an NPE if you call PDAcroForm::getDefaultAppearance and no DA is defined",0,"Maruan Sahyoun","Andrea Vacondio",0,3,"26/Sep/15 09:35","17/Mar/16 19:07","26/Sep/15 13:05"
PDFBOX-2997,PDFBOX,"Make FontMapper into a singleton interface",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"As discussed on the dev mailing list, some users want to provide completely custom implementations of FontMapper. It seems that the easiest way to do this is to make the static FontMapper into a singleton which can be replaced entirely with a user's implementation.",0,"John Hewson","John Hewson",0,1,"28/Sep/15 03:42","17/Mar/16 19:07","28/Sep/15 03:50"
PDFBOX-3001,PDFBOX,"FileSystemFontProvider cache instability",Bug,CLOSED,Blocker,Fixed,2.0.0,2.0.0,None,None,,"FileSystemFontProvider uses Java's Preferences API to cache font metadata, however it doesn't seem to work out of the box on Windows (due to file permissions) and one user on the mailing list has complained that on Linux file paths with more than 80 characters can't be handed. Serializable is also slow.
It looks like Preferences wasn't a good choice here. We're going to need to roll our own cache file format and save it somewhere we have write access to.",0,"John Hewson","John Hewson",0,4,"29/Sep/15 00:41","17/Mar/16 19:07","05/Nov/15 21:57"
PDFBOX-3002,PDFBOX,"PDF files not closed after load fails",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",PDModel,None,,"In 2.0, PDF files are not closed affter load() if the parsing fails. I will fix this and also add tests (in 2.0 and 1.8) to make sure that PDF files are closed after load(). See also the discussion with Timo Boehme in PDFBOX-2883.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"29/Sep/15 17:13","18/Jan/16 12:01","30/Sep/15 16:38"
PDFBOX-3003,PDFBOX,"Incorrect color space processing for inline images",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Getting wrong color space for inline images because of abbreviations. (PDF Reference 1.4, chapter 4.8.6).
According to specification inline images can use directly (not by names) only 4 color spaces: DeviceGray (Gray), DeviceCMYK (CMYK), DeviceRGB (RGB), Indexed (I).",0,"Tilman Hausherr","Evgeniy Muravitskiy",0,4,"01/Oct/15 15:23","17/Mar/16 19:07","07/Oct/15 19:19"
PDFBOX-3005,PDFBOX,"Incorrect property names for lists",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Writing, XmpBox",None,,"When i write code as follows:
PDDocument document = PDDocument.load(new File(FILE_PATH));
DomXmpParser parser = new DomXmpParser();
XMPMetadata metadata = parser.parse(document.getDocumentCatalog().getMetadata().getStream().getUnfilteredStream());
metadata.removeSchema(metadata.getPDFIdentificationSchema());
OutputStream res = new FileOutputStream(RESULT_XML);
new XmpSerializer().serialize(metadata, res, true);
I got xml which contain following tag:
<dc:creator>
    <rdf:Seq>
        <rdf:creator>Tomioka, Satoshi</rdf:creator>
    </rdf:Seq>
</dc:creator>
but instead of rdf:creator must be rdf:li. This problem reproducible also for others DublinCoreShema properties which contains lists.",0,"Maruan Sahyoun","Evgeniy Muravitskiy",0,4,"05/Oct/15 12:45","17/Mar/16 19:08","07/Oct/15 16:42"
PDFBOX-3007,PDFBOX,"Preflight cookbook example is inefficient",Improvement,CLOSED,Minor,Fixed,"1.8.10, 1.8.11",1.8.11,Documentation,None,,"The example shown in
http://pdfbox.apache.org/1.8/cookbook/pdfavalidation.html
passes a DataSource object. This results in the creation of a temporary file. The constructor with the DataSource makes only sense when working with URLs. (And that only if http is cached, because preflight does an openStream() for each PDF stream!)
It would be better to replace
FileDataSource fd = new FileDataSource(args[0]);
PreflightParser parser = new PreflightParser(fd);
with
PreflightParser parser = new PreflightParser(args[0]);
Edit: removed 2.0, as the example may have to change after solving PDFBOX-3007.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"06/Oct/15 16:43","18/Jan/16 12:01","03/Jan/16 17:31"
PDFBOX-3008,PDFBOX,"Memory leak in preflight",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Preflight,None,,"PreflightParser has this:
    public PreflightParser(DataSource dataSource) throws IOException
    {
        // TODO move file handling outside of the parser
        super(new RandomAccessBufferedFileInputStream(dataSource.getInputStream()));
        this.setLenient(false);
        this.originalDocument = dataSource;
    }
The TODO message looks like a design issue, but it is much worse: the RandomAccessBufferedFileInputStream is never closed, which results in the temp file not being deleted. The file parameter constructor has the same problem, i.e. that the RandomAccessBufferedFileInputStream object is not closed (no temp file there).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"06/Oct/15 18:06","17/Mar/16 19:07","07/Oct/15 16:07"
PDFBOX-3010,PDFBOX,"SignatureOptions object must not be closed before calling saveIncremental in trunk's CreateVisibleSignature example",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Signing,None,,"As reported by Rafael Gomez on the user mailing list:
Exception in thread "main" java.io.IOException: COSStream has been closed and cannot be read. Perhaps its enclosing PDDocument has been closed?
 at org.apache.pdfbox.cos.COSStream.checkClosed(COSStream.java:78)
 at org.apache.pdfbox.cos.COSStream.createRawInputStream(COSStream.java:126)
 at org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1138)
 at org.apache.pdfbox.cos.COSStream.accept(COSStream.java:372)
 at org.apache.pdfbox.cos.COSObject.accept(COSObject.java:158)
 at org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:538)
 at org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:450)
 at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1039)
 at org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:409)
 at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1289)
 at org.apache.pdfbox.pdmodel.PDDocument.saveIncremental(PDDocument.java:1118)
 at org.apache.pdfbox.examples.signature.CreateVisibleSignature.signPDF(CreateVisibleSignature.java:169)
 at org.apache.pdfbox.examples.signature.CreateVisibleSignature.main(CreateVisibleSignature.java:261)
He got rid of the exception by moving options.close() after doc.saveIncremental(fos))",0,"Tilman Hausherr","Tilman Hausherr",0,4,"07/Oct/15 19:31","06/May/16 10:20","08/Oct/15 15:23"
PDFBOX-3011,PDFBOX,"Find out why trunk CreateVisibleSignature example produces incorrect output pdf",Task,CLOSED,Major,Fixed,2.0.0,2.0.0,Signing,None,"mac os x","To evaluate Apache's PDFBox library, I created a simple sample based on trunk CreateVisibleSignature and CreateSignature. The reason for combining those 2 samples was that each provided features that I wanted to test. The created "mix" example is in SignPDFPoC.java.
The initial problem I faced is related to the sentence closing the SignatureOptions right before calling saveIncremental on the relevant document object. Once I moved the 'options.close()' sentence to a better position (see PDFBOX-3010), SignPDFPoC started to produce correct output, signed, pdf files. And once I added my test certificate chain to the trusted identities, the signature validates correctly.
After examining the produced, signed, pdf, both via Signature Panel on Adobe Reader and via the file itself (binary), I got stuck on "Field: Signature1". I initially supposed that PDVisibleSignDesigner.signatureFieldName was used for that purpose. But it does not seem to be the case. Moreover, for invisible signatures, no PDVisibleSignDesigner is used, so there must be a different way.
So I decided to build and execute the original CreateVisibleSignature from trunk to check whether it did something different regarding "Field: Signature1" that I could have missed in my "mix" example. This is how I found out that the trunk CreateVisibleSignature example produces incorrect pdf files. Or I must be doing something terribly wrong that, in advanced, I apologize for.
I attach complete zip files for reproducing the observation:
mix_example_correct_signed_pdf
trunk_createvisiblesignature_example_incorrect_signed_pdf
Simply add the .zip suffix, unpack and run the corresponding _execute.sh script. There are already .class files available. The needed dependencies are also present. As test p12 containing a certificate chain, test pdf file and test image.",0,"Tilman Hausherr","Rafael Gomez",0,3,"08/Oct/15 09:10","17/Mar/16 19:08","09/Oct/15 18:33"
PDFBOX-3012,PDFBOX,"PDAcroForm flatten() throws ClassCastException",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,easyfix,,"In the PDAcroForm class, in the flatten() method, there is a for loop that tries casting field to a PDTerminalField. But, the field is sometimes a PDNonTerminalField and the casting error is thrown.
To fix this I just add one if statement right before the for loop that checks to see if field is an instance of PDTerminalField and place the for loop inside the if statement:
if(field instanceof PDTerminalField){",0,"Maruan Sahyoun","Jason Mackin",0,3,"08/Oct/15 22:26","17/Mar/16 19:07","09/Oct/15 16:51"
PDFBOX-3014,PDFBOX,"ZapfDingbats not finding a substitute in Windows 8.1 Pro",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,easyfix,"windows 8","When running PDFBox on Windows 8.1 Pro, it can't find a proper substitute for ZapfDingbats.
This email chain from the mailing list talks about this problem but the fix doesn't work for me:
http://mail-archives.apache.org/mod_mbox/pdfbox-users/201504.mbox/%3CA8C49658-B378-4294-BAA5-470EF822F077@jahewson.com%3E
I was able to fix this problem by adding "MS-PGothic" to the substitutes Array for ZapfDingbats (FontMapperImpl.java).",0,"Tilman Hausherr","Jason Mackin",0,4,"09/Oct/15 15:44","17/Mar/16 19:06","14/Oct/15 21:16"
PDFBOX-3018,PDFBOX,"IOException "head is mandatory" when using getOriginalData() of TT font from TTC file",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"I tried this to answer this question:
http://stackoverflow.com/questions/33044069/pdfbox-2-0-and-ttc-fonts
        TrueTypeCollection trueTypeCollection = new TrueTypeCollection(new File("c:/windows/fonts/MSGothic.ttc"));
        TrueTypeFont ttFont = null;
        for (TrueTypeFont font : trueTypeCollection.getFonts())
        {
            if ("MS-Gothic".equals(font.getName()))
            {
                ttFont = font;
            }
        }
        if (ttFont == null)
        {
            return;
        }
        PDType0Font font = PDType0Font.load(document, ttFont.getOriginalData(), true);
However this doesn't work:
Exception in thread "main" java.io.IOException: head is mandatory
    at org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:176)
    at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:145)
    at org.apache.fontbox.ttf.TTFParser.parseEmbedded(TTFParser.java:119)
    at org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder.buildFontFile2(TrueTypeEmbedder.java:89)
    at org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder.<init>(TrueTypeEmbedder.java:72)
    at org.apache.pdfbox.pdmodel.font.PDCIDFontType2Embedder.<init>(PDCIDFontType2Embedder.java:61)
    at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:120)
    at org.apache.pdfbox.pdmodel.font.PDType0Font.load(PDType0Font.java:89) 
From Andreas:
Looks like a bug. ttFont.getOriginalData() returns the data of the underlying ttc instead of the single ttf.",0,"Andreas Lehmkühler","Tilman Hausherr",0,5,"10/Oct/15 17:41","17/Mar/16 19:07","18/Oct/15 10:19"
PDFBOX-3019,PDFBOX,"Unwanted spaces in text extraction",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",regression,,"From testing on my internal dataset I believe there might be some regression in the effectiveness of PDFTextStripper.
Here's an example doc I found on the web, which converted better in 1.8 than 2.0. Notice that it extracts "J e a n e t t e A c o s t a ; S e r v i c e M a n a g e r a t M a d F o x B r e w i n g C o m p a n y". It doesn't seem like there's very much space between the letters in the pdf, so it's curious to me that it didn't do too well.
I realize this is an area where we probably can't strive for perfection. Yet, it does seem to me that from 1.8 to 2.0 we may have taken a step backwards. I believe there's some sort of regression test for PDFToImage which exports a set of pdfs to images at two different commits and looks at what the differences are. Do we have the same sort of thing for PDFTextStripper? If not, can we build one by pulling docs off the public web? I'd be willing to contribute to this endeavor.",0,"Tilman Hausherr","Ben McCann",0,4,"11/Oct/15 02:37","17/Mar/16 19:08","14/Oct/15 21:04"
PDFBOX-3020,PDFBOX,"Set libraries to current versions for RC",Task,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"We should use the latest version of the BC library before rolling out the 2.0 RC. The latest on maven is 1.52, the latest is 1.53 (is not yet on maven central). Other libs that are not the latest are junit and ant.",0,"Tilman Hausherr","Tilman Hausherr",0,4,"12/Oct/15 16:58","17/Mar/16 19:07","05/Jan/16 11:52"
PDFBOX-3021,PDFBOX,"Class Cast Exception: COSString -> COSName",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",None,,"Following execption is generated while rendering a PDF (unfortunately confidential):
java.lang.ClassCastException: org.apache.pdfbox.cos.COSString cannot be cast to org.apache.pdfbox.cos.COSName
at org.apache.pdfbox.pdmodel.font.PDFontDescriptor.getFontName(PDFontDescriptor.java:289)
at org.apache.pdfbox.pdmodel.font.ExternalFonts.getFallbackFontName(ExternalFonts.java:294)
at org.apache.pdfbox.pdmodel.font.ExternalFonts.getTrueTypeFallbackFont(ExternalFonts.java:273)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:157)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:75)
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:96)
at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:50)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:802)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:464)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:438)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:179)
at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:205)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:136)
at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:95)
Is this maybe related to https://issues.apache.org/jira/browse/PDFBOX-1756 but only in a different spot?
Hint: Revision of 2.0.0 version trunk is 1704293",0,"Tilman Hausherr","Daniel Scheibe",0,4,"13/Oct/15 09:13","17/Mar/16 19:08","15/Oct/15 17:01"
PDFBOX-3022,PDFBOX,"Maven repos should be https",Bug,CLOSED,Critical,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",None,None,,"I noticed there are 2 http Maven repos. Only https should be used for security reasons. See http://blog.ontoillogical.com/blog/2014/07/28/how-to-take-over-any-java-developer/
This one you can simply change from http to https:
./parent/pom.xml: <url>http://jbig2-imageio.googlecode.com/svn/maven-repository/</url>
This one there isn't an https version available:
./parent/pom.xml: <url>http://www.mygrid.org.uk/maven/repository</ur
What library did the mygrid repo have to be added for? The myGrid Maven repository was mainly used for development of Taverna, which has since moved to the Apache Software Foundation, and uses https://repository.apache.org/ and mirrors to Maven Central. Other software they publish has been gradually moved to https://bintray.com/ which should also offer secure connections.",0,"Tilman Hausherr","Ben McCann",0,3,"13/Oct/15 16:28","17/Nov/16 19:17","15/Oct/15 17:17"
PDFBOX-3024,PDFBOX,"Preflight validation call PDType0Font.clear at the wrong time",Bug,CLOSED,Major,Fixed,1.8.10,1.8.12,Preflight,None,,"I used the algorythm here to test PDF / A compliance :
https://pdfbox.apache.org/1.8/cookbook/pdfavalidation.html
With one pdf document (which i cant give you due to confidentiality), an NullPointerException occur here :
java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.font.PDType0Font.getFontWidth(PDType0Font.java:188)
 at org.apache.pdfbox.preflight.font.container.FontContainer.checkGlyphWith(FontContainer.java:114)
 at org.apache.pdfbox.preflight.content.ContentStreamWrapper.validText(ContentStreamWrapper.java:372)...
As i dug deeper, i found that preflight loads a font context where it puts all pdf fonts. The PDType0Font is also created and put in this context.
(CSObject : COSDictionary{(COSName{BaseFont}:COSName{INWHIX+TimesNewRomanPSMT})       (COSName{DescendantFonts}:COSArray{[COSObject{349, 0}]}) (COSName{Encoding}:COSName{Identity-H})       (COSName{Subtype}:COSName{Type0}) (COSName{ToUnicode}:COSDictionary{(COSName{Filter}:COSName{FlateDecode})      (COSName{Length}:COSInt{260}) }) (COSName{Type}:COSName{Font}) })
The problem is that at the end of one step of the analysis, the clear method is called on the PDType0Font (see eclipse-1.jpg), but the font is still present in the context. On a second step, the same font is retrieved from the context, with no data in it, and the NullPointerException occurs (see eclipse-2.jpg).
I tried the validation after removing the clear method from PDType0Font and it works just fine.
I think the problem comes from this context, and a clear on a font should also trigger a deletion in this map.",0,"Tilman Hausherr","Guillaume Monteils",1,4,"14/Oct/15 15:24","25/Apr/16 17:24","15/Feb/16 07:18"
PDFBOX-3025,PDFBOX,"Test case for unwanted spaces in text extraction",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",None,,,0,"Tilman Hausherr","Ben McCann",0,3,"14/Oct/15 21:31","17/Mar/16 19:07","15/Oct/15 16:23"
PDFBOX-3027,PDFBOX,"Incorrect enumeration of conformances for PDFAIdentificationSchema",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,XmpBox,None,,"PDFAIdentificationSchema.setConformance(String) make next check for input data:
if (value.equals("A") || value.equals("B"))
{
TextType conf = createTextType(CONFORMANCE, value);
addProperty(conf);
}
else
{
throw new ....
}
but for PDF/A-2 and PDF/A-3 exist 3 conformances: A, B, U.
Proof link for PDF/A-2",0,"Maruan Sahyoun","Evgeniy Muravitskiy",0,4,"15/Oct/15 14:55","17/Mar/16 19:06","15/Oct/15 17:25"
PDFBOX-3030,PDFBOX,"Enhance documentation for PDFBox 2.0.0",Task,CLOSED,Major,Fixed,2.0.0,None,Documentation,None,,"Task to track enhancements to the documentation or website as part of PDFBox 2.0.0
update javadoc (current as of writing)
migration guide",0,"Maruan Sahyoun","Maruan Sahyoun",0,6,"15/Oct/15 19:20","27/Apr/16 17:04","27/Apr/16 13:59"
PDFBOX-3031,PDFBOX,"converting PDF to PNG image is scrammbled",Bug,CLOSED,Major,"Not A Problem",1.8.10,None,Rendering,None,,"code below image does not match the PDF:
    try (PDDocument document = PDDocument.load(attachedFile)) {
            PDPage page = (PDPage) document.getDocumentCatalog().getAllPages().get(0);
            File imageFile = File.createTempFile("test1", ".png");
            imageFile.deleteOnExit();

            BufferedImage image = page.convertToImage();
            ImageIO.write(image, "png", imageFile);

            // image file is a mess
        }",0,"Tilman Hausherr","Joseph Jezerinac",0,2,"16/Oct/15 01:47","16/Oct/15 18:38","16/Oct/15 18:38"
PDFBOX-3033,PDFBOX,"Usage methods references incorrect package",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,Utilities,None,,"See https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/util/PrintTextLocations.java#L106
It references the "pdmodel" package instead of "util"
A better solution would be to do PrintTextLocations.class.getName() instead of hardcoding
Edit: same problem in several other examples, e.g. PrintImageLocations.",0,"Tilman Hausherr","Ben McCann",0,3,"16/Oct/15 02:42","17/Mar/16 19:07","17/Oct/15 12:38"
PDFBOX-3034,PDFBOX,"Newly created XRef stream has direct root objects",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Writing,None,,"To investigate PDFBOX-3026 I wanted to create a small file with an XRef stream by calling doc.getDocument().setIsXRefStream(true);, but got a /Root entry with direct contents, instead of "/Root 1 0 R". This has never occured before, because when saving loaded files, the COSObject in-between is kept.
18 0 obj
<<
/Root <<
/Type /Catalog
/Version /1.5
/Pages 2 0 R
/Metadata 3 0 R
/OutputIntents [4 0 R]
>>
/ID [<848925E7B926C5E7504AD6AC3DFD77AA> <848925E7B926C5E7504AD6AC3DFD77AA>]
/Type /XRef
/Size 19
/Index [1 17]
/W [1 2 0]
/Length 51
>>
stream
I'll make an appropriate change in PDFXRefStream to change this.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Oct/15 16:06","18/Mar/16 16:54","16/Oct/15 17:35"
PDFBOX-3035,PDFBOX,"Files with missing xref table must fail",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Preflight,None,,"As shown in PDFBOX-3026, a file with an /XRef cross reference stream a missing xref table should fail in preflight but doesn't.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"17/Oct/15 11:35","18/Jan/16 12:01","18/Oct/15 21:08"
PDFBOX-3037,PDFBOX,"Text extraction decodes image files",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",None,,"I get this with text extraction of file 001131.pdf:
java.io.IOException: Could not read JPEG 2000 (JPX) image
 at org.apache.pdfbox.filter.JPXFilter.readJPX(JPXFilter.java:90)
 at org.apache.pdfbox.filter.JPXFilter.decode(JPXFilter.java:59)
 at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:69)
 at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:163)
 at org.apache.pdfbox.pdmodel.common.PDStream.createInputStream(PDStream.java:234)
 at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.<init>(PDImageXObject.java:145)
 at org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject(PDXObject.java:69)
 at org.apache.pdfbox.pdmodel.PDResources.getXObject(PDResources.java:342)
 at org.apache.pdfbox.contentstream.operator.DrawObject.process(DrawObject.java:50)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:819)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:476)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:448)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:155)
This shouldn't happen, i.e. we shouldn't even try to decode images when extracting text, this is a waste of time and memory.
The cause is this in DrawObject:
PDXObject xobject =  context.getResources().getXObject(name);
it results in the object being created and its contents being decoded.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"20/Oct/15 16:08","17/Mar/16 19:08","20/Oct/15 16:39"
PDFBOX-3038,PDFBOX,"Text extraction shows glyphs with zero height",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",regression,,"This happens with file 001033.pdf:
2.0:
String[108.0,663.6 fs=6.96 xscale=6.96 height=0.0 space=12.1104 width=3.4800034]1
String[144.0,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.996994]I
String[147.417,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=4.5]n
String[152.337,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.25] 
String[154.88701,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.501999]t
String[157.809,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=4.5]h
String[162.729,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=3.9960022]e
String[167.145,668.4 fs=9.0 xscale=9.0 height=0.0 space=20.25 width=2.25] 
1.8:
String[108.0,663.6 fs=6.96 xscale=6.96 height=4.57272 space=1.74 width=3.4800034]1
String[144.0,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.996994]I
String[147.417,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=4.5]n
String[152.337,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.25] 
String[154.88701,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.501999]t
String[157.809,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=4.5]h
String[162.729,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=3.9960022]e
String[167.145,668.4 fs=9.0 xscale=9.0 height=5.913 space=2.25 width=2.25] 
The font has an empty bbox:
def
/FontBBox {0 0 0 0}
1.8 had this code to get the height (in PDSimpleFont):
                PDRectangle fontBBox = desc.getFontBoundingBox();
                if (fontBBox != null)
                {
                    retval = fontBBox.getHeight() / 2;
                }
                if( retval == 0 )
                {
                    retval = desc.getCapHeight();
                }
                if( retval == 0 )
                {
                    retval = desc.getAscent();
                }
                if( retval == 0 )
                {
                    retval = desc.getXHeight();
                    if (retval > 0)
                    {
                        retval -= desc.getDescent();
                    }
                }
2.0 has only this:
float glyphHeight = font.getBoundingBox().getHeight() / 2;
So 2.0 takes the height from the font itself, and has no Plan B.
Getting the BBox from the font descriptor brings correct heights. (And a better text extraction)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"20/Oct/15 16:16","17/Mar/16 19:07","20/Oct/15 17:23"
PDFBOX-3040,PDFBOX,"Move website to local build tool",Task,CLOSED,Major,Fixed,"1.8.9, 1.8.10, 2.0.0",2.0.0,Documentation,None,,"As discussed on the dev mailing list the PDFBox website will be migrated to a local build:
to have an easier support for a new/blog section
an actively developed toolchain to build the site
The site builder will be based on jekyll with some additional scripting/maven to automate the develop/build/test/publishing steps.
There are some projects we can learn from such as Apache Wicket, JClouds.
The initial development will be done in a branch to the current svn repository.",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"20/Oct/15 18:40","17/Mar/16 19:08","17/Nov/15 09:39"
PDFBOX-3041,PDFBOX,"Wrong default type in Xref stream W0 element",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Parsing,None,,"According to the spec, when parsing a cross reference stream and the W array has a 0 as first element (something like [0 4 1]). this should happen:
"If the first element is zero, the type field shall not be present, and shall default to type 1".
So entries read in this scenario should have type 1, in use.
From org.apache.pdfbox.pdfparser.PDFXrefStreamParser::parse line 115-123 the default type assigned by PDFBox in this scenario is 0, free.",0,"Tilman Hausherr","Andrea Vacondio",0,3,"21/Oct/15 15:34","18/Jan/16 12:01","21/Oct/15 18:39"
PDFBOX-3042,PDFBOX,"Bad space calculation in text extraction",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",regression,,"Some debug output from attached reduced file:
2.0:
spaceWidthText: 0.25
fontSizeText: 12.0
horizontalScalingText: 1.0
textRenderingMatrix.getScalingFactorX(): 12.0, textRenderingMatrix: [12.0,0.0,0.0,12.0,100.0,700.0]
ctm.getScalingFactorX(): 1.0
spaceWidthDisplay: 36.0

String[100.0,91.0 fs=12.0 xscale=12.0 height=7.8808603 space=36.0 width=8.003998]B
1.8:
spaceWidthText: 0.25
fontSizeText: 12.0
horizontalScalingText: 1.0
textMatrix.getXScale(): 1.0, textMatrix: [[1.0,0.0,0.0][0.0,1.0,0.0][100.0,700.0,1.0]]
ctm.getXScale(): 1.0
spaceWidthDisp: 3.0

String[100.0,91.0 fs=12.0 xscale=12.0 height=7.884 space=3.0 width=8.003998]B
stream content is
1 0 0 1 0 0 cm
n
BT
/F12 12 Tf
1 0 0 1 100 700 Tm
(B) Tj
ET
The cause is somewhat similar to PDFBOX-3019, a factor is used twice. In 2.0, the fontSize is already calculated into the "parameters" Matrix object, which is used to calculate "textRenderingMatrix". In 1.8, textStateParameters is set similarly, but not used in the calculation of spaceWidthDisp.
The problem was discovered because of different text extractions.
The problem did not appear in PDFBOX-3019 because fontSizeText was 1.
The fix also solves the problem I mentioned at the end of PDFBOX-3038.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Oct/15 16:46","17/Mar/16 19:07","21/Oct/15 17:05"
PDFBOX-3048,PDFBOX,"Download URLs on the website don't work",Bug,CLOSED,Trivial,Fixed,None,None,Documentation,None,,"Download URLs on the website (https://pdfbox.apache.org/download.cgi) don't work even if I choose a Mirror with the drop down, it creates URLs like:
https://pdfbox.apache.org/%5Bpreferred%5D/pdfbox/1.8.10/pdfbox-app-1.8.10.jar
Using browser: Chrome Version 46.0.2490.71 (64-bit)",0,"Maruan Sahyoun","Luke Nezda",0,5,"22/Oct/15 22:54","17/Mar/16 19:26","23/Oct/15 16:40"
PDFBOX-3053,PDFBOX,"Text extraction fails with type 3 fonts",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",type3,,"Text extraction fails with the attached file. It succeeds with Acrobat Reader, with PDF.js and with PDFBox 1.8.
This is not a general type 3 problem. Text extraction works with PDFBOX-2959-reduced.pdf.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Oct/15 14:33","17/Mar/16 19:06","24/Oct/15 19:17"
PDFBOX-3054,PDFBOX,"Getting Unicode mapping error, file was Ok in 1.8",Bug,CLOSED,Major,Duplicate,2.0.0,None,"Text extraction",type3,,"Text extraction on attached file is getting many errors like:
WARNING: No Unicode mapping for c (131) in font C0HR11_T1GI0361
and then returning gibberish for all but the first 4 strings.
In 1.8 all the text characters were correct. Fine in Acrobat, can copy/paste from there also.
This has type 3 fonts.
Tested against trunk build 20151024.140757-1624",0,"Tilman Hausherr","Fred Andrews",0,2,"24/Oct/15 18:39","24/Oct/15 19:26","24/Oct/15 19:26"
PDFBOX-3057,PDFBOX,"NPE in CFFParser.parseType1Dicts()",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"Exception in thread "main" java.lang.NullPointerException
        at org.apache.fontbox.cff.CFFParser.parseType1Dicts(CFFParser.java:604)
        at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:466)
        at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:115)
        at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Oct/15 20:13","17/Mar/16 19:07","24/Oct/15 20:25"
PDFBOX-3058,PDFBOX,"Support TIKA Migration to PDFBox 2.0",Task,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",None,,"This issue is to track fixing issues which came up as part of TIKA-1285 (Upgrade to PDFBox 2.0.0 when available) mainly
new exceptions compared to PDFBox 1.8.x
regressions in text extraction
lower quality text extraction
There should be individual issues to track tasks/bugs arising from that.",0,"Andreas Lehmkühler","Maruan Sahyoun",0,4,"25/Oct/15 08:54","28/Mar/16 19:51","23/Jan/16 18:02"
PDFBOX-3060,PDFBOX,"Catalog cannot be found",Sub-task,CLOSED,Major,Fixed,"1.8.10, 2.0.0","1.8.11, 2.0.0",Parsing,None,,"There are several files producing the same exception within the TIKA test arena:
Caused by: java.io.IOException: Catalog cannot be found
   org.apache.pdfbox.cos.COSDocument.getCatalog(COSDocument.java:363)
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:200)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:230)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:854)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:797)
    org.apache.pdfbox.debugger.PDFDebugger.parseDocument(PDFDebugger.java:1216)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1144)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1129)
    org.apache.pdfbox.debugger.PDFDebugger.access$13(PDFDebugger.java:1126)
    org.apache.pdfbox.debugger.PDFDebugger$11.actionPerformed(PDFDebugger.java:1230)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)
    java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:87)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)
1.8.10 (non sequential parser only) and 2.0.0 are producing the same exception.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"25/Oct/15 11:23","18/Jan/16 12:01","25/Oct/15 12:42"
PDFBOX-3061,PDFBOX,"Word concatenation in 2.0 not in 1.8",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",None,,"Attached file is reduced from govdocs file 092465.pdf.
Text extraction with 1.8:
day. Some market watchers were
Text extraction with 2.0:
day. Somemarketwatcherswere
Text extraction with Adobe Reader:
day. Somemarket watchers were
PrintTextLocations 1.8:
String[36.0,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=6.4154396]d
String[42.41544,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.2499504]a
String[47.66539,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.837944]y
String[53.503334,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=2.6249733].
String[60.01537,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.5124474]S
String[65.52782,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.7329483]o
String[71.260765,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=9.271416]m
String[80.53218,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.0294495]e
String[87.505165,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=9.271416]m
String[96.77868,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.2499466]a
String[102.028625,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=4.147461]r
String[106.17609,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.837944]k
String[112.01403,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.0294495]e
String[117.04348,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=3.422966]t
String[122.40893,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=8.75692]w
String[131.16585,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.249954]a
String[136.4158,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=3.4229736]t
String[139.83878,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=4.661957]c
String[144.50073,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=6.1109467]h
String[150.61168,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.0294495]e
String[155.64113,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=4.147461]r
String[159.78859,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=4.45195]s
String[166.18617,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=8.756912]w
String[174.94308,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.0294495]e
String[179.97253,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=4.147461]r
String[184.12,169.67963 fs=1.0 xscale=10.4999 height=6.3524394 space=3.4298992 width=5.0294495]e
PrintTextLocations 2.0:
String[36.0,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=6.4154396]d
String[42.41544,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.2499504]a
String[47.66539,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.837944]y
String[53.503334,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=2.6249733].
String[60.01537,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.5124474]S
String[65.52782,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.7329483]o
String[71.260765,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=9.271416]m
String[80.53218,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.0294495]e
String[87.505165,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=9.271416]m
String[96.77868,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.2499466]a
String[102.028625,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=4.147461]r
String[106.17609,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.837944]k
String[112.01403,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.0294495]e
String[117.04348,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=3.422966]t
String[122.40893,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=8.75692]w
String[131.16585,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.249954]a
String[136.4158,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=3.4229736]t
String[139.83878,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=4.661957]c
String[144.50073,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=6.1109467]h
String[150.61168,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.0294495]e
String[155.64113,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=4.147461]r
String[159.78859,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=4.45195]s
String[166.18617,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=8.756912]w
String[174.94308,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.0294495]e
String[179.97253,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=4.147461]r
String[184.12,169.67963 fs=1.0 xscale=10.4999 height=6.4035034 space=5.8666234 width=5.0294495]e",0,"Tilman Hausherr","Tilman Hausherr",0,3,"25/Oct/15 18:20","17/Mar/16 19:08","25/Oct/15 22:18"
PDFBOX-3062,PDFBOX,"Text extraction and height different in 2.0",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",None,,"AR:
WITH THE increasing complexity of optical modules,
1.8:
WITH THE increasing complexity of optical modules,

String[39.6,399.6 fs=1.0 xscale=29.888 height=20.114626 space=7.472 width=28.214272]W
String[69.488,386.16 fs=1.0 xscale=9.963 height=6.5955067 space=2.49075 width=3.3176804]I
String[72.80568,386.16 fs=1.0 xscale=9.963 height=6.5955067 space=2.49075 width=6.0873947]T
String[78.893074,386.16 fs=1.0 xscale=9.963 height=6.5955067 space=2.49075 width=7.1932907]H
String[90.71916,386.16 fs=1.0 xscale=9.963 height=6.5955067 space=2.49075 width=6.0873947]T
String[96.80656,386.16 fs=1.0 xscale=9.963 height=6.5955067 space=2.49075 width=7.1932907]H
2.0:
W
ITH THE increasing complexity of optical modules,

String[39.6,399.6 fs=1.0 xscale=29.888 height=9.584274 space=7.472 width=28.209717]W
String[69.488,386.16 fs=1.0 xscale=9.963 height=3.194865 space=2.49075 width=3.3177567]I
String[72.805756,386.16 fs=1.0 xscale=9.963 height=3.194865 space=2.49075 width=6.0858]T
String[78.891556,386.16 fs=1.0 xscale=9.963 height=3.194865 space=2.49075 width=7.1949615]H
String[90.719315,386.16 fs=1.0 xscale=9.963 height=3.194865 space=2.49075 width=6.0858]T
String[96.805115,386.16 fs=1.0 xscale=9.963 height=3.194865 space=2.49075 width=7.1949615]H",0,"Tilman Hausherr","Tilman Hausherr",0,5,"26/Oct/15 18:16","17/Mar/16 19:07","11/Dec/15 20:00"
PDFBOX-3065,PDFBOX,"Right now PDFBOX does not permit to sign multiple files while calling an external signing service.",Improvement,CLOSED,Major,Fixed,1.8.10,"2.0.3, 3.0.0 PDFBox",Signing,features,,"Since to sign a PDF you forced the implementation of the SignatureInterface interface, is not possible to prepare N hashes from N PDF files and then send them to a signing service that accepts multiple hashes with a single signon.
For example if I use an OTP signing service.
What would be nice to have is to separate the hash calculation from the signing.
Instead to implement the Interface I would like to have something like this:
1) calculate hash from document with the new signature dictionary bytes
2) sign the hash
3) insert the signature into pdf
This way I could achieve to sign for example 100 pdf files calling the service once.
Right now must ask the user to sign in 100 times.
Thanks in advance.
Andrea.",0,"Tilman Hausherr","Andrea Paternesi",3,6,"27/Oct/15 10:54","25/Mar/17 18:12","11/Sep/16 12:48"
PDFBOX-3067,PDFBOX,"Text strings being returned as single characters, regression from version 1.8",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",regression,,"PrintTextLocations writestring() is returning individual characters on this file, rather than a complete string. Was returning strings with '-200,000' in version 1.8
Also note that textposition.getWidthOfSpace() is getting a negative value (-4.464) for each character. Don't know if that is symptom or a cause.",0,"Tilman Hausherr","Joel Hirsh",0,3,"28/Oct/15 02:48","17/Mar/16 19:08","28/Oct/15 17:29"
PDFBOX-3068,PDFBOX,"Null metadata in 2.0 in some files that had metadata in 1.8.10 with old parser",Sub-task,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Parsing,None,,"Tilman's observation on 'Microsoft' below revealed 1) that we should use our BodyContentHandler so that title metadata doesn't slip into the body content and 2) the title and all metadata values from PDDocumentInformation is null for at least: NZ/NZAZKTQYKDD2HSBCSJJN6XSEA4KJEONU
        Path p = Paths.get("..NZAZKTQYKDD2HSBCSJJN6XSEA4KJEONU");
        PDDocument d = PDDocument.load(p.toFile());
        assertNull(d.getDocumentInformation().getTitle());
        assertEquals(8, d.getDocumentInformation().getMetadataKeys().size());
Manually reviewing a handful of documents in the metadata/metadata_value_count_diffs.csv file here, this looks to be quite pervasive...unless I'm botching the right way to load the documents and metadata.",0,"Tilman Hausherr","Tim Allison",0,5,"28/Oct/15 15:44","18/Jan/16 12:01","31/Oct/15 11:42"
PDFBOX-3069,PDFBOX,"Add code for CCITT compression",Improvement,CLOSED,Minor,Fixed,"2.0.2, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",PDModel,"CCITTFaxDecode ccitt",,"The class org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory contains code to create a PDImageXObject from an existing TIFF file. Unlike the corresponding JPEGFactory it does not provide any code to create a PDImageXObject from a BufferedImage. The main reason is that pdfbox contains only code to decompress CCITT group 3/4 files, code for compression is missing.
Based on the compression code in Apache Commons Imaging I implemented the missing method and I'm willing to contribute it.
I can provide a patch, but I would need advise whether it's preferable to duplicate code from Apache Commons Imaging or to create a dependency on it.",0,"Tilman Hausherr","Christian Gawron",0,4,"28/Oct/15 17:13","25/Mar/17 18:12","23/Jun/16 16:42"
PDFBOX-3070,PDFBOX,"Incorrect DefaultRGB color space obtain",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"I got StackOverflowException for following code:
COSDictionary resourcesDict = new COSDictionary();
COSDictionary colorSpacesDict = new COSDictionary();
colorSpacesDict.setItem(COSName.DEFAULT_CMYK, COSName.DEVICECMYK);
resourcesDict.setItem(COSName.COLORSPACE, colorSpacesDict);
PDResources resources = new PDResources(resourcesDict);
resources.getColorSpace(COSName.DEFAULT_CMYK);
PDColorSpace.create(COSBase, PDResources) ignore possible cycle Default -> Device -> Default - > Device -> ......",0,"Tilman Hausherr","Evgeniy Muravitskiy",0,3,"29/Oct/15 11:00","17/Mar/16 19:06","29/Oct/15 20:35"
PDFBOX-3072,PDFBOX,"Allow missing page type",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,None,,"I came across a PDF document with missing type in the page dictionary. According to the spec that's required and PDFBox has a check and throws an IllegalState if the page is requested to the PDPageTree. Acrobat and other libs handle the same doc so I think the constraint could be relaxed a little, consider valid if type is Page or missing, and consider invalid if it's something else, what do you think?",0,"Tilman Hausherr","Andrea Vacondio",0,3,"30/Oct/15 14:37","17/Mar/16 19:08","30/Oct/15 21:29"
PDFBOX-3076,PDFBOX,"Type3 Font that is getting zero height text, even in latest 2.0",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0",2.0.0,"Text extraction",type3,,"Although most Type3 fonts are now getting a valid height, this one file is still getting zero height
String[549.5999,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=6.090027]P
String[555.68994,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=5.1156006]a
String[560.80554,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=5.1156006]g
String[565.92114,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=4.8720093]e
String[570.79315,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=2.6796265]
String[573.4728,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=5.1156006]3
String[578.5884,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=2.6796265]
String[581.268,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=5.1156006]o
String[586.3836,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=2.6796265]f
String[589.06323,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=2.6796265]
String[591.74286,39.84027 fs=58.0 xscale=58.0 height=0.0 space=151904.77 width=5.1156006]3
String[70.32,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=7.5515976]A
String[77.8716,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.333603]c
String[84.2052,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.333603]c
String[90.5388,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.820801]o
String[97.359604,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.820801]u
String[104.180405,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.820801]n
String[111.001205,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=3.6539993]t
String[114.655205,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=3.1668015]
String[117.82201,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=9.744003]m
String[127.56601,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.333603]e
String[133.89961,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.0899963]s
String[139.98961,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.0899963]s
String[146.0796,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.333603]a
String[152.41321,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.820801]g
String[159.23401,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.333603]e
String[165.56761,119.04028 fs=58.0 xscale=58.0 height=0.0 space=179523.81 width=6.0899963]s",0,"Tilman Hausherr","Joel Hirsh",0,3,"31/Oct/15 15:49","17/Mar/16 19:08","08/Nov/15 13:47"
PDFBOX-3081,PDFBOX,"Create example to draw glyph sizes in rendered images",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"DrawPrintTextLocations is PrintTextLocations on steroids: after rendering an image, the bounds of the font sizes are drawn on it and the images are saved. This will allow to see whether a value shown by PrintTextLocations makes sense or not. The output as in PrintTextLocations will be kept. The classic PrintTextLocations will also be kept so that people don't write support questions.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"02/Nov/15 17:23","17/Mar/16 19:07","02/Nov/15 17:29"
PDFBOX-3082,PDFBOX,"High memory consumption while building font cache",Bug,CLOSED,Blocker,Fixed,2.0.0,2.0.0,PDModel,None,,"When the font cache is build there is a very high memory consumption.
For this small program
    public static void main(String[] args)
    {
        PDFont font = PDType1Font.HELVETICA;
        try
        {
            System.in.read();
        }
        catch (IOException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
I need to set -Xmx1512M in order to avoid an OOM
Smaller memory settings will bring this
$ java -Xmx1256M -jar Test.jar 
Nov 03, 2015 2:48:32 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider loadCache
WARNUNG: New fonts found, font cache will be re-built
Nov 03, 2015 2:48:32 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider <init>
WARNUNG: Building font cache, this may take a while
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
 at org.apache.fontbox.cff.IndexData.initData(IndexData.java:95)
 at org.apache.fontbox.cff.CFFParser.readIndexData(CFFParser.java:163)
 at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:393)
 at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:115)
 at org.apache.fontbox.ttf.CFFTable.read(CFFTable.java:53)
 at org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:377)
 at org.apache.fontbox.ttf.OpenTypeFont.getCFF(OpenTypeFont.java:61)
 at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.addTrueTypeFontImpl(FileSystemFontProvider.java:432)
 at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.addTrueTypeCollection(FileSystemFontProvider.java:344)
 at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts(FileSystemFontProvider.java:243)
 at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.<init>(FileSystemFontProvider.java:224)
 at org.apache.pdfbox.pdmodel.font.FontMapperImpl$DefaultFontProvider.<clinit>(FontMapperImpl.java:132)
 at org.apache.pdfbox.pdmodel.font.FontMapperImpl.getProvider(FontMapperImpl.java:151)
 at org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFont(FontMapperImpl.java:415)
 at org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFontBoxFont(FontMapperImpl.java:378)
 at org.apache.pdfbox.pdmodel.font.FontMapperImpl.getFontBoxFont(FontMapperImpl.java:352)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:114)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<clinit>(PDType1Font.java:76)
 at PDFontTest.main(PDFontTest.java:11)
Possible cause is a large number of fonts on my system
Nov 03, 2015 2:56:01 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider loadCache
WARNUNG: New fonts found, font cache will be re-built
Nov 03, 2015 2:56:01 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider <init>
WARNUNG: Building font cache, this may take a while
Nov 03, 2015 2:56:22 AM org.apache.pdfbox.pdmodel.font.FileSystemFontProvider saveCache
WARNUNG: Finished building font cache, found 876 fonts",0,"Tilman Hausherr","Maruan Sahyoun",3,7,"03/Nov/15 01:58","17/Mar/16 19:08","18/Nov/15 17:31"
PDFBOX-3083,PDFBOX,"Form fields are missing when rendering",Bug,CLOSED,Critical,Fixed,"1.6.0, 1.8.10, 2.0.0",2.0.0,Rendering,"AcroForm Annotations","java 1.7, tomcat, maven","Hi,
I was trying to convert my pdf file to image (jpg or png) but only the grey text (see my attached pdf) were successfully converted to an image file but the blue text cannot.
I've try to extract this pdf with several PdfBox versions : 2.0, 1.8.10, and 1.6 but it doesn't work.
However, with 1.6, the generated image contains both grey and blue text but in an incorrect layout/alignment.
Can you please verify this issue?
Please also let me know if you have any quick fix for this issue.
-------------------------------
Attached Sources :
mypdf.pdf : original pdf to be converted
out_bufferedimage_1.png : converted with PdfBox 2.0 and 1.8.10
myout_image_1.jpg : converted with PdfBox 2.0 and 1.6
-------------------------------
Thanks a lot.
Best,",0,"Tilman Hausherr","Atthapon Junpun-eak",0,4,"03/Nov/15 06:25","17/Mar/16 19:07","03/Nov/15 17:27"
PDFBOX-3084,PDFBOX,"More generic PDPageContentStream constructor",Improvement,CLOSED,Major,Fixed,"1.8.10, 2.0.0",2.0.0,PDModel,None,,"A missing option
There already are numerous constructors of the PDPageContentStream class
public PDPageContentStream(PDDocument document, PDPage sourcePage)

public PDPageContentStream(PDDocument document, PDPage sourcePage,
    boolean appendContent, boolean compress)

public PDPageContentStream(PDDocument document, PDPage sourcePage,
    boolean appendContent, boolean compress, boolean resetContext)
(focusing on page content streams)
which still fail to cover all relevant cases, foremost the case of prepending a new stream to create new background material.
Prepending a new stream has been requested by users e.g. on stackoverflow
how to add background image to PDF using PDFBox?
How to underlay a content stream with using PDPageContentStream?
Furthermore PDFBox code itself internally at some places prepends a new content stream, mostly to prepend a save-graphics-state operation before the existing content.
A proposal
To not introduce yet another explicit flag parameter, I'd propose creating a new constructor which accepts an EnumSet parameter for an enumeration of flags (compress, prepend, append, reset, ...) instead of all those flag parameters. The former constructors could then be deprecated.
public PDPageContentStream(PDDocument document, PDPage sourcePage,
    EnumSet<StreamOptions> streamOptions)
There obviously are combinations in which some option does not make sense, e.g. reset without prepend or append. These may either be silently ignored or rejected with some exception.
Thinking this even further
One might even consider to make this more generic by allowing one additional parameter which may be an integer or a content stream. This constructor variant could interpret prepend and append as respectively before or after the indicated existing page content stream.
In this case even a replace option would make sense.
I have not yet seen actual requests for a feature requiring this constructor variant, though.",0,"Tilman Hausherr","Michael Klink",1,4,"03/Nov/15 10:21","17/Mar/16 19:08","27/Jan/16 19:58"
PDFBOX-3087,PDFBOX,"Metadata stream should not be compressed",Bug,CLOSED,Minor,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Utilities,None,,"In the 32000 PDF spec, in "14.3.2 Metadata Streams" it is almost suggested not to compress metadata, because
PDF documents are often made available on the Web or in other environments, where many tools routinely examine, catalogue, and classify documents. These tools should be able to understand the self-contained description of the document even if they do not understand PDF.
The implementation of PDMetadata produces an uncompressed metadata, but PDFMergerUtility saves compressed metadata. This breaks a required PDF/A-1b property. (happened at work today)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"03/Nov/15 16:59","18/Jan/16 12:01","03/Nov/15 17:53"
PDFBOX-3088,PDFBOX,"Cache glyph table to optimize concurrent access",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,FontBox,"Optimization multith",,"If several threads convert several pdf to png (one thread access to a single document at a time) they are a contention on a lock in GlythTable. Jstack shows that all threads are in state blocked on the synchronized block in the getGlyph method. The lock is necessary, it's ok, but degrades performance.
This patch cache glyphs already read.
With the patch PDFBOX-3080, the follow benchmark compare 1000 pdf conversions with 1, 8, and 50 threads.
Simulation PDF 2.0-SNAPSHOT With this patch + PDFBOX3080
1000 conversions / 1 thread 120 s 71 s
1000 conversions / 8 threads 76 s 28 s
1000 conversions / 50 threads 81 s 33 s",0,"Tilman Hausherr",ccouturi,1,4,"04/Nov/15 16:36","17/Mar/16 19:06","05/Nov/15 22:02"
PDFBOX-3089,PDFBOX,"Investigate why glyph path caching does not always cache glyph accesses",Task,CLOSED,Minor,Fixed,2.0.0,"2.0.2, 3.0.0 PDFBox",FontBox,Optimization,,"Work in PDFBOX-3088 shows that despite caching glyph paths in TTFGlyph2D.getPathForGID(), there are repeated accesses for the same gid in GlyphTable (which is why that one is now cached as well).",0,"Andreas Lehmkühler","Tilman Hausherr",0,4,"05/Nov/15 17:22","25/Mar/17 18:12","29/May/16 13:30"
PDFBOX-3090,PDFBOX,"ArrayIndexOutOfBoundsException in CmapSubtable.processSubtype2",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"java.lang.ArrayIndexOutOfBoundsException: 8599
 at org.apache.fontbox.ttf.CmapSubtable.processSubtype2(CmapSubtable.java:491)
 at org.apache.fontbox.ttf.CmapSubtable.initSubtable(CmapSubtable.java:92)
 at org.apache.fontbox.ttf.CmapTable.read(CmapTable.java:84)
 at org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:377)
 at org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:169)
 at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:145)
 at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:106)
 at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:111)
 at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:70)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont(PDFontFactory.java:125)
 at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:125)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/Nov/15 17:38","17/Mar/16 19:07","05/Nov/15 18:03"
PDFBOX-3091,PDFBOX,"java.lang.ClassCastException: org.apache.fontbox.cff.CharStringCommand cannot be cast to java.lang.Integer",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"java.lang.ClassCastException: org.apache.fontbox.cff.CharStringCommand cannot be cast to java.lang.Integer
 at org.apache.fontbox.cff.Type1CharStringParser.parse(Type1CharStringParser.java:84)
 at org.apache.fontbox.cff.Type1CharStringParser.parse(Type1CharStringParser.java:89)
 at org.apache.fontbox.cff.Type1CharStringParser.parse(Type1CharStringParser.java:72)
 at org.apache.fontbox.type1.Type1Font.getType1CharString(Type1Font.java:200)
 at org.apache.fontbox.type1.Type1Font.getWidth(Type1Font.java:179)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.getWidthFromFont(PDType1Font.java:361)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/Nov/15 17:38","17/Mar/16 19:07","05/Nov/15 17:50"
PDFBOX-3093,PDFBOX,"Exception in TTFParser",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"The reason for this is an ambiguity in the TrueType specification. Namely, one of the font tables (OS/2) is present in the font directory with length 0. The specification itself is completely silent about this.
The only other information I was able to find is:
the FreeType font library (http://www.freetype.org/freetype2/docs/reference/ft2-truetype_tables.html#FT_Sfnt_Table_Info) assumes that any table having 0 length in the font directory is treated as missing.
Google OpenType Sanitizer would report an error in such situation: https://github.com/khaledhosny/ots/blob/master/src/ots.cc, lines 575-578
there are several related discussions at Adobe forums: https://forums.adobe.com/thread/1616317 , https://forums.adobe.com/thread/1611899
As allowing zero length tables in TrueType fonts seems to be quite logical (and also implicitly confirmed by Adobe Acrobat validator), I've changed the TTFParser to skip tables with 0 length.
Attaching patch and font file. Will add test file also if necessary.",0,"Tilman Hausherr","Timur Kamalov",0,3,"06/Nov/15 09:07","17/Mar/16 19:07","11/Nov/15 17:54"
PDFBOX-3094,PDFBOX,"Merging PDFs with a Form is not retaining the field name values",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,None,,"Hi,
We are using pdfbox-app-2.0.0. I have 3 pdf forms a.pdf, b.pdf & c.pdf. Each of these forms are filled before i attempt to merge them. I can merge any two of these in any combination and the results looks good.
If i merge any of these forms to the previous merge result then iam loosing field name values in the result and also the form is not editable.
Example:-
a.pdf merged with b.pdf to get ab.pdf
If i merge ab.pdf with a.pdf, the resultant merged form will not have form field values in all the pages. It does have form field values in some pages.
Is there a limitation or restriction on merging same pdf forms more than once ?
Thanks,
-Reddy",0,"Maruan Sahyoun","srinivas valisekkagari",0,3,"06/Nov/15 14:58","17/Mar/16 19:08","16/Nov/15 16:36"
PDFBOX-3095,PDFBOX,"Space size NaN",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",None,,"Space size NaN with the file
https://github.com/mpankov/pdfjs_selection_issue/raw/master/test_document.pdf",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Nov/15 17:10","17/Mar/16 19:08","09/Nov/15 17:13"
PDFBOX-3097,PDFBOX,"ClassCastException in Axial / Radial shading when object reference in extends",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",PDModel,None,,"java.lang.ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSBoolean
    org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext.<init>(AxialShadingContext.java:92)
    org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingPaint.createContext(AxialShadingPaint.java:67)
Same bug as in ghostscript: extends as references. Fix by using getObject() instead of get().",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/Nov/15 16:52","18/Jan/16 12:01","10/Nov/15 16:56"
PDFBOX-3102,PDFBOX,"getGlyphs returns empty array now",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,regression,,"TrueTypeFont x = new TTFParser().parse("arial.ttf");
GlyphData[] y = x.getGlyph().getGlyphs();",0,"Tilman Hausherr","simon steiner",0,3,"12/Nov/15 09:50","17/Mar/16 19:07","13/Nov/15 16:01"
PDFBOX-3103,PDFBOX,"Slow performance when printing PDF (fix provided)",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,"easyfix easytest opt",,"When printing a PDF document (4 pages, 177KB, link below) using command
java -jar pdfbox-app-2.0.0-RC1.jar PrintPDF test.pdf
processing of the document before print takes about 15 seconds on system with Core i5-4670 processor.
Most of the time is wasted on reading font files from system. The reason is that the font is read byte by byte in an unbuffered manner. The defective code is located in class org.apache.fontbox.ttf.RAFDataStream, where new instance of RandomAccessFile is created without buffering.
I prepared a buffer wrapper over RandomAccessFile that adds buffering to RandomAccessFile. Use of the buffer in RAFDataStream shortens printing time 5 times, i.e., printing takes 3 seconds instead of 15s.
The wrapper class is augmented version of a class released at https://code.google.com/p/jmzreader/wiki/BufferedRandomAccessFile (Apache License 2.0).
Please integrate provided fix with original source of FontBox.
PDF document and fix are available at http://1drv.ms/1NsKPFc",0,"Tilman Hausherr","Tomasz Pawlak",2,6,"12/Nov/15 10:46","17/Mar/16 19:07","26/Nov/15 16:23"
PDFBOX-3105,PDFBOX,"Image with mask missing in rendering",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0",2.0.0,Rendering,None,,"The png logo shows up in other pdf readers but not in pdf.js
And we have the same problem. And GS too.
The file is broken.
I get the "bad" effect in Acrobat Reader if I insert "/ImageMask true" in the mask. If I set it to false then the rendering is good. This leads me to the conclusion that this part of the spec is to be taken literally: "However, if the image dictionary's ImageMask entry is true, the sample data shall be interpreted as a stencil mask for applying the graphics state's nonstroking colour parameters (see 8.9.6.2, "Stencil Masking")." i.e. that if /ImageMask isn't there or is false, the mask is to be ignored.
This can be confirmed by a trick: at the beginning of the content stream, change "1 1 1 rg" (white) to "1 0 1 rg" (pink). Display with Adobe Reader, the white square is there. If masking had been working, only the seal would be seen without a white square.
If your eyes are good, you can see the dirt below the seal, which can also be seen in the unedited PDF. If the masking had been working, the dirt wouldn't be seen.
So for PDFBox, I'll simply change to apply the mask only if /ImageMask true.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"12/Nov/15 17:44","17/Mar/16 19:08","12/Nov/15 17:51"
PDFBOX-3106,PDFBOX,"Allow access to font data",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"In CFFFont we used to have:
public Map<String, byte[]> getCharStringsDict()
now we have:
List<byte[]> getCharStringBytes()
Also we used to be able to create our own new MaximumProfileTable() but this is not public anymore.
Can it be public also.",0,"John Hewson","simon steiner",0,3,"13/Nov/15 14:34","17/Mar/16 19:07","02/Jan/16 19:45"
PDFBOX-3107,PDFBOX,"Asterisk character not displaying properly in Adobe Reader",Bug,CLOSED,Blocker,Fixed,2.0.0,2.0.0,FontBox,None,,"From Matt B. in the user mailing list:
I have an odd issue with the asterisk character not displaying properly in Adobe Reader (XI or DC)
The "*" is displayed on the document as a hollow box, all other characters seem to be ok.
I thought it was an issue with my code, so I gave it a try in the HelloWorldTTF.java example, and got the same results...with various different TTF fonts as well.
Attached is the test.pdf output file, using the LiberationSans-Regular.ttf font and input message "1*1".
It was created using a 2.0.0-SNAPSHOT that I built earlier this morning, but I also had the same results using the RC1 binaries.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"14/Nov/15 13:59","08/Dec/17 18:05","24/Nov/15 19:02"
PDFBOX-3108,PDFBOX,"Font cache is always rebuilt when font skipped",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"If a font is skipped because of a missing name, the font is not added to the fontInfoList. This means that at the next program start, the list will be rebuilt.
This has happened for me all the time, I'm just too patient so I didn't realize the problem. It happens with the attached font, which is on my system.
There should be a type of entry in the cache file that mentions a file, but no font name, so that the next time the font directories are looked into, that file is not considered to be a new font.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"14/Nov/15 22:01","17/Mar/16 19:08","17/Nov/15 17:35"
PDFBOX-3110,PDFBOX,"Extract by beads doesn't work",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0","Text extraction",beads,,"Text extraction by beads has never worked, or (more likely) has been broken years ago, when/if the code was changed so that text positions are in image coordinates (y=0 is top) and not in PDF coordinates (y=0 is bottom).
todos:
adjust bead rectangles (done)
adjust for cropbox (done)
separate output from different beads with a newline (will open a different issue if I don't find solution)
optimize (done)
implement in 1.8.11
find a non copyrighted test file (done)",0,"Tilman Hausherr","Tilman Hausherr",0,4,"16/Nov/15 13:43","18/Jan/16 12:01","17/Nov/15 19:13"
PDFBOX-3112,PDFBOX,"Avoid crazy /Length1 values in font descriptor",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"Attached file has crazy values for /Length1, log output are from after the fix, I don't include the nasty exceptions I got:
WARNUNG: Ignored invalid Length1 -1172293644 for Type 1 font QUMRTG+CMMI10
WARNUNG: Ignored invalid Length1 1421188652 for Type 1 font KDKSJT+CMR7",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Nov/15 18:52","08/Feb/17 18:56","16/Nov/15 19:08"
PDFBOX-3114,PDFBOX,"Visible signatures in different pages changes previous revision",Bug,CLOSED,Blocker,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",Signing,None,"java 1.8, acrobat","I tried to make two visible signatures in a 2-pages pdf file using pdfbox-2.0.0-RC1.
I followed the example in SVN directory
https://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/
I have just modified CreateVisibleSignature class customizing the input parameters and the page to sign.
If both the signatures are made in the same page, no error occurs. If signatures are made in different pages (e.g. signature 1 in page 1 and signature 2 in page 2), when I open the pdf file with Adobe Acrobat XI Pro (v.11.0.13) it tells that signature 1 is not valid.
The attachment below refers to the source/resourse zip file. It contains:
test.docx: 2-pages test document generated with Microsoft Office Professional Plus 2013
test1.pdf: pdf version that generates error (created with Word by selecting "Save as Adobe PDF" option)
test1_*.pdf: signed pdf files with error
test2.pdf: pdf version that generates no error (created with Word by selecting "Save as" option and then "*.PDF")
test2_*.pdf: signed pdf files with no error
CreateVisibleSignature.java: customized source code
stamp.png: signature image
test.p12: key store (password 12345)",0,"Tilman Hausherr","Luca Battistelli",11,14,"17/Nov/15 14:20","07/Sep/16 17:39","05/Jan/16 07:49"
PDFBOX-3115,PDFBOX,"Fix high memory usage during signing",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Signing,memory,,"Hello. We have a requirement to be able to sign huge pdf files consisting entirely from paper scans. Unfortunately current implementation unnecessary buffers entire pdf contents during signing procedure. This patch suggests a fix.
We'll be happy to adjust it if needed and to see it merged.",0,"Andreas Lehmkühler","Eldar Gabdullin",0,3,"18/Nov/15 11:43","17/Mar/16 19:06","24/Nov/15 07:37"
PDFBOX-3116,PDFBOX,"COSNumber NumberFormatException for large number",Bug,CLOSED,Minor,Fixed,"1.8.11, 2.0.0","1.8.12, 2.0.0",Parsing,None,,"When trying to load a pdf containing the following:
<</Type/Pattern/TilingType 2/Resources 52 0 R/XStep 32767/BBox[-89884656743115785407263711865852178399035283762922498299458738401578630390014269380294779316383439085770229476757191232117160663444732091384233773351768758493024955288275641038122745045194664472037934254227566971152291618451611474082904279666061674137398913102072361584369088590459649940625202013092062429184 -89884656743115785407263711865852178399035283762922498299458738401578630390014269380294779316383439085770229476757191232117160663444732091384233773351768758493024955288275641038122745045194664472037934254227566971152291618451611474082904279666061674137398913102072361584369088590459649940625202013092062429184 89884656743115785407263711865852178399035283762922498299458738401578630390014269380294779316383439085770229476757191232117160663444732091384233773351768758493024955288275641038122745045194664472037934254227566971152291618451611474082904279666061674137398913102072361584369088590459649940625202013092062429184 89884656743115785407263711865852178399035283762922498299458738401578630390014269380294779316383439085770229476757191232117160663444732091384233773351768758493024955288275641038122745045194664472037934254227566971152291618451611474082904279666061674137398913102072361584369088590459649940625202013092062429184]/Matrix[0.61 0 0 -0.601 0 0.319]/YStep 32767/Length 28563/Filter/FlateDecode/PatternType 1/PaintType 1>>stream
I get a NumberFormatException in
at org.apache.pdfbox.cos.COSNumber.get(COSNumber.java:109)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:929)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray(BaseParser.java:648)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:856)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:148)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair(BaseParser.java:272)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:205)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:844)
at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:751)
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:720)
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:651)
at org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:612)
at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:203)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:230)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:972)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:876)
Adobe Reader and Chrome consider it a valid pdf and it load it.
I cannot share the PDF because of copyright issues, but I reproduced it with :"pdfbox\src\test\resources\input\rendering\source.pdf" from pdfbox-2.0.0-RC1-src.zip.
Changing the value 0 from "/BBox [0 0 2480 3508]" to -89884656743115785407263711865852178399035283762922498299458738401578630390014269380294779316383439085770229476757191232117160663444732091384233773351768758493024955288275641038122745045194664472037934254227566971152291618451611474082904279666061674137398913102072361584369088590459649940625202013092062429184
throws the exception.
Using "new COSFloat(number)" works in this case.",0,"Andreas Lehmkühler","Andrei T",0,5,"18/Nov/15 13:29","17/Mar/16 19:06","24/Jan/16 18:42"
PDFBOX-3119,PDFBOX,"Text extraction partially garbled in this file, was OK in 1.8",Sub-task,CLOSED,Major,Duplicate,2.0.0,None,"Text extraction",None,,"Don't know if this is the same as in PDFBOX-3066. The text with the F4 font is extracted as garbage in 2.0, and is fine with AR and in 1.8.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"19/Nov/15 17:16","02/Jan/16 22:18","02/Jan/16 22:18"
PDFBOX-3120,PDFBOX,"ArrayIndexOutOfBoundsException in CodespaceRange.isPartialMatch / CMap is invalid",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"Caused by: java.lang.ArrayIndexOutOfBoundsException: 1
    org.apache.fontbox.cmap.CodespaceRange.isPartialMatch(CodespaceRange.java:129)
    org.apache.fontbox.cmap.CMap.readCode(CMap.java:133)
    org.apache.pdfbox.pdmodel.font.PDType0Font.readCode(PDType0Font.java:454)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:677)",0,"Andreas Lehmkühler","Tilman Hausherr",0,4,"19/Nov/15 17:54","17/Mar/16 19:07","20/Jan/16 17:21"
PDFBOX-3121,PDFBOX,"Buffer save(File)",Improvement,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0",2.0.0,PDModel,None,,"Somebody in the user mailing list asked for saving to file be buffered. I'll do it because the highest level API should have the best user experience. People who don't want that should use the method with the OutputStream parameter.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Nov/15 18:06","23/Mar/17 17:49","19/Nov/15 18:08"
PDFBOX-3122,PDFBOX,"IllegalArgumentException: dash lengths all zero",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"Caused by: java.lang.IllegalArgumentException: dash lengths all zero
    org.apache.pdfbox.rendering.PageDrawer.getStroke(PageDrawer.java:563)
    org.apache.pdfbox.rendering.PageDrawer.strokePath(PageDrawer.java:571)
    org.apache.pdfbox.contentstream.operator.graphics.StrokePath.process(StrokePath.java:36)
The content stream has this:
  [ 0.0 0.0 ] 0 d
I'll fix this by checking the dash array and pass an empty array if all elements are 0.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Nov/15 19:01","17/Mar/16 19:06","19/Nov/15 19:05"
PDFBOX-3123,PDFBOX,"Text extraction garbled in this file, was OK in 1.8",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",None,,"Text extraction worked in 1.8, no longer in 2.0. Text extraction in Adobe Reader works too.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Nov/15 20:34","24/Sep/18 15:27","02/Jan/16 22:08"
PDFBOX-3125,PDFBOX,"IndexOutOfBoundsException in PDFont.getWidth()",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 85, Size: 83
        at java.util.ArrayList.rangeCheck(Unknown Source)
        at java.util.ArrayList.get(Unknown Source)
        at org.apache.pdfbox.pdmodel.common.COSArrayList.get(COSArrayList.java:524)
        at org.apache.pdfbox.pdmodel.font.PDFont.getWidth(PDFont.java:230)
        at org.apache.pdfbox.pdmodel.font.PDFont.getDisplacement(PDFont.java:211)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:686)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Nov/15 13:44","17/Mar/16 19:08","21/Nov/15 13:50"
PDFBOX-3126,PDFBOX,"IndexOutOfBoundsException in PfbParser.parsePfb",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"java.lang.IndexOutOfBoundsException
 at java.io.ByteArrayInputStream.read(ByteArrayInputStream.java
 at org.apache.fontbox.pfb.PfbParser.parsePfb(PfbParser.java:144)
 at org.apache.fontbox.pfb.PfbParser.<init>(PfbParser.java:112)
 at org.apache.fontbox.type1.Type1Font.createWithPFB(Type1Font.java:69)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:213)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Nov/15 16:15","17/Mar/16 19:08","21/Nov/15 16:18"
PDFBOX-3127,PDFBOX,"Text with vertical font not extracted correctly",Sub-task,CLOSED,Major,Fixed,"1.8.10, 2.0.0",2.0.0,"Text extraction",None,,"The attached file has a vertical font, although the text is horizontal.
Extraction with 1.8:
NOTI CE OF PUBLI C HEARI NG
The Sout h Caroli na Depart ment of I nsurance will hol d a publi c
heari ng i n accordance wit h t he require ments of Secti on 38-3-
110? 5? Thursday, April 29, 2010 at The Conf erence and Busi ness
Cent er at t he Grand Strand Ca mpus of t he Horry- Georgetown
Techni cal Coll ege, 950 Crabtree Lane, Myrtl e Beach, S. C., 29577
fro m 5: 30 p. m.-7: 00 p. m. The purpose of t hi s heari ng i s t o provi de
an opportunity t o di scuss and off er i nput concerni ng t he st atus of t he
coastal property i nsurance market. The Conf erence Cent er i s l ocat ed
one mil e sout h of t he Myrtl e Beach I nt ernati onal Airport bet ween
Hi ghway 17 Busi ness and Hi ghway 17 Bypass. The t el ephone
nu mber f or t he Conf erence and Busi ness Cent er i s 843-477-2042.
Extraction with 2.0:
N O T I C E O F P U B L I C H E A R I N G
T h e S o u t h C a r o l i n a D e p a r t m e n t o f I n s u r a n c e w i l l h o l d a p u b l i c
h e a r i n g i n a c c o r d a n c e w i t h t h e r e q u i r e m e n t s o f S e c t i o n 3 8 - 3 -
1 1 0 ︵5 ︶ T h u r s d a y , A p r i l 2 9 , 2 0 1 0 a t T h e C o n f e r e n c e a n d B u s i n e s s
C e n t e r a t t h e G r a n d S t r a n d C a m p u s o f t h e H o r r y - G e o r g e t o w n
T e c h n i c a l C o l l e g e , 9 5 0 C r a b t r e e L a n e , M y r t l e B e a c h , S . C . , 2 9 5 7 7
f r o m 5 : 3 0 p . m . - 7 : 0 0 p . m . T h e p u r p o s e o f t h i s h e a r i n g i s t o p r o v i d e
a n o p p o r t u n i t y t o d i s c u s s a n d o f f e r i n p u t c o n c e r n i n g t h e s t a t u s o f t h e
c o a s t a l p r o p e r t y i n s u r a n c e m a r k e t . T h e C o n f e r e n c e C e n t e r i s l o c a t e d
o n e m i l e s o u t h o f t h e M y r t l e B e a c h I n t e r n a t i o n a l A i r p o r t b e t w e e n
H i g h w a y 1 7 B u s i n e s s a n d H i g h w a y 1 7 B y p a s s . T h e t e l e p h o n e
n u m b e r f o r t h e C o n f e r e n c e a n d B u s i n e s s C e n t e r i s 8 4 3 - 4 7 7 - 2 0 4 2 .
A brute force change that uses the correct width, and that works only with this file brings this:
NOTICE OF PUBLIC HEARING
The South Carolina Department of Insurance will hold a public
hearing in accordance with the requirements of Section 38-3-
110 ︵5 ︶ Thursday, April 29, 2010 at The Conference and Business
Center at the Grand Strand Campus of the Horry-Georgetown
Technical College, 950 Crabtree Lane, Myrtle Beach, S.C., 29577
from 5:30 p.m.-7:00 p.m. The purpose of this hearing is to provide
an opportunity to discuss and offer input concerning the status of the
coastal property insurance market. The Conference Center is located
one mile south of the Myrtle Beach International Airport between
Highway 17 Business and Highway 17 Bypass. The telephone
number for the Conference and Business Center is 843-477-2042.
The problem is that the PDFTextStreamEngine doesn't work well with vertical fonts. The red lines in the attached image show that the size is only half of whats needed. It may be related to PDCIDFont.getDefaultPositionVector() but changing that isn't enough.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"23/Nov/15 21:53","17/Mar/16 19:07","06/Jan/16 18:06"
PDFBOX-3128,PDFBOX,"Latest Apache Tika can't be used together with PDFBox 2.0",Bug,CLOSED,Blocker,Invalid,None,None,None,None,,"I'm using both Tika and PDFBox in my project and I have upgraded PDFBox to 2.0. I realized after that Tika is using some classes from PDFBox and some of these classes are removed from PDFBox 2.0 such as CryptographyException.
See code: https://github.com/apache/tika/blob/trunk/tika-parsers/src/main/java/org/apache/tika/parser/pdf/PDFParser.java
line 151",0,"Andreas Lehmkühler","Krisztian Mangold",0,2,"24/Nov/15 09:24","24/Nov/15 16:03","24/Nov/15 10:46"
PDFBOX-3129,PDFBOX,"NullPointerException in PDFStreamEngine.showText()",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"java.lang.NullPointerException: null
    org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:732)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showTextStrings(PDFStreamEngine.java:619)
    org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted.process(ShowTextAdjusted.java:47)
this happens if TJ or Tj are not within BT...ET.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Nov/15 16:51","17/Mar/16 19:06","24/Nov/15 16:54"
PDFBOX-3130,PDFBOX,"Recent regression in PDFTextStripper, text getting garbled",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",None,,"Text extraction using PrintTextLocations is getting garbled characters in the attached snippet.
For this file it is getting one string of "2O(Er4env vqeheurosriAurseirueeass ss/Ct:7:rh adaliaargynse csr eadc+cit6e l1ipc te+2en 6d9c1)9e 91 2933"
This test case is about as small as I could make it and still show the problem; when I reduced the file to just one line of text, then the text came though correctly.
This problem shows up in RC2 and the latest development build. I believe it was OK in the development build from Nov 4",0,"Tilman Hausherr","Fred Andrews",0,4,"24/Nov/15 19:34","17/Mar/16 19:07","25/Nov/15 19:31"
PDFBOX-3131,PDFBOX,"Reduce amount of intermediate data and objects to reduce memory footprint/complexity",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"The CFFParser holds a lot of intermediate data and produces a lot of objects to do so. The idea is to reduce the amount of such objects and data to reduce the memory footprint and the complexity.
the class IndexData holds intermediate data creates byte array everytime when getBytes is called. I'm going to replace the class with a simple list to reduce the memory footprint and the complexity
remove unused members of private classes
create a list of strings instead of a list of byte arrays which is used to create those strings",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,4,"24/Nov/15 20:21","17/Mar/16 19:07","26/Dec/15 13:20"
PDFBOX-3133,PDFBOX,"PDFBox 2.0.0-RC2 and earlier 2.0.0 SNAPSHOT Versions print performance is poor with systems having low RAM < 3GB and lower number of fonts.",Improvement,CLOSED,Major,"Not A Problem",2.0.0,2.0.0,PDModel,performance,windows,"PDFBox 2.0.0-RC1, SNAPSHOTS and RC2 versions print takes 15+ seconds.
Steps to reproduce
--------------------------
Use Windows System with < 3 GB RAM
Use Systems with less number of fonts or without specific fonts in PDF file to be printed.
Printing PDF file
Took 14 to 20 seconds in system with 3 GB RAM which had 522 foints
Took 24 to 34 seconds in system with 2 GB RAM which had 90 fonts
Took only 2.5 seconds in system with 8 GB RAM which had 1025 fonts.
Doubt
--------
Not browsed the code, but following is the doubt as causing performance issue.
Though the code caches fonts by storing fonts in local .pdfbox.cache file first time and caching fonts for subsequent times.
Not clear whether the code updates the pdfbox fonts cache file if new fonts are found in new PDF file to be printed, while printing subsequent times.
If the fonts in PDF file to be printed is not available in the .pdfbox.cache file stored in local system/local system what is the behaviour? Will the code download fonts and update cache for subsequent times or is it limited by fonts available in local system? Looks like later is the case and performance got hit either due to RAM or not constantly updating fonts cache or due to un availability of fonts in local system.",0,"John Hewson",Sridhar,0,3,"25/Nov/15 15:13","11/Dec/15 19:47","11/Dec/15 19:47"
PDFBOX-3136,PDFBOX,"False negative on PDF/A-1A with wrongly given causes " Invalid graphics object, DestOutputProfile isn't a valid ICCProfile: Invalid ICC Profile Data" and "Invalid Color space, The operator "rg" can't be used with CMYK Profile"",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,Preflight,None,,"Using the code of the CookBook for PDF/A validation (given for 1.8.10) :
with the test_little-A1a.pdf file (Adobe preflight (and pdfbox:1.8.10) tells me it's a valid PDF/A-1A)
and only replacing the code "parser.parse()" with "parser.parse(Format.PDF_A1A)",
result.isValid() is false with version 2.0.0-RC2. Displayed results errors are :
2.1.4 - Invalid graphics object, DestOutputProfile isn't a valid ICCProfile: Invalid ICC Profile Data
2.1.4 - Invalid graphics object, DestOutputProfile isn't a valid ICCProfile. Caused by : Invalid ICC Profile Data
2.4.1 - Invalid Color space, The operator "rg" can't be used with CMYK Profile
Some log is displayed :
WARN [org.apache.pdfbox.filter.FlateFilter] - FlateFilter: premature end of stream due to a DataFormatException
DEBUG [org.apache.pdfbox.io.ScratchFileBuffer] - ScratchFileBuffer not closed!
WARN [org.apache.pdfbox.filter.FlateFilter] - FlateFilter: premature end of stream due to a DataFormatException
Note : Running same code with the pdfbox and preflight version 2.0.0-RC1 on the same file, I get the exception :
org.apache.pdfbox.preflight.exception.ValidationException: Unable to parse the ICC Profile.
at org.apache.pdfbox.preflight.process.CatalogValidationProcess.validateICCProfile(CatalogValidationProcess.java:383)
at org.apache.pdfbox.preflight.process.CatalogValidationProcess.validateOutputIntent(CatalogValidationProcess.java:285)
at org.apache.pdfbox.preflight.process.CatalogValidationProcess.validate(CatalogValidationProcess.java:148)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:122)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:163)
[...]
Caused by: java.io.IOException: java.util.zip.DataFormatException: incorrect data check
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)
at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:69)
at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:163)
at org.apache.pdfbox.preflight.process.CatalogValidationProcess.validateICCProfile(CatalogValidationProcess.java:360)
... 29 more
Caused by: java.util.zip.DataFormatException: incorrect data check
at java.util.zip.Inflater.inflateBytes(Native Method)
And a similar result as with 2.0.0-RC2 is obtained with 1.8.8.",0,"Tilman Hausherr","Antoine Ribes",0,2,"26/Nov/15 18:21","03/Dec/15 19:38","03/Dec/15 19:38"
PDFBOX-3137,PDFBOX,"Reduce/remove dependency on commons.io in preflight/xmpbox",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,"Preflight, XmpBox",None,,"The usage of commons.io should be removed or at least reduced to a minimum to avoid the dependency.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"29/Nov/15 15:16","17/Mar/16 19:08","01/Dec/15 17:11"
PDFBOX-3139,PDFBOX,"Custom FontMapper cant be used",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"CIDFontMapping and FontMapping have private constructor so not sure how you can even use this FontMapper",0,"John Hewson","simon steiner",0,2,"30/Nov/15 09:08","17/Mar/16 19:08","01/Dec/15 17:14"
PDFBOX-3140,PDFBOX,"Different fallback font rendering first and second time",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,"FontBox, Rendering",None,,"The file from PDFBOX-2563 looks different depending on whether the cache exists, because a different fallback font is used:
After deleting .pdfbox.cache:
Using fallback font Batang for CID-keyed TrueType font ????
Second run with existing cache:
Using fallback font ArialUnicodeMS for CID-keyed TrueType font ????",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"30/Nov/15 19:48","17/Mar/16 19:07","18/Dec/15 18:11"
PDFBOX-3141,PDFBOX,"Link annotation borders not rendered",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"PDModel, Rendering",Annotations,,"Borders in link annotations are not rendered.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"30/Nov/15 20:26","17/Mar/16 19:08","01/Dec/15 17:40"
PDFBOX-3142,PDFBOX,"PDFMergerUtility with scratch file generates result with blank pages for certain source files.",Bug,CLOSED,Major,Fixed,1.8.10,2.0.0,Utilities,None,"ubuntu, java 1.8","My team uses PDFMergerUtility to attach cover pages to various pdfs . We recently we tried utilizing a scratch file (e.g. PDFMergerUtility.mergeDocumentsNonSeq()) to cut down on the amount of RAM we are using. This approach works for the majority of pdf's in our system, but some files cause the merger utility to generate resultant pdf's with a blank page. Specifically, the result pdf contains a blank page after the coverpage instead of the first page of the second document sent to merger utility.
Whenever this problem occurs, we see the following line in our logs:
org.apache.pdfbox.pdfparser.NonSequentialPDFParser - Can't find the object 52 0 (origin offset 7187557)
I'll try to attach/link an example pdf soon, but currently I don't have permission to redistribute any files that exhibit the problem. However, here's a simple snippet that replicates the problem - it's pretty straightforward.
    @Test
    public void testMergeNonSeq() throws IOException, COSVisitorException {
        destinationPdf = new File(TMP_FOLDER, "result-nonseq.pdf");
        PDFMergerUtility ut = new PDFMergerUtility();
        RandomAccess ram = new RandomAccessFile(File.createTempFile("mergeram", ".bin"), "rw");
        ut.addSource(coverpagePdf);
        ut.addSource(documentPdf);
        ut.setDestinationFileName(destinationPdf.getCanonicalPath());

        ut.mergeDocumentsNonSeq(ram);  
        
        //the only automated way we have to tell that something went wrong is to check the size of the result
        assertThat("destination pdf should be larger than the original pdf", destinationPdf.length(), is( greaterThan(documentPdf.length())));
    }
Note we only see this problem with PDFMergerUtility.mergeDocumentsNonSeq(). Using PDFMergerUtility.mergeDocuments() does not exhibit any problems.",0,"Andreas Lehmkühler","Jim deVos",0,3,"01/Dec/15 01:28","17/Mar/16 19:08","01/Feb/16 18:41"
PDFBOX-3143,PDFBOX,"Added PDEmbeddedFile constructor with COSName parameter",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Since the "addCompression" method from PDStream got deprecated and instead the "PDStream" constructor with "COSName" parameter should be used, please also provide this constructor in all classes derived from "PDStream" where it makes sense (especially in "PDEmbeddedFile")",0,"Tilman Hausherr","Philip Helger",0,4,"01/Dec/15 11:42","17/Mar/16 19:07","16/Dec/15 17:34"
PDFBOX-3144,PDFBOX,"NullPointerException in TTFSubsetter",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"An NPE happens in "public void TTFSubsetter.add(int unicode)" because the "unicodeCmap" member is null.
This might be, because the passed "ttf" member is based on a "MemoryTTFDataStream" and has only 38 glyphs (so it might already be a subset). The available tables of the TTF are only: [fpgm, head, cvt , glyf, loca, gasp, hmtx, prep, hhea, maxp]
The variables of the underyling font are:
this PDType0Font  (id=58) 
 afmStandard14 null 
 avgFontWidth 0.0 
 cMap CMap  -> Identity-H
 cMapUCS2 null 
 descendantFont PDCIDFontType2  (id=155) 
 dict COSDictionary  -> COSDictionary{(COSName{Type}:COSName{Font}) (COSName{BaseFont}:COSName{AAAMSE+OpenSans-Bold}) (COSName{Subtype}:COSName{Type0}) (COSName{Encoding}:COSName{Identity-H}) (COSName{DescendantFonts}:COSArray{[COSDictionary{(COSName{Type}:COSName{Font}) (COSName{Subtype}:COSName{CIDFontType2}) (COSName{BaseFont}:COSName{AAAMSE+OpenSans-Bold}) (COSName{CIDSystemInfo}:COSDictionary{(COSName{Registry}:COSString{Adobe}) (COSName{Ordering}:COSString{Identity}) (COSName{Supplement}:COSInt{0}) }) (COSName{FontDescriptor}:COSDictionary{(COSName{Type}:COSName{FontDescriptor}) (COSName{FontName}:COSName{AAAMSE+OpenSans-Bold}) (COSName{Flags}:COSInt{4}) (COSName{FontWeight}:COSFloat{700.0}) (COSName{ItalicAngle}:COSFloat{0.0}) (COSName{FontBBox}:COSArray{[COSFloat{-619.1406}, COSFloat{-292.96875}, COSFloat{1318.8477}, COSFloat{1068.8477}]}) (COSName{Ascent}:COSFloat{1068.8477}) (COSName{Descent}:COSFloat{-292.96875}) (COSName{CapHeight}:COSFloat{713.8672}) (COSName{XHeight}:COSFloat{545.89844}) (COSName{StemV}:COSFloat{251.93846}) (COSName{FontFile2}:COSStream{(COSName{Filter}:COSName{FlateDecode}) (COSName{Length}:COSInt{5625}) (COSName{Length1}:COSInt{8036}) }) (COSName{CIDSet}:COSStream{(COSName{Filter}:COSName{FlateDecode}) (COSName{Length}:COSInt{20}) }) }) (COSName{W}:COSArray{[COSInt{3}, COSArray{[COSInt{260}]}, COSInt{68}, COSArray{[COSInt{604}, COSInt{633}, COSInt{514}, COSInt{633}, COSInt{591}]}, COSInt{74}, COSArray{[COSInt{565}, COSInt{657}, COSInt{305}]}, COSInt{15}, COSArray{[COSInt{290}]}, COSInt{79}, COSArray{[COSInt{305}]}, COSInt{16}, COSArray{[COSInt{322}]}, COSInt{80}, COSArray{[COSInt{982}]}, COSInt{17}, COSArray{[COSInt{285}]}, COSInt{81}, COSArray{[COSInt{657}, COSInt{619}]}, COSInt{19}, COSArray{[COSInt{571}]}, COSInt{83}, COSArray{[COSInt{633}]}, COSInt{20}, COSArray{[COSInt{571}]}, COSInt{85}, COSArray{[COSInt{454}, COSInt{497}, COSInt{434}, COSInt{657}]}, COSInt{27}, COSArray{[COSInt{571}, COSInt{571}, COSInt{285}]}, COSInt{93}, COSArray{[COSInt{488}]}, COSInt{36}, COSArray{[COSInt{690}, COSInt{672}]}, COSInt{40}, COSArray{[COSInt{560}]}, COSInt{48}, COSArray{[COSInt{943}, COSInt{813}]}, COSInt{53}, COSArray{[COSInt{660}, COSInt{551}, COSInt{579}, COSInt{756}]}, COSInt{61}, COSArray{[COSInt{579}]}]}) (COSName{CIDToGIDMap}:COSStream{(COSName{Filter}:COSName{FlateDecode}) (COSName{Length}:COSInt{84}) (COSName{Length1}:COSInt{188}) }) }]}) (COSName{ToUnicode}:COSStream{(COSName{Filter}:COSName{FlateDecode}) (COSName{Length}:COSInt{324}) }) }
 embedder PDCIDFontType2Embedder 
 fontDescriptor null 
 fontWidthOfSpace -1.0 
 isCMapPredefined true 
 isDescendantCJK false 
 noUnicode HashSet<E>  -> empty
 toUnicodeCMap null 
 widths null 
I will try to find a minimum example on how to reproduce this. Currently it is only reproducible as part of a bigger package :|",0,"John Hewson","Philip Helger",0,2,"01/Dec/15 15:41","17/Mar/16 19:08","02/Dec/15 17:09"
PDFBOX-3145,PDFBOX,"Security manager fails for .pdfbox.cache",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"Caused by: java.security.AccessControlException: access denied ("java.io.FilePermission" "/home/simon/.pdfbox.cache" "read")
at java.security.AccessControlContext.checkPermission(AccessControlContext.java:457)
at java.security.AccessController.checkPermission(AccessController.java:884)
at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
at java.lang.SecurityManager.checkRead(SecurityManager.java:888)
at java.io.File.exists(File.java:814)
at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.loadDiskCache(FileSystemFontProvider.java:357)",0,"John Hewson","simon steiner",0,2,"01/Dec/15 16:34","17/Mar/16 19:06","01/Dec/15 20:41"
PDFBOX-3146,PDFBOX,"Ink annotation borders not rendered",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,Annotations,,"I'll write something to render Ink annotations. One can be found in the file of PDFBOX-2583.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"01/Dec/15 19:48","17/Mar/16 19:08","03/Dec/15 18:20"
PDFBOX-3148,PDFBOX,"Multiline fields won't get rendered correctly if there are multiple paragraphs in field value",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,AcroForm,Appearance,,"I have problem with multiline fields in form filling. It seems that if i have value with newlines "\n" rendering won't work correctly. Every line seems to be rendered over previous line.
E.g.
value = "1\n2\n3\n4"
will be rendered so than every number are rendered over each other but what I'm expecting would be something like:
1
2
3
4",0,"Maruan Sahyoun","Marko Kattelus",0,4,"02/Dec/15 10:58","17/Mar/16 19:06","02/Mar/16 16:59"
PDFBOX-3149,PDFBOX,"Failure to decrypt empty strings (AES 128)",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,"Crypto, Parsing, PDModel",None,,"SecurityHandler fails to decrypt empty strings in a AES 128 encrypted PDF.
Strings like: <</Name ()>>
This is because it tries to read the first 16 bytes as the AES IV, failing which it throws IOException. Solution: if you cannot read any bytes from the stream, it is empty and so there is nothing to decrypt.",0,"Tilman Hausherr","Jesse Long",0,3,"02/Dec/15 12:24","17/Mar/16 19:07","03/Dec/15 19:55"
PDFBOX-3150,PDFBOX,"IllegalArgumentException in getStringWidth/showText",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,PDModel,None,,"I want to get the string width using a Type0 font. Because I'm using a character not in the font (e.g. '\n') I'm getting the following exception:
Exception in thread "main" java.lang.IllegalArgumentException: No glyph for U+000A in font OpenSans
 at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.encode(PDCIDFontType2.java:401)
 at org.apache.pdfbox.pdmodel.font.PDType0Font.encode(PDType0Font.java:351)
 at org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:283)
 at org.apache.pdfbox.pdmodel.font.PDFont.getStringWidth(PDFont.java:312)
As this is a quite common scenario, I suggest you provide a possibility to provide a fallback codepoint that can be used for all non-printable characters.
A similiar exception happens when trying to print the text via the PDPageContentStream:
Exception in thread "main" java.lang.IllegalArgumentException: No glyph for U+000A in font OpenSans
 at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.encode(PDCIDFontType2.java:401)
 at org.apache.pdfbox.pdmodel.font.PDType0Font.encode(PDType0Font.java:351)
 at org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:283)
 at org.apache.pdfbox.pdmodel.PDPageContentStream.showText(PDPageContentStream.java:341)
I finally ended up creating my own "font.encode" method (with a lot of other hacks) that basically does the following:
   final byte [] aFallbackBytes = aFont.encode (nFallbackCodepoint);
       byte [] aCPBytes;
      try
      {
        // This method is package private
        aCPBytes = aFont.encode (nCP);
      }
      catch (final IllegalArgumentException ex) {
        aCPBytes = aFallbackBytes;
      }
-> another issue is, that "PDFont.encode (int)" is not public - it would help to change this as well. Shall I create a separate issue?",0,"John Hewson","Philip Helger",0,2,"02/Dec/15 13:48","11/Dec/15 19:54","02/Dec/15 17:25"
PDFBOX-3151,PDFBOX,"getStringWidth is terribly slow (and resulting document is invalid)",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"I'm maintaining a PDF layout engine that makes heavy use of "getStringWidth". With PDFBox 2.0.0 this got much slower. So please find attached an example which you can use for profiling purposes. I used "OpenSans" TTF as the basis (grab it at https://github.com/google/fonts/tree/master/apache/opensans).
Beside it being slow, the created PDF cannot be opened (but this may have something to do with PDFBOX-2945 in RC2???)",0,"Andreas Lehmkühler","Philip Helger",0,4,"02/Dec/15 14:12","17/Mar/16 19:07","13/Dec/15 12:40"
PDFBOX-3152,PDFBOX,"NullPointerException in PDType1Font.encode() with centered dot",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"As reported by Pedro L.M. in the user mailing list
Font used:
PDType1Font.HELVETICA
code:
content.showText("sol·licitud");
Exception in thread "main" java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.font.PDType1Font.encode(PDType1Font.java:357)
 at org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:285)
 at org.apache.pdfbox.pdmodel.PDPageContentStream.showText(PDPageContentStream.java:482)
That character (B7) is listed as "middot" and "periodcentered" in glyphlist.txt, and "middot" is returned. But "middot" doesn't exist in the inverted list:
{Udieresis=220, tilde=152, greater=62, Ograve=210, bracketright=93, eth=240, otilde=245, asciitilde=126, odieresis=246, Agrave=192, ograve=242, parenright=41, brokenbar=166, bracketleft=91, Idieresis=207, copyright=169, aring=229, Egrave=200, Aring=197, trademark=153, idieresis=239, D=68, E=69, F=70, G=71, A=65, B=66, C=67, L=76, M=77, N=78, O=79, florin=131, H=72, Acircumflex=194, I=73, J=74, six=54, K=75, currency=164, U=85, T=84, W=87, adieresis=228, V=86, Q=81, P=80, S=83, R=82, quotesingle=39, Y=89, Eth=208, X=88, braceright=125, Z=90, f=102, g=103, d=100, Ccedilla=199, e=101, b=98, c=99, a=97, exclamdown=161, thorn=254, n=110, perthousand=137, o=111, divide=247, acircumflex=226, l=108, m=109, j=106, Odieresis=214, k=107, h=104, i=105, w=119, v=118, Ugrave=217, u=117, igrave=236, t=116, s=115, r=114, yen=165, q=113, p=112, Yacute=221, quotedblleft=147, z=122, y=121, bullet=127, threequarters=190, edieresis=235, x=120, atilde=227, percent=37, Atilde=195, exclam=33, braceleft=123, numbersign=35, ntilde=241, endash=150, scaron=154, comma=44, threesuperior=179, grave=96, period=46, AE=198, ordfeminine=170, Otilde=213, hyphen=45, logicalnot=172, ocircumflex=244, colon=58, acute=180, backslash=92, ordmasculine=186, four=52, question=63, Scaron=138, cent=162, Oacute=211, agrave=224, five=53, at=64, onehalf=189, equal=61, multiply=215, Ucircumflex=219, oslash=248, asciicircum=94, Icircumflex=206, seven=55, semicolon=59, registered=174, cedilla=184, ae=230, macron=175, paragraph=182, guilsinglright=155, nine=57, dagger=134, ellipsis=133, zero=48, oacute=243, circumflex=136, oe=156, uacute=250, guillemotright=187, ccedilla=231, sterling=163, plus=43, onequarter=188, germandbls=223, Adieresis=196, questiondown=191, Thorn=222, Oslash=216, bar=124, Uacute=218, onesuperior=185, guilsinglleft=139, space=32, Zcaron=142, Euro=128, yacute=253, quotedbl=34, quotesinglbase=130, eacute=233, OE=140, ugrave=249, dollar=36, dieresis=168, ydieresis=255, Edieresis=203, slash=47, egrave=232, mu=181, twosuperior=178, ucircumflex=251, ampersand=38, degree=176, Eacute=201, udieresis=252, Igrave=204, zcaron=158, eight=56, quotedblright=148, daggerdbl=135, icircumflex=238, quoteright=146, three=51, quotedblbase=132, underscore=95, Ecircumflex=202, ecircumflex=234, periodcentered=183, iacute=237, guillemotleft=171, emdash=151, one=49, Iacute=205, Aacute=193, less=60, Ocircumflex=212, asterisk=42, parenleft=40, Ntilde=209, section=167, two=50, Ydieresis=159, plusminus=177, quoteleft=145, aacute=225}
"middot" isn't mentioned anywhere in the PDF specification, but "periodcentered" is.",0,"John Hewson","Tilman Hausherr",0,5,"03/Dec/15 18:24","17/Mar/16 19:07","11/Dec/15 20:17"
PDFBOX-3153,PDFBOX,"Direct JPEG extraction results in invalid images in 2.0.0 releases.",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",PDModel,"extraction image","mac os, linux","When I run pdfbox-app ExtractImages on a PDF containing an image with a DeviceRGB colorspace, the resulting JPEG file is very large (5.3MB, while the source PDF is 320KB).
I see this with the 2.0.0-RC2 release, I also encounter the problem with a build from today's trunk.
If I modify the code to force usage of ImageIO, a valid JPEG file results.
The image extracts properly in the 1.8.10 version.",0,"Tilman Hausherr","John Logan",0,5,"04/Dec/15 23:44","18/Jan/16 12:01","05/Dec/15 07:36"
PDFBOX-3154,PDFBOX,"PDDocumentCatalog.getDocumentCatalog().getPages().getCount() returns 0 - first page is -1",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,,"The attached PDF opens fine in the readers I have checked, but PDFBox has some issues with it. It apparently has 0 pages, but it is possible to get the first page by asking for page number -1.
Code:
PDDocument pdDocument = PDDocument.load(inputStream);
int pages = pdDocument.getDocumentCatalog().getPages().getCount();
//pages == 0
PDPage page = pdDocument.getDocumentCatalog().getPages().get(-1);
//page != null
This behaviour exists on version 2.0.0.rc2 and on trunk.",0,"John Hewson","Aleksander Blomskøld",0,3,"07/Dec/15 09:43","17/Mar/16 19:07","11/Dec/15 18:43"
PDFBOX-3155,PDFBOX,"org.apache.pdfbox.util.PDFTextStripper class initialization throws NumberFormatException with recent Verona-enabled Java 9 JVMs",Bug,CLOSED,Critical,Fixed,"1.8.8, 1.8.10","1.8.11, 2.0.0",None,None,,"Lucene/Solr runs its whole testsuite also with Java 9 EA releases to trigger bugs early. In our tests (Solr + TIKA) we found out that org.apache.pdfbox.util.PDFTextStripper throws a NumberFormatException in its static initializer when parsing the "java.version" system property. The reason for failure is a change in Java 9, where version numbers got a new format.
There are 3 problems:
It should not assume that all components are really a number. So it should try/catch NumberFormatException and assign some "unknown" version
The code should really use "java.specification.version". This is standardized and only contains digits.
The code should also be prepared to handle version numbers without minor version! E.g. Java 9 only has "9" instead of "1.9" as its main version number.
For the use case I would nuke this check and find a better workaround.
Relying on String parsing for non-standardized system properties in a static class initializer is the reason why this bug is raised to level "Critical".",0,"Tilman Hausherr","Uwe Schindler",0,6,"07/Dec/15 13:45","18/Jan/16 12:01","09/Dec/15 18:14"
PDFBOX-3156,PDFBOX,"PDFPrintable generate a java.lang.NegativeArraySizeException error",Bug,CLOSED,Major,"Won't Fix",2.0.0,None,Rendering,None,,"I use in pom :
<dependency>
<groupId>org.apache.pdfbox</groupId>
<artifactId>pdfbox</artifactId>
<version>2.0.0-RC2</version>
</dependency>
And when I do :
PDFPrintable printable = new PDFPrintable(unDoc, Scaling.ACTUAL_SIZE);
I have the error.",0,"Tilman Hausherr","Roydor Vincent",0,2,"07/Dec/15 14:57","07/Dec/15 16:49","07/Dec/15 16:49"
PDFBOX-3157,PDFBOX,"PDOutputIntent has N=3 (RGB) hardcoded",Bug,CLOSED,Major,Fixed,"1.8.10, 2.0.0","1.8.11, 2.0.0",PDModel,None,,"This code is suspicious:
    private PDStream configureOutputProfile (PDDocument doc, InputStream colorProfile) throws IOException {
        PDStream stream = new PDStream(doc,colorProfile, false); 
        stream.getStream().setFilters(COSName.FLATE_DECODE); 
        stream.getStream().setInt( COSName.LENGTH, stream.getByteArray().length ); 
        stream.getStream().setInt(COSName.N, 3); 
        stream.addCompression(); 
        return stream;
    }
N is hardcoded to 3, although it could be a CMYK profile.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Dec/15 19:56","18/Jan/16 12:01","07/Dec/15 20:19"
PDFBOX-3158,PDFBOX,"Add constructor with BufferedImage to PDVisibleSignDesigner",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Signing,None,,"In 1.8 the PDVisibleSignDesigner constructor took a JPEG stream and used that one directly to create a PDJpeg. In 2.0 the stream is read into a BufferedImage so the opportunity to create a JPEG directly is lost. But this doesn't matter, as a JPEG is not the best choice for images with sharp edges (a signature scan, or a text printed into an image). So I will
replace the JPEGFactory with LosslessFactoory
add constructor that takes a BufferedImage",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Dec/15 19:18","17/Mar/16 19:08","08/Dec/15 21:01"
PDFBOX-3159,PDFBOX,"Checkout fails on PasswordSample-128bit.pdf because of Virus scanner",Bug,CLOSED,Major,"Cannot Reproduce",2.0.0,None,PDModel,None,,"I wanted to checkout the current PDFBox SNAPSHOT but the file /trunk/pdfbox/src/test/resources/org/apache/pdfbox/encryption/PasswordSample-128bit.pdf cannot be checked out (because of the virus scanner??? - same for PasswordSample-40bit.pdf)
Can you ensure that the files are virus free? SVN error is svn: E175013",0,"Tilman Hausherr","Philip Helger",0,2,"09/Dec/15 13:07","09/Dec/15 18:26","09/Dec/15 18:05"
PDFBOX-3160,PDFBOX,"Problem with org.apache.xmpbox.DateConverter",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,XmpBox,None,,"With 2015-12-08T12:07-05:00 we are getting an exception in fromISO8601() method, but it's a legal date due to ISO8601 specification.
One possible solution can be tracking all date strings without seconds.",0,"Tilman Hausherr","Timur Kamalov",0,4,"10/Dec/15 15:40","27/Jul/16 19:44","14/Dec/15 19:20"
PDFBOX-3162,PDFBOX,"IllegalStateException in TTFSubsetter",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,FontBox,None,,"Hi encountered a rare exception with an empty TTF subset:
==> [1] caused by java.lang.IllegalStateException: subset is empty
1.: org.apache.fontbox.ttf.TTFSubsetter.writeToStream(TTFSubsetter.java:921)
2.: org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder.subset(TrueTypeEmbedder.java:304)
3.: org.apache.pdfbox.pdmodel.font.PDType0Font.subset(PDType0Font.java:162)
4.: org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1102)
5.: com.helger.pdflayout.PageLayoutPDF.renderTo(PageLayoutPDF.java:276)
Unfortunately I don't know yet what was causing the problem, but I will provide you with more details on Monday (if necessary).
If there is nothing to subset - I think the call should simply be ignored???
Or maybe this is a problem because of the "uni" name bug (in 2.0.0-RC2) I reopened lately?",0,"Andreas Lehmkühler","Philip Helger",0,6,"12/Dec/15 18:06","29/Nov/16 14:00","21/Apr/16 17:12"
PDFBOX-3163,PDFBOX,"PDImageXObject.createFromFile should relies on header bytes",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"PDImageXObject.createFromFile currently relies on file extension to select the correct factory.
Often, file extension is not set or not correct.
It should be better to use the first bytes.
I did something similar here if it can helps: https://github.com/sismics/docs/blob/master/docs-core/src/main/java/com/sismics/util/mime/MimeTypeUtil.java#L26",0,"Tilman Hausherr","Benjamin Gamard",0,4,"13/Dec/15 18:17","02/Apr/18 12:27","05/Jan/16 17:30"
PDFBOX-3164,PDFBOX,"XFDF annotations partially incorrectly applied to existing PDF or exceptions when parsing",Bug,CLOSED,Major,Fixed,"1.8.10, 2.0.0",2.0.0,PDModel,"annotations xfdf","windows 7, java 1.8","I am currently investigating in using PDFBox (my tests used PFDBox 2.0RC2) for a small use case „stamping“ annotations from a given XFDF format (created by Qoppa’s jPDFEditor/jPDFNotes, www.qoppa.com) into a given PDF/A-1b file.
This works with a surprisingly minimal set of Java code line  But: obviously not all XFDF elements are supported and/or there are bugs in reading XFDF up to now.
I just wanted to let you know about my experiences.
a) Drawing lines painted by a pencil (element: “<gesture>”) do not show up at all after stamping them. Why?
Sample data to test with:
<ink name="C2B070EBB736993EA25F4545350AD2C3" style="solid" width="4.0" flags="print" date="D:20151207122033+01'00'" color="#00ff00" opacity="1.0" page="0" subject="Bleistift" rect="62.4562,1378.1637,167.5599,1402.8388" title="matstoll"><inklist><gesture>68.4562,1385.1637;69.7534,1385.1637;73.6451,1385.1637;77.5368,1385.1637;82.7258,1387.7582;89.212,1389.0554;93.1037,1390.3525;96.9954,1390.3525;100.8871,1391.6498;104.7788,1392.947;111.2649,1394.2443;116.4539,1394.2443;121.6428,1395.5415;125.5345,1395.5415;130.7235,1395.5415;134.6152,1395.5415;139.8041,1395.5415;143.6958,1395.5415;148.8848,1395.5415;151.4792,1395.5415;155.3709,1396.8387;156.6682,1396.8387;157.9654,1396.8387;160.5599,1396.8387</gesture></inklist><contents>Pencil line</contents></ink>
b) Polygons (at least when created with jPDFNotes) throw an exception when reading:
Exception in thread "main" java.lang.NumberFormatException: For input string: "1318.7075;1054.6517"
at sun.misc.FloatingDecimal.readJavaFormatString(Unknown Source)
at sun.misc.FloatingDecimal.parseFloat(Unknown Source)
at java.lang.Float.parseFloat(Unknown Source)
at org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon.initVertices(FDFAnnotationPolygon.java:101)
at org.apache.pdfbox.pdmodel.fdf.FDFAnnotationPolygon.<init>(FDFAnnotationPolygon.java:78)
at org.apache.pdfbox.pdmodel.fdf.FDFDictionary.<init>(FDFDictionary.java:196)
Sample data to test with:
<polygon name="534DC02A197B56578FFA6AE5F178100F" style="solid" width="9.0" flags="print" date="D:20151207121013+01'00'" color="#0000ff" opacity="1.0" page="0" subject="Polygon" rect="857.5527,1117.7167,1063.6517,1334.1936" title="matstoll">
<vertices>866.5527,1318.7075;1054.6517,1325.1936;1032.5987,1126.7167;876.9306,1179.9034;866.5527,1318.7075;</vertices>
</polygon>
c) A cloudy polygon cannot be read either – I assume a general issue reading polygons.
Sample data to test with:
<polygon name="0276B0ECDCA680FDB0C0AE8377AE0FAA" style="cloudy" width="4.0" flags="print" date="D:20151207122247+01'00'" intensity="2" color="#ff5500" opacity="1.0" page="0" subject="Cloud/Wolke" rect="278.8037,1105.6361,563.5944,1216.9184" title="matstoll" IT="PolygonCloud"><vertices>310.0391,1147.4725;420.304,1205.8481;555.2164,1117.6361;342.4699,1117.6361;286.6888,1134.5002;310.0391,1147.4725;</vertices></polygon>
d) A freetext (“<freetext>”) element will not show up correctly:
b1) Though “width=0.0” for the box, it PDFBox will render a box around the text
b2) Though font is set to “font: Courier 12pt; color:#000000” a wrong font will be rendered
b3) The color setting will be ignored: my tests setting a color of font and border to red showed up a textbox with black border and black text.
e) A freetext element with legend options does not show up correctly:
e1) Colors are wrong/ignored
e2) Font size not correct
e3) Legend arrow not drawn
Sample data to test with:
<freetext name="95DB90502D987FDE0DD5446ED48C098A" style="solid" width="3.0" justification="left" flags="print" date="D:20151207122813+01'00'" color="#4055ff" callout="356.7395,1471.7811,479.2464,1372.3664,494.2464,1327.1395" page="0" subject="Legend textfield" fringe="137.5069,-0.0,0.0,86.9147" rect="356.7395,1269.4126,704.3984,1471.7811" head="OpenArrow" title="matstoll" IT="FreeTextCallout"><contents>This is a legend with arrow</contents><defaultstyle>font: Courier 24pt; color:#BFAAFF</defaultstyle><defaultappearance>1.0 0.7490196078431373 0.0 rg /Helv 12 Tf</defaultappearance></freetext>
There might be more of such issues – but I think this should be sufficient info for now to check how to proceed.
Adobe Acrobat renders all these test cases correctly by the way, so I assume the XFDF elements are all correct.
I can provide the sample code if needed – where shall I upload it – if needed?
As I do not find that much info about the support of XFDF in various PDF libraries – what about the official support in PDFBox? Should all of the samples work? What are the plans to do so?
Thanks a lot in advance.",0,"Tilman Hausherr","Matthias Stoll",0,4,"14/Dec/15 21:50","17/Mar/16 19:06","18/Dec/15 20:07"
PDFBOX-3165,PDFBOX,"Tab characters in PDTextField cause error when using .flatten()",Bug,CLOSED,Major,Fixed,2.0.0,"2.0.3, 3.0.0 PDFBox","AcroForm, FontBox",None,"ubuntu, java 1.7","pdf form gets filled in, then call I call .flatten(fields, true) which last I knew was undocumented, but anyway I needed the refreshAppearences for pdfViewers that don't support acroForms like pdf.js
If a tab character some how gets entered into the PDTextField it chokes. I am worried other somewhat common characters might have similar issues, but haven't experimented so far.
Using RC2 of pdfBox and fontBox. and fonts in pdfForm elements were all set to Arial.
Relavent stacktrace:
U+0009 is not available in this font's Encoding. Stacktrace follows:
java.lang.IllegalArgumentException: U+0009 is not available in this font's Encoding
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.encode(PDTrueTypeFont.java:358)
at org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:283)
at org.apache.pdfbox.pdmodel.font.PDFont.getStringWidth(PDFont.java:312)
at org.apache.pdfbox.pdmodel.interactive.form.PlainTextFormatter.format(PlainTextFormatter.java:193)
at org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.insertGeneratedAppearance(AppearanceGeneratorHelper.java:373)
at org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.setAppearanceContent(AppearanceGeneratorHelper.java:237)
at org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.setAppearanceValue(AppearanceGeneratorHelper.java:144)
at org.apache.pdfbox.pdmodel.interactive.form.PDTextField.constructAppearances(PDTextField.java:263)
at org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm.refreshAppearances(PDAcroForm.java:287)
at org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm.flatten(PDAcroForm.java:211)",0,"Maruan Sahyoun","Aaron Eischeid",0,3,"14/Dec/15 22:34","25/Mar/17 18:12","01/Sep/16 17:43"
PDFBOX-3166,PDFBOX,"Unwanted spaces before number in chinese text extraction",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,"Text extraction",test,windows,"Unwanted spaces before number in chinese date text .
such as this pdf file
http://www.cninfo.com.cn/finalpage/2015-12-12/1201830823.PDF",0,"Tilman Hausherr","Gang Luo",0,2,"16/Dec/15 08:25","23/Dec/15 14:36","23/Dec/15 14:36"
PDFBOX-3167,PDFBOX,"IllegalArgumentException: dash lengths all zero",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"PDF from PDFBOX-624
java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar PDFToImage documenta_math.pdf
Exception in thread "main" java.lang.IllegalArgumentException: dash lengths all zero
at java.awt.BasicStroke.<init>(BasicStroke.java:220)
at org.apache.pdfbox.rendering.PageDrawer.drawAnnotationLinkBorder(PageDrawer.java:929)
at org.apache.pdfbox.rendering.PageDrawer.showAnnotation(PageDrawer.java:858)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:191)
at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:208)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:139)
at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:94)
at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:236)",0,"Tilman Hausherr","simon steiner",1,3,"16/Dec/15 09:00","17/Mar/16 19:07","16/Dec/15 17:06"
PDFBOX-3169,PDFBOX,"SaveIncremental does not work without signature",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Writing,None,,"I know this feature is ongoing, but with the 2.0.0-RC builds the saveIncremental (without signature) stop working at all. A ByteArrayOutputStream is used in the COSWriter for output. This OutputStream will only be handled in the case, when we write a signature. Otherwise the whole content will be discarded.
As I wrote some time ago on the mailinglist, incremental update work in a limited way. At the moment we use it for augmenting signatures and this works with the old 1.8.x but not with trunk after the patch PDFBOX-1847 was applied.",0,"Thomas Chojecki","Thomas Chojecki",0,3,"16/Dec/15 13:39","17/Mar/16 19:07","17/Dec/15 11:37"
PDFBOX-3170,PDFBOX,"Created PDF does not open in Adobe Reader DC",Bug,CLOSED,Minor,Invalid,2.0.0,None,PDModel,None,,"When creating a PDF with a single veeeery long line, the resulting PDF cannot be opened in Adobe Reader DC.
The code is the same as in PDFBOX-3168 except that the string is 300 times the length.",0,"Andreas Lehmkühler","Philip Helger",0,3,"16/Dec/15 17:56","05/Jan/16 10:53","05/Jan/16 10:53"
PDFBOX-3172,PDFBOX,"PDPage.getContentStreams() always returns empty when content stream field is an array",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,,0,"Tilman Hausherr","Sherwood Wang",0,3,"19/Dec/15 19:01","17/Mar/16 19:07","19/Dec/15 19:12"
PDFBOX-3173,PDFBOX,"Signature dictionary is not decrypted in encrypted files",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0","Crypto, Signing",None,,"Changes in PDFBOX-2801 and PDFBOX-2469 result in the signature dictionary not being decrypted in encrypted files. Because these aren't visible signatures, this is noticed only when looking at the signature dictionary in PDFDebugger.
See also this thread in the dev mailing list:
https://mail-archives.apache.org/mod_mbox/pdfbox-dev/201512.mbox/browser
Example files:
PDFBOX-2711
045697.pdf
050289.pdf
070413.pdf
346444.pdf
I hit that problem while wondering what to do about PDFBOX-2729, and wondered why the "too good to be true" solution of Gladkovsky Gleb worked at all, because his solution did encrypt the signature parts.
I did not find anything in the "32000" spec that the signature dictionary is not to be encrypted.
From Maruan Sahyoun:
From ISO32000-2:
Encryption applies to all strings and streams in the document's PDF file, with the following exceptions:
The values for the ID entry in the trailer
Any strings in an Encrypt dictionary
Any strings that are inside streams such as content streams and compressed object streams, which themselves are encrypted
Any hexadecimal strings representing the value of the Contents key in a Signature dictionary",0,"Tilman Hausherr","Tilman Hausherr",0,5,"22/Dec/15 11:18","18/Jan/16 12:01","04/Jan/16 18:08"
PDFBOX-3174,PDFBOX,"Get errormessage "FlateFilter: stop reading corrupt stream due to a DataFormatException" by extracting text from pdf-file",Bug,CLOSED,Major,"Not A Problem",1.8.10,None,"Text extraction",None,"windows 7, java 1.7","we generate pdf-Files from xml by transformation to fo and converting it with Antennahouse to pdf. We wants to check correct hyphenation in pdf, therefore we extract the text from the pdf. Sometimes we get errormessage "FlateFilter: stop reading corrupt stream due to a DataFormatException" by extracting the text.",0,"Tilman Hausherr","Josef Sigritz",0,2,"29/Dec/15 17:13","29/Dec/15 17:28","29/Dec/15 17:28"
PDFBOX-3175,PDFBOX,"PDFTextStreamEngine probably miscalculates text height",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",None,,"When parsing a PDF document, TextPosition is created with constant text height, about 2 time smaller than character width, regardless of font size.
The following workaround to calculate dyDisplay fixes the issue:
float verticalScaling = 1/1000f;
if (font instanceof PDType3Font)
{ Matrix fontMatrix = font.getFontMatrix(); verticalScaling = fontMatrix.getValue(1, 1); }
float dyDisplay = bbox.getHeight() * fontSize * verticalScaling;",0,"Tilman Hausherr",Leo,0,3,"30/Dec/15 01:40","17/Mar/16 19:07","06/Jan/16 20:57"
PDFBOX-3176,PDFBOX,"Add a removeRegion method in PDFTextSTripperByArea class",Improvement,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0","Text extraction",None,,"Hi,
I am parsing a very complicated PDF, for which I had to enable (setSortByPosition as true), otherwise the Parser is not able to do sequential text extraction.
So I decided to use PDFTextStripperByArea class, and then make rectangles to extract text. But problem here is that If I make many rectangles in a single page, again there is no logical sequence of text extracted, So to get around this it will be awesome to have a method to remove regions, then we can add a region extract text, remove that region , then again add new region and so on....
I have already done a POC in my local computer and it works fine. added this method and tested.
public void removeRegion(String regionName) {
this.regions.remove(regionName);
this.regionArea.remove(regionName);
}
I can contribute this code myself, if you suggest, let me know, thanks and regards
Praveer",0,"Tilman Hausherr",Praveer,0,3,"30/Dec/15 13:01","18/Jan/16 12:01","01/Jan/16 10:57"
PDFBOX-3177,PDFBOX,"Change some modifiers from private to protected in PDFTextStripper Class",Improvement,CLOSED,Major,"Not A Problem",1.8.10,None,"Text extraction",None,,"Hi,
I am parsing a very complicated PDF for which text extraction is not in proper sequence, so I had to enable setSortByPosition = True.
Now I want to access each TextPosition element and do some processing with them, normally i would override processTextPosition method and do my stuff there, But since I have enabled setSortByPosition, the code that sorts before extracting text is invoked after processTextPosition, so I can not override processTextPosition to get text according to their position.
I did some research and found that overriding writeLine method of PDFTextStripper can be useful for me
because it processes each TextPosition after they are sorted according to their position.
So I have done a POC in my personal computer by doing following changes in PDFTextStripper class
1 - 'private' void writeLine() changed to 'protected'
2 - 'private' static final class WordWithTextPositions changed to 'protected'
After this everything works as per my expectation, I think these changes are also going to help other people who use this library.
I can contribute this code myself, if you suggest, let me know, thanks and regards
Praveer",0,"Tilman Hausherr",Praveer,0,2,"30/Dec/15 13:24","03/Jan/16 23:41","03/Jan/16 23:41"
PDFBOX-3179,PDFBOX,"PDDocument.load() Error: Expected a long type at offset 2, instead got 'DF-1.4'",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,"mac os x","Simple PDDocument.load failed to heal attached PDF (pdfbox 2.0.0 RC2):
Exception in thread "main" java.io.IOException: Error: Expected a long type at offset 2, instead got 'DF-1.4'
at org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1340)
at org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber(BaseParser.java:1268)
at org.apache.pdfbox.pdfparser.COSParser.parseXrefObjStream(COSParser.java:321)
at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:287)
at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:189)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:246)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:855)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:811)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:765)
Reproduced using 2.0.0 RC2 from maven and with code from trunk svn.
File in question:
http://coobers.com/bucket/ikona_free.pdf",0,"Andreas Lehmkühler","Jedrzej Majko",0,4,"02/Jan/16 14:26","17/Mar/16 19:08","03/Jan/16 17:15"
PDFBOX-3181,PDFBOX,"java.lang.ArrayIndexOutOfBoundsException: Coordinate out of bounds! in org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,"java 1.6, java 1.7","method org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage
raise an exception on
int[] pixels = alphaRaster.getPixels(0, 0,
                alphaRaster.getSampleModel().getWidth(),
                alphaRaster.getSampleModel().getHeight(),
                (int\[]) null);
when alphaRaster.getSampleModel().getWidth() or alphaRaster.getSampleModel().getHeight() is greater than image.getWidth() or image.getHeight() (e.g. when BufferedImage created by java.awt.image.BufferedImage.getSubimage)",0,"Tilman Hausherr","Paolo Clerici",0,3,"04/Jan/16 11:04","17/Mar/16 19:08","04/Jan/16 17:38"
PDFBOX-3184,PDFBOX,"Throwing in PDType1Font.encode for chars above 255 is wrong.",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Chars like `'\u2019'` can be handled by the code following the test, so throwing in `PDType1Font.encode` whenever `unicode > 0xff` is wrong. See
http://stackoverflow.com/a/34598915/581205",0,"Andreas Lehmkühler",Maaartinus,1,5,"06/Jan/16 15:30","21/Dec/18 10:59","09/Jan/16 15:36"
PDFBOX-3186,PDFBOX,"Parsing fails when XRef stream object is 1 byte later",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"The attached files don't parse properly - their only problem is that the XRef object starts 1 byte after the offset mentioned at the end of the file.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"08/Jan/16 21:41","17/Mar/16 19:07","09/Jan/16 18:51"
PDFBOX-3187,PDFBOX,"NullPointerException CFFParser",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,FontBox,None,,"Exception in thread "main" java.lang.NullPointerException
at org.apache.fontbox.cff.CFFParser$Format1Charset.getCIDForGID(CFFParser.java:1326)
when isCIDFont is false
byte[] data = IOUtils.toByteArray(new FileInputStream("Broadsheet LDO.otf"));
CFFParser p = new CFFParser();
CFFFont ff = p.parse(data).get(0);
ff.getCharset().getCIDForGID(0);",0,"Andreas Lehmkühler","simon steiner",0,4,"11/Jan/16 10:59","17/Mar/16 19:08","11/Jan/16 18:16"
PDFBOX-3188,PDFBOX,"java.io.IOException: Error: source PDF is encrypted, can't append encrypted PDF documents",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,merge,"windows 8, java 1.7, netbeans","In the release notes of PDFBox 2.0.0 RC2 we can read that (PDFBOX-1656) PDFMergerUtility is able to merge encrypted files. I have some files protected against modification with a password (users are allowed to open and print the file but its content is locked). I'm trying to merge those files into a single one but without success.
1. Adding source files.
2. Setting the destination filename.
3. Calling mergeDocuments().
Result is : Exception in thread "main" java.io.IOException: Error: source PDF is encrypted, can't append encrypted PDF documents.
at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:255)
at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:201)
Note : PDDocument.load() works if I need to print the files.
(Bonus Question : How could I decrypt a document before appending it to a new one (decrypt and openProtection are not used anymore))",0,"Tilman Hausherr",Vincent,0,3,"11/Jan/16 12:14","17/Mar/16 19:08","12/Jan/16 19:33"
PDFBOX-3189,PDFBOX,"java.io.IOException is thrown from both NonSequentialPDFParser and PDFParser",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0",2.0.0,"Text extraction",None,,"On parsing of complex PDF document both NonSequentialPDFParser and PDFParser throw java.io.IOException (different causes).
NonSequentialPDFParser:
Caused by: java.io.IOException
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:109)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:379)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:291)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:225)
at org.apache.pdfbox.pdfparser.PDFObjectStreamParser.<init>(PDFObjectStreamParser.java:64)
at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1493)
PDFParser:
Caused by: java.io.IOException: Error: Expected a long type at offset 465, instead got '163111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
at org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1695)
at org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber(BaseParser.java:1623)
at org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse(PDFObjectStreamParser.java:99)
at org.apache.pdfbox.cos.COSDocument.dereferenceObjectStreams(COSDocument.java:683)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:255)
Please, see in attachments full StackTrace for both cases and failing document for reference.",0,"Andreas Lehmkühler","Yauheni Salopiy",0,4,"11/Jan/16 15:27","17/Mar/16 19:06","31/Jan/16 15:58"
PDFBOX-3190,PDFBOX,"Links don't work in firefox",Bug,CLOSED,Minor,Fixed,"1.8.10, 1.8.11, 2.0.0","1.8.11, 2.0.0",PDModel,None,"windows, firefox","I added links to the PDF I attached using the following code:
PDPageXYZDestination destination = new PDPageXYZDestination();
        destination.setPage((PDPage) doc.getDocumentCatalog().getAllPages().get(0));
        //destination.setPageNumber(0); //TODO Set actual page number
        destination.setLeft(0);
        destination.setTop((int) PAGE_HEIGHT);

        PDAnnotationLink link = new PDAnnotationLink();
        link.setAction(new PDActionGoTo());
        link.setDestination(destination);
        link.setInvisible(false);
        PDBorderStyleDictionary borderThick = new PDBorderStyleDictionary();
        borderThick.setWidth(0f);
        link.setBorderStyle(borderThick);
        page.getAnnotations().add(link);

        PDRectangle rect = new PDRectangle();
        rect.setLowerLeftX(MARGIN_LEFT);
        rect.setLowerLeftY(textLowerLeftY);
        rect.setUpperRightX(PAGE_WIDTH - MARGIN_RIGHT);
        rect.setUpperRightY(textLowerLeftY + TEXT_HEIGHT);
        link.setRectangle(rect);
See the attached file.
The links work fine in Sumatra PDF, Adobe Reader DC 2015 and in Chrome. But in Firefox they don't work.
Is this due to an error in my code, in Firefox or in PDFBox?",0,"Tilman Hausherr","Simon Stratmann",0,3,"11/Jan/16 17:23","18/Jan/16 12:01","13/Jan/16 18:01"
PDFBOX-3191,PDFBOX,"PDFDebugger does not handle cancelling of "Open URL" dialog",Bug,CLOSED,Trivial,Fixed,2.0.0,2.0.0,Utilities,None,,"In PDFDebugger, click the menu item "Open URL..." and then cancel the dialog. A MalformedURLException caused by a NPE is thrown. After that, it is not possible to open any other file nor to close the application, since both throws a NPE in the code updating the list of last recently used files.",0,"Tilman Hausherr","Petr Slaby",0,3,"12/Jan/16 10:10","17/Mar/16 19:07","12/Jan/16 16:56"
PDFBOX-3193,PDFBOX,"New NPE in PDFBox 1.8.11-rc1 in Acroform PDCheckbox's isChecked()",Bug,CLOSED,Major,Fixed,1.8.11,1.8.11,AcroForm,None,,"I ran the comparison code for 1.8.11-rc1 against 1.8.10 and found a new NPE in ~600 files out of ~350k.
java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.interactive.form.PDCheckbox.isChecked(PDCheckbox.java:57)
 at org.apache.pdfbox.pdmodel.interactive.form.PDRadioCollection.getValue(PDRadioCollection.java:128)
 at org.apache.tika.parser.pdf.PDF2XHTML.addFieldString(PDF2XHTML.java:657)
 at org.apache.tika.parser.pdf.PDF2XHTML.processAcroField(PDF2XHTML.java:616)
 at org.apache.tika.parser.pdf.PDF2XHTML.extractAcroForm(PDF2XHTML.java:602)
 at org.apache.tika.parser.pdf.PDF2XHTML.endDocument(PDF2XHTML.java:212)
To replicate the problem in PrintFields:
            outputString.append(" = " + fieldValue);
            outputString.append(",  type=" + field.getClass().getName());

+            if (field instanceof PDCheckbox)
+            {
+              outputString.append(" : "+((PDCheckbox)field).isChecked());
+            }",0,"Tilman Hausherr","Tim Allison",0,3,"13/Jan/16 14:02","18/Jan/16 12:01","13/Jan/16 16:58"
PDFBOX-3195,PDFBOX,"ExtractText add space at start of text",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Text extraction",None,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar ExtractText Insurance_Form.pdf
Output has extra space " Section 1 – Owner Details:"",0,"Andreas Lehmkühler","simon steiner",0,4,"15/Jan/16 15:17","17/Mar/16 19:06","16/Jan/16 16:56"
PDFBOX-3196,PDFBOX,"Update maven plugins and apache parent pom",Improvement,CLOSED,Major,Fixed,1.8.11,1.8.12,None,None,,"Some of the used maven plugins are outdated as well as the referenced apache parent pom",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"17/Jan/16 12:36","25/Apr/16 17:24","17/Jan/16 14:44"
PDFBOX-3198,PDFBOX,"Visible Signature N2 layer / Support signature with text","New Feature",CLOSED,Minor,Fixed,1.8.11,"2.0.9, 3.0.0 PDFBox",Signing,None,,"The patch adds N2 layer support to visible signatures.",0,"Tilman Hausherr","Frank Cornelis",3,10,"18/Jan/16 19:52","26/Feb/19 15:30","12/Jan/18 19:15"
PDFBOX-3199,PDFBOX,"JPEG input file not closed when creating PDImageXObject",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"In PDImageXObject, this code
return JPEGFactory.createFromStream(doc, new FileInputStream(file));
results in an unclosed file.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Jan/16 11:52","17/Mar/16 19:07","19/Jan/16 11:56"
PDFBOX-3200,PDFBOX,"Performance improvement in PDPageContentStream.setFont",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,PDModel,Optimization,,"Small performance improvement. Instead of
        if (font.willBeSubset() && !document.getFontsToSubset().contains(font))
        {
            document.getFontsToSubset().add(font);
        }
I suggest to replace it with
        if (font.willBeSubset())
        {
            document.getFontsToSubset().add(font);
        }
since the effort for "Set.add" and "Set.contains" are very similar",0,"Tilman Hausherr","Philip Helger",0,3,"19/Jan/16 17:13","17/Mar/16 19:06","20/Jan/16 14:55"
PDFBOX-3201,PDFBOX,"Skip zlib-header and checksum to avoid DataFormatException",Bug,CLOSED,Major,Fixed,"1.8.11, 2.0.0","1.8.12, 2.0.0",Parsing,None,,"This is a follow up to PDFBOX-2976",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"20/Jan/16 17:25","17/Mar/16 19:07","21/Jan/16 10:41"
PDFBOX-3202,PDFBOX,"Rename structure element setter of PDOutlineItem",Improvement,CLOSED,Trivial,Fixed,2.0.0,2.0.0,PDModel,None,,"While playing around with the library I stumbled over a naming inconsistency between the getter and setter of a PDOutlineItem structure element.
The getter is named getStructureElement whereas the setter is named setStructuredElement which is a bit confusing.",0,"Tilman Hausherr","Frank Becker",0,3,"20/Jan/16 21:58","17/Mar/16 19:07","20/Jan/16 22:07"
PDFBOX-3203,PDFBOX,"Fractional font sizes are reported scaled",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,regression,"mac os x","Non-integer font sizes are apparently reported by PDFBox scaled by a factor of 10. For example, a font size of "32.1" comes out as 321.",0,"Tilman Hausherr","Dirk Groeneveld",0,3,"21/Jan/16 20:06","17/Mar/16 19:07","22/Jan/16 11:11"
PDFBOX-3206,PDFBOX,"Cannot change converted image's DPI",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,"Documentation, Rendering",newbie,"windows 10, java 1.7","When i convert pdf to jpg, i use "renderImageWithDPI" and "JPEGFactory.createFromImage".
but DPI doesn't change.
So, How can i change image's DPI in pdfbox 2.0.0
please let me know that.
This is my source.
1. using renderImageWithDPI
PDDocument document = PDDocument.load(sourceFile);
PDFRenderer pdfRenderer = new PDFRenderer(document);
int pageCounter = 0;

for (PDPage page : document.getPages()){ 

     RenderedImage im = pdfRenderer.renderImageWithDPI(pageCounter, Integer.parseInt(convertDPI), ImageType.RGB);

     File f = new File(destinationDir +"/"+saveName+"_"+ String.format("%03d", pageCounter)+"."+convertFormat);

     ImageIO.write(im, convertFormat,f);

     pageCounter++;

}
document.close();
2. using "JPEGFactory.createFormImage"
PDDocument document = PDDocument.load(sourceFile);
PDFRenderer pdfRenderer = new PDFRenderer(document);
int pageCounter = 0;

for (PDPage page : document.getPages()){ 

    BufferedImage image = pdfRenderer.renderImage(pageCounter, 1);
    PDImageXObject pdImage = JPEGFactory.createFromImage(document, image, Float.parseFloat(convertQuality), Integer.parseInt(convertDPI));

    File f = new File(destinationDir +"/"+saveName+"_"+ String.format("%03d", pageCounter)+"."+convertFormat);
    ImageIO.write(pdImage.getImage(), convertFormat,f);
}
document.close();",0,"Tilman Hausherr","Jae Soon Kim",0,2,"22/Jan/16 10:10","22/Jan/16 15:44","22/Jan/16 15:44"
PDFBOX-3208,PDFBOX,"The trailer rebuild mechnism doesn't work",Sub-task,CLOSED,Major,Fixed,2.0.0,2.0.0,Parsing,None,,"The pdf L33MUTT2SVCWGCS6UIYL5TH3PNPXHIS6 mentioned in PDFBOX-3058 is broken (premature end of file) and the rebuild mechanism for the trailer doesn't work well (the info dictionary is mixed up with some of the outline dictionaries).",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"23/Jan/16 17:28","26/Sep/17 15:38","23/Jan/16 17:56"
PDFBOX-3209,PDFBOX,"Overlay class does not work with in-memory PDFs",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Utilities,None,,"The class org.apache.pdfbox.multipdf.Overlay has no possibility to perform the overlay only in memory (using a custom OutputStream). It is currently fixed to work with files only.
A suggestion would be to add an overload public void overlay(Map<Integer, String> specificPageOverlayFile, OutputStream outStream) throws IOException which uses the outStream if supplied and falls back to outputFilename if null is passed (would be an easy solution)",0,"Andreas Lehmkühler","Philip Helger",0,4,"23/Jan/16 23:48","17/Mar/16 19:07","25/Jan/16 18:26"
PDFBOX-3217,PDFBOX,PdfaExtensionHelper.populatePDFAPropertyType,Bug,CLOSED,Major,Fixed,"1.8.11, 2.0.0","1.8.12, 2.0.0",Preflight,None,,"Exception in thread "main" java.lang.NullPointerException
    at org.apache.xmpbox.xml.PdfaExtensionHelper.populatePDFAPropertyType(PdfaExtensionHelper.java:180)
    at org.apache.xmpbox.xml.PdfaExtensionHelper.populatePDFASchemaType(PdfaExtensionHelper.java:159)
    at org.apache.xmpbox.xml.PdfaExtensionHelper.populateSchemaMapping(PdfaExtensionHelper.java:116)
    at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:194)
    at org.apache.pdfbox.preflight.process.MetadataValidationProcess.validate(MetadataValidationProcess.java:69)
    at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
    at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:122)
    at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:163)
    at org.apache.pdfbox.preflight.Validator_A1b.runSimple(Validator_A1b.java:174)
    at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:135) ",0,"Tilman Hausherr","Tilman Hausherr",0,3,"27/Jan/16 22:33","17/Mar/16 19:07","27/Jan/16 22:48"
PDFBOX-3219,PDFBOX,"Suggestion for log4j.xml example inside preflight source",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,"Documentation, Preflight",log4j,,"As posted by Roberto Nibali to the mailing list:
I recently ran some tests using the preflight core, and wondered about the
following message:
java -jar preflight-app/target/preflight-app-2.0.0-SNAPSHOT.jar xml batch
./OpenSource/pdftests/
log4j:WARN No appenders could be found for logger
(org.apache.pdfbox.pdfparser.COSParser).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for
more info.
The online PDFBox FAQ (kind of) told me how to solve this. However, using
the example log4j.xml from PDFBox yields the following:
java -Dlog4j.configuration=file:./preflight/src/test/resources/log4j.xml
-jar preflight-app/target/preflight-app-2.0.0-SNAPSHOT.jar xml batch
./OpenSource/pdftests/
log4j:ERROR No appender named [console] could be found.
log4j:ERROR No appender named [rolling-file] could be found.
My suggestion is to replace it with this for starters:
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration debug="true" xmlns:log4j='http://jakarta.apache.org/log4j/'>
        <appender name="console" class="org.apache.log4j.ConsoleAppender">
            <layout class="org.apache.log4j.PatternLayout">
                <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n" />
            </layout>
        </appender>
        <root>
                <level value="DEBUG" />
                <appender-ref ref="console" />
        </root>
</log4j:configuration>
Additionally, the FAQ entries should be updated with a correct example
regarding the 'java -jar ..." case.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"30/Jan/16 12:55","17/Mar/16 19:06","13/Feb/16 11:06"
PDFBOX-3221,PDFBOX,"/TR /TR2 Transfer function not implemented",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,,"The attached file is not displayed correctly because we don't have implemented the transfer functions that can be defined in /TR or /TR2.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"01/Feb/16 22:30","17/Mar/16 19:07","03/Feb/16 17:46"
PDFBOX-3223,PDFBOX,"Glyphs garbled when rendering",Bug,CLOSED,Major,Duplicate,2.0.0,None,FontBox,None,,"Glyphs garbled when rendering attached file.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"02/Feb/16 17:43","07/Feb/16 16:40","07/Feb/16 16:40"
PDFBOX-3224,PDFBOX,"Cache Font Bounding Boxes for Performance in Text Extraction",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,optimization,,"Hi,
I have been using pdfbox by way of Tika for a while for text extraction from PDFs. I had a chance to fire up a profiler recently and found that getBoundingBox() in the PDXXFont.java classes are called fairly frequently – in particular from PDFTextStreamEngine.showGlyph(). I've attached a patch that caches the BoundingBox object alongside the PDFont object inside of PDTextState. There are a variety of other ways to accomplish the same thing – caching inside of the various font objects themselves, etc.
I wrote a little test program to measure the speed difference against a few randomly selected files. The program just uses PDFTextStripper to retrieve raw text from a PDF.
Here's what I found:
====plain====
File: BambooCheatSheet.pdf Duration: 60037555619 rate: 81.6 files/sec
File: flu.pdf Duration: 60019978409 rate: 34.46666666666667 files/sec
File: megacli_user_guide.pdf Duration: 60641314800 rate: 1.1833333333333333 files/sec
File: odbc-perl.pdf Duration: 60008216404 rate: 19.466666666666665 files/sec
File: VerticaArchitectureWhitePaper.pdf Duration: 60084726865 rate: 7.433333333333334 files/sec
File: WritingaResume.pdf Duration: 60015267784 rate: 59.4 files/sec
===boundingbox caching===
File: BambooCheatSheet.pdf Duration: 60005724588 rate: 106.1 files/sec
File: flu.pdf Duration: 60021410660 rate: 41.916666666666664 files/sec
File: megacli_user_guide.pdf Duration: 60107488363 rate: 1.7833333333333334 files/sec
File: odbc-perl.pdf Duration: 60017784515 rate: 29.9 files/sec
File: VerticaArchitectureWhitePaper.pdf Duration: 60012261509 rate: 9.05 files/sec
File: WritingaResume.pdf Duration: 60007995996 rate: 76.5 files/sec
Cheers",0,"Tilman Hausherr","Tom Callahan",0,4,"02/Feb/16 21:25","17/Mar/16 19:08","03/Feb/16 17:06"
PDFBOX-3225,PDFBOX,"Please delete old releases from mirroring system",Bug,CLOSED,Major,Fixed,"1.8.7, 1.8.8, 1.8.9, 1.8.10",None,None,None,,"To reduce the load on the ASF mirrors, projects are required to delete old releases [1]
Please can you remove all non-current releases?
i.e. the ones listed as affected, plus 2.0.0-RC1 & RC2
Thanks!
Also, if you have a release guide, perhaps you could add a cleanup stage to it?
[1] http://www.apache.org/dev/release.html#when-to-archive",0,"Andreas Lehmkühler",Sebb,0,1,"02/Feb/16 22:48","03/Feb/16 18:39","03/Feb/16 10:53"
PDFBOX-3226,PDFBOX,"No such Element Exception processing File",Bug,CLOSED,Major,Fixed,"1.8.11, 2.0.0","1.8.12, 2.0.0",FontBox,font,,"java.util.NoSuchElementException
at java.util.HashMap$HashIterator.nextNode(HashMap.java:1431)
at java.util.HashMap$KeyIterator.next(HashMap.java:1453)
at java.util.Collections.max(Collections.java:669)
at org.apache.fontbox.ttf.CmapSubtable.processSubtype6(CmapSubtable.java:354)
at org.apache.fontbox.ttf.CmapSubtable.initSubtable(CmapSubtable.java:98)
at org.apache.fontbox.ttf.CmapTable.read(CmapTable.java:84)
at org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:377)
at org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:174)
at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:150)
at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:106)
at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:110)
at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:69)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont(PDFontFactory.java:125)
at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:128)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:123)
at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:187)
at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:208)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:139)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:55)",0,"Andreas Lehmkühler","Stefan Schmaltz",0,4,"04/Feb/16 11:08","17/Mar/16 19:07","04/Feb/16 16:53"
PDFBOX-3229,PDFBOX,"Decryption fails when Metadata not encrypted but EncryptMetadata is true/default.",Bug,CLOSED,Minor,Fixed,"1.8.6, 1.8.9, 1.8.11","1.8.12, 2.0.0",PDModel,None,,"Parsing with either the top-down or bottom-up parser fails for encrypted document whose Metadata is not encrypted but whose EncryptMetadata flag is true or missing (defaults to true). The document should set EncryptMetadata false, but, unfortunately, does not.",0,"Tilman Hausherr","Pat Hickey",0,3,"10/Feb/16 22:14","17/Mar/16 19:07","11/Feb/16 16:53"
PDFBOX-3231,PDFBOX,"Update PDPropBuildDataDict",Improvement,CLOSED,Major,Fixed,"1.8.11, 2.0.0","1.8.12, 2.0.0",PDModel,None,,"Current implementation of PDPropBuildDataDict does not support /REx (application implementation version) entry.
The /OS entry also does not conform to the latest PDF Signature Build Dictionary Specification from Adobe, which specifies /OS entry value type as array. PDF Signature Build Dictionary Specification v1.4, that is referenced from ISO 32000-1, also specifies this entry as array. The example provided in Specifications indicate /OS entry type as array of name objects.",0,"Tilman Hausherr",Petras,0,3,"15/Feb/16 09:12","17/Mar/16 19:08","15/Feb/16 17:26"
PDFBOX-3233,PDFBOX,"Create default resources with cache",Wish,CLOSED,Minor,Fixed,2.0.0,2.0.0,AcroForm,newbie,,"NOTE: actual version is 2.0.0-RC3
In PDAcroForm#getDefaultResources existing resources are created like this:
        COSDictionary dr = (COSDictionary) dictionary.getDictionaryObject(COSName.DR);
        if (dr != null)
        {
            retval = new PDResources(dr);
        }
PDResources supports resource cache but default resources is always created without one.",0,"Tilman Hausherr","Isto Nikula",0,3,"16/Feb/16 06:40","17/Mar/16 19:06","20/Feb/16 12:41"
PDFBOX-3234,PDFBOX,"Rename check box field type to match PDF 2.0 specification",Improvement,CLOSED,Minor,Fixed,2.0.0,2.0.0,AcroForm,None,,"The PDF 2.0 specification has a field types now splitter in individual words such as check box, radio button and push-button. We match that using camel case for the various field objects for all fields but the check box which is named PDCheckbox. That should be renamed to PDCheckBox.",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"16/Feb/16 14:56","17/Mar/16 19:06","29/Feb/16 16:57"
PDFBOX-3235,PDFBOX,"ColorSpace validation fails for inlined image",Bug,CLOSED,Major,Fixed,1.8.11,1.8.12,Preflight,None,,"Validation fails for inlined image if content stream for inline image specifies color space using abbreviated name (ex. /CMYK instead of /DeviceCMYK):
BI
/CS/CMYK
/W 34
/H 36
/BPC 8
/F/Fl
/DP<</Predictor 15
/Columns 34
/Colors 4>>
ID x£ĒŚ...
EI
In this case Preflight validation fails with this message:
2.3.2 : Unexpected key in Graphic object definition, The ColorSpace is unknown
PDF Reference v1.4 Chapter 4.8.6 table 4.40 indicates the abbreviations for the names of color spaces, which could be used to represent color spaces for inlined images instead of using the full names. There abbreviation CMYK matches full name DeviceCMYK.
The culprit is that ContentStreamEngine looks for the corresponding ColorSpaces enum constant by matching its name to the specified color space name in content stream (i.e. using Enum.valueOf()). While ColorSpaces enum class has constants for abbreviated names, they are stored in local variable label and do not correspond to the enum constant name.",0,"Tilman Hausherr",Petras,0,3,"17/Feb/16 11:09","25/Apr/16 17:24","18/Feb/16 20:19"
PDFBOX-3237,PDFBOX,"ASCII85Filter does not use or recognize the correct end-of-data terminator",Bug,CLOSED,Major,Fixed,"1.8.11, 1.8.12, 2.0.0","1.8.12, 2.0.0","Parsing, Writing",None,,"The ASCII85Filter and underlying stream implementations use a single tilde (~) as the terminator. The specified Adobe ASCII85 terminator sequence for both PDF and PostScript is ~>.",0,"Tilman Hausherr","Jeff Skaistis",0,3,"17/Feb/16 19:14","17/Mar/16 19:06","18/Feb/16 18:50"
PDFBOX-3240,PDFBOX,"Missing Type for standard type 1 fonts",Bug,CLOSED,Trivial,Fixed,2.0.0,2.0.0,PDModel,None,,"The org.apache.pdfbox.pdmodel.font.PDFont(String baseFont) constructor, used to create standard type 1 fonts, doesn't set the required Type item to the dictionary. According to table 111 it's required so I guess it should set it.",0,"Andreas Lehmkühler","Andrea Vacondio",0,4,"19/Feb/16 11:06","17/Mar/16 19:07","19/Feb/16 16:20"
PDFBOX-3241,PDFBOX,"return original PDF Header",Wish,CLOSED,Major,Fixed,1.8.11,1.8.12,Parsing,None,,"Wish by Petras presented in the mailing list
Yes, I know, that the version in catalog shall be used to determine version
and therefore the version COSDocument#getVersion() method result is expected
to reflect that. But I ask the header string. And it's result differs from
the actual header string in the file after PDFParser finishes its job.
Please, bear also in mind that Extensions Dictionary (see ISO 32000-1
chapter 7.12) validation should consider the values both in document catalog
and header:
"The value of BaseVersion, when treated as a version number, shall be less
than or equal to the PDF version, both in the document header (see 7.5.2,
"File Header") and the catalog Version key value, if present."
As it says "both", that means BaseVersion may not exceed the value neither
in header nor in catalog, therefore we need to validate that.
my answer:
How about something like this:
private String originalHeaderString = null;

public void setOriginalHeaderString(String header)
    {
        if (originalHeaderString != null)
              throw bad state exception blah blah
        originalHeaderString = header;
    }

public String getOriginalHeaderString()
{
    return originalHeaderString ;
}
The setter should be called only once by parseHeader().
This was accepted, so I'll implement it (for 1.8 only)",0,"Tilman Hausherr","Tilman Hausherr",0,3,"19/Feb/16 20:15","25/Apr/16 17:24","23/Feb/16 18:27"
PDFBOX-3242,PDFBOX,"Problem displaying document created by PDFBox 2.0RC3 in Acrobat Reader",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Writing,None,,"As reported by John Liston in the user mailing list:
A document generated using PDFBox 2.0.0-RC3 cannot be read fully by the latest version of Adobe Acrobat Reader, which says "An error exists on this page. Acrobat may not display the page correctly. Please contact the person who created the PDF document to correct the problem." The identical document created using PDFBox 1.8.11 reads in Acrobat Reader just fine. After using Acrobat Pro to increase the width of the bounding box around the first page text "Can this amount change after closing?", the rest of the text on the page showed up. The same problem showed up with other text on the following pages. Both documents read and display properly using PDFBox PDFDebugger.
Files from 1.8 and 2.0RC3 are attached. Analysis showed one bug that has already been fixed (PDFBOX-3240). The other bug is that everywhere where there's an "n n n sc" command,
/DeviceRGB cs 
is missing before except the first time it is used. Inserting it makes it work again. PDF-Tools also complains about an incorrect number of operators if the colorspace isn't set.
In 1.8 different operators are used (rg instead of sc).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"20/Feb/16 20:35","17/Mar/16 19:07","21/Feb/16 09:43"
PDFBOX-3245,PDFBOX,"Add fill and stroke operators",Improvement,CLOSED,Major,Fixed,2.0.0,2.0.0,Writing,None,,"Add fill and stroke operators to PDPageContentStream",0,"Tilman Hausherr","Tilman Hausherr",0,2,"22/Feb/16 17:54","17/Mar/16 19:07","22/Feb/16 17:56"
PDFBOX-3249,PDFBOX,"PDAnnotationMarkup.getInReplyTo throws exception when no element",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"From David L. from the user the mailing list:
I'm trying to read annotations from PDFs and am having trouble matching up
replies with the annotations they're in reply to.
PDPage.getAnnotations() returns a list of PDAnnotation. When I have
a PDAnnotationMarkup, I try to call getInReplyTo to get the previous
annotation in the thread. But I have two problems:
1) getInReplyTo() crashes if the annotation isn't a reply. It'd be nice if
it just returned null. I can work around this by getting the COSDictionary
and checking for an IRT entry first.
(... other problem already solved...)
it is an IOException, this isn't as bad as a nullpointerexception. But it is kindof weird indeed, usually we just return null when something doesn't exist.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"25/Feb/16 17:57","17/Mar/16 19:08","25/Feb/16 18:09"
PDFBOX-3250,PDFBOX,"Possible errors in TrueType table 'name' parsing.",Bug,CLOSED,Minor,Fixed,2.0.0,2.0.0,FontBox,None,,"Accidentally noticed a possible bug in parsing name records:
1) Class NamingTable.java, line 165:
for (int i = 4; i <= 0; i--)
this loop is never entered, thus, Unicode strings are not considered.
2) Class NamingTable.java, line 106:
String string = data.readString(nr.getStringLength(), charset);
for platform == 0 (Unicode), strings are read in ISO-8859-1 charset, but most likely it should be UTF16 charset.
This may affect values of the FontFamily and FontSubFamily fields.",0,"Andreas Lehmkühler","Vladimir Dubrov",0,3,"25/Feb/16 18:55","17/Mar/16 19:07","26/Feb/16 18:34"
PDFBOX-3251,PDFBOX,"Improve parsing and validation of ColorSpace for inline image",Improvement,CLOSED,Major,Fixed,1.8.11,1.8.12,"PDModel, Preflight",None,,"This ticket is a follow-up of PDFBOX-3235.
Currently neither Preflight, nor PDModel checks the following restrictions of ColorSpace for inline image (as defined in PDF Reference 1.4 and ISO 32000):
if Indexed color space specified, its color table must be specified by a byte string;
abbreviations used for the names of color spaces are valid only in inline images.
PDModel and Preflight should check and validate that color table of Indexed table is string and support the abbreviated names of color space only within the content stream of inline image.",0,"Tilman Hausherr",Petras,0,3,"26/Feb/16 09:17","25/Apr/16 17:24","28/Feb/16 10:00"
PDFBOX-3252,PDFBOX,"java.lang.ExceptionInInitializerError in PDFBox",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,None,None,"windows 7","The code below only works in the first time when .pdfbox.cache file does not exist. After the file is created the error below happens. If I delete the .pdfbox.cache file it start working again. So there is an issue with this file probably
import java.io.IOException;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

public class TestPDF {

    private void createPDF() throws IOException {

        // Create a document and add a page to it
        PDDocument document = new PDDocument();
        PDPage page = new PDPage();
        document.addPage(page);

        // Create a new font object selecting one of the PDF base fonts
        PDFont font = PDType1Font.HELVETICA_BOLD;

        // Start a new content stream which will "hold" the to be created content
        PDPageContentStream contentStream = new PDPageContentStream(document, page);

        // Define a text content stream using the selected font, moving the cursor and drawing the text "Hello World"
        contentStream.beginText();
        contentStream.setFont(font, 12);
        contentStream.moveTextPositionByAmount(100, 700);
        contentStream.drawString("Hello World");
        contentStream.endText();

        // Make sure that the content stream is closed:
        contentStream.close();

        // Save the results and ensure that the document is properly closed:
        document.save("Hello World.pdf");
        document.close();

    }

    public static void main(String[] args) throws Exception {

        TestPDF t = new TestPDF();
        t.createPDF();
    }

}
And I don't know I'm getting:
Exception in thread "main" java.lang.ExceptionInInitializerError
    at org.apache.pdfbox.pdmodel.font.FontMapperImpl.getProvider(FontMapperImpl.java:151)
    at org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFont(FontMapperImpl.java:415)
    at org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFontBoxFont(FontMapperImpl.java:378)
    at org.apache.pdfbox.pdmodel.font.FontMapperImpl.getFontBoxFont(FontMapperImpl.java:352)
    at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:114)
    at org.apache.pdfbox.pdmodel.font.PDType1Font.<clinit>(PDType1Font.java:76)
    at br.jus.trt4.TestPDF.createPDF(TestPDF.java:21)
    at br.jus.trt4.TestPDF.main(TestPDF.java:45)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 1
    at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.loadDiskCache(FileSystemFontProvider.java:387)
    at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.<init>(FileSystemFontProvider.java:218)
    at org.apache.pdfbox.pdmodel.font.FontMapperImpl$DefaultFontProvider.<clinit>(FontMapperImpl.java:132)
    ... 8 more",0,"Tilman Hausherr","Luiz F Estivalet",0,3,"26/Feb/16 15:32","17/Mar/16 19:06","29/Feb/16 19:21"
PDFBOX-3253,PDFBOX,"Close all COSStreams when creating a new pdf",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"Peter Prusinowski posted on users@ that he got a lot of debug warnings about COSStreams which are not closed. He provided the following code to reproduce the effect:
    public static void generate() throws IOException {
        PDDocument doc = new PDDocument();

        try {
            PDPage page = new PDPage();
            doc.addPage(page);
            PDPageContentStream content = new PDPageContentStream(doc, page);
            BufferedImage bi = ImageIO.read(new File("/tmp/test.png"));
            PDImageXObject img = LosslessFactory.createFromImage(doc, bi);
            content.drawImage(img, 0, 0);
            content.close();
        } finally {
            if (doc != null) {
                doc.save("/tmp/testPdf.pdf");
                doc.close();
            }
        }
    }

    public static void main(String[] args) throws IOException {
        generate();
        generate();
        generate();
    }
I've got the same warnings using that specific code.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"28/Feb/16 16:10","17/Mar/16 19:08","11/Mar/16 07:14"
PDFBOX-3254,PDFBOX,"Corrupted XMP causes java.lang.StringIndexOutOfBoundsException",Bug,CLOSED,Major,Fixed,"1.8.11, 1.8.12, 2.0.0","1.8.12, 2.0.0",XmpBox,None,,"Using preflight version 2.0.0-RC3, the validation of the document "bad-fmt-95-m28154.pdf" causes the exception :
java.lang.StringIndexOutOfBoundsException: String index out of range: -1
at java.lang.String.substring(String.java:1911)
at org.apache.xmpbox.xml.DomXmpParser.parseInitialXpacket(DomXmpParser.java:671)
at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:139)
at org.apache.pdfbox.preflight.process.MetadataValidationProcess.validate(MetadataValidationProcess.java:69)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:122)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:163)
For this document, http://www.pdf-tools.com/ gives the error message :
bad-fmt-95-m28154.pdf does not conform to PDF/A.
Validating file "bad-fmt-95-m28154.pdf" for conformance level pdfa-1a
Invalid content of XMP packet header attribute 'begin': ' '.
The document does not conform to the requested standard.
The document's meta data is either missing or inconsistent or corrupt.
Done.",0,"Tilman Hausherr","Antoine Ribes",0,3,"29/Feb/16 12:49","17/Mar/16 19:08","29/Feb/16 18:54"
PDFBOX-3257,PDFBOX,"XMPSchemaBasic setCreateDate and setModifyDate don't work if already set",Bug,CLOSED,Minor,Fixed,"1.8.8, 1.8.11",1.8.12,JempBox,None,maven,"When setting XMPSchemaBasic with in certain PDFs , setCreateDate and setModifyDate do not work if the dates are already set in the pdf.
So this will not work as expected:
XMPSchemaBasic bi = xmp.getBasicSchema();
bi.setCreateDate(someDate);
bi.setModifyDate(anotherDate);
Setting other metadata fields works as expected, except for these two.
I found a workaround . If I set the fields to null, before setting them to a new value everything works as expected:
XMPSchemaBasic bi = xmp.getBasicSchema();
bi.setCreateDate(null);
bi.setCreateDate(someDate);
bi.setModifyDate(null);
bi.setModifyDate(anotherDate);
But still it feels like there is something wrong with the way setting these two dates work.",0,"Tilman Hausherr","Svetlozar Argirov",1,3,"02/Mar/16 08:21","25/Apr/16 17:24","02/Mar/16 18:32"
PDFBOX-3258,PDFBOX,"XMPBox XMPBasicSchema setters don't work if already set",Bug,CLOSED,Major,Fixed,"1.8.11, 1.8.12, 2.0.0","1.8.12, 2.0.0",XmpBox,None,,"This is a follow-up for PDFBOX-3257 but for XMPBox.
        DomXmpParser xmpParser = new DomXmpParser();
        xmpParser.setStrictParsing(false);
        InputStream is = meta.createInputStream();
        org.apache.xmpbox.XMPMetadata xmp = xmpParser.parse(is);
        is.close();
        XMPBasicSchema basic = xmp.getXMPBasicSchema();
        Calendar createDate = basic.getCreateDate();
        System.out.println(createDate);
        basic.setCreateDate(new GregorianCalendar());
        createDate = basic.getCreateDate();
        System.out.println(createDate);
This outputs twice the same",0,"Tilman Hausherr","Tilman Hausherr",0,2,"02/Mar/16 18:30","17/Mar/16 19:07","04/Mar/16 19:06"
PDFBOX-3259,PDFBOX,"ClassCastException in PDTilingPattern.getContents",Bug,CLOSED,Major,Fixed,"1.8.11, 1.8.12, 2.0.0","1.8.12, 2.0.0","PDModel, Preflight",None,,"Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSStream
        at org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern.getContents(PDTilingPattern.java:160)
        at org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)
The file has a COSDictionary instead of a COSStream in a tiling pattern.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"03/Mar/16 19:07","17/Mar/16 19:07","03/Mar/16 19:28"
PDFBOX-3262,PDFBOX,"AcroForm flattening will cause hidden fields become visible",Improvement,CLOSED,Minor,Fixed,2.0.0,"2.0.4, 3.0.0 PDFBox",AcroForm,newbie,,"Hi!
When I flatten a pdf file containing both visible and hidden fields, the hidden ones surprisingly become visible. I believe that the hidden ones should be kept hidden, e.g. by dropping them completely before flattening.
I made a workaround which removes hidden fields from the document before flattening but it would make sense that the library would do this automatically, and therefore I suspect that this is a bug.
Cheers!",0,"Maruan Sahyoun","Christian Brandt",0,4,"08/Mar/16 14:26","25/Mar/17 18:12","09/Dec/16 20:50"
PDFBOX-3263,PDFBOX,"Overlaying 2 pdfs corrupts cross-reference stream",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Writing,None,,"After overlaying the attached files the corss reference stream of the resulting pdf is corrupt. Using 1.8.11 works fine, results for both versions are attached as well",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"09/Mar/16 20:40","03/May/16 19:56","14/Mar/16 11:51"
PDFBOX-3264,PDFBOX,"One 32kb truncated file causes OOM in 2.0.0-trunk",Sub-task,CLOSED,Minor,Fixed,2.0.0,2.0.0,Parsing,None,,"I found one truncated file that is now causing an OOM in 2.0.0.
Can be reproduced with PDFBox app's ExtractText.",0,"Andreas Lehmkühler","Tim Allison",0,3,"10/Mar/16 15:28","17/Mar/16 19:06","10/Mar/16 18:44"
PDFBOX-3266,PDFBOX,"Overlay doesn't work anymore",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"When I try to overlay to files I got the following exception
java.io.IOException: COSStream has been closed and cannot be read. Perhaps its enclosing PDDocument has been closed?
 at org.apache.pdfbox.cos.COSStream.checkClosed(COSStream.java:78)
 at org.apache.pdfbox.cos.COSStream.createRawInputStream(COSStream.java:126)
 at org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1177)
 at org.apache.pdfbox.cos.COSStream.accept(COSStream.java:372)
 at org.apache.pdfbox.cos.COSObject.accept(COSObject.java:158)
 at org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:561)
 at org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:478)
 at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1073)
 at org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:419)
 at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1331)
 at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1229)
 at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1102)
 at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1074)
 at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1062)
 at org.apache.pdfbox.tools.OverlayPDF.main(OverlayPDF.java:143)",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"11/Mar/16 07:17","17/Mar/16 19:07","12/Mar/16 22:42"
PDFBOX-3267,PDFBOX,"Using threads results in different images",Bug,CLOSED,Major,Fixed,2.0.0,"2.0.2, 3.0.0 PDFBox",Rendering,None,,"If i dont use threads images are the same
java -cp pdf-box-svn/app/target/pdfbox-app-2.0.0-SNAPSHOT.jar:. ComparePDF
Exception in thread "main" java.io.IOException: Not equals
at ComparePDF.main(ComparePDF.java:21)",0,"Andreas Lehmkühler","simon steiner",0,4,"11/Mar/16 12:14","16/Apr/19 17:12","06/Jun/16 16:39"
PDFBOX-3268,PDFBOX,"Corners of stroked type are inaccurate when rendered as an image",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,Rendering,None,"mac os x, java 1.8","Using the latest 2.0 SNAPSHOT, converting a PDF with outlined type results in slightly inaccurate strokes. It looks as if the strokes don't always meet completely causing some corners of the rendered type to have double corners.
For abc1.jpg, it's most visible on the bottom left of most rendered glyphs.
java -jar pdfbox-app-2.0.0-20160310.194240-1983.jar PDFToImage -dpi 300 abc.pdf",0,"Tilman Hausherr","Jon Wu",0,3,"11/Mar/16 16:02","17/Mar/16 19:07","11/Mar/16 22:21"
PDFBOX-3271,PDFBOX,"Incomplete widths array for CID-fonts",Bug,CLOSED,Major,Fixed,2.0.0,2.0.0,PDModel,None,,"In my day job I've migrated a project to PDFBox 2.0.0 and found an issue with CID-fonts. The created width array is incomplete in some non deterministic constellations, so that the default width is used for the missing CIDs. In my case spaces had a doubled width which lead to a false rendering.
Furthermore the CIDs aren't sorted so that the resulting width array might not be optimal",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"13/Mar/16 10:33","17/Mar/16 19:08","13/Mar/16 10:43"
PDFBOX-3272,PDFBOX,"Loaded fonts file descriptors open after closing document",Bug,CLOSED,Major,Fixed,"1.8.11, 2.0.0","2.0.1, 3.0.0 PDFBox",FontBox,None,"tomcat, linux","I am experiencing problems with TTF fonts loaded for generating PDFs which eventually result in too many open files on Linux. The PDFBox version I tested last was 2.0.0-RC3.
Basically for each PDF I create a document and load two fonts which I want to use. After the document is generated I close all the resources, but the file descriptors for both fonts remain open.
The file descriptors should be automatically closed or an API should exist to close font resources.
My basic code:
import java.io.File;
import java.io.IOException;
import java.lang.management.ManagementFactory;

import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType0Font;

public class FontTest
{
 // Run the program which will create 1 PDF document and close all resources per second for 100 seconds.
 // The font open file descriptor count will increase all the time, until the program finishes.
 // Command to check open files: lsof -p PID | grep ttf
 public static void main(String[] args)
 {
  // should print out PID before @<hostname>
  System.out.println("process id: " + ManagementFactory.getRuntimeMXBean().getName());
  for (int i = 0; i < 100; i++)
  {
   createPDF();
   try
   {
    Thread.sleep(1000);
   }
   catch (InterruptedException e)
   {
    e.printStackTrace();
   }
  }
 }

 private static void createPDF()
 {
  PDDocument doc = null;
  PDPage page = null;
  ByteArrayOutputStream bos = null;

  try
  {
   doc = new PDDocument();
   page = new PDPage(PDRectangle.A4);

   doc.addPage(page);
   // using standard font
   PDFont font = PDType0Font.load(doc, new File("./pdf/OpenSans-Regular.ttf"));

   PDPageContentStream content = new PDPageContentStream(doc, page);

   content.beginText();
   content.setFont(font, 72);
   content.showText("OMG");
   content.endText();
   content.close();

   bos = new ByteArrayOutputStream();
   doc.save(bos);
   byte[] bytes = bos.toByteArray();
   System.out.println("create new pdf with size: " + bytes.length);
  }
  catch (Exception e)
  {
   e.printStackTrace();
  }
  finally
  {
   try
   {
    doc.close();
    bos.close();
   }
   catch (IOException e)
   {
    e.printStackTrace();
   }
  }
 }
}",0,"Andreas Lehmkühler","Gregor Ambrozic",0,4,"14/Mar/16 09:06","25/Mar/17 18:13","22/Mar/16 18:25"
PDFBOX-3273,PDFBOX,"Fonts not rendered correctly",Bug,CLOSED,Major,Fixed,2.0.0,"2.0.1, 3.0.0 PDFBox",Rendering,type1font,"java 1.8, mac os x","Fonts are not correctly rendered when using PDFBOX 2.0.0RC3 to extract images from a pdf.
Here is the pdf I am using for testing and two examples of images (the wrongly rendered characters are the red ones in the yellow box):
https://drive.google.com/open?id=0B9ji30i4c2KmcndCZGYxbk5telE",0,"Andreas Lehmkühler","Jacopo Pugliese",1,4,"14/Mar/16 13:08","25/Mar/17 18:13","03/Apr/16 20:22"
PDFBOX-3275,PDFBOX,"Show glyph bounds in DrawPrintTextLocations",Improvement,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 3.0.0 PDFBox","2.0.1, 3.0.0 PDFBox",Rendering,None,,"There have been repeated discussions about getting actual glyph bounds, but no code has been written.
discussions:
https://gist.github.com/anonymous/063db3b1b5ed040be41c",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Mar/16 17:24","25/Mar/17 18:12","19/Apr/16 16:21"
PDFBOX-3276,PDFBOX,"Double encryption dictionary for files with XRef stream",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 3.0.0 PDFBox","2.0.1, 3.0.0 PDFBox","Crypto, Writing",None,,"This was first mentioned by Patrick S. in the mailing list:
This is not a general problem and only occurs with original PDF generated with 3D content using Anark. The file when loaded seems to have encrypted and loads just find in Adobe Reader, but when we try to do a "Save As" we get the following error:
"The document could not be saved. There was a problem reading this document 21."
If I do a control click on the "ok" button. I get the following message:
"This direct object already has a container."
I can reproduce the effect with the attached file by using the Encrypt command line tool. A look at the file shows a double dictionary:
593 0 obj
<<
/Filter /Standard
/V 1
/R 3
/Length 40
/P -4
/O <10780080A0085854C58A57FCAFBD94A3CA3F7DF6FFE9DBC4834B7AAF144602C9>
/U <7CF00AD61911DB6A737867655ED3520C28BF4E5E4E758A4164004E56FFFA0108>
>>
endobj
594 0 obj
<<
/ID [<1D7A1969B33886DCF0DD4B0176F149AF> <C9898F3E11EAAD418E771B3045F38DDC>]
/Info 7 0 R
/Root 1 0 R
/Encrypt <<
/Filter /Standard
/V 1
/R 3
/Length 40
/P -4
/O <10780080A0085854C58A57FCAFBD94A3CA3F7DF6FFE9DBC4834B7AAF144602C9>
/U <7CF00AD61911DB6A737867655ED3520C28BF4E5E4E758A4164004E56FFFA0108>
>>
I don't know if this is the cause, but it doesn't belong there.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"17/Mar/16 19:29","25/Mar/17 18:13","18/Mar/16 16:56"
PDFBOX-3279,PDFBOX,"PDDocument.importPage creates two inputstreams",Bug,CLOSED,Major,Fixed,2.0.0,"2.0.1, 3.0.0 PDFBox",PDModel,None,,"PDDocument.importPage creates two inputstreams from page.getContents(), but uses one (for real). The first is only used to check if it exists.
        InputStream in = null;
        try
        {
            in = page.getContents();
            if (in != null)
            {
                PDStream dest = new PDStream(this, page.getContents(), COSName.FLATE_DECODE);",0,"Andreas Lehmkühler","Cornelis Hoeflake",0,3,"21/Mar/16 15:58","25/Mar/17 18:12","22/Mar/16 18:32"
PDFBOX-3281,PDFBOX,"HTML output wrongly specifies UTF-16 in header",Bug,CLOSED,Major,Fixed,"2.0.0, 3.0.0 PDFBox","2.0.1, 3.0.0 PDFBox","Text extraction",None,"mac os x, java 1.8","When running the command line ExtractText with the -html flag, the output file always has the following meta tag specifying UTF-16 regardless of the actual output encoding:
<meta http-equiv="Content-Type" content="text/html; charset="UTF-16">
This causes editors that respect the meta tag (emacs, etc.) to garble the file content.",0,"Andreas Lehmkühler","Aaron Madlon-Kay",0,4,"22/Mar/16 04:36","25/Mar/17 18:12","20/Apr/16 15:59"
PDFBOX-3283,PDFBOX,"Include publishing date on website",Improvement,CLOSED,Minor,Fixed,None,None,None,None,website,"The site's main page does not report the date for any release. Without a date, I am unable to determine how recently the project has been updated, or if it is even under actively development.
I was finally able to determine a release date for v2 by going to the release archive: http://archive.apache.org/dist/pdfbox/
I think previous releases or other bulletins on the main page should also include the release date.",0,"Andreas Lehmkühler","Danny Kirchmeier",0,4,"22/Mar/16 15:51","26/Mar/16 12:38","25/Mar/16 11:54"
PDFBOX-3285,PDFBOX,"All lines that use a given font stop rendering if 'ö' is inserted - ArrayIndexOutOfBoundsException in TTFSubFont.buildPostTable",Bug,CLOSED,Major,Fixed,1.8.12,1.8.12,Rendering,None,fedora,"When using a couple of different Courier fonts, if I insert the character 'ö' into a line of the pdf any other line that uses the same font will no longer display. Other styles of the same font still work fine.
Example file:
http://s000.tinyupload.com/?file_id=72100196724522466317
This happens in 1.8.8, 1.8.11, and the unreleased 1.8.12 but does not happen in 2.0.0. To display the PDF I've been using the pdfbox app jars for the respective versions which gives the following error:
Mar 22, 2016 11:52:58 AM org.apache.pdfbox.util.PDFStreamEngine processOperator
WARNING: java.lang.ArrayIndexOutOfBoundsException: 18
java.lang.ArrayIndexOutOfBoundsException: 18
at org.apache.fontbox.ttf.TTFSubFont.buildPostTable(TTFSubFont.java:969)
at org.apache.fontbox.ttf.TTFSubFont.writeToStream(TTFSubFont.java:1131)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.rebuildTTF(PDTrueTypeFont.java:556)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getawtFont(PDTrueTypeFont.java:478)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(PDSimpleFont.java:110)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:260)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:504)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:56)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:562)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:269)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:236)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:216)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:139)
at org.apache.pdfbox.pdfviewer.PDFPagePanel.paint(PDFPagePanel.java:121)
at javax.swing.JComponent.paintChildren(JComponent.java:889)
at javax.swing.JComponent.paint(JComponent.java:1065)
at javax.swing.JComponent.paintChildren(JComponent.java:889)
at javax.swing.JComponent.paint(JComponent.java:1065)
at javax.swing.JComponent.paintChildren(JComponent.java:889)
at javax.swing.JComponent.paint(JComponent.java:1065)
at javax.swing.JViewport.paint(JViewport.java:728)
at javax.swing.JComponent.paintChildren(JComponent.java:889)
at javax.swing.JComponent.paint(JComponent.java:1065)
at javax.swing.JComponent.paintChildren(JComponent.java:889)
at javax.swing.JComponent.paint(JComponent.java:1065)
at javax.swing.JComponent.paintChildren(JComponent.java:889)
at javax.swing.JComponent.paint(JComponent.java:1065)
at javax.swing.JLayeredPane.paint(JLayeredPane.java:586)
at javax.swing.JComponent.paintChildren(JComponent.java:889)
at javax.swing.JComponent.paintToOffscreen(JComponent.java:5217)
at javax.swing.BufferStrategyPaintManager.paint(BufferStrategyPaintManager.java:290)
at javax.swing.RepaintManager.paint(RepaintManager.java:1272)
at javax.swing.JComponent.paint(JComponent.java:1042)
at java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:39)
at sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:79)
at sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:116)
at java.awt.Container.paint(Container.java:1975)
at java.awt.Window.paint(Window.java:3912)
at javax.swing.RepaintManager$4.run(RepaintManager.java:842)
at javax.swing.RepaintManager$4.run(RepaintManager.java:814)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)
at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:814)
at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:789)
at javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:738)
at javax.swing.RepaintManager.access$1200(RepaintManager.java:64)
at javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1732)
at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:756)
at java.awt.EventQueue.access$500(EventQueue.java:97)
at java.awt.EventQueue$3.run(EventQueue.java:709)
at java.awt.EventQueue$3.run(EventQueue.java:703)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)
at java.awt.EventQueue.dispatchEvent(EventQueue.java:726)
at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)",0,"Tilman Hausherr","Samuel Clark",0,3,"22/Mar/16 19:06","25/Apr/16 17:24","22/Mar/16 19:48"
PDFBOX-3286,PDFBOX,"Think I found a bad constant (TTF) value and constant use in PDFBox source",Bug,CLOSED,Minor,Fixed,2.0.0,"2.0.1, 3.0.0 PDFBox",PDModel,None,,"Was searching if an OBLIQUE constant was defined somewhere for fsSelection field of OS/2 TrueType table (org.apache.fontbox.ttf.OS2WindowsMetricsTable), found a private one in org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder (line 53) in v2.0.0 but it was defined with value 256 instead of 512 (as defined in official Microsoft documentation here: https://www.microsoft.com/typography/otspec/os2.htm#fss, bits are defined starting at 0 and oblique is bit 9, so OBLIQUE should have value 512 (1 << 9) instead of 256. And the constant use (line 184), is wrong too, the line should be
        fd.setItalic((fsSelection & (ITALIC | OBLIQUE)) != 0);
instead of:
        fd.setItalic((fsSelection & ITALIC) == fsSelection ||
                     (fsSelection & OBLIQUE) == fsSelection);
because fsSelection can contain other bits set at the same time (like BOLD = 1 << 5), so the tests can be both false while one of the bit is set.",0,"Andreas Lehmkühler","Christophe Bouchon",0,4,"23/Mar/16 10:22","25/Mar/17 18:12","25/Mar/16 16:45"
PDFBOX-3289,PDFBOX,"Wrong unit MM_PER_INCH in PDRectangle",Improvement,CLOSED,Minor,Fixed,2.0.0,"2.0.1, 3.0.0 PDFBox",PDModel,None,,"PDRectangle has private field MM_PER_INCH, which is actually POINTS_PER_MM according to how that constant is defined, and how that constant is used further.
Since the field is private, I believe it can be easily renamed to avoid confusion.",0,"Tilman Hausherr","Dmitry Zvorygin",0,3,"24/Mar/16 06:47","25/Mar/17 18:12","24/Mar/16 06:56"
PDFBOX-3290,PDFBOX,"Replace icon font with SVG",Improvement,CLOSED,Minor,Fixed,None,None,Documentation,None,,"As we are using only 3 icons from the open iconic icon font that could be replaced with SVG images.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"25/Mar/16 18:10","26/Mar/16 08:43","26/Mar/16 08:43"
PDFBOX-3291,PDFBOX,"Add 1.8.11 api docs to website",Improvement,CLOSED,Minor,Fixed,None,None,Documentation,None,,"The current 1.8.11 api docs are missing on our website. They should be added.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"26/Mar/16 08:47","30/Mar/16 14:40","26/Mar/16 11:28"
PDFBOX-3292,PDFBOX,"Error reading stream, expected='endstream' actual='' in non-truncated files",Bug,CLOSED,Minor,Fixed,2.0.0,"2.0.1, 3.0.0 PDFBox",Parsing,None,,"When PDF files are truncated, one of the most common exceptions in PDFBox 2.0.0 is:
java.io.IOException: Error reading stream, expected='endstream' actual='' at offset 165888
 at org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:999)
 at org.apache.pdfbox.pdfparser.COSParser.parseXrefObjStream(COSParser.java:326)
 at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:287)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:192)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:249)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:847)
There are two files in govdocs1 that are NOT truncated and trigger this exception in 2.0.0, but were parsed by PDFBox 1.8.11 with the classic parser.",0,"Andreas Lehmkühler","Tim Allison",0,4,"28/Mar/16 19:27","25/Mar/17 18:12","12/Apr/16 10:30"
PDFBOX-3295,PDFBOX,"Improve parsing performance of object streams",Improvement,CLOSED,Major,Fixed,"1.8.11, 2.0.0, 3.0.0 PDFBox","1.8.12, 2.0.1, 3.0.0 PDFBox",Parsing,None,,"Round about a year ago Andrea Vacondio posted a comment about some xref refactoring on the dev list:
few days ago I was profiling PDFBox when loading medium/large size
documents and I think I found something.
If you try loading the document
http://www.adobe.com/devnet/acrobat/pdfs/pdf_reference_1-7.pdf you'll see
it takes quite some time and that's mostly spent in the
XrefTrailerResolver.getContainedObjectNumbers. The issue is that every time
an object contained in an unparsed object stream is found, the
XrefTrailerResolver performs a full scan of the xref entries found in the
document, in this case hundreds of thousands. If the object streams are
many (like in the given doc), it performs many full scans resulting in poor
performance.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,4,"29/Mar/16 20:32","25/Mar/17 18:13","30/Mar/16 17:08"
PDFBOX-3296,PDFBOX,"No Unicode mapping for math fonts in scientific papers",Bug,CLOSED,Major,"Not A Problem",2.0.0,None,"Text extraction",None,windows,"Trying to extract text from scientific papers (1200) I've encountered warnings related to Unicode mapping of special characters (Greek letters for example).
Those errors in Unicode mapping make very difficult to identify genes where an alpha or beta make a significant difference and don't appear in the txt file generated with ExtractText. And the fallback character generated is not always the same.
Here is a complete list of warnings that I hope can help your team:
['Warning PDFBox', 'Mar 30, 2016 12:26:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font JLOOHL+AdvP4C4E74\r\nMar 30, 2016 12:26:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font JLOOHL+AdvP4C4E74\r\nMar 30, 2016 12:26:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font JLPMEH+AdvMacms\r\nMar 30, 2016 12:26:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font JLOOHL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font CKILAC+MathematicalPi-One\r\nMar 30, 2016 12:26:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font CKILAC+MathematicalPi-One\r\nMar 30, 2016 12:26:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (6) in font CKILAE+MTSY\r\nMar 30, 2016 12:26:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17033 (2) in font CKJNHF+MathematicalPi-Six\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (1) in font APEMCD+AdvP4C4E74\r\nMar 30, 2016 12:26:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font APEMCD+AdvP4C4E74\r\nMar 30, 2016 12:26:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font APEMCD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (1) in font JOCFEF+AdvP4C4E74\r\nMar 30, 2016 12:26:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font JOCFEF+AdvP4C4E74\r\nMar 30, 2016 12:26:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font JOCFEF+AdvP4C4E74\r\nMar 30, 2016 12:26:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font JOEGAO+MathPackTen\r\nMar 30, 2016 12:26:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font JOEGGN+AdvMacms\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C212 (2) in font DOHJLH+AdvPSSym\r\nMar 30, 2016 12:26:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font DOHJLH+AdvPSSym\r\nMar 30, 2016 12:26:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font DOHKMJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font NJDLAB+AdvMacMthSyN\r\nMar 30, 2016 12:26:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font NJDLAB+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font KJGJCD+AdvP4C4E59\r\nMar 30, 2016 12:26:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font KJGJCF+AdvPSSym\r\nMar 30, 2016 12:26:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font KJGJEH+AdvP4C4E74\r\nMar 30, 2016 12:26:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font KJGJEH+AdvP4C4E74\r\nMar 30, 2016 12:26:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font KJGJEH+AdvP4C4E74\r\nMar 30, 2016 12:26:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (3) in font KJGJCD+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AKNPKM+AdvPSSym\r\nMar 30, 2016 12:26:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AKNPKM+AdvPSSym\r\nMar 30, 2016 12:26:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font AKNPGI+AdvP4C4E74\r\nMar 30, 2016 12:26:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font AKNPGI+AdvP4C4E74\r\nMar 30, 2016 12:26:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (4) in font AKNPGI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font OHGIAE+AdvP4C4E74\r\nMar 30, 2016 12:26:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (3) in font OHGIAE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font LNIPFG+AdvP4C4E74\r\nMar 30, 2016 12:26:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font LNIPFG+AdvP4C4E74\r\nMar 30, 2016 12:26:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font LNIPFG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C213 (2) in font OKNBLI+AdvPSMP1\r\nMar 30, 2016 12:26:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font OKNBMK+AdvPSSym\r\nMar 30, 2016 12:26:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font OKNBMK+AdvPSSym\r\nMar 30, 2016 12:26:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (2) in font OKNCCM+AdvPSMSAM10\r\nMar 30, 2016 12:26:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font OKNBNM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font FINOCM+AdvP4C4E74\r\nMar 30, 2016 12:26:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font FINOCM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font JDAMHP+AdvP697C\r\nMar 30, 2016 12:26:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font JDAMHO+AdvP4C4E74\r\nMar 30, 2016 12:26:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font JDAMHO+AdvP4C4E74\r\nMar 30, 2016 12:26:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (4) in font JDAMHO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font GNOCDL+AdvP4C4E74\r\nMar 30, 2016 12:26:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (2) in font GNOFFM+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font IKPFBA+MATHG-1A\r\nMar 30, 2016 12:26:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font IKPFBA+MATHG-1A\r\nMar 30, 2016 12:26:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font IKPFBA+MATHG-1A\r\nMar 30, 2016 12:26:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font IKPFBA+MATHG-1A\r\nMar 30, 2016 12:26:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font IKPEFB+MTSY\r\nMar 30, 2016 12:26:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (2) in font IKPEDB+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font NEBHGI+AdvMacMthSyN\r\nMar 30, 2016 12:26:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font NEBHGI+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font DDPAJK+AdvT042\r\nMar 30, 2016 12:26:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font DDPEBG+AdvP4C4E74\r\nMar 30, 2016 12:26:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font DDPEBG+AdvP4C4E74\r\nMar 30, 2016 12:26:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (4) in font DDPEBG+AdvP4C4E74\r\nMar 30, 2016 12:26:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font DDPEBG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for .notdef (31) in font KGNHBH+Calibri\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9255 (2) in font BEKKDA+MATHG-1A\r\nMar 30, 2016 12:26:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font BEKKDA+MATHG-1A\r\nMar 30, 2016 12:26:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (4) in font BEKKDA+MATHG-1A\r\nMar 30, 2016 12:26:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font BEKJGC+MTSY\r\nMar 30, 2016 12:26:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font BEKKDA+MATHG-1A\r\nMar 30, 2016 12:26:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (6) in font BEKKDA+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font HJCGFL+AdvP4C4E74\r\nMar 30, 2016 12:26:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font HJCGFL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font MIFAEM+MATHG-1A\r\nMar 30, 2016 12:26:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (3) in font MIFAEM+MATHG-1A\r\nMar 30, 2016 12:26:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font MIFAEM+MATHG-1A\r\nMar 30, 2016 12:26:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font MIFAEM+MATHG-1A\r\nMar 30, 2016 12:26:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9275 (6) in font MIFAEM+MATHG-1A\r\nMar 30, 2016 12:26:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (7) in font MIFAEM+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font HNENGP+AdvSPSASORT\r\nMar 30, 2016 12:26:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font HNENLI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OCBBNC+AdvP4C4E74\r\nMar 30, 2016 12:26:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C16 (1) in font OCBCEE+AdvP4C4E46\r\nMar 30, 2016 12:26:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C17 (3) in font OCBCEE+AdvP4C4E46\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font LCOAMJ+AdvT042\r\nMar 30, 2016 12:26:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font LCNPPN+AdvP4C4E74\r\nMar 30, 2016 12:26:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (3) in font LCNPPN+AdvP4C4E74\r\nMar 30, 2016 12:26:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font LCNPPN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font CCIHDA+AdvP4C4E74\r\nMar 30, 2016 12:26:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C228 (2) in font CCIFGH+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font OAMKOG+AdvSPSASORT\r\nMar 30, 2016 12:26:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font OANAHG+AdvP4C4E74\r\nMar 30, 2016 12:26:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font OANBAE+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:26:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font JOMGKD+AdvP4C4E59\r\nMar 30, 2016 12:26:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font JOMGLI+AdvP4C4E74\r\nMar 30, 2016 12:26:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font JOMGLI+AdvP4C4E74\r\nMar 30, 2016 12:26:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font JOMGLI+AdvP4C4E74\r\nMar 30, 2016 12:26:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (3) in font JOMGKD+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font GAEGPM+MathematicalPi-One\r\nMar 30, 2016 12:26:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (3) in font GAEGPM+MathematicalPi-One\r\nMar 30, 2016 12:26:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font GAECOG+MTSY\r\nMar 30, 2016 12:26:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font GAEGPM+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font JANFHA+AdvT042\r\nMar 30, 2016 12:26:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font JAODOH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font DOGDNH+AdvPSSym\r\nMar 30, 2016 12:26:57 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+6628 (6628) in font ArialUnicodeMS-KSCms-UHC-H-Identity-H\r\nMar 30, 2016 12:26:57 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+6629 (6629) in font ArialUnicodeMS-KSCms-UHC-H-Identity-H\r\nMar 30, 2016 12:26:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font DOGDNH+AdvPSSym\r\nMar 30, 2016 12:26:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font DOGFPA+AdvP4C4E74\r\nMar 30, 2016 12:26:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font DOGFPA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font LCGPMP+AdvPSSym\r\nMar 30, 2016 12:27:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font LCGPMP+AdvPSSym\r\nMar 30, 2016 12:27:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font LCHDHK+AdvP4C4E74\r\nMar 30, 2016 12:27:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font LCHDHK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:26:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font FCOLGN+AdvMacMthSyN\r\nMar 30, 2016 12:26:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (3) in font FCOLGN+AdvMacMthSyN\r\nMar 30, 2016 12:27:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font FCOLGN+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font CPPKCL+AdvP4C4E74\r\nMar 30, 2016 12:27:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font CPPKCM+AdvPSSym\r\nMar 30, 2016 12:27:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C22 (2) in font CPPKAK+AdvP4C4E59\r\nMar 30, 2016 12:27:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font CPPKAK+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font PMOGNN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (1) in font KHENFN+AdvP4C4E74\r\nMar 30, 2016 12:27:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (3) in font KHENFN+AdvP4C4E74\r\nMar 30, 2016 12:27:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font KHENFN+AdvP4C4E74\r\nMar 30, 2016 12:27:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (1) in font KHFFDA+AdvP4C4E59\r\nMar 30, 2016 12:27:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font KHFFDA+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C84 (84) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (111) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C112 (112) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (105) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (99) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (108) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (121) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (65) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (100) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C86 (86) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (116) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (110) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C67 (67) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C69 (69) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (104) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (115) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C82 (82) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C78 (78) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C76 (76) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C118 (118) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (102) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (103) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (73) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C44 (44) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (114) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C80 (80) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C122 (122) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (117) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (98) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (77) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C120 (120) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C49 (49) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C72 (72) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (68) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C66 (66) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (116) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (121) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C86 (86) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (46) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C78 (78) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (117) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (115) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (103) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (110) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C44 (44) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C80 (80) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (104) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (105) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (108) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C112 (112) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C72 (72) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (98) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (114) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C42 (42) in font FEGNIA+AdvP6F00\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (65) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (100) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C194 (194) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C82 (82) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (111) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C178 (178) in font FEGNIA+AdvP6F00\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C67 (67) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (77) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (107) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (102) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C179 (179) in font FEGNIA+AdvP6F00\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C76 (76) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (99) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C193 (193) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C118 (118) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C84 (84) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C85 (85) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C83 (83) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C59 (59) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (68) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C195 (195) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C74 (74) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C113 (113) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C70 (70) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C45 (45) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C203 (203) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (73) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C69 (69) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (51) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C52 (52) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (54) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C47 (47) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C40 (40) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C41 (41) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C113 (113) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C45 (45) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (46) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (107) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C174 (174) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (119) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C118 (118) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (115) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C66 (66) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C177 (177) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (50) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C57 (57) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C75 (75) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (121) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (119) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (111) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (114) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (100) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C58 (58) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (65) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (68) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (77) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C84 (84) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C83 (83) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (50) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C47 (47) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C66 (66) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C80 (80) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C49 (49) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (99) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (105) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (110) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (108) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (116) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C120 (120) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C45 (45) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C112 (112) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (46) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C74 (74) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (73) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (54) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C56 (56) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C53 (53) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (51) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C177 (177) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C57 (57) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C44 (44) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C48 (48) in font FEGNIA+AdvBembo-bi\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C40 (40) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C41 (41) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C122 (122) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (119) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (116) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (108) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C49 (49) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C57 (57) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C55 (55) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C120 (120) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C48 (48) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C174 (174) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C106 (106) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C87 (87) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C53 (53) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C37 (37) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C56 (56) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C75 (75) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (50) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C58 (58) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C64 (64) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font FEGNIA+AdvSymbol\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C79 (79) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C177 (177) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C88 (88) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C36 (36) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C180 (180) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C35 (35) in font FEGNIA+AdvPi3\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C56 (56) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C53 (53) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (51) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C71 (71) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C83 (83) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C47 (47) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C37 (37) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (98) in font FEGNIA+AdvSymbol\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (51) in font FEHBGI+AdvMathPi1\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (103) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (176) in font FEGNIA+AdvSymbol\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font FEGNIA+AdvSymbol\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C175 (175) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C70 (70) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C39 (39) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C74 (74) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (73) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (110) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C118 (118) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (115) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (68) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (114) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (111) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C52 (52) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C69 (69) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C84 (84) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (65) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C76 (76) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C89 (89) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font FEHFFA+AdvSymbolb\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C61 (61) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (54) in font FEHBGI+AdvMathPi1\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C162 (162) in font FEGNIA+AdvSymbol\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C48 (48) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C60 (60) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C79 (79) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C75 (75) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C91 (91) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C93 (93) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (98) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (99) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (54) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C43 (43) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (100) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (77) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (105) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (104) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C62 (62) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C55 (55) in font FEGNIA+AdvBembo-b\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C120 (120) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (102) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (46) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C78 (78) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C72 (72) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (121) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C112 (112) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C82 (82) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C177 (177) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C80 (80) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C67 (67) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (117) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (107) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (119) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C87 (87) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C66 (66) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C70 (70) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C83 (83) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C85 (85) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C193 (193) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C81 (81) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C86 (86) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C40 (40) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C41 (41) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C90 (90) in font FEGNIA+AdvBembo-r\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C113 (113) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C44 (44) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C71 (71) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C89 (89) in font FEGNIA+AdvBembo-i\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C208 (208) in font FEGNIA+AdvBembo-r\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font DMCILO+AdvPSSym\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font DMCIIL+AdvP4C4E74\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font DMCIIL+AdvP4C4E74\r\nMar 30, 2016 12:27:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (4) in font DMCIIL+AdvP4C4E74\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font DMCKNG+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font KMMJCP+AdvMacMthSyN\r\nMar 30, 2016 12:27:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font KMMJCP+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font PEBACG+AdvT042\r\nMar 30, 2016 12:27:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font PEBCNH+AdvP4C4E74\r\nMar 30, 2016 12:27:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font PEBCNH+AdvP4C4E74\r\nMar 30, 2016 12:27:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (4) in font PEBCNH+AdvP4C4E74\r\nMar 30, 2016 12:27:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (5) in font PEBCNH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font FPAFAK+AdvPSSym\r\nMar 30, 2016 12:27:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font FPAOAC+AdvP4C4E74\r\nMar 30, 2016 12:27:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font FPAFAK+AdvPSSym\r\nMar 30, 2016 12:27:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font FPAOAC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font AMCADG+AdvP4C4E74\r\nMar 30, 2016 12:27:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font AMCADG+AdvP4C4E74\r\nMar 30, 2016 12:27:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font AMCDNK+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (1) in font MathPackTen\r\nMar 30, 2016 12:27:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9837 (2) in font MathPackTen\r\nMar 30, 2016 12:27:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font MathPackThirteen\r\nMar 30, 2016 12:27:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (1) in font MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font ADJOPL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font ADKPFK+AdvSPSASORT\r\nMar 30, 2016 12:27:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font ADKNMH+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font IAPGAF+AdvPSSym\r\nMar 30, 2016 12:27:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font IAPGAF+AdvPSSym\r\nMar 30, 2016 12:27:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font IBABOM+AdvP4C4E74\r\nMar 30, 2016 12:27:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font IAPGAF+AdvPSSym\r\nMar 30, 2016 12:27:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font IBABOM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g539 (2) in font HPNMJC+TimesNewRomanPSMT\r\nMar 30, 2016 12:27:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (3) in font HPNMJC+TimesNewRomanPSMT\r\nMar 30, 2016 12:27:31 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+6633 (6633) in font ArialUnicodeMS-KSCms-UHC-H-Identity-H\r\nMar 30, 2016 12:27:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g534 (4) in font HPNMJC+TimesNewRomanPSMT\r\nMar 30, 2016 12:27:32 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+3346 (3346) in font ArialUnicodeMS-KSCms-UHC-H-Identity-H\r\nMar 30, 2016 12:27:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g541 (5) in font HPNMJC+TimesNewRomanPSMT\r\nMar 30, 2016 12:27:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (6) in font HPNMJC+TimesNewRomanPSMT\r\nMar 30, 2016 12:27:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g839 (2) in font HPNOLJ+MS-Mincho\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C160 (2) in font NOJPAA+AdvPSMP1\r\nMar 30, 2016 12:27:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C224 (3) in font NOJPAA+AdvPSMP1\r\nMar 30, 2016 12:27:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (2) in font NOJPBB+AdvP4C4E74\r\nMar 30, 2016 12:27:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font NOJPBB+AdvP4C4E74\r\nMar 30, 2016 12:27:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font NOJPCK+AdvPSSym\r\nMar 30, 2016 12:27:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font NOJPCK+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font MDPKJM+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:27:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font HDNJFF+AdvP4C4E59\r\nMar 30, 2016 12:27:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (3) in font HDNJFF+AdvP4C4E59\r\nMar 30, 2016 12:27:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font HDNJGI+AdvSPSASORT\r\nMar 30, 2016 12:27:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font HDNJHJ+AdvPSSym\r\nMar 30, 2016 12:27:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font HDNJHK+AdvP4C4E74\r\nMar 30, 2016 12:27:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font HDNJHK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font FJGFIJ+AdvPSSym\r\nMar 30, 2016 12:27:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font FJGFIJ+AdvPSSym\r\nMar 30, 2016 12:27:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font FJGGHG+AdvP4C4E74\r\nMar 30, 2016 12:27:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font FJGGHG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:27:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font EMNAHB+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (1) in font BKCLOL+AdvP4C4E74\r\nMar 30, 2016 12:28:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font BKCLOL+AdvP4C4E74\r\nMar 30, 2016 12:28:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font BKCLOL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font MGGMBD+AdvP4C4E74\r\nMar 30, 2016 12:28:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font MGGMBD+AdvP4C4E74\r\nMar 30, 2016 12:28:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (4) in font MGGMBD+AdvP4C4E74\r\nMar 30, 2016 12:28:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font MGGMBD+AdvP4C4E74\r\nMar 30, 2016 12:28:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font MGGPNH+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font LGJBEN+AdvP4C4E59\r\nMar 30, 2016 12:28:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font LGJBFC+AdvP4C4E74\r\nMar 30, 2016 12:28:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font LGJBFC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font FBCOIP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font GIDKIA+MATHG-1A\r\nMar 30, 2016 12:28:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font GIDKIA+MATHG-1A\r\nMar 30, 2016 12:28:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font GIDKGN+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (4) in font ABNJOB+MTMI\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font FBPMPB+AdvT042\r\nMar 30, 2016 12:28:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (2) in font FBPPEF+AdvP4C4E74\r\nMar 30, 2016 12:28:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (3) in font FBPPEF+AdvP4C4E74\r\nMar 30, 2016 12:28:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g415 (3) in font FCAJOE+Calibri-Bold\r\nMar 30, 2016 12:28:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g425 (4) in font FCAJOE+Calibri-Bold\r\nMar 30, 2016 12:28:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g415 (2) in font FCAJPF+Calibri\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font BOKMKK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font OGHAOE+AdvP4C4E74\r\nMar 30, 2016 12:28:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font OGHAOE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C28 (1) in font MNGJPO+AdvMacMthRm\r\nMar 30, 2016 12:28:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font MNGJPP+AdvMacms\r\nMar 30, 2016 12:28:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C215 (1) in font MNGJON+AdvT207\r\nMar 30, 2016 12:28:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font MNGKEC+AdvMacMthSy\r\nMar 30, 2016 12:28:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MNGKEC+AdvMacMthSy\r\nMar 30, 2016 12:28:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (2) in font MNGJON+AdvT207\r\nMar 30, 2016 12:28:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C246 (3) in font MNGJON+AdvT207\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font PDOGMK+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:28:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:28:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font OBNBEO+MATHG-1A\r\nMar 30, 2016 12:28:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font OBNBEO+MATHG-1A\r\nMar 30, 2016 12:28:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (4) in font OBNBEO+MATHG-1A\r\nMar 30, 2016 12:28:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font OBMJMM+MTSY\r\nMar 30, 2016 12:28:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font OBNGPK+Gmath4-4A\r\nMar 30, 2016 12:28:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for SOH (2) in font OBMJKL+OnemtmiguAAAA\r\nMar 30, 2016 12:28:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (5) in font OBNBEO+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font EFEOBN+AdvP4C4E74\r\nMar 30, 2016 12:28:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font EFEPGD+MathPackTen\r\nMar 30, 2016 12:28:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9828 (2) in font EFEPGD+MathPackTen\r\nMar 30, 2016 12:28:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font EFEOBN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font DAHENI+AdvP4C4E74\r\nMar 30, 2016 12:28:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font DAHENI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font CDIANL+AdvSPSASORT\r\nMar 30, 2016 12:28:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (1) in font CDIANM+AdvP4C4E59\r\nMar 30, 2016 12:28:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font CDIAPB+AdvP4C4E74\r\nMar 30, 2016 12:28:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font CDIAPB+AdvP4C4E74\r\nMar 30, 2016 12:28:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font CDIANM+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font CJOLEO+MATHG-1A\r\nMar 30, 2016 12:28:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font CJOLIO+OnemtmiguAAAA\r\nMar 30, 2016 12:28:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font CJOKON+MTSY\r\nMar 30, 2016 12:28:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font CJOLEO+MATHG-1A\r\nMar 30, 2016 12:28:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font CJOLEO+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C209 (2) in font BDLMAC+AdvPS9a11\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font ACKNMJ+AdvPSSym\r\nMar 30, 2016 12:28:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font ACKNMJ+AdvPSSym\r\nMar 30, 2016 12:28:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font ACKNMJ+AdvPSSym\r\nMar 30, 2016 12:28:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font ACKONF+AdvP4C4E74\r\nMar 30, 2016 12:28:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font ACKONF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font HPJANI+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font OAAFFO+AdvPSSym\r\nMar 30, 2016 12:28:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OAALJJ+AdvP4C4E74\r\nMar 30, 2016 12:28:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font OAAFFO+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font HBGOBL+AdvP4C4E59\r\nMar 30, 2016 12:28:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font HBGOFN+AdvP4C4E74\r\nMar 30, 2016 12:28:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font HBGOFN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font EANILA+AdvPSSym\r\nMar 30, 2016 12:28:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font EANILA+AdvPSSym\r\nMar 30, 2016 12:28:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font EANKJJ+AdvP4C4E74\r\nMar 30, 2016 12:28:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font EANKJJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font IGFIND+AdvPSSym\r\nMar 30, 2016 12:28:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font IGFJMB+AdvP4C4E74\r\nMar 30, 2016 12:28:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font IGFIND+AdvPSSym\r\nMar 30, 2016 12:28:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font IGFJMB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font FAHKEA+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font FAGCGH+MTSY\r\nMar 30, 2016 12:28:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font FAGCKK+MATHG-1A\r\nMar 30, 2016 12:28:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font FAGCKK+MATHG-1A\r\nMar 30, 2016 12:28:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font FAGCGG+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font HGNKBA+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font ADBANE+MATHG-1A\r\nMar 30, 2016 12:28:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font ADBANE+MATHG-1A\r\nMar 30, 2016 12:28:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font ADBANE+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font GLOKCB+AdvPSSym\r\nMar 30, 2016 12:28:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font GLOKCB+AdvPSSym\r\nMar 30, 2016 12:28:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font GLOLBP+AdvP4C4E74\r\nMar 30, 2016 12:28:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GLOLBP+AdvP4C4E74\r\nMar 30, 2016 12:28:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (4) in font GLOLBP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font IJEFGP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:50 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2 <init>\r\nWARNING: Using fallback font Asimov for CID-keyed TrueType font MalgunGothicRegular\r\nMar 30, 2016 12:28:50 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2 <init>\r\nWARNING: Using fallback font AdobeMyungjoStd-Medium for CID-keyed TrueType font Batang\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ODABJI+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:28:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HOFLJD+AdvP4C4E74\r\nMar 30, 2016 12:28:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font HOGDAG+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font ILDIKE+AdvP4C4E74\r\nMar 30, 2016 12:29:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font ILDIKE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font BABJOJ+AdvPSSym\r\nMar 30, 2016 12:29:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font BABKEJ+AdvP4C4E74\r\nMar 30, 2016 12:29:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font BABKEJ+AdvP4C4E74\r\nMar 30, 2016 12:29:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font BABKEJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (2) in font ILDDMN+AdvP4C4E74\r\nMar 30, 2016 12:29:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ILDJMO+AdvT042\r\nMar 30, 2016 12:29:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font ILDDMN+AdvP4C4E74\r\nMar 30, 2016 12:29:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (4) in font ILDDMN+AdvP4C4E74\r\nMar 30, 2016 12:29:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (5) in font ILDDMN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font KMFCAA+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (2) in font JIDALM+MATHG-1A\r\nMar 30, 2016 12:29:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font JIDALM+MATHG-1A\r\nMar 30, 2016 12:29:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font JIDALM+MATHG-1A\r\nMar 30, 2016 12:29:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (5) in font JIDALM+MATHG-1A\r\nMar 30, 2016 12:29:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (5) in font JIDAAL+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font MPFJAE+AdvPSSym\r\nMar 30, 2016 12:29:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MPFMED+AdvP4C4E74\r\nMar 30, 2016 12:29:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font MPFJAE+AdvPSSym\r\nMar 30, 2016 12:29:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font MPFMED+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font GNMPEK+AdvMacMthSyN\r\nMar 30, 2016 12:29:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GNMPEK+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (1) in font BALJBL+AdvPSSym\r\nMar 30, 2016 12:29:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (1) in font BALJIK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HDCNAI+AdvMacMthSyN\r\nMar 30, 2016 12:29:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font HDCNAI+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:29:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\nMar 30, 2016 12:29:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circle4 (1) in font NGGOLZ+TT5BCo00\r\nMar 30, 2016 12:29:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circle4 (1) in font VSSYSF+TT5BEo00\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font HJFGOK+MATHG-1A\r\nMar 30, 2016 12:29:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font HJFGOK+MATHG-1A\r\nMar 30, 2016 12:29:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font HJFHAL+MTSY\r\nMar 30, 2016 12:29:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font HJFGOK+MATHG-1A\r\nMar 30, 2016 12:29:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (5) in font HJFGOK+MATHG-1A\r\nMar 30, 2016 12:29:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font HJFGPL+OnemtmiguAAAA\r\nMar 30, 2016 12:29:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for triangle (6) in font HJFHAL+MTSY\r\nMar 30, 2016 12:29:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font HJFGOK+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font FOHGLG+AdvP4C4E74\r\nMar 30, 2016 12:29:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font FOIALM+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font NBHLIN+AdvP4C4E74\r\nMar 30, 2016 12:29:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font NBHLIN+AdvP4C4E74\r\nMar 30, 2016 12:29:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (4) in font NBHLIN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font JFNGNJ+AdvP4C4E74\r\nMar 30, 2016 12:29:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (1) in font JFNHAM+AdvPSSym\r\nMar 30, 2016 12:29:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font JFNHAM+AdvPSSym\r\nMar 30, 2016 12:29:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (2) in font JFNGNJ+AdvP4C4E74\r\nMar 30, 2016 12:29:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font JFNGNJ+AdvP4C4E74\r\nMar 30, 2016 12:29:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font JFNHAM+AdvPSSym\r\nMar 30, 2016 12:29:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font JFNGNJ+AdvP4C4E74\r\nMar 30, 2016 12:29:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (5) in font JFNGNJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (1) in font LOJJIH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:29:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font LOJJIH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:29:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font LOJJIH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:29:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (4) in font LOJJIH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:29:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font LOJJIH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:29:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (6) in font LOJJIH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:29:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (7) in font LOJJIH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:29:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9004 (8) in font LOJJIH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:29:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11003 (9) in font LOJJIH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:29:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (1) in font LOJKPI+MathematicalPi-One\r\nMar 30, 2016 12:29:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11349 (2) in font LOJKPI+MathematicalPi-One\r\nMar 30, 2016 12:29:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11005 (10) in font LOJJIH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:29:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font LOJKPI+MathematicalPi-One\r\nMar 30, 2016 12:29:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9024 (11) in font LOJJIH+Universal-GreekwithMathPi\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font LGDODD+AdvP4C4E74\r\nMar 30, 2016 12:29:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font LGDODF+AdvPSSym\r\nMar 30, 2016 12:29:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font LGDODD+AdvP4C4E74\r\nMar 30, 2016 12:29:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (4) in font LGDODD+AdvP4C4E74\r\nMar 30, 2016 12:29:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font LGDODF+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MIKGPM+AdvP4C4E74\r\nMar 30, 2016 12:29:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font MIKGPM+AdvP4C4E74\r\nMar 30, 2016 12:29:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (4) in font MIKGPM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OFHOMJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font LIMGIJ+AdvT042\r\nMar 30, 2016 12:29:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font LIMGIH+AdvP4C4E74\r\nMar 30, 2016 12:29:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (2) in font LIMGIH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:29:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ALCBMM+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (2) in font FAJMHG+AdvP4C4E74\r\nMar 30, 2016 12:30:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font FAJMHG+AdvP4C4E74\r\nMar 30, 2016 12:30:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font FAJMHG+AdvP4C4E74\r\nMar 30, 2016 12:30:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font FAJMHG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font NMCPJK+AdvP4C4E74\r\nMar 30, 2016 12:30:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font NMCPJK+AdvP4C4E74\r\nMar 30, 2016 12:30:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font NMFGPK+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font CLFAJO+AdvP4C4E74\r\nMar 30, 2016 12:30:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font CLFAJO+AdvP4C4E74\r\nMar 30, 2016 12:30:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font CLGNMB+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font CLFAJO+AdvP4C4E74\r\nMar 30, 2016 12:30:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font CLFAJO+AdvP4C4E74\r\nMar 30, 2016 12:30:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font CLGNMB+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ILAILN+AdvT001\r\nMar 30, 2016 12:30:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font ILAINP+AdvMT_SY\r\nMar 30, 2016 12:30:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font ILAINP+AdvMT_SY\r\nMar 30, 2016 12:30:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font ILAINP+AdvMT_SY\r\nMar 30, 2016 12:30:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font ILAINP+AdvMT_SY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font GDEPJA+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font FECGLG+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font NONNLA+AdvPSSym\r\nMar 30, 2016 12:30:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font NONNLA+AdvPSSym\r\nMar 30, 2016 12:30:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font NOOHJH+AdvP4C4E74\r\nMar 30, 2016 12:30:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font NONNLA+AdvPSSym\r\nMar 30, 2016 12:30:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font NOOHJH+AdvP4C4E74\r\nMar 30, 2016 12:30:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (4) in font NOOHJH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font BBEPNA+AdvP4C4E74\r\nMar 30, 2016 12:30:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font BBEPNA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+38 (38) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+88 (88) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+85 (85) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+70 (70) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+80 (80) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+76 (76) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+81 (81) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+3 (3) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+135 (135) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+48 (48) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+68 (68) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+82 (82) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+83 (83) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+75 (75) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+74 (74) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+72 (72) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+79 (79) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+93 (93) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+87 (87) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+55 (55) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+47 (47) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+53 (53) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+23 (23) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+36 (36) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+51 (51) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+46 (46) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+49 (49) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+41 (41) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+16 (16) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+458 (458) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+37 (37) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+86 (86) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+92 (92) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+71 (71) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+11 (11) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+54 (54) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+30 (30) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+20 (20) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+460 (460) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+18 (18) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+12 (12) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+73 (73) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+44 (44) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+453 (453) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+21 (21) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+19 (19) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+90 (90) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+89 (89) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+69 (69) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+17 (17) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+91 (91) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+303 (303) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+15 (15) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+78 (78) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+25 (25) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+84 (84) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+40 (40) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+193 (193) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+192 (192) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+45 (45) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+22 (22) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+27 (27) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+50 (50) in font HSNNRP+SegoeUI-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+139 (139) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+144 (144) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+976 (976) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+142 (142) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+131 (131) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+143 (143) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+150 (150) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+145 (145) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+148 (148) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+155 (155) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+3 (3) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+134 (134) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+149 (149) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+135 (135) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+484 (484) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+16 (16) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+133 (133) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+486 (486) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+152 (152) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+146 (146) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+138 (138) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+137 (137) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+481 (481) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+153 (153) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+132 (132) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+151 (151) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+141 (141) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+136 (136) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+527 (527) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+883 (883) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+528 (528) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+22 (22) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+154 (154) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+884 (884) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+7 (7) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+19 (19) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+147 (147) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+23 (23) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+8 (8) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+12 (12) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+523 (523) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+14 (14) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+18 (18) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+524 (524) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+156 (156) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+885 (885) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+11 (11) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+6 (6) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+886 (886) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+887 (887) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+9 (9) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+482 (482) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+888 (888) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+21 (21) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+17 (17) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+891 (891) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+4 (4) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+889 (889) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+15 (15) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+512 (512) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+576 (576) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+26 (26) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+584 (584) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+5 (5) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+890 (890) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+573 (573) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+574 (574) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+882 (882) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+24 (24) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+10 (10) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+936 (936) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+953 (953) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:17 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+586 (586) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+13 (13) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+27 (27) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+16 (16) in font YAOAFF+MS-Mincho-90ms-RKSJ-H-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+117 (117) in font KTPARR+SymbolMT-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+28 (28) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+483 (483) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+495 (495) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+4574 (4574) in font GBSTYF+CambriaMath-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+25 (25) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+140 (140) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+941 (941) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+20 (20) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+940 (940) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+948 (948) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+8 (8) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+136 (136) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+135 (135) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+133 (133) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+150 (150) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+3 (3) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+145 (145) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+151 (151) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+148 (148) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+143 (143) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+139 (139) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+144 (144) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+15 (15) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+19 (19) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+22 (22) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+512 (512) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+12 (12) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+9 (9) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+17 (17) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+486 (486) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+576 (576) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+134 (134) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+16 (16) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+887 (887) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+131 (131) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+146 (146) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+138 (138) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+137 (137) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+149 (149) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+4 (4) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+14 (14) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+584 (584) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+5 (5) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+153 (153) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+155 (155) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+23 (23) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+21 (21) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+890 (890) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+142 (142) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+156 (156) in font MCWPOO+Cambria-Italic-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+535 (535) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+543 (543) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+938 (938) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+29 (29) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+491 (491) in font GOVHAL+Cambria-Identity-H\r\nMar 30, 2016 12:30:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+494 (494) in font GOVHAL+Cambria-Identity-H\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font NOCOHM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font ODOLBC+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font OIPLPH+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font DMJNBG+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font ODJDBP+AdvPSSym\r\nMar 30, 2016 12:30:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font ODJEMI+AdvP4C4E74\r\nMar 30, 2016 12:30:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font ODJDBP+AdvPSSym\r\nMar 30, 2016 12:30:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C228 (4) in font ODJDBP+AdvPSSym\r\nMar 30, 2016 12:30:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font ODJEMI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:30:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:30:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for envelopeback (2) in font AGKIDN+TTE252D5Eo00\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font BFJEHH+AdvT042\r\nMar 30, 2016 12:30:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font BFJFHG+AdvP4C4E74\r\nMar 30, 2016 12:30:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font BFJFHG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font PBKLNK+AdvP4C4E74\r\nMar 30, 2016 12:30:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font PBKLNK+AdvP4C4E74\r\nMar 30, 2016 12:30:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font PBKMAP+AdvPSSym\r\nMar 30, 2016 12:30:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font PBKLNK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font EEDEMP+MathPackTen\r\nMar 30, 2016 12:30:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (2) in font EEDEMP+MathPackTen\r\nMar 30, 2016 12:30:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font EDPHHN+AdvP4C4E74\r\nMar 30, 2016 12:30:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font EDPHHN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font LEDMKO+AdvP4C4E74\r\nMar 30, 2016 12:30:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font LEDMPD+AdvPSSym\r\nMar 30, 2016 12:30:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font LEDMKO+AdvP4C4E74\r\nMar 30, 2016 12:30:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font LEDMKO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font OCMMKP+AdvP4C4E74\r\nMar 30, 2016 12:30:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font OCMMLA+AdvMacms\r\nMar 30, 2016 12:30:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OCMMKP+AdvP4C4E74\r\nMar 30, 2016 12:30:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font OCMMKP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font FILKFN+AdvPSSym\r\nMar 30, 2016 12:30:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font FILKGP+AdvP4C4E74\r\nMar 30, 2016 12:30:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font FILKGP+AdvP4C4E74\r\nMar 30, 2016 12:30:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font FILKFN+AdvPSSym\r\nMar 30, 2016 12:30:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font FILKFN+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font KCPDKG+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font IEPJFN+AdvP4C4E74\r\nMar 30, 2016 12:30:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g415 (2) in font IEPKIK+Calibri\r\nMar 30, 2016 12:30:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g332 (3) in font IEPKIK+Calibri\r\nMar 30, 2016 12:30:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font IEPJFN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font PKBHEK+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font IMHOJG+AdvMacMthSyN\r\nMar 30, 2016 12:30:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font IMHOJG+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font PEAAOK+MATHG-1A\r\nMar 30, 2016 12:30:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font PEAAOK+MATHG-1A\r\nMar 30, 2016 12:30:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font PEAAOK+MATHG-1A\r\nMar 30, 2016 12:30:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font PDLDGE+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font PGDLBA+AdvPSSym\r\nMar 30, 2016 12:30:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font PGDLAA+AdvP4C4E74\r\nMar 30, 2016 12:30:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font PGDLBA+AdvPSSym\r\nMar 30, 2016 12:30:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font PGDLAA+AdvP4C4E74\r\nMar 30, 2016 12:30:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font PGDLBA+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font GBGPCI+AdvP4C4E74\r\nMar 30, 2016 12:30:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GBGPCI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MCGNJE+AdvT042\r\nMar 30, 2016 12:30:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MCHEIM+AdvP4C4E74\r\nMar 30, 2016 12:30:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font MCHEIM+AdvP4C4E74\r\nMar 30, 2016 12:30:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font MCHEIM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:30:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font IIAHHF+AdvPSSym\r\nMar 30, 2016 12:30:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font IIAIFE+AdvP4C4E74\r\nMar 30, 2016 12:30:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font IIAHHF+AdvPSSym\r\nMar 30, 2016 12:30:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font IIAIFE+AdvP4C4E74\r\nMar 30, 2016 12:30:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font IIAHHF+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font HFKAIG+AdvP4C4E74\r\nMar 30, 2016 12:31:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font HFKAIG+AdvP4C4E74\r\nMar 30, 2016 12:31:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (4) in font HFKAIG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font NMKOGF+AdvP4C4E74\r\nMar 30, 2016 12:31:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font NMKOGG+AdvPSSym\r\nMar 30, 2016 12:31:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (2) in font NMLBIH+AdvPSMSAM10\r\nMar 30, 2016 12:31:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font NMKOGF+AdvP4C4E74\r\nMar 30, 2016 12:31:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (4) in font NMKOGF+AdvP4C4E74\r\nMar 30, 2016 12:31:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font NMKOGG+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font MCMDMM+AdvP4C4E74\r\nMar 30, 2016 12:31:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (1) in font MCMHLL+MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font HOFAIF+AdvP4C4E74\r\nMar 30, 2016 12:31:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (1) in font HOHDJO+MathPackTen\r\nMar 30, 2016 12:31:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HOFAIF+AdvP4C4E74\r\nMar 30, 2016 12:31:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (2) in font HOHDJO+MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font OHGIMH+AdvP4C4E74\r\nMar 30, 2016 12:31:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font OHGIMH+AdvP4C4E74\r\nMar 30, 2016 12:31:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (1) in font OHGKIA+AdvPSSym\r\nMar 30, 2016 12:31:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font OHKFIH+AdvP4C4E59\r\nMar 30, 2016 12:31:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (3) in font OHKFIH+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (1) in font JODGML+AdvP4C4E59\r\nMar 30, 2016 12:31:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font JODGML+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (1) in font CGKOOC+AdvP4C4E59\r\nMar 30, 2016 12:31:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font CGKPAO+AdvP4C4E74\r\nMar 30, 2016 12:31:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font CGKPAO+AdvP4C4E74\r\nMar 30, 2016 12:31:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (2) in font CGKOPJ+AdvPSSym\r\nMar 30, 2016 12:31:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (4) in font CGKPAO+AdvP4C4E74\r\nMar 30, 2016 12:31:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font CGKOOC+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font NMKOGF+AdvP4C4E74\r\nMar 30, 2016 12:31:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font NMKOGG+AdvPSSym\r\nMar 30, 2016 12:31:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (2) in font NMLBIH+AdvPSMSAM10\r\nMar 30, 2016 12:31:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font NMKOGF+AdvP4C4E74\r\nMar 30, 2016 12:31:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (4) in font NMKOGF+AdvP4C4E74\r\nMar 30, 2016 12:31:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font NMKOGG+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font PKHKJH+OnemtmiguAAAA\r\nMar 30, 2016 12:31:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font PKIMPE+MATHG-1A\r\nMar 30, 2016 12:31:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font PKIMPE+MATHG-1A\r\nMar 30, 2016 12:31:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (4) in font PKIMPE+MATHG-1A\r\nMar 30, 2016 12:31:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font PKHKOG+MTSY\r\nMar 30, 2016 12:31:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font PKIMPE+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font AOACDM+AdvP4C4E74\r\nMar 30, 2016 12:31:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font AOACDM+AdvP4C4E74\r\nMar 30, 2016 12:31:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font AOACDM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font AdvP4C4E74\r\nMar 30, 2016 12:31:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font AdvPSSym\r\nMar 30, 2016 12:31:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font LJGJEP+AdvP4C4E74\r\nMar 30, 2016 12:31:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font LJGJFA+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font DGPKDJ+AdvP4C4E74\r\nMar 30, 2016 12:31:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font DGPKDJ+AdvP4C4E74\r\nMar 30, 2016 12:31:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font DGPKDJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font LNDKGG+AdvP4C4E74\r\nMar 30, 2016 12:31:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font LNDKGG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:31:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:31:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font NEKIAM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font NNJKJA+MATHG-1A\r\nMar 30, 2016 12:31:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font NNJIJJ+MTSY\r\nMar 30, 2016 12:31:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for SOH (2) in font NNJIIJ+OnemtmiguAAAA\r\nMar 30, 2016 12:31:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font NNJKJA+MATHG-1A\r\nMar 30, 2016 12:31:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font NNJKJA+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font EIHADJ+MathPackTen\r\nMar 30, 2016 12:31:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11003 (1) in font EIHFFA+MathematicalPi-One\r\nMar 30, 2016 12:31:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font EIFMBB+AdvP4C4E74\r\nMar 30, 2016 12:31:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font EIFMBB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font GDENMI+AdvP4C4E74\r\nMar 30, 2016 12:31:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font GDENNJ+AdvPSSym\r\nMar 30, 2016 12:31:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font GDENNJ+AdvPSSym\r\nMar 30, 2016 12:31:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GDENMI+AdvP4C4E74\r\nMar 30, 2016 12:31:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (2) in font GDFALL+AdvP4C4E46\r\nMar 30, 2016 12:31:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font GDFALL+AdvP4C4E46\r\nMar 30, 2016 12:31:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (4) in font GDENMI+AdvP4C4E74\r\nMar 30, 2016 12:31:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (5) in font GDENMI+AdvP4C4E74\r\nMar 30, 2016 12:31:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C16 (4) in font GDFALL+AdvP4C4E46\r\nMar 30, 2016 12:31:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C17 (5) in font GDFALL+AdvP4C4E46\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font DAAPIH+AdvP4C4E74\r\nMar 30, 2016 12:31:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font DAAPIH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font OBJDBM+MATHG-1A\r\nMar 30, 2016 12:31:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font OBJDBM+MATHG-1A\r\nMar 30, 2016 12:31:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font OBJDBM+MATHG-1A\r\nMar 30, 2016 12:31:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font OBJAFK+MTSY\r\nMar 30, 2016 12:31:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font OBJDBM+MATHG-1A\r\nMar 30, 2016 12:31:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (2) in font OBJACL+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17039 (1) in font MathematicalPi-Six\r\nMar 30, 2016 12:31:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17033 (2) in font MathematicalPi-Six\r\nMar 30, 2016 12:31:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17009._ (3) in font MathematicalPi-Six\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font SWOJAU+SwkbyyAdvPSSym\r\nMar 30, 2016 12:31:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font LBOQRJ+LcpqrjAdvP4C4E74\r\nMar 30, 2016 12:31:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font SWOJAU+SwkbyyAdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font FCHOGM+MathPackTen\r\nMar 30, 2016 12:31:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font FCOMCG+AdvP4C4E74\r\nMar 30, 2016 12:31:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font FCOMCG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (1) in font EHCFAF+AdvP4C4E51\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font KGJNMI+AdvP4C4E74\r\nMar 30, 2016 12:31:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font KGJNMI+AdvP4C4E74\r\nMar 30, 2016 12:31:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (4) in font KGJNMI+AdvP4C4E74\r\nMar 30, 2016 12:31:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (5) in font KGJNMI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font PJIIIA+MATHG-1A\r\nMar 30, 2016 12:31:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font PJIIIA+MATHG-1A\r\nMar 30, 2016 12:31:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (4) in font PJIIIA+MATHG-1A\r\nMar 30, 2016 12:31:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (5) in font PJIIIA+MATHG-1A\r\nMar 30, 2016 12:31:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (6) in font PJIIIA+MATHG-1A\r\nMar 30, 2016 12:31:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (6) in font PJHFBL+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MPGHBO+AdvT042\r\nMar 30, 2016 12:31:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font MPGLBI+AdvP4C4E74\r\nMar 30, 2016 12:31:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font MPGLBI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font EFHBAE+AdvMacms\r\nMar 30, 2016 12:31:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font EFHBAG+AdvP4C4E74\r\nMar 30, 2016 12:31:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font EFHBAG+AdvP4C4E74\r\nMar 30, 2016 12:31:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font EFHBAG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font NINKCJ+AdvP4C4E74\r\nMar 30, 2016 12:31:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font NINKEB+AdvPSSym\r\nMar 30, 2016 12:31:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font NINKCJ+AdvP4C4E74\r\nMar 30, 2016 12:31:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (4) in font NINKCJ+AdvP4C4E74\r\nMar 30, 2016 12:31:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font NINKCJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font KGBEHB+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:31:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:57 PM org.apache.fontbox.ttf.CmapSubtable processSubtype14\r\nWARNING: Format 14 cmap table is not supported and will be ignored\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:31:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font IKDNAB+AdvP4C4E74\r\nMar 30, 2016 12:31:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font IKDNAB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font CJFDBJ+AdvP4C4E74\r\nMar 30, 2016 12:32:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font CJFDBJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:05 PM org.apache.fontbox.ttf.CmapSubtable processSubtype4\r\nWARNING: cmap format 4 subtable is empty\r\nMar 30, 2016 12:32:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for .notdef (31) in font EINBIJ+TimesNewRoman\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font KLEOKK+AdvT001\r\nMar 30, 2016 12:32:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font KLEOMK+AdvMT_SY\r\nMar 30, 2016 12:32:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C213 (3) in font KLEOKK+AdvT001\r\nMar 30, 2016 12:32:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font KLEOMK+AdvMT_SY\r\nMar 30, 2016 12:32:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font KLEOMK+AdvMT_SY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:07 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Could not read embedded TTF for font WDUSZW+SimSun\r\njava.io.IOException: glyf is mandatory\r\n\tat org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:211)\r\n\tat org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:150)\r\n\tat org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:106)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:178)\r\n\tat org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:75)\r\n\tat org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:123)\r\n\tat org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)\r\n\tat org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:136)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)\r\n\tat org.apache.pdfbox.tools.ExtractText.startExtraction(ExtractText.java:231)\r\n\tat org.apache.pdfbox.tools.ExtractText.main(ExtractText.java:81)\r\n\tat org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:60)\r\n\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font LucidaNewMath-Symbol\r\nMar 30, 2016 12:32:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for greaterdblequal (2) in font MSAM10\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font JODBEK+AdvPSSym\r\nMar 30, 2016 12:32:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font JODBHA+AdvP4C4E74\r\nMar 30, 2016 12:32:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font JODBHA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font LucidaNewMath-Symbol\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font FOBKOH+AdvPSSym\r\nMar 30, 2016 12:32:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (1) in font FOBLAJ+AdvP4C4E74\r\nMar 30, 2016 12:32:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font FOBLAJ+AdvP4C4E74\r\nMar 30, 2016 12:32:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font FOBLAJ+AdvP4C4E74\r\nMar 30, 2016 12:32:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font FOBLAJ+AdvP4C4E74\r\nMar 30, 2016 12:32:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font FODAMM+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (1) in font OPKDMM+AdvP4C4E74\r\nMar 30, 2016 12:32:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font OPKDMM+AdvP4C4E74\r\nMar 30, 2016 12:32:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font OPKDMM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font JOANPB+AdvPSSym\r\nMar 30, 2016 12:32:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font JOANPB+AdvPSSym\r\nMar 30, 2016 12:32:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font JOBFBI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font FNLBCH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font KCFKNA+MATHG-1A\r\nMar 30, 2016 12:32:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font KCFKNA+MATHG-1A\r\nMar 30, 2016 12:32:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font KCFKLN+MTSY\r\nMar 30, 2016 12:32:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font KCFKLM+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font JDJBNI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font LIIFJA+AdvMacMthSyN\r\nMar 30, 2016 12:32:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font LIIFJA+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9254 (2) in font LKDNLP+MathematicalPi-One\r\nMar 30, 2016 12:32:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for squaresolid (2) in font LKDNMA+AMsam10A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font MathPackThirteen\r\nMar 30, 2016 12:32:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (1) in font MathPackTen\r\nMar 30, 2016 12:32:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (2) in font MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11021 (2) in font BGEBGF+MathematicalPi-One\r\nMar 30, 2016 12:32:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (3) in font BGEBGF+MathematicalPi-One\r\nMar 30, 2016 12:32:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (4) in font BGEBGF+MathematicalPi-One\r\nMar 30, 2016 12:32:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11022 (5) in font BGEBGF+MathematicalPi-One\r\nMar 30, 2016 12:32:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11005 (6) in font BGEBGF+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:32:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:32:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:32:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font AdvPSSym\r\nMar 30, 2016 12:32:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C160 (2) in font AdvPSMP1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font LDKMAH+MathematicalPi-Four\r\nMar 30, 2016 12:32:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font LDKMAH+MathematicalPi-Four\r\nMar 30, 2016 12:32:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11554 (4) in font LDKMAH+MathematicalPi-Four\r\nMar 30, 2016 12:32:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font LDKMBK+MathematicalPi-One\r\nMar 30, 2016 12:32:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font LDKMBK+MathematicalPi-One\r\nMar 30, 2016 12:32:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font LDKMBK+MathematicalPi-One\r\nMar 30, 2016 12:32:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for L50128 (2) in font LDKNGF+EuropeanPi-Four\r\nMar 30, 2016 12:32:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11541 (5) in font LDKMAH+MathematicalPi-Four\r\nMar 30, 2016 12:32:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font LDKMBK+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:32:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:32:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font NKFMHM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font ADDHAB+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font HKFNKK+MATHG-1A\r\nMar 30, 2016 12:32:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font HKFOCO+MTSY\r\nMar 30, 2016 12:32:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font HKFNKK+MATHG-1A\r\nMar 30, 2016 12:32:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font HKFNKK+MATHG-1A\r\nMar 30, 2016 12:32:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font HKFNKK+MATHG-1A\r\nMar 30, 2016 12:32:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font HKGFMA+Gmath4-4A\r\nMar 30, 2016 12:32:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font HKFOBM+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font CHLDAE+AdvMacMthSyN\r\nMar 30, 2016 12:32:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font CHLDAE+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:43 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Could not read embedded TTF for font BKMIGM+SimSun\r\njava.io.IOException: glyf is mandatory\r\n\tat org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:211)\r\n\tat org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:150)\r\n\tat org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:106)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:178)\r\n\tat org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:75)\r\n\tat org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:123)\r\n\tat org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)\r\n\tat org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:136)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)\r\n\tat org.apache.pdfbox.tools.ExtractText.startExtraction(ExtractText.java:231)\r\n\tat org.apache.pdfbox.tools.ExtractText.main(ExtractText.java:81)\r\n\tat org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:60)\r\n\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:49 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Could not read embedded TTF for font AIVFWI+SimSun\r\njava.io.IOException: glyf is mandatory\r\n\tat org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:211)\r\n\tat org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:150)\r\n\tat org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:106)\r\n\tat org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:178)\r\n\tat org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:75)\r\n\tat org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:123)\r\n\tat org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)\r\n\tat org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)\r\n\tat org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:136)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)\r\n\tat org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)\r\n\tat org.apache.pdfbox.tools.ExtractText.startExtraction(ExtractText.java:231)\r\n\tat org.apache.pdfbox.tools.ExtractText.main(ExtractText.java:81)\r\n\tat org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:60)\r\n\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:32:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font LucidaNewMath-Symbol\r\nMar 30, 2016 12:32:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Yen (2) in font MSAM7\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font BHBGKI+MATHG-1A\r\nMar 30, 2016 12:33:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font BHBGKI+MATHG-1A\r\nMar 30, 2016 12:33:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font BHBGKI+MATHG-1A\r\nMar 30, 2016 12:33:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font BHBGKI+MATHG-1A\r\nMar 30, 2016 12:33:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font BHBGLJ+MTSY\r\nMar 30, 2016 12:33:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (2) in font BHBGKJ+OnemtmiguAAAA\r\nMar 30, 2016 12:33:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font BHBGKI+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font FGJMGI+MATHG-1A\r\nMar 30, 2016 12:33:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font FGJMGI+MATHG-1A\r\nMar 30, 2016 12:33:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font FGJMGI+MATHG-1A\r\nMar 30, 2016 12:33:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (5) in font FGJMGI+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (2) in font BLHKIA+AdvPSSym\r\nMar 30, 2016 12:33:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font BLJDEP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for .notdef (31) in font MMMFNM+Calibri\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font MAGGOJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font CCJDMG+AdvPSSym\r\nMar 30, 2016 12:33:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font CCJDMG+AdvPSSym\r\n']
['Warning PDFBox', "Mar 30, 2016 12:33:12 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Using fallback font 'ArialMT' for 'MalgunGothicRegular'\r\n"]
['Warning PDFBox', 'Mar 30, 2016 12:33:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (1) in font JEGKFP+AdvP4C4E74\r\nMar 30, 2016 12:33:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font JEGKFP+AdvP4C4E74\r\nMar 30, 2016 12:33:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (4) in font JEGKFP+AdvP4C4E74\r\nMar 30, 2016 12:33:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (5) in font JEGKFP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font HKOALN+MATHG-1A\r\nMar 30, 2016 12:33:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font HKOALN+MATHG-1A\r\nMar 30, 2016 12:33:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font HKOALN+MATHG-1A\r\nMar 30, 2016 12:33:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (5) in font HKOAKL+MTSY\r\nMar 30, 2016 12:33:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (5) in font HKOALN+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font LEEJAJ+AdvPSSym\r\nMar 30, 2016 12:33:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font LEEJAJ+AdvPSSym\r\nMar 30, 2016 12:33:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font LEEJOH+AdvP4C4E74\r\nMar 30, 2016 12:33:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font LEEJOH+AdvP4C4E74\r\nMar 30, 2016 12:33:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (4) in font LEEJOH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font CBABIO+MATHG-1A\r\nMar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font CBABIO+MATHG-1A\r\nMar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font CBABIO+MATHG-1A\r\nMar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (5) in font CBABIO+MATHG-1A\r\nMar 30, 2016 12:33:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font CBABMP+OnemtmiguAAAA\r\nMar 30, 2016 12:33:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (3) in font CBABMP+OnemtmiguAAAA\r\nMar 30, 2016 12:33:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for NAK (4) in font CBABMP+OnemtmiguAAAA\r\nMar 30, 2016 12:33:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font CBABIO+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font IKINID+AdvT001\r\nMar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font IKINKE+AdvMT_SY\r\nMar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (3) in font IKINKE+AdvMT_SY\r\nMar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font IKINKE+AdvMT_SY\r\nMar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (5) in font IKINKE+AdvMT_SY\r\nMar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (6) in font IKINKE+AdvMT_SY\r\nMar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (7) in font IKINKE+AdvMT_SY\r\nMar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C213 (3) in font IKINID+AdvT001\r\nMar 30, 2016 12:33:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font IKINOG+AdvMT_RM\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font OFBNBB+AdvP4C4E74\r\nMar 30, 2016 12:33:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font OFBNCB+AdvPSSym\r\nMar 30, 2016 12:33:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C22 (2) in font OFBMLB+AdvP4C4E59\r\nMar 30, 2016 12:33:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font OFBMLB+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (1) in font HPIAFB+AdvP4C4E74\r\nMar 30, 2016 12:33:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font HPIAFB+AdvP4C4E74\r\nMar 30, 2016 12:33:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font HPIAFB+AdvP4C4E74\r\nMar 30, 2016 12:33:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font HPIAFB+AdvP4C4E74\r\nMar 30, 2016 12:33:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (6) in font HPIAFB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (1) in font FENFFG+AdvP4C4E74\r\nMar 30, 2016 12:33:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font FENFFG+AdvP4C4E74\r\nMar 30, 2016 12:33:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font FENFFG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font NLEHHB+AdvP4C4E74\r\nMar 30, 2016 12:33:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font NLFCCB+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:30 PM org.apache.fontbox.ttf.CmapSubtable processSubtype4\r\nWARNING: cmap format 4 subtable is empty\r\nMar 30, 2016 12:33:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for .notdef (31) in font NKAEGO+Arial\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font KAOHID+AdvPSSym\r\nMar 30, 2016 12:33:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font KAOIPM+AdvP4C4E74\r\nMar 30, 2016 12:33:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font KAOHID+AdvPSSym\r\nMar 30, 2016 12:33:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font KAOIPM+AdvP4C4E74\r\nMar 30, 2016 12:33:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (4) in font KAOIPM+AdvP4C4E74\r\nMar 30, 2016 12:33:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (5) in font KAOIPM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (2) in font CFFIEO+AdvP4C4E74\r\nMar 30, 2016 12:33:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font CFFIGB+AdvPSSym\r\nMar 30, 2016 12:33:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C212 (3) in font CFFIGB+AdvPSSym\r\nMar 30, 2016 12:33:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font CFFIGB+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AKHLEK+AdvPSSym\r\nMar 30, 2016 12:33:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AKHLEK+AdvPSSym\r\nMar 30, 2016 12:33:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font AKHNPO+AdvP4C4E74\r\nMar 30, 2016 12:33:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font AKHNPO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font BKPGIF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font DMHOCH+AdvP4C4E74\r\nMar 30, 2016 12:33:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font DMHOCH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font LECADB+AdvP4C4E74\r\nMar 30, 2016 12:33:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font LECADB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:33:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font POHGDA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:33:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font ACMPFI+MATHG-1A\r\nMar 30, 2016 12:33:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font ACMPFI+MATHG-1A\r\nMar 30, 2016 12:33:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font ACMPFI+MATHG-1A\r\nMar 30, 2016 12:33:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font ACMNGC+MTSY\r\nMar 30, 2016 12:33:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for EM (2) in font ACMNGB+OnemtmiguAAAA\r\nMar 30, 2016 12:33:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font ACMPFI+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font CNPAMM+AdvP4C4E74\r\nMar 30, 2016 12:34:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font CNPAMM+AdvP4C4E74\r\nMar 30, 2016 12:34:02 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+415 (415) in font CNPEMK+Calibri-Italic\r\nMar 30, 2016 12:34:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font CNPFCL+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font BGKBJL+MATHG-1A\r\nMar 30, 2016 12:34:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font BGKBIK+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font INEOGB+AdvT377\r\nMar 30, 2016 12:34:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font INEONE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font GOLMDM+AdvPSSym\r\nMar 30, 2016 12:34:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font GOLMEN+AdvP4C4E74\r\nMar 30, 2016 12:34:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font GOLMDM+AdvPSSym\r\nMar 30, 2016 12:34:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GOLMEN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font EPKCIE+AdvP4C4E59\r\nMar 30, 2016 12:34:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font EPKCIG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (2) in font NIKEHJ+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for GEA (1) in font CGLDKG+MSTT31c716\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font ELCCNA+AdvPSSym\r\nMar 30, 2016 12:34:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font ELCCOC+AdvP4C4E74\r\nMar 30, 2016 12:34:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font ELCCOC+AdvP4C4E74\r\nMar 30, 2016 12:34:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font ELCCOC+AdvP4C4E74\r\nMar 30, 2016 12:34:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font ELCCOC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (1) in font NLFPFO+AdvP4C4E74\r\nMar 30, 2016 12:34:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font NLFPFO+AdvP4C4E74\r\nMar 30, 2016 12:34:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font NLFPFO+AdvP4C4E74\r\nMar 30, 2016 12:34:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C212 (1) in font NLFPKE+AdvPSSym\r\nMar 30, 2016 12:34:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font NLFPFO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (2) in font FOALCJ+AdvPSSym\r\nMar 30, 2016 12:34:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (1) in font FOALDO+AdvP4C4E74\r\nMar 30, 2016 12:34:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font FOALDO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (1) in font PHNMMG+AdvP4C4E74\r\nMar 30, 2016 12:34:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font PHNMMG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font LQSSEN+AdvPSSym\r\nMar 30, 2016 12:34:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font YUDQBJ+AdvP4C4E74\r\nMar 30, 2016 12:34:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font LQSSEN+AdvPSSym\r\nMar 30, 2016 12:34:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font LQSSEN+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font IOLKGC+AdvP4C4E74\r\nMar 30, 2016 12:34:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font IOLKGC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font ONCONK+AdvMacMthSy\r\nMar 30, 2016 12:34:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font ONCONK+AdvMacMthSy\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font KMOJLK+AdvT001\r\nMar 30, 2016 12:34:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font KMOJNN+AdvMT_SY\r\nMar 30, 2016 12:34:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font KMOJNN+AdvMT_SY\r\nMar 30, 2016 12:34:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font KMOJNN+AdvMT_SY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font BGLEJP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font OFPIKC+Calibri\r\nMar 30, 2016 12:34:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font OFPILD+Calibri-Bold\r\nMar 30, 2016 12:34:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g882 (3) in font OFPIKC+Calibri\r\nMar 30, 2016 12:34:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font OFPJCC+Calibri-Italic\r\nMar 30, 2016 12:34:38 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+3 (3) in font ArialUnicodeMS-KSCms-UHC-H-Identity-H\r\nMar 30, 2016 12:34:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g69 (2) in font OFPKHM+SymbolMT\r\nMar 30, 2016 12:34:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g39 (3) in font OFPKHM+SymbolMT\r\nMar 30, 2016 12:34:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g628 (4) in font OFPIKC+Calibri\r\nMar 30, 2016 12:34:39 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+68 (68) in font ArialUnicodeMS-KSCms-UHC-H-Identity-H\r\nMar 30, 2016 12:34:39 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+15 (15) in font ArialUnicodeMS-KSCms-UHC-H-Identity-H\r\nMar 30, 2016 12:34:39 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+69 (69) in font ArialUnicodeMS-KSCms-UHC-H-Identity-H\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OCDIDM+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font DBDOBK+AdvPSSym\r\nMar 30, 2016 12:34:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font DBDOPI+AdvP4C4E74\r\nMar 30, 2016 12:34:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font DBDOBK+AdvPSSym\r\nMar 30, 2016 12:34:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font DBDOBK+AdvPSSym\r\nMar 30, 2016 12:34:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font DBDOPI+AdvP4C4E74\r\nMar 30, 2016 12:34:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font DBDOPI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C71 (71) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (108) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (117) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (116) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (104) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (105) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (111) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (110) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (115) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C45 (45) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (100) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (99) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (114) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (103) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C89 (89) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C79 (79) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C59 (59) in font GMANBE+AdvP4C4E51\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (98) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C44 (44) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C84 (84) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (121) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C74 (74) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C83 (83) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (102) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (77) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (46) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C42 (42) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C75 (75) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (114) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (115) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (103) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C72 (72) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (105) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (110) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C82 (82) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (99) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (104) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (73) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (116) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (117) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C44 (44) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C85 (85) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C118 (118) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (121) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (111) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (102) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (77) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C49 (49) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (51) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C48 (48) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C69 (69) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (65) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C83 (83) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (98) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C52 (52) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C56 (56) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C57 (57) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C45 (45) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C53 (53) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (54) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (68) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C112 (112) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C79 (79) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (108) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (107) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (100) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C67 (67) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C84 (84) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C74 (74) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C55 (55) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C66 (66) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C82 (82) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C118 (118) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C49 (49) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C53 (53) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C57 (57) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C59 (59) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C112 (112) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (50) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C52 (52) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (65) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C48 (48) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (65) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (98) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (115) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (116) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (114) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (99) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C120 (120) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C40 (40) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C41 (41) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C78 (78) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (73) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C72 (72) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C76 (76) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (119) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C80 (80) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (107) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C122 (122) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C66 (66) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (51) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C55 (55) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C37 (37) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C106 (106) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C47 (47) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C67 (67) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C69 (69) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C56 (56) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (54) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C113 (113) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (223) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C86 (86) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (119) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C58 (58) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (68) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C49 (49) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (46) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (73) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (110) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (111) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (100) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (117) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (105) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C162 (162) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C58 (58) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C96 (96) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C39 (39) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C163 (163) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C36 (36) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C94 (94) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C43 (43) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C70 (70) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C64 (64) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (119) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (46) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (108) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (115) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C118 (118) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (105) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (114) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (99) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (111) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C47 (47) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (116) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (104) in font GMBMLK+AdvTimes\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C81 (81) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C161 (161) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C168 (168) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C85 (85) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C87 (87) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (50) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (77) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (108) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (104) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (50) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (46) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C120 (120) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (51) in font GMCAKE+Advcap009\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C89 (89) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C47 (47) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C40 (40) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C41 (41) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C94 (94) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C78 (78) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C75 (75) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C71 (71) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C88 (88) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C80 (80) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (54) in font GMCEIO+Advcap005\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (51) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C82 (82) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C87 (87) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C162 (162) in font GMANBG+Advm1046c\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C254 (254) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C61 (61) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C52 (52) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (68) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (107) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (119) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (103) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (102) in font GMANBI+Advm1046e\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C90 (90) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C164 (164) in font GMANBC+Advm1046a\r\nMar 30, 2016 12:34:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C171 (171) in font GMANBC+Advm1046a\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font PIKNDM+AdvP4C4E74\r\nMar 30, 2016 12:34:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font PIKNDM+AdvP4C4E74\r\nMar 30, 2016 12:34:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C4 (4) in font PIKNDM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font LDHMNC+AdvMacMthSy\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (3) in font PHOOCI+RMTMI\r\nMar 30, 2016 12:34:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (5) in font PHOOBE+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font EJIOOO+AdvP4C4E74\r\nMar 30, 2016 12:34:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font EJIOOP+AdvMacms\r\nMar 30, 2016 12:34:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font EJIOOO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font FCPHEO+AdvPSSym\r\nMar 30, 2016 12:34:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font FCPHGB+AdvP4C4E74\r\nMar 30, 2016 12:34:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font FCPHEO+AdvPSSym\r\nMar 30, 2016 12:34:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font FCPHGB+AdvP4C4E74\r\nMar 30, 2016 12:34:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font FCPHGB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font DEIIBN+AdvP4C4E74\r\nMar 30, 2016 12:34:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font DEIIBO+AdvPSSym\r\nMar 30, 2016 12:34:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font DEIIBN+AdvP4C4E74\r\nMar 30, 2016 12:34:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font DEIIAE+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font JNOOOB+MATHG-1A\r\nMar 30, 2016 12:34:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font JNOOOB+MATHG-1A\r\nMar 30, 2016 12:34:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font JNOOOB+MATHG-1A\r\nMar 30, 2016 12:34:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (5) in font JNOOOB+MATHG-1A\r\nMar 30, 2016 12:34:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font JNOOLN+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MAENFG+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font EHKAKN+AdvP4C4E59\r\nMar 30, 2016 12:34:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font EHKAKM+AdvP4C4E74\r\nMar 30, 2016 12:34:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font EHKAKM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:34:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font GCOHDJ+AdvPSSym\r\nMar 30, 2016 12:34:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font GCOHDJ+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font BEBJGG+AdvP4C4E74\r\nMar 30, 2016 12:35:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font BEBJGG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font DCHPLO+AdvMacms\r\nMar 30, 2016 12:35:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font DCHPMA+AdvP4C4E74\r\nMar 30, 2016 12:35:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font DCHPMA+AdvP4C4E74\r\nMar 30, 2016 12:35:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font DCHPMA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (1) in font OHNAFE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:35:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11541 (1) in font OHNAHI+Universal-NewswithCommPi\r\nMar 30, 2016 12:35:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (2) in font OHNAFE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:35:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (3) in font OHNAFE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:35:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font OHNAFE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:35:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11003 (5) in font OHNAFE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:35:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font OHNAFE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:35:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (7) in font OHNAFE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:35:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (8) in font OHNAFE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:35:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (9) in font OHNAFE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:35:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (10) in font OHNAFE+Universal-GreekwithMathPi\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font BCMABL+AdvPSSym\r\nMar 30, 2016 12:35:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font BCMABL+AdvPSSym\r\nMar 30, 2016 12:35:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font BCMCLN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:35:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (1) in font FCJMKE+AdvP4C4E59\r\nMar 30, 2016 12:35:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (2) in font FCJMMJ+AdvPSSym\r\nMar 30, 2016 12:35:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font FCJMKE+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font HNIFLF+AdvP4C4E74\r\nMar 30, 2016 12:35:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font HNIFLF+AdvP4C4E74\r\nMar 30, 2016 12:35:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (4) in font HNIFLF+AdvP4C4E74\r\nMar 30, 2016 12:35:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font HNJCAJ+AdvP4C4E59\r\nMar 30, 2016 12:35:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font HNJCBK+AdvSPSASORT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font JEMKNK+AdvPSSym\r\nMar 30, 2016 12:35:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font JEMKNK+AdvPSSym\r\nMar 30, 2016 12:35:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font JEMKNK+AdvPSSym\r\nMar 30, 2016 12:35:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font JEMOMD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font MMJLLJ+AdvP4C4E74\r\nMar 30, 2016 12:35:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font MMJLLJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C16 (1) in font HPFFAF+AdvP4C4E46\r\nMar 30, 2016 12:35:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C17 (3) in font HPFFAF+AdvP4C4E46\r\nMar 30, 2016 12:35:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HPFFAD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font IMEJKJ+AdvT001\r\nMar 30, 2016 12:35:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font IMEJLL+AdvMT_SY\r\nMar 30, 2016 12:35:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font IMEJLL+AdvMT_SY\r\nMar 30, 2016 12:35:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C213 (3) in font IMEJKJ+AdvT001\r\nMar 30, 2016 12:35:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font IMEJLL+AdvMT_SY\r\nMar 30, 2016 12:35:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (5) in font IMEJLL+AdvMT_SY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font PIDCKL+AdvPSSym\r\nMar 30, 2016 12:35:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font PIDEIC+AdvP4C4E74\r\nMar 30, 2016 12:35:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font PIDCKL+AdvPSSym\r\nMar 30, 2016 12:35:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font PIDEIC+AdvP4C4E74\r\nMar 30, 2016 12:35:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font PIDEIC+AdvP4C4E74\r\nMar 30, 2016 12:35:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font PIDCKL+AdvPSSym\r\nMar 30, 2016 12:35:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (5) in font PIDEIC+AdvP4C4E74\r\nMar 30, 2016 12:35:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C160 (2) in font PIDHGB+AdvPSMP1\r\nMar 30, 2016 12:35:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C224 (3) in font PIDHGB+AdvPSMP1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:20 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2 <init>\r\nWARNING: Using fallback font MingLiU-ExtB for CID-keyed TrueType font PMingLiU\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font MCMDMM+AdvP4C4E74\r\nMar 30, 2016 12:35:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (1) in font MCMHLL+MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font MNCFBG+AdvP4C4E74\r\nMar 30, 2016 12:35:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font MNCFBG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font HLLCIA+AdvP4C4E74\r\nMar 30, 2016 12:35:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font HLLCIA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font OMEPHK+AdvPSSym\r\nMar 30, 2016 12:35:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font OMEPIM+AdvP4C4E74\r\nMar 30, 2016 12:35:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font OMEPHK+AdvPSSym\r\nMar 30, 2016 12:35:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font OMEPIM+AdvP4C4E74\r\nMar 30, 2016 12:35:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font OMEPHK+AdvPSSym\r\nMar 30, 2016 12:35:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (4) in font OMEPIM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font ENMPPF+AdvMacms\r\nMar 30, 2016 12:35:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font ENMPPH+AdvP4C4E74\r\nMar 30, 2016 12:35:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font ENMPPH+AdvP4C4E74\r\nMar 30, 2016 12:35:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font ENMPPH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font IFBHIL+AdvP4C4E74\r\nMar 30, 2016 12:35:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font IFBHIL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font JLLCGN+AdvP4C4E74\r\nMar 30, 2016 12:35:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font JLLCGN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font IJLFGB+AdvP4C4E74\r\nMar 30, 2016 12:35:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font IJLFGB+AdvP4C4E74\r\nMar 30, 2016 12:35:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font IJLFGB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font BKNFBA+AdvT042\r\nMar 30, 2016 12:35:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font BKNKCD+AdvP4C4E74\r\nMar 30, 2016 12:35:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font BKNKCD+AdvP4C4E74\r\nMar 30, 2016 12:35:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (4) in font BKNKCD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:35:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:35:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:35:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font LNIDFM+AdvP4C4E74\r\nMar 30, 2016 12:35:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font LNIDFM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font DJGKOC+AdvP4C4E74\r\nMar 30, 2016 12:35:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font DJGKOC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (2) in font AHECHJ+AdvPSSym\r\nMar 30, 2016 12:35:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font AHEOMP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font AdvPSSym\r\nMar 30, 2016 12:35:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (2) in font AdvPSSym\r\nMar 30, 2016 12:35:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:35:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font AdvP4C4E74\r\nMar 30, 2016 12:35:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C228 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font GPCGOP+AdvPSSym\r\nMar 30, 2016 12:35:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font GPCKIK+AdvP4C4E74\r\nMar 30, 2016 12:35:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font GPCGOP+AdvPSSym\r\nMar 30, 2016 12:35:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (3) in font GPCKIK+AdvP4C4E74\r\nMar 30, 2016 12:35:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font GPCKIK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:35:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font CGNHHK+AdvMacMthSyN\r\nMar 30, 2016 12:35:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (3) in font CGNHHK+AdvMacMthSyN\r\nMar 30, 2016 12:35:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (4) in font CGNHHK+AdvMacMthSyN\r\nMar 30, 2016 12:35:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (5) in font CGNHHK+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font LNOLBP+AdvPSSym\r\nMar 30, 2016 12:36:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font LNOLBP+AdvPSSym\r\nMar 30, 2016 12:36:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font LNOLBP+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (2) in font EDGBMJ+AdvMacms\r\nMar 30, 2016 12:36:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font EDFOLK+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font DCDJKD+AdvMacMthSyN\r\nMar 30, 2016 12:36:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font DCDJKD+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (2) in font JAKCKB+AdvP4C4E74\r\nMar 30, 2016 12:36:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font JAKCKB+AdvP4C4E74\r\nMar 30, 2016 12:36:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (4) in font JAKCKB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font OJPJJI+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font PIDCKL+AdvPSSym\r\nMar 30, 2016 12:36:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font PIDEIC+AdvP4C4E74\r\nMar 30, 2016 12:36:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font PIDCKL+AdvPSSym\r\nMar 30, 2016 12:36:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font PIDEIC+AdvP4C4E74\r\nMar 30, 2016 12:36:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font PIDEIC+AdvP4C4E74\r\nMar 30, 2016 12:36:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font PIDCKL+AdvPSSym\r\nMar 30, 2016 12:36:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (5) in font PIDEIC+AdvP4C4E74\r\nMar 30, 2016 12:36:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C160 (2) in font PIDHGB+AdvPSMP1\r\nMar 30, 2016 12:36:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C224 (3) in font PIDHGB+AdvPSMP1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font NJOBND+AdvP4C4E74\r\nMar 30, 2016 12:36:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font NJOBND+AdvP4C4E74\r\nMar 30, 2016 12:36:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font NJOBND+AdvP4C4E74\r\nMar 30, 2016 12:36:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font NJOHGF+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font MathPackThirteen\r\nMar 30, 2016 12:36:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (1) in font MathPackTen\r\nMar 30, 2016 12:36:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (2) in font MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font INGMDA+AdvMacms\r\nMar 30, 2016 12:36:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font INGMDC+AdvP4C4E74\r\nMar 30, 2016 12:36:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font INGMDC+AdvP4C4E74\r\nMar 30, 2016 12:36:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font INGMDC+AdvP4C4E74\r\nMar 30, 2016 12:36:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font INGMDC+AdvP4C4E74\r\nMar 30, 2016 12:36:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (5) in font INGMDC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFFMI+EdiF-uxykqGc1VrnCIj-008\r\nMar 30, 2016 12:36:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFGCK+EdiF-uxykqGc1VrnCIj-00A\r\nMar 30, 2016 12:36:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFGGL+EdiF-uxykqGc1VrnCIj-009\r\nMar 30, 2016 12:36:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFGIM+EdiF-uxykqGc1VrnCIj-00S\r\nMar 30, 2016 12:36:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFGKM+EdiF-uxykqGc1VrnCIj-00T\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFHBM+EdiF-uxykqGc1VrnCIj-00j\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFHLM+EdiF-uxykqGc1VrnCIj-00k\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFICL+EdiF-uxykqGc1VrnCIj-00v\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFIGK+EdiF-uxykqGc1VrnCIj-00w\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFIMJ+EdiF-uxykqGc1VrnCIj-010\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFMAK+EdiF-uxykqGc1VrnCIj-011\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFMEK+EdiF-uxykqGc1VrnCIj-01C\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFMEL+EdiF-uxykqGc1VrnCIj-01D\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFNGF+EdiF-uxykqGc1VrnCIj-01M\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFNND+EdiF-uxykqGc1VrnCIj-01N\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFOFB+EdiF-uxykqGc1VrnCIj-01U\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODGAAO+EdiF-uxykqGc1VrnCIj-01g\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODGBFI+EdiF-uxykqGc1VrnCIj-01q\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODGBPF+EdiF-uxykqGc1VrnCIj-01r\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODGCLC+EdiF-uxykqGc1VrnCIj-01@\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODGCOC+EdiF-uxykqGc1VrnCIj-01$\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (1) in font HFDKDM+AdvP4C4E74\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font HFDKEO+AdvPSSym\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font HFDKDM+AdvP4C4E74\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font HFDKDM+AdvP4C4E74\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (5) in font HFDKDM+AdvP4C4E74\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C212 (3) in font HFDKEO+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFFMI+EdiF-uxykqGc1VrnCIj-008\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFGCK+EdiF-uxykqGc1VrnCIj-00A\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFGGL+EdiF-uxykqGc1VrnCIj-009\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFGIM+EdiF-uxykqGc1VrnCIj-00S\r\nMar 30, 2016 12:36:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFGKM+EdiF-uxykqGc1VrnCIj-00T\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFHBM+EdiF-uxykqGc1VrnCIj-00j\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFHLM+EdiF-uxykqGc1VrnCIj-00k\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFICL+EdiF-uxykqGc1VrnCIj-00v\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFIGK+EdiF-uxykqGc1VrnCIj-00w\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFIMJ+EdiF-uxykqGc1VrnCIj-010\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFMAK+EdiF-uxykqGc1VrnCIj-011\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFMEK+EdiF-uxykqGc1VrnCIj-01C\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFMEL+EdiF-uxykqGc1VrnCIj-01D\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFNGF+EdiF-uxykqGc1VrnCIj-01M\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFNND+EdiF-uxykqGc1VrnCIj-01N\r\nMar 30, 2016 12:36:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODFOFB+EdiF-uxykqGc1VrnCIj-01U\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODGAAO+EdiF-uxykqGc1VrnCIj-01g\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODGBFI+EdiF-uxykqGc1VrnCIj-01q\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODGBPF+EdiF-uxykqGc1VrnCIj-01r\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODGCLC+EdiF-uxykqGc1VrnCIj-01@\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c033 (1) in font ODGCOC+EdiF-uxykqGc1VrnCIj-01$\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C69 (69) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (102) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (99) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (116) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (115) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (111) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (108) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (117) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (105) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (110) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C44 (44) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C113 (113) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (114) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (100) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (98) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (103) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C45 (45) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (104) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (77) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (46) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C75 (75) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (73) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (65) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C84 (84) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C42 (42) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C83 (83) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C72 (72) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C67 (67) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C74 (74) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C79 (79) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C85 (85) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C82 (82) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C178 (178) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C90 (90) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C87 (87) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C78 (78) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C71 (71) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (68) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C112 (112) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (114) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (116) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (110) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (111) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (102) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C80 (80) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (104) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (99) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (108) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (103) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (121) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C44 (44) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C71 (71) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (105) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (117) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C85 (85) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C118 (118) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (115) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (100) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C76 (76) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (98) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C82 (82) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C75 (75) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C66 (66) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (119) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C67 (67) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (46) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C74 (74) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C83 (83) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (117) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (114) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (121) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (107) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C70 (70) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C118 (118) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (121) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (107) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (119) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C112 (112) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C79 (79) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C106 (106) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C175 (175) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C40 (40) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C41 (41) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (77) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C122 (122) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (50) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C135 (135) in font MGHNFD+AdvPS44447F\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C80 (80) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C76 (76) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (68) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (51) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C49 (49) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C56 (56) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C55 (55) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C120 (120) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C106 (106) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C58 (58) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C69 (69) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C120 (120) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (65) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C86 (86) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C48 (48) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C53 (53) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C177 (177) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C57 (57) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C59 (59) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (54) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (73) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (110) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (116) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (111) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (100) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (99) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (105) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C91 (91) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C93 (93) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C113 (113) in font MGIBDN+AdvPS586D\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C66 (66) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C58 (58) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C64 (64) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C52 (52) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C47 (47) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C174 (174) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (77) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (108) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (115) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (104) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C72 (72) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (97) in font MGIBDP+AdvPS462D00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C89 (89) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C37 (37) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C62 (62) in font MGIBEB+AdvPS4422D0\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C56 (56) in font MGIBED+AdvPS7DA6\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C180 (180) in font MGIBEF+AdvPS697C\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C39 (39) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (109) in font MGIBDP+AdvPS462D00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (255) in font MGHNFD+AdvPS44447F\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C200 (200) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C38 (38) in font AdvPS6F00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (73) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C78 (78) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C40 (40) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C84 (84) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C41 (41) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C45 (45) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (51) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C48 (48) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (98) in font MGIBDP+AdvPS462D00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C48 (48) in font MGHNFD+AdvPS44447F\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (50) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C91 (91) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C93 (93) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (103) in font MGIBEH+AdvPS6F09\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (103) in font MGIBDP+AdvPS462D00\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C136 (136) in font MGHNFD+AdvPS44447F\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C82 (82) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (54) in font MGIBED+AdvPS7DA6\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C113 (113) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C83 (83) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C70 (70) in font AdvPS6F0B\r\nMar 30, 2016 12:36:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (101) in font MGIBDP+AdvPS462D00\r\nMar 30, 2016 12:36:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C70 (70) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (103) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (46) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C49 (49) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (50) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C81 (81) in font AdvPS6F00\r\nMar 30, 2016 12:36:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C52 (52) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C53 (53) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (68) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (54) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C55 (55) in font MGHNFB+AdvPS6F01\r\nMar 30, 2016 12:36:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (107) in font MGIBDP+AdvPS462D00\r\nMar 30, 2016 12:36:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (102) in font MGHNFB+AdvPS6F01\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font EGPILL+AdvMacMthSyN\r\nMar 30, 2016 12:36:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font EGPILL+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font PIEPOD+AdvMacMthSyN\r\nMar 30, 2016 12:36:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font PIEPOD+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font AIBMCM+AdvSPSASORT\r\nMar 30, 2016 12:36:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font AIBMCN+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font CMCGJH+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font IMDDIN+AdvPSSym\r\nMar 30, 2016 12:36:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font IMDEGK+AdvP4C4E74\r\nMar 30, 2016 12:36:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font IMDDIN+AdvPSSym\r\nMar 30, 2016 12:36:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font IMDDIN+AdvPSSym\r\nMar 30, 2016 12:36:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font IMDEGK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HBIDDN+AdvP4C4E74\r\nMar 30, 2016 12:36:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font HBIDDN+AdvP4C4E74\r\nMar 30, 2016 12:36:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font HBIDDN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font FNEBEC+AdvP4C4E74\r\nMar 30, 2016 12:36:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font FNEBEC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font GEJBDD+AdvP4C4E74\r\nMar 30, 2016 12:36:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font GEJBDD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font KGJILF+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font NEKBHI+AdvP4C4E74\r\nMar 30, 2016 12:36:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font NEKBHI+AdvP4C4E74\r\nMar 30, 2016 12:36:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font NEKHAE+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font FFAJPN+AdvP4C4E74\r\nMar 30, 2016 12:36:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font FFANNM+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font KFHOBI+AdvP4C4E74\r\nMar 30, 2016 12:36:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font KFHOGJ+AdvP4C4E59\r\nMar 30, 2016 12:36:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font KFHOBI+AdvP4C4E74\r\nMar 30, 2016 12:36:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (3) in font KFHOGJ+AdvP4C4E59\r\nMar 30, 2016 12:36:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font KFKFOP+AdvSPSASORT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font BGBNFI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font AEDFJA+AdvP4C4E74\r\nMar 30, 2016 12:36:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font AEDFJA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font OPLING+AdvT042\r\nMar 30, 2016 12:36:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font OPNGID+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font AEIOLK+AdvP4C4E74\r\nMar 30, 2016 12:36:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font AEIOLK+AdvP4C4E74\r\nMar 30, 2016 12:36:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font AEIOLK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:36:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g237 (2) in font GMANDA+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:36:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g237 (2) in font GMAMPA+TimesNewRomanPSMT\r\nMar 30, 2016 12:36:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g1081 (2) in font GMANEA+MS-Mincho\r\nMar 30, 2016 12:36:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (3) in font GMAMPA+TimesNewRomanPSMT\r\nMar 30, 2016 12:36:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g541 (4) in font GMAMPA+TimesNewRomanPSMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font JJHDFO+AdvMacMthSyN\r\nMar 30, 2016 12:37:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font JJHDFO+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font HJLNCN+AdvT042\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font GPPMKM+AdvPSSym\r\nMar 30, 2016 12:37:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font GPPMKM+AdvPSSym\r\nMar 30, 2016 12:37:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HAAAIH+AdvP4C4E74\r\nMar 30, 2016 12:37:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font GPPMKM+AdvPSSym\r\nMar 30, 2016 12:37:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font HAAAIH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:37:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (3) in font HHPEDA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font IMJDAD+AdvP4C4E74\r\nMar 30, 2016 12:37:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font IMJDAD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font LAKJOE+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font KHGEJN+AdvP4C4E74\r\nMar 30, 2016 12:37:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font KHGEJN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:15 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font ArialMT for Myriad-Roman\r\nMar 30, 2016 12:37:15 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font Arial-BoldMT for Myriad-Bold\r\nMar 30, 2016 12:37:15 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font TimesNewRomanPSMT for StoneSerif\r\nMar 30, 2016 12:37:15 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font TimesNewRomanPS-BoldMT for StoneSerif-Semibold\r\nMar 30, 2016 12:37:16 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font TimesNewRomanPS-ItalicMT for StoneSerif-Italic\r\nMar 30, 2016 12:37:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g1f (1) in font NKDEME+SymbolMT\r\nMar 30, 2016 12:37:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g21 (2) in font NKDEME+SymbolMT\r\nMar 30, 2016 12:37:16 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font Arial-ItalicMT for Myriad-Italic\r\nMar 30, 2016 12:37:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g50 (3) in font NKDEME+SymbolMT\r\nMar 30, 2016 12:37:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g44 (4) in font NKDEME+SymbolMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font GAGIIE+AdvPSSym\r\nMar 30, 2016 12:37:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font GAGIIE+AdvPSSym\r\nMar 30, 2016 12:37:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font GAGJIB+AdvP4C4E74\r\nMar 30, 2016 12:37:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font GAGIIE+AdvPSSym\r\nMar 30, 2016 12:37:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GAGJIB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font MKLDEL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font CJLLLJ+AdvPSSym\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (2) in font CJLMJI+AdvPSMSAM10\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font CJLLML+AdvP4C4E74\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font CJLLML+AdvP4C4E74\r\nMar 30, 2016 12:37:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font CJLLLJ+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HCAILE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:37:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H22845 (1) in font DJDPII+MathematicalPi-Six\r\nMar 30, 2016 12:37:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (1) in font DJDPNG+MathematicalPi-One\r\nMar 30, 2016 12:37:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font DJDPNG+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (2) in font CKFBEA+AdvPSSym\r\nMar 30, 2016 12:37:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font CKFBEA+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:37:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:37:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:37:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font ArialMT for HelveticaNeue-Roman\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font Arial-ItalicMT for HelveticaNeue-Italic\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font TimesNewRomanPSMT for NewCenturySchlbk-Roman\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font TimesNewRomanPS-ItalicMT for NewCenturySchlbk-Italic\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font TimesNewRomanPS-BoldMT for NewCenturySchlbk-Bold\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font TimesNewRomanPS-BoldItalicMT for NewCenturySchlbk-BoldItalic\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11541 (42) in font IKLMAF+Universal-NewswithCommPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11546 (50) in font IKLMBG+MathematicalPi-Four\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (107) in font IKLMBG+MathematicalPi-Four\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (107) in font IKLMFP+MathematicalPi-One\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (57) in font IKLMGJ+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (50) in font IKLMGJ+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (109) in font IKLMFP+MathematicalPi-One\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11003 (51) in font IKLMGJ+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (49) in font IKLMGJ+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (97) in font IKLMFP+MathematicalPi-One\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (98) in font IKLMFP+MathematicalPi-One\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (103) in font IKLMFP+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (1) in font APCBLO+MathematicalPi-Four\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font APCBLO+MathematicalPi-Four\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11549 (3) in font APCBLO+MathematicalPi-Four\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H18528 (1) in font APCBNK+Universal-NewswithCommPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (1) in font APCBNP+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font APCBNP+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (3) in font APCBNP+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (4) in font APCBNP+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font APCBNP+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11003 (6) in font APCBNP+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11022 (7) in font APCBNP+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (8) in font APCBNP+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11021 (9) in font APCBNP+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (10) in font APCBNP+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (11) in font APCBNP+Universal-GreekwithMathPi\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for .notdef (149) in font Symbol\r\nMar 30, 2016 12:37:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (97) in font FHBIFF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11021 (44) in font FHBIFF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (50) in font FHBIFF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H18528 (122) in font FHBINF+Universal-NewswithCommPi\r\nMar 30, 2016 12:37:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (109) in font FHBIFF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9004 (68) in font FHBIFF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (54) in font FHBIFF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11005 (53) in font FHBIFF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (103) in font FHBIFF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:37:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (49) in font FHBIFF+Universal-GreekwithMathPi\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MJIAHF+AdvP4C4E74\r\nMar 30, 2016 12:37:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font MJIAHF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:33 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+16 (16) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:33 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+21 (21) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:33 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+19 (19) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:33 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+20 (20) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:33 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+24 (24) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:33 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+22 (22) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:33 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+25 (25) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:33 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+27 (27) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:33 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+23 (23) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+13 (13) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+6 (6) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+26 (26) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+39 (39) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+68 (68) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+92 (92) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+86 (86) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+3 (3) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+83 (83) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+82 (82) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+87 (87) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+76 (76) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+81 (81) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+70 (70) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+88 (88) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+79 (79) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+58 (58) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+72 (72) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+90 (90) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+74 (74) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+75 (75) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+18 (18) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+71 (71) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+85 (85) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+38 (38) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+43 (43) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+28 (28) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+49 (49) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+36 (36) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+40 (40) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+55 (55) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+11 (11) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+12 (12) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+17 (17) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+708 (708) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+709 (709) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+80 (80) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+48 (48) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+51 (51) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+50 (50) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+56 (56) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+54 (54) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+41 (41) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+162 (162) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+44 (44) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+47 (47) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+163 (163) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+59 (59) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+53 (53) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+89 (89) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:37:34 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+252 (252) in font SimSun-GBK-EUC-H-Identity-H\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font IIIMIK+AdvPSSym\r\nMar 30, 2016 12:37:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font IIINIG+AdvP4C4E74\r\nMar 30, 2016 12:37:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font IIIMIK+AdvPSSym\r\nMar 30, 2016 12:37:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font IIINIG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (1) in font AACMMB+AdvP4C4E74\r\nMar 30, 2016 12:37:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font AACMMB+AdvP4C4E74\r\nMar 30, 2016 12:37:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font AACMMB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font DDMNBP+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C160 (2) in font OMMMFL+AdvPSMP1\r\nMar 30, 2016 12:37:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font OMMMGP+AdvPSSym\r\nMar 30, 2016 12:37:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font OMMMGP+AdvPSSym\r\nMar 30, 2016 12:37:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OMMMGO+AdvP4C4E74\r\nMar 30, 2016 12:37:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font OMMMGP+AdvPSSym\r\nMar 30, 2016 12:37:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font OMMMGO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MLDBAA+AdvP4C4E74\r\nMar 30, 2016 12:37:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font MLDBAA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MLDBAA+AdvP4C4E74\r\nMar 30, 2016 12:37:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font MLDBAA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font FMIBCN+AdvP4C4E74\r\nMar 30, 2016 12:37:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (1) in font FMKGMO+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font LEKLNJ+AdvP4C4E74\r\nMar 30, 2016 12:37:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font LEKLNJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font HBBIAP+AdvPSSym\r\nMar 30, 2016 12:37:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font HBBIAP+AdvPSSym\r\nMar 30, 2016 12:37:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HBBLDP+AdvP4C4E74\r\nMar 30, 2016 12:37:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font HBBLDP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font DOJEJI+MTSY\r\nMar 30, 2016 12:37:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font DOJKIJ+MATHG-1A\r\nMar 30, 2016 12:37:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font DOJKIJ+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font NBPLGP+MATHG-1A\r\nMar 30, 2016 12:37:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font NBPLGP+MATHG-1A\r\nMar 30, 2016 12:37:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font NBPLLP+MTSY\r\nMar 30, 2016 12:37:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9254 (4) in font NBPLGP+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font CJPIAM+AdvP4C4E74\r\nMar 30, 2016 12:37:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font CJPIAM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font CALOFC+AdvPSSym\r\nMar 30, 2016 12:37:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font CALOFC+AdvPSSym\r\nMar 30, 2016 12:37:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font CALPEO+AdvP4C4E74\r\nMar 30, 2016 12:37:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font CALPEO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font IDGDGE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:37:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font DACCJE+AdvPSSym\r\nMar 30, 2016 12:38:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font DACCJE+AdvPSSym\r\nMar 30, 2016 12:38:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font DACDJB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font OGMDMM+AdvMacms\r\nMar 30, 2016 12:38:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font OGMDNO+AdvP4C4E74\r\nMar 30, 2016 12:38:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OGMDNO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font GADOGM+AdvPSSym\r\nMar 30, 2016 12:38:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font GADOGM+AdvPSSym\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font GAEBJL+AdvP4C4E74\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font GAEBJL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font PNBPFH+AdvP4C4E74\r\nMar 30, 2016 12:38:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font PNBPFH+AdvP4C4E74\r\nMar 30, 2016 12:38:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font PNBPGL+AdvPSSym\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+83 (83) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+16 (16) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+54 (54) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+80 (80) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+68 (68) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+71 (71) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+21 (21) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+53 (53) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+87 (87) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+76 (76) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+82 (82) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+22 (22) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+26 (26) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+19 (19) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+17 (17) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+27 (27) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+13 (13) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+20 (20) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+25 (25) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+24 (24) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+28 (28) in font PNDNCJ+MS-Mincho-90ms-RKSJ-H\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font CDFAKF+AdvPSSym\r\nMar 30, 2016 12:38:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font CDFAKF+AdvPSSym\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font CDFALG+AdvP4C4E74\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font CDFALG+AdvP4C4E74\r\nMar 30, 2016 12:38:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font CDFAKF+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11021 (1) in font KICPHH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11350 (1) in font KICPHJ+MathematicalPi-One\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font KICPHJ+MathematicalPi-One\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (3) in font KICPHJ+MathematicalPi-One\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font KICPHH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11005 (3) in font KICPHH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11349 (4) in font KICPHJ+MathematicalPi-One\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font KICPHJ+MathematicalPi-One\r\nMar 30, 2016 12:38:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11003 (4) in font KICPHH+Universal-GreekwithMathPi\r\nMar 30, 2016 12:38:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (6) in font KICPHJ+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font IJBCJK+AdvP4C4E74\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font IJBCJL+AdvP4C4E59\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (3) in font IJBCJL+AdvP4C4E59\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font IJBCKM+AdvSPSASORT\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font IJBCNP+AdvPSSym\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font IJBCJK+AdvP4C4E74\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (4) in font IJBCJK+AdvP4C4E74\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (1) in font IJBCPP+AdvP4C4E46\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font IJBCPP+AdvP4C4E46\r\nMar 30, 2016 12:38:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (5) in font IJBCJK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for .notdef (31) in font KPDKFO+TimesNewRomanPSMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (2) in font GNIMND+AdvP4C4E74\r\nMar 30, 2016 12:38:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font GNIMND+AdvP4C4E74\r\nMar 30, 2016 12:38:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font GNIMND+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font FHGPHP+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font HBOHIH+AdvPSSym\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HBOLDD+AdvP4C4E74\r\nMar 30, 2016 12:38:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font HBOLDD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (98) in font DMFGMO+MathematicalPi-One\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (57) in font DMFILB+Universal-GreekwithMathPi\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (49) in font DMFILB+Universal-GreekwithMathPi\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (109) in font DMFGMO+MathematicalPi-One\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (50) in font DMFILB+Universal-GreekwithMathPi\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9256 (122) in font DMFGMO+MathematicalPi-One\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (97) in font DMFGMO+MathematicalPi-One\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (103) in font DMFGMO+MathematicalPi-One\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9274 (99) in font DMFGMO+MathematicalPi-One\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11022 (46) in font DMFILB+Universal-GreekwithMathPi\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9273 (120) in font DMFGMO+MathematicalPi-One\r\nMar 30, 2016 12:38:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9280 (101) in font DMFGMO+MathematicalPi-One\r\nMar 30, 2016 12:38:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H18528 (122) in font DMLMPJ+Universal-NewswithCommPi\r\nMar 30, 2016 12:38:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (49) in font DMFGMO+MathematicalPi-One\r\nMar 30, 2016 12:38:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (54) in font DMFILB+Universal-GreekwithMathPi\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:21 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2 <init>\r\nWARNING: Using fallback font Asimov for CID-keyed TrueType font MalgunGothicRegular\r\nMar 30, 2016 12:38:22 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2 <init>\r\nWARNING: Using fallback font Asimov for CID-keyed TrueType font MalgunGothicRegular\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font GFMLPA+AdvT001\r\nMar 30, 2016 12:38:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font GFMMBA+AdvMT_SY\r\nMar 30, 2016 12:38:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GFMMBA+AdvMT_SY\r\nMar 30, 2016 12:38:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font GFMMBA+AdvMT_SY\r\nMar 30, 2016 12:38:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font GFMMBA+AdvMT_SY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font DCHPBO+MATHG-1A\r\nMar 30, 2016 12:38:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font DCHPBO+MATHG-1A\r\nMar 30, 2016 12:38:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font DCHPBO+MATHG-1A\r\nMar 30, 2016 12:38:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font DCIPFI+OnemtmiguAAAA\r\nMar 30, 2016 12:38:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (5) in font DCHPBO+MATHG-1A\r\nMar 30, 2016 12:38:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for square (2) in font DCKLOO+Msam10\r\nMar 30, 2016 12:38:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for squaresolid (3) in font DCKLOO+Msam10\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font NBOHMN+AdvP4C4E59\r\nMar 30, 2016 12:38:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (3) in font NBOHMN+AdvP4C4E59\r\nMar 30, 2016 12:38:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font NBOHOA+AdvSPSASORT\r\nMar 30, 2016 12:38:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font NBOIAB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font MCECDL+AdvP4C4E74\r\nMar 30, 2016 12:38:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font MCECDL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C213 (2) in font CEHCPI+AdvT001\r\nMar 30, 2016 12:38:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font CEIIKL+AdvP4C4E74\r\nMar 30, 2016 12:38:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (3) in font CEIIKL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font PHGCCN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font EGGGEB+AdvPSSym\r\nMar 30, 2016 12:38:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font EGGGDP+AdvP4C4E74\r\nMar 30, 2016 12:38:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font EGGGDP+AdvP4C4E74\r\nMar 30, 2016 12:38:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font EGGGEB+AdvPSSym\r\nMar 30, 2016 12:38:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font EGGGEB+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (1) in font JENHBO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (2) in font ABKFNF+AdvMacMthSyN\r\nMar 30, 2016 12:38:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font ABKFNF+AdvMacMthSyN\r\nMar 30, 2016 12:38:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font ABKFNF+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font PHKJED+AdvT042\r\nMar 30, 2016 12:38:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font PHKEFA+AdvP4C4E74\r\nMar 30, 2016 12:38:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font PHKEFA+AdvP4C4E74\r\nMar 30, 2016 12:38:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font PHKEFA+AdvP4C4E74\r\nMar 30, 2016 12:38:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (5) in font PHKEFA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font FLOAFL+AdvP4C4E74\r\nMar 30, 2016 12:38:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (3) in font FLOAFL+AdvP4C4E74\r\nMar 30, 2016 12:38:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font FLOAFM+AdvPSSym\r\nMar 30, 2016 12:38:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font FLOAFL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font NICPMI+AdvP4C4E74\r\nMar 30, 2016 12:38:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font NICPMI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font DKKBLH+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (2) in font MKOBAG+AdvP4C4E74\r\nMar 30, 2016 12:38:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (3) in font MKOBAG+AdvP4C4E74\r\nMar 30, 2016 12:38:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font MKPAGF+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17015 (113) in font NKIDCI+Universal-NewswithCommPi\r\nMar 30, 2016 12:38:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11541 (42) in font NKIDCI+Universal-NewswithCommPi\r\nMar 30, 2016 12:38:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11034 (55) in font NKIDCI+Universal-NewswithCommPi\r\nMar 30, 2016 12:38:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17039 (106) in font NKPDNB+MathematicalPi-Six\r\nMar 30, 2016 12:38:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17005 (110) in font NKPDNB+MathematicalPi-Six\r\nMar 30, 2016 12:38:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17034 (115) in font NKPDNB+MathematicalPi-Six\r\nMar 30, 2016 12:38:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17009 (109) in font NKPDNB+MathematicalPi-Six\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OGPIOO+AdvMacMthSyN\r\nMar 30, 2016 12:38:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font OGPIOO+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font MJHLAE+AdvPSSym\r\nMar 30, 2016 12:38:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MJHLBF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:38:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:38:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:38:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font MGCIIH+MATHG-1A\r\nMar 30, 2016 12:38:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font MGCIIH+MATHG-1A\r\nMar 30, 2016 12:38:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font MGCIIH+MATHG-1A\r\nMar 30, 2016 12:38:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (5) in font MGCIIH+MATHG-1A\r\nMar 30, 2016 12:38:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (6) in font MGCIIH+MATHG-1A\r\nMar 30, 2016 12:38:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (5) in font MGCIKI+MTSY\r\nMar 30, 2016 12:38:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (2) in font MGCIJI+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:38:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font PDCIGG+AdvT042\r\nMar 30, 2016 12:38:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (1) in font PDCIKF+AdvP4C4E74\r\nMar 30, 2016 12:38:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font PDCIKF+AdvP4C4E74\r\nMar 30, 2016 12:38:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font PDCIKF+AdvP4C4E74\r\nMar 30, 2016 12:38:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font PDCIKF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for c97 (2) in font KBINPG+Symbol-NormalItalic\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font LHEEHA+AdvP4C4E74\r\nMar 30, 2016 12:39:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font LHEEHA+AdvP4C4E74\r\nMar 30, 2016 12:39:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (4) in font LHEEHA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font CFONLB+AdvPSSym\r\nMar 30, 2016 12:39:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (1) in font CFPCCN+AdvP4C4E59\r\nMar 30, 2016 12:39:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (3) in font CFPCCN+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (2) in font OAAAIH+AdvP4C4E74\r\nMar 30, 2016 12:39:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font OAADEN+AdvT042\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font NOJJBI+MTSY\r\nMar 30, 2016 12:39:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font NOJJBJ+MathematicalPi-One\r\nMar 30, 2016 12:39:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (3) in font NOJJBI+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AKFGJB+AdvPSSym\r\nMar 30, 2016 12:39:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AKFGJB+AdvPSSym\r\nMar 30, 2016 12:39:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font AKFGKD+AdvP4C4E74\r\nMar 30, 2016 12:39:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font AKFGKD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font EBCJNO+AdvP4C4E74\r\nMar 30, 2016 12:39:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font EBCJNO+AdvP4C4E74\r\nMar 30, 2016 12:39:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (4) in font EBCJNO+AdvP4C4E74\r\nMar 30, 2016 12:39:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font EBCJNO+AdvP4C4E74\r\nMar 30, 2016 12:39:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font EBDNAF+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font INKFNO+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font ACFKEJ+AdvMacMthSyN\r\nMar 30, 2016 12:39:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (2) in font ACMFFB+AdvMacMthRm\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (2) in font MAMIOA+MTSY\r\nMar 30, 2016 12:39:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font MAMMOI+MathematicalPi-One\r\nMar 30, 2016 12:39:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for 223c (2) in font MANANB+LucidaSansUnicode22\r\nMar 30, 2016 12:39:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font MAMIOA+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font GJBACK+AdvP4C4E74\r\nMar 30, 2016 12:39:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GJBACK+AdvP4C4E74\r\nMar 30, 2016 12:39:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font GJBACK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ACEMCG+AdvT042\r\nMar 30, 2016 12:39:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font ACEMBE+AdvP4C4E74\r\nMar 30, 2016 12:39:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font ACEMBE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font DOAEON+MTSY\r\nMar 30, 2016 12:39:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font DOCJAF+MATHG-1A\r\nMar 30, 2016 12:39:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font DOCJAF+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font BEPGKC+AdvPSSym\r\nMar 30, 2016 12:39:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font BEPGKC+AdvPSSym\r\nMar 30, 2016 12:39:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font BEPHHP+AdvP4C4E74\r\nMar 30, 2016 12:39:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font BEPHHP+AdvP4C4E74\r\nMar 30, 2016 12:39:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font BEPMLI+AdvSPSASORT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font EOHEFL+MATHG-1A\r\nMar 30, 2016 12:39:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font EOHEFL+MATHG-1A\r\nMar 30, 2016 12:39:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font EOHEFL+MATHG-1A\r\nMar 30, 2016 12:39:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (5) in font EOHEFL+MATHG-1A\r\nMar 30, 2016 12:39:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font EOHEFL+MATHG-1A\r\nMar 30, 2016 12:39:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font EOHBJI+OnemtmiguAAAA\r\nMar 30, 2016 12:39:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (3) in font EOHBJI+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font WBQRKX+WcrrlxAdvPSSym\r\nMar 30, 2016 12:39:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font TLDVNQ+TlvqgrAdvP4C4E74\r\nMar 30, 2016 12:39:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font WBQRKX+WcrrlxAdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9254 (2) in font PGJCLA+MathematicalPi-Four\r\nMar 30, 2016 12:39:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font PGJCMC+MathematicalPi-One\r\nMar 30, 2016 12:39:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (2) in font PGJCMD+MTSY\r\nMar 30, 2016 12:39:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9254 (3) in font PGJCMC+MathematicalPi-One\r\nMar 30, 2016 12:39:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font PGJCMC+MathematicalPi-One\r\nMar 30, 2016 12:39:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (5) in font PGJCMC+MathematicalPi-One\r\nMar 30, 2016 12:39:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9264 (6) in font PGJCMC+MathematicalPi-One\r\nMar 30, 2016 12:39:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font PGJCLA+MathematicalPi-Four\r\nMar 30, 2016 12:39:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for 223c (2) in font PGKLCH+LucidaSansUnicode22\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (1) in font OHEDNE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:39:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font OHEDNE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:39:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (3) in font OHEDNE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:39:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11003 (4) in font OHEDNE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:39:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (5) in font OHEDNE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:39:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11021 (6) in font OHEDNE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:39:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11005 (7) in font OHEDNE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:39:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11569 (1) in font OHEEKD+MathematicalPi-Six\r\nMar 30, 2016 12:39:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (8) in font OHEDNE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:39:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (9) in font OHEDNE+Universal-GreekwithMathPi\r\nMar 30, 2016 12:39:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9004 (10) in font OHEDNE+Universal-GreekwithMathPi\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (1) in font EHNOMP+AdvPSSym\r\nMar 30, 2016 12:39:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (3) in font EHNOMP+AdvPSSym\r\nMar 30, 2016 12:39:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (4) in font EHNOMP+AdvPSSym\r\nMar 30, 2016 12:39:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font EHNOOA+AdvP4C4E74\r\nMar 30, 2016 12:39:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font EHNOOA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (1) in font DACJBH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:39:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font JHPIEK+MathematicalPi-Four\r\nMar 30, 2016 12:39:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font JHPIEK+MathematicalPi-Four\r\nMar 30, 2016 12:39:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (2) in font JHPIEN+MTSY\r\nMar 30, 2016 12:39:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font JHPIGA+MathematicalPi-One\r\nMar 30, 2016 12:39:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font JHPIGA+MathematicalPi-One\r\nMar 30, 2016 12:39:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font JHPIGA+MathematicalPi-One\r\nMar 30, 2016 12:39:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font JHPIGA+MathematicalPi-One\r\nMar 30, 2016 12:39:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font JHPIEN+MTSY\r\nMar 30, 2016 12:39:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font JHPIGA+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:39:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\nMar 30, 2016 12:39:42 PM org.apache.fontbox.ttf.CmapSubtable processSubtype14\r\nWARNING: Format 14 cmap table is not supported and will be ignored\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font HILHLD+AdvPSSym\r\nMar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font HILHLD+AdvPSSym\r\nMar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font HILHLD+AdvPSSym\r\nMar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font HIMFAE+AdvP4C4E74\r\nMar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (3) in font HIMFAE+AdvP4C4E74\r\nMar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font HIMFAE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font JJIJHG+MTSY\r\nMar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (3) in font JJIJHG+MTSY\r\nMar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font JJIJJJ+MathematicalPi-One\r\nMar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font JJIJJJ+MathematicalPi-One\r\nMar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (4) in font JJIJJJ+MathematicalPi-One\r\nMar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font JJIJJJ+MathematicalPi-One\r\nMar 30, 2016 12:39:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (6) in font JJIJJJ+MathematicalPi-One\r\nMar 30, 2016 12:39:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for 2265 (2) in font JJIKAJ+LucidaSansUnicode22\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font OCDINP+MathematicalPi-One\r\nMar 30, 2016 12:39:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (2) in font OCDIOA+MTSY\r\nMar 30, 2016 12:39:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font OCDINP+MathematicalPi-One\r\nMar 30, 2016 12:39:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font OCDINP+MathematicalPi-One\r\nMar 30, 2016 12:39:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (5) in font OCDINP+MathematicalPi-One\r\nMar 30, 2016 12:39:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9254 (6) in font OCDINP+MathematicalPi-One\r\nMar 30, 2016 12:39:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (7) in font OCDINP+MathematicalPi-One\r\nMar 30, 2016 12:39:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for 223c (2) in font OCDKBK+LucidaSansUnicode22\r\nMar 30, 2016 12:39:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9266 (8) in font OCDINP+MathematicalPi-One\r\nMar 30, 2016 12:39:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font OCDIOA+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font JLMHOD+AdvP4C4E74\r\nMar 30, 2016 12:39:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font JLMHOD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font OGIKFM+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font JHBGLG+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font AFCBPK+AdvP4C4E74\r\nMar 30, 2016 12:39:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font AFCBPK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font JKHECE+AdvP4C4E74\r\nMar 30, 2016 12:39:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font JKHECE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for 2265 (2) in font NFKINJ+LucidaSansUnicode22\r\nMar 30, 2016 12:39:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font NFKIPJ+MTSY\r\nMar 30, 2016 12:39:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font NFKJGK+MathematicalPi-One\r\nMar 30, 2016 12:39:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (3) in font NFKJGK+MathematicalPi-One\r\nMar 30, 2016 12:39:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font NFKJGK+MathematicalPi-One\r\nMar 30, 2016 12:39:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for 223c (3) in font NFKINJ+LucidaSansUnicode22\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for 2265 (2) in font DPNLAC+LucidaSansUnicode22\r\nMar 30, 2016 12:39:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font DPNLAD+MTSY\r\nMar 30, 2016 12:39:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font DPNLEG+MathematicalPi-One\r\nMar 30, 2016 12:39:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (3) in font DPNLEG+MathematicalPi-One\r\nMar 30, 2016 12:39:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font DPNLEG+MathematicalPi-One\r\nMar 30, 2016 12:39:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for 223c (3) in font DPNLAC+LucidaSansUnicode22\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (2) in font MGBMAO+MTSY\r\nMar 30, 2016 12:39:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font MGBMDP+MathematicalPi-One\r\nMar 30, 2016 12:39:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font MGBMDP+MathematicalPi-One\r\nMar 30, 2016 12:39:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (4) in font MGBMDP+MathematicalPi-One\r\nMar 30, 2016 12:39:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Sigma1 (2) in font MGBLOO+RMTMI\r\nMar 30, 2016 12:39:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (5) in font MGBMDP+MathematicalPi-One\r\nMar 30, 2016 12:39:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font MGBMAO+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:39:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font KJAFOJ+MTSY\r\nMar 30, 2016 12:39:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (3) in font KJAFOJ+MTSY\r\nMar 30, 2016 12:39:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font KJAGDK+MathematicalPi-One\r\nMar 30, 2016 12:39:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font KJAGDK+MathematicalPi-One\r\nMar 30, 2016 12:39:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font KJAKJD+MathematicalPi-Four\r\nMar 30, 2016 12:39:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font KJAKJD+MathematicalPi-Four\r\nMar 30, 2016 12:39:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font KJAGDK+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font JCJGPA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font LAFDNK+AdvPSSym\r\nMar 30, 2016 12:40:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font LAFDNK+AdvPSSym\r\nMar 30, 2016 12:40:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font LAFJKH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (2) in font NHOKPF+AdvP4C4E59\r\nMar 30, 2016 12:40:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font NHOLAK+AdvP4C4E74\r\nMar 30, 2016 12:40:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (3) in font NHOKPF+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OKECBB+AdvMacMthSyN\r\nMar 30, 2016 12:40:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font OKECBB+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HJOFBH+AdvMacMthSyN\r\nMar 30, 2016 12:40:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font HJOFBH+AdvMacMthSyN\r\nMar 30, 2016 12:40:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font HJOFBH+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g415 (2) in font CDJEHH+Calibri\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font JMJNJC+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font EKNLFN+AdvP4C4E74\r\nMar 30, 2016 12:40:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font EKNLFN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (1) in font HMGBMD+MTSY\r\nMar 30, 2016 12:40:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (3) in font HMGBMD+MTSY\r\nMar 30, 2016 12:40:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (3) in font HMGBKB+RMTMI\r\nMar 30, 2016 12:40:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (1) in font HMHEKD+MTSYB\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font BJIHAA+AdvPSSym\r\nMar 30, 2016 12:40:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font BJIHAA+AdvPSSym\r\nMar 30, 2016 12:40:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font BJIKEN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (2) in font DKKEPE+MTSY\r\nMar 30, 2016 12:40:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for a114 (2) in font DKKFBE+LCIRCLE10\r\nMar 30, 2016 12:40:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font DKKEPE+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font EAJEKN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font FGEPPL+AdvPSSym\r\nMar 30, 2016 12:40:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font FGFAAP+AdvP4C4E74\r\nMar 30, 2016 12:40:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font FGFADB+AdvP4C4E59\r\nMar 30, 2016 12:40:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font FGFAAP+AdvP4C4E74\r\nMar 30, 2016 12:40:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font FGFAAP+AdvP4C4E74\r\nMar 30, 2016 12:40:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font FGFLAI+AdvSPSASORT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font NBONOA+AdvP4C4E74\r\nMar 30, 2016 12:40:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font NBONOA+AdvP4C4E74\r\nMar 30, 2016 12:40:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (4) in font NBONOA+AdvP4C4E74\r\nMar 30, 2016 12:40:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font NCAMKJ+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font GENKJC+MTSY\r\nMar 30, 2016 12:40:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font GENMAN+MATHG-1A\r\nMar 30, 2016 12:40:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font GENMAN+MATHG-1A\r\nMar 30, 2016 12:40:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (4) in font GENMAN+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (2) in font GBHLOM+MathPackTen\r\nMar 30, 2016 12:40:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font GBHKOB+AdvP4C4E74\r\nMar 30, 2016 12:40:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GBHKOB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (1) in font LBFBHA+AdvP4C4E5E\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (2) in font GBHLOM+MathPackTen\r\nMar 30, 2016 12:40:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font GBHKOB+AdvP4C4E74\r\nMar 30, 2016 12:40:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GBHKOB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font ODKEKO+AdvP4C4E74\r\nMar 30, 2016 12:40:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font ODKEEJ+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font BBICCA+AdvP4C4E74\r\nMar 30, 2016 12:40:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font BBICCA+AdvP4C4E74\r\nMar 30, 2016 12:40:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (2) in font BBJCLN+MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:40:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:40:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:40:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font LDMCKC+AdvT042\r\nMar 30, 2016 12:40:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font LDMGDM+AdvP4C4E74\r\nMar 30, 2016 12:40:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font LDMGDM+AdvP4C4E74\r\nMar 30, 2016 12:40:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font LDMGDM+AdvP4C4E74\r\nMar 30, 2016 12:40:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (5) in font LDMGDM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (1) in font KIGCEJ+MathPackTen\r\nMar 30, 2016 12:40:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font KIGEOG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MAOADL+AdvT042\r\nMar 30, 2016 12:40:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MAOEOD+AdvP4C4E74\r\nMar 30, 2016 12:40:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font MAOEOD+AdvP4C4E74\r\nMar 30, 2016 12:40:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font MAOEOD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font FKOADH+AdvP4C4E74\r\nMar 30, 2016 12:40:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font FKPAIJ+AdvMacms\r\nMar 30, 2016 12:40:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font FKOADH+AdvP4C4E74\r\nMar 30, 2016 12:40:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font FKOADH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font KINOAJ+AdvP4C4E74\r\nMar 30, 2016 12:40:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font KINOAJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font ANBNBM+AdvP4C4E74\r\nMar 30, 2016 12:40:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font ANBNBM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font BCDBPC+AdvMacms\r\nMar 30, 2016 12:40:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font BCDBPE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font PHIAAF+AdvP4C4E74\r\nMar 30, 2016 12:40:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font PHIABH+AdvPSSym\r\nMar 30, 2016 12:40:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font PHIABH+AdvPSSym\r\nMar 30, 2016 12:40:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font PHIAAF+AdvP4C4E74\r\nMar 30, 2016 12:40:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (4) in font PHIAAF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font CFDOGL+AdvT042\r\nMar 30, 2016 12:40:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font CFEJDJ+AdvP4C4E74\r\nMar 30, 2016 12:40:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font CFEJDJ+AdvP4C4E74\r\nMar 30, 2016 12:40:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font CFEJDJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font OOABIL+AdvT042\r\nMar 30, 2016 12:40:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font OOAFJD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font PHPJML+AdvT042\r\nMar 30, 2016 12:40:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font PHPOLO+AdvP4C4E74\r\nMar 30, 2016 12:40:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font PHPOLO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font OELNKJ+AdvPSSym\r\nMar 30, 2016 12:40:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font OELNKJ+AdvPSSym\r\nMar 30, 2016 12:40:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OEMIOF+AdvP4C4E74\r\nMar 30, 2016 12:40:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font OELNKJ+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g69 (2) in font JAPJDH+SymbolMT\r\nMar 30, 2016 12:40:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g68 (3) in font JAPJDH+SymbolMT\r\nMar 30, 2016 12:40:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g78 (4) in font JAPJDH+SymbolMT\r\nMar 30, 2016 12:40:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g74 (5) in font JAPJDH+SymbolMT\r\nMar 30, 2016 12:40:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (2) in font JAPJBG+TimesNewRomanPSMT\r\nMar 30, 2016 12:40:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g80 (6) in font JAPJDH+SymbolMT\r\nMar 30, 2016 12:40:47 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+3 (3) in font ArialUnicodeMS-KSCms-UHC-H-Identity-H\r\nMar 30, 2016 12:40:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g113 (7) in font JAPJDH+SymbolMT\r\nMar 30, 2016 12:40:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g507 (3) in font JAPJBG+TimesNewRomanPSMT\r\nMar 30, 2016 12:40:47 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+115 (115) in font ArialUnicodeMS-KSCms-UHC-H-Identity-H\r\nMar 30, 2016 12:40:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (4) in font JAPJBG+TimesNewRomanPSMT\r\nMar 30, 2016 12:40:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g539 (5) in font JAPJBG+TimesNewRomanPSMT\r\nMar 30, 2016 12:40:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g534 (6) in font JAPJBG+TimesNewRomanPSMT\r\nMar 30, 2016 12:40:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g114 (8) in font JAPJDH+SymbolMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (2) in font NCGNEK+MATHG-1A\r\nMar 30, 2016 12:40:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font NCGNEK+MATHG-1A\r\nMar 30, 2016 12:40:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font NCGNEK+MATHG-1A\r\nMar 30, 2016 12:40:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font NCGNEK+MATHG-1A\r\nMar 30, 2016 12:40:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (6) in font NCGNEK+MATHG-1A\r\nMar 30, 2016 12:40:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (5) in font NCGKPG+MTSY\r\nMar 30, 2016 12:40:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (2) in font NCGKPF+OnemtmiguAAAA\r\nMar 30, 2016 12:40:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (3) in font NCGKPF+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font CJDKBG+MTSY\r\nMar 30, 2016 12:40:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (4) in font CJDKBG+MTSY\r\nMar 30, 2016 12:40:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for a114 (2) in font CJDKEL+LCIRCLE10\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font HEGIHD+AdvPSSym\r\nMar 30, 2016 12:40:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font HEGIHD+AdvPSSym\r\nMar 30, 2016 12:40:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HEGIIF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font JGPFDD+AdvP4C4E5E\r\nMar 30, 2016 12:40:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font JGPFEH+AdvPSSym\r\nMar 30, 2016 12:40:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font JGPFEM+AdvP4C4E74\r\nMar 30, 2016 12:40:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (3) in font JGPFEH+AdvPSSym\r\nMar 30, 2016 12:40:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font JGPFEM+AdvP4C4E74\r\nMar 30, 2016 12:40:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font JGPFEM+AdvP4C4E74\r\nMar 30, 2016 12:40:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (5) in font JGPFEM+AdvP4C4E74\r\nMar 30, 2016 12:40:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font JGPFFO+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font GBGINF+AdvP4C4E74\r\nMar 30, 2016 12:40:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font GBGIOH+AdvP4C4E59\r\nMar 30, 2016 12:40:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (3) in font GBGIOH+AdvP4C4E59\r\nMar 30, 2016 12:40:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font GBGIPI+AdvSPSASORT\r\nMar 30, 2016 12:40:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font GBGINF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:40:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font LEBADD+AdvT042\r\nMar 30, 2016 12:40:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font LEBEJI+AdvP4C4E74\r\nMar 30, 2016 12:40:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font LEBEJI+AdvP4C4E74\r\nMar 30, 2016 12:40:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font LEBEJI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font ELPEJJ+AdvP4C4E74\r\nMar 30, 2016 12:41:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font ELPEJJ+AdvP4C4E74\r\nMar 30, 2016 12:41:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font ELPEJJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circleR (114) in font NPSFAZ+MSAM10\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font MJCJJM+AdvPSSym\r\nMar 30, 2016 12:41:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C213 (2) in font MJCJLN+AdvPSMP1\r\nMar 30, 2016 12:41:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font MJCJJM+AdvPSSym\r\nMar 30, 2016 12:41:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font MJCJJM+AdvPSSym\r\nMar 30, 2016 12:41:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C212 (3) in font MJCJLN+AdvPSMP1\r\nMar 30, 2016 12:41:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font MJCKJM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font HHKAPH+AdvP4C4E74\r\nMar 30, 2016 12:41:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font HHKAPH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font CANNKG+AdvMacMthSyN\r\nMar 30, 2016 12:41:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font CANNKG+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font HPCKEF+AdvPSSym\r\nMar 30, 2016 12:41:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (2) in font HPCKEB+AdvP4C4E59\r\nMar 30, 2016 12:41:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (1) in font HPCKJH+AdvP4C4E74\r\nMar 30, 2016 12:41:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font HPCKJH+AdvP4C4E74\r\nMar 30, 2016 12:41:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font HPCKJH+AdvP4C4E74\r\nMar 30, 2016 12:41:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (5) in font HPCKJH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font INJNFA+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font JCNJDB+MATHG-1A\r\nMar 30, 2016 12:41:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font JCNJDB+MATHG-1A\r\nMar 30, 2016 12:41:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (4) in font JCNJDB+MATHG-1A\r\nMar 30, 2016 12:41:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font JCNJDB+MATHG-1A\r\nMar 30, 2016 12:41:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (2) in font JCOBMO+OnemtmiguAAAA\r\nMar 30, 2016 12:41:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font JCNIED+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font PGKIAC+AdvP4C4E74\r\nMar 30, 2016 12:41:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C23 (3) in font PGJOGD+AdvP4C4E59\r\nMar 30, 2016 12:41:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font PGKIAC+AdvP4C4E74\r\nMar 30, 2016 12:41:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font PGJOGD+AdvP4C4E59\r\nMar 30, 2016 12:41:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (4) in font PGJOGD+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font HHNIFP+MATHG-1A\r\nMar 30, 2016 12:41:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font HHNIFP+MATHG-1A\r\nMar 30, 2016 12:41:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font HHNIFP+MATHG-1A\r\nMar 30, 2016 12:41:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (5) in font HHNIFP+MATHG-1A\r\nMar 30, 2016 12:41:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (5) in font HHNHGD+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:41:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MGCNFA+AdvP4C4E74\r\nMar 30, 2016 12:41:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (2) in font MGPEAC+MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font ONFMNJ+AdvP4C4E74\r\nMar 30, 2016 12:41:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font ONFMNJ+AdvP4C4E74\r\nMar 30, 2016 12:41:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (2) in font ONEGNH+AdvPSSym\r\nMar 30, 2016 12:41:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font ONEGLC+AdvP4C4E5E\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font NDINKJ+MTSY\r\nMar 30, 2016 12:41:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (5) in font NDINKJ+MTSY\r\nMar 30, 2016 12:41:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (3) in font NDINMP+RMTMI\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MENFCE+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:41:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:41:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font FEPLKD+MATHG-1A\r\nMar 30, 2016 12:41:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font FEPLKD+MATHG-1A\r\nMar 30, 2016 12:41:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font FEPLKD+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font AJPHNG+AdvP4C4E74\r\nMar 30, 2016 12:41:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font AJPHNG+AdvP4C4E74\r\nMar 30, 2016 12:41:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (3) in font AJPHNG+AdvP4C4E74\r\nMar 30, 2016 12:41:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (1) in font AJPIFH+AdvP4C4E46\r\nMar 30, 2016 12:41:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font AJPIFH+AdvP4C4E46\r\nMar 30, 2016 12:41:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font AJPHNG+AdvP4C4E74\r\nMar 30, 2016 12:41:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (5) in font AJPHNG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MMDDJK+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (1) in font IFJAJA+MathematicalPi-One\r\nMar 30, 2016 12:41:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (1) in font IFJBME+MathematicalPi-Four\r\nMar 30, 2016 12:41:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font IFJAJA+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font KOGMMG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font COHELO+AdvPSSym\r\nMar 30, 2016 12:41:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font COHELO+AdvPSSym\r\nMar 30, 2016 12:41:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font COHFNK+AdvP4C4E74\r\nMar 30, 2016 12:41:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font COHFNK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font JFLLFA+AdvP4C4E74\r\nMar 30, 2016 12:41:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font JFLLJA+AdvP4C4E59\r\nMar 30, 2016 12:41:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font JFLLFA+AdvP4C4E74\r\nMar 30, 2016 12:41:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (4) in font JFLLFA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font OCAJGI+AdvMacMthSyN\r\nMar 30, 2016 12:41:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font OCAJGI+AdvMacMthSyN\r\nMar 30, 2016 12:41:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font OCAJGI+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font FHKLBC+MATHG-1A\r\nMar 30, 2016 12:41:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font FHKLCD+OnemtmiguAAAA\r\nMar 30, 2016 12:41:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (3) in font FHKLCD+OnemtmiguAAAA\r\nMar 30, 2016 12:41:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font FHKLCE+MTSY\r\nMar 30, 2016 12:41:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font FHKLBC+MATHG-1A\r\nMar 30, 2016 12:41:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font FHKLBC+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font CJFBKI+AdvMacMthSyN\r\nMar 30, 2016 12:41:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font CJFBKI+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font HLODAA+AdvMacms\r\nMar 30, 2016 12:41:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (1) in font HLOFEH+AdvP4C4E74\r\nMar 30, 2016 12:41:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font HLOFEH+AdvP4C4E74\r\nMar 30, 2016 12:41:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font HLOFEH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font ALPEKF+MATHG-1A\r\nMar 30, 2016 12:41:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font ALPEKF+MATHG-1A\r\nMar 30, 2016 12:41:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font ALPEKF+MATHG-1A\r\nMar 30, 2016 12:41:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (5) in font ALPEKF+MATHG-1A\r\nMar 30, 2016 12:41:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (2) in font ALPDFJ+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (2) in font ENLIPD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font LJBKDD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (1) in font KFBNNP+MathematicalPi-Four\r\nMar 30, 2016 12:41:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (1) in font KFBNPG+Universal-GreekwithMathPi\r\nMar 30, 2016 12:41:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H18528 (1) in font KFBOBB+Universal-NewswithCommPi\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font KFBNPG+Universal-GreekwithMathPi\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11005 (3) in font KFBNPG+Universal-GreekwithMathPi\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (4) in font KFBNPG+Universal-GreekwithMathPi\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (5) in font KFBNPG+Universal-GreekwithMathPi\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11545 (2) in font KFBNNP+MathematicalPi-Four\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11003 (6) in font KFBNPG+Universal-GreekwithMathPi\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (7) in font KFBNPG+Universal-GreekwithMathPi\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (8) in font KFBNPG+Universal-GreekwithMathPi\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (9) in font KFBNPG+Universal-GreekwithMathPi\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (10) in font KFBNPG+Universal-GreekwithMathPi\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11021 (11) in font KFBNPG+Universal-GreekwithMathPi\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (12) in font KFBNPG+Universal-GreekwithMathPi\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font AFNLNB+MATHG-1A\r\nMar 30, 2016 12:41:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font AFNKPD+MTSY\r\nMar 30, 2016 12:41:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font AFNLNB+MATHG-1A\r\nMar 30, 2016 12:41:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font AFNLNB+MATHG-1A\r\nMar 30, 2016 12:41:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (5) in font AFNLNB+MATHG-1A\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (2) in font AFNKPC+OnemtmiguAAAA\r\nMar 30, 2016 12:41:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font AFNLNB+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:41:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font MPJAPL+MATHG-1A\r\nMar 30, 2016 12:42:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font MPJAPL+MATHG-1A\r\nMar 30, 2016 12:42:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font MPJAPL+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (1) in font KGEKOH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (1) in font MNMHBM+AdvP4C4E74\r\nMar 30, 2016 12:42:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font MNMHBM+AdvP4C4E74\r\nMar 30, 2016 12:42:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font MNMHBM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font DFKBHF+AdvP4C4E74\r\nMar 30, 2016 12:42:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font DFKBHF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:07 PM org.apache.fontbox.ttf.CmapSubtable processSubtype14\r\nWARNING: Format 14 cmap table is not supported and will be ignored\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font PFNLJM+AdvPSSym\r\nMar 30, 2016 12:42:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font PFNLMN+AdvP4C4E74\r\nMar 30, 2016 12:42:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font PFNLMN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (57) in font MCFDLF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:42:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (97) in font MCFDOE+MathematicalPi-One\r\nMar 30, 2016 12:42:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (98) in font MCFDOE+MathematicalPi-One\r\nMar 30, 2016 12:42:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (54) in font MCFDLF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:42:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (109) in font MCFDOE+MathematicalPi-One\r\nMar 30, 2016 12:42:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (50) in font MCFDLF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:42:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11021 (44) in font MCFDLF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:42:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11005 (53) in font MCFDLF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:42:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H18528 (122) in font MCFIGC+Universal-NewswithCommPi\r\nMar 30, 2016 12:42:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11022 (46) in font MCFDLF+Universal-GreekwithMathPi\r\nMar 30, 2016 12:42:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (49) in font MCFDLF+Universal-GreekwithMathPi\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font MNHMIO+AdvMacms\r\nMar 30, 2016 12:42:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font MNHMJA+AdvP4C4E74\r\nMar 30, 2016 12:42:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font MNHMJA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font DCNIIM+AdvP4C4E74\r\nMar 30, 2016 12:42:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (3) in font DCNIIM+AdvP4C4E74\r\nMar 30, 2016 12:42:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (4) in font DCNIIM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font DMMGDP+AdvMacms\r\nMar 30, 2016 12:42:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (1) in font DMMGFC+AdvP4C4E59\r\nMar 30, 2016 12:42:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (1) in font DMMGEB+AdvP4C4E74\r\nMar 30, 2016 12:42:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font DMMGEB+AdvP4C4E74\r\nMar 30, 2016 12:42:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font DMMGEB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (1) in font DOFDDG+AdvMT_SY\r\nMar 30, 2016 12:42:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font DOFEGB+AdvT001\r\nMar 30, 2016 12:42:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C213 (2) in font DOFEGB+AdvT001\r\nMar 30, 2016 12:42:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font DOFDDG+AdvMT_SY\r\nMar 30, 2016 12:42:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font DOFDDG+AdvMT_SY\r\nMar 30, 2016 12:42:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font DOFDDG+AdvMT_SY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font FOELKJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font JKOLKO+AdvP4C4E74\r\nMar 30, 2016 12:42:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (3) in font JKOLKO+AdvP4C4E74\r\nMar 30, 2016 12:42:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font JKOLKO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font AMGCMH+AdvT042\r\nMar 30, 2016 12:42:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font AMGDJK+AdvP4C4E74\r\nMar 30, 2016 12:42:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font AMGDJK+AdvP4C4E74\r\nMar 30, 2016 12:42:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (3) in font AMGDJK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (2) in font KJPKDK+MATHG-1A\r\nMar 30, 2016 12:42:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font KJPKDK+MATHG-1A\r\nMar 30, 2016 12:42:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (4) in font KJPKDK+MATHG-1A\r\nMar 30, 2016 12:42:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font KJPKDK+MATHG-1A\r\nMar 30, 2016 12:42:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (6) in font KJPKDK+MATHG-1A\r\nMar 30, 2016 12:42:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font KKBPOF+OnemtmiguAAAA\r\nMar 30, 2016 12:42:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for UIstop (2) in font KKGGNI+Webdings\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font EGMKPB+AdvPSSym\r\nMar 30, 2016 12:42:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font EGMKPB+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C28 (2) in font DCNFNJ+AdvP4C4E59\r\nMar 30, 2016 12:42:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font DCNJOG+AdvP4C4E74\r\nMar 30, 2016 12:42:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font DCNJOG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font FCJKAO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:37 PM org.apache.fontbox.ttf.CmapSubtable processSubtype14\r\nWARNING: Format 14 cmap table is not supported and will be ignored\r\nMar 30, 2016 12:42:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for L50775 (2) in font PIJEPO+EuropeanPi-Three\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (5) in font CIHKNH+AdvP4C4E74\r\nMar 30, 2016 12:42:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font CIHKNH+AdvP4C4E74\r\nMar 30, 2016 12:42:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font CIHKNH+AdvP4C4E74\r\nMar 30, 2016 12:42:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font CIHKNH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font HDKGPJ+AdvPSSym\r\nMar 30, 2016 12:42:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C160 (1) in font HDKIBJ+AdvPSMP1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (2) in font LOPLCP+AdvP4C4E74\r\nMar 30, 2016 12:42:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font LOPLCP+AdvP4C4E74\r\nMar 30, 2016 12:42:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font LOPLEB+AdvPSSym\r\nMar 30, 2016 12:42:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font LOPLEB+AdvPSSym\r\nMar 30, 2016 12:42:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (4) in font LOPLCP+AdvP4C4E74\r\nMar 30, 2016 12:42:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (5) in font LOPLCP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font GKEBDF+AdvP4C4E74\r\nMar 30, 2016 12:42:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GKEBDF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font AdvPSSym\r\nMar 30, 2016 12:42:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font AdvP4C4E74\r\nMar 30, 2016 12:42:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font CDOIOF+AdvP4C4E74\r\nMar 30, 2016 12:42:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font CDOIOF+AdvP4C4E74\r\nMar 30, 2016 12:42:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font CDOIOF+AdvP4C4E74\r\nMar 30, 2016 12:42:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (1) in font CEEOFN+AdvMacms\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K77 (119) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K2E (46) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K61 (97) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K72 (114) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K63 (99) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K68 (104) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K64 (100) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K69 (105) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K73 (115) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6C (108) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6F (111) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6D (109) in font T9\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K59 (89) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6F (111) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K75 (117) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K63 (99) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K61 (97) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6E (110) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K65 (101) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K73 (115) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K74 (116) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K68 (104) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K46 (70) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K55 (85) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K4C (76) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K54 (84) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K45 (69) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K58 (88) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K66 (102) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K72 (114) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K69 (105) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6C (108) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K64 (100) in font T5\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K41 (65) in font T7\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K72 (114) in font T7\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K63 (99) in font T7\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K68 (104) in font T7\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K69 (105) in font T7\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K76 (118) in font T7\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K65 (101) in font T7\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K73 (115) in font T7\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6F (111) in font T7\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K66 (102) in font T7\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K44 (68) in font T7\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K61 (97) in font T7\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6E (110) in font T7\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K43 (67) in font T7\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6C (108) in font T7\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K64 (100) in font T7\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6D (109) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K32 (50) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K30 (48) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6A (106) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K62 (98) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K79 (121) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K48 (72) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K67 (103) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K57 (87) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K28 (40) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K70 (112) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K3A (58) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K2F (47) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K77 (119) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K2E (46) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K29 (41) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6B (107) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K4D (77) in font T5\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K54 (84) in font T1\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6F (111) in font T1\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6C (108) in font T1\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K66 (102) in font T1\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K72 (114) in font T1\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K65 (101) in font T1\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K69 (105) in font T1\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6E (110) in font T1\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6B (107) in font T1\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K73 (115) in font T1\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K52 (82) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K65 (101) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K66 (102) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K72 (114) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6E (110) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K63 (99) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6C (108) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K69 (105) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6B (107) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K67 (103) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K74 (116) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6F (111) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K75 (117) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K78 (120) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6D (109) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K68 (104) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K61 (97) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K32 (50) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K30 (48) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K6A (106) in font T3\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for K73 (115) in font T3\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font DNMFAG+AdvP4C4E59\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font DNMFDD+AdvPSSym\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (2) in font DNMFDD+AdvPSSym\r\nMar 30, 2016 12:42:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font DNMFDD+AdvPSSym\r\nMar 30, 2016 12:42:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font DNMKDI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font JHNACE+MATHG-1A\r\nMar 30, 2016 12:42:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font JHNACE+MATHG-1A\r\nMar 30, 2016 12:42:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (4) in font JHNACE+MATHG-1A\r\nMar 30, 2016 12:42:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9254 (5) in font JHNACE+MATHG-1A\r\nMar 30, 2016 12:42:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (6) in font JHNACE+MATHG-1A\r\nMar 30, 2016 12:42:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (7) in font JHNACE+MATHG-1A\r\nMar 30, 2016 12:42:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9255 (8) in font JHNACE+MATHG-1A\r\nMar 30, 2016 12:42:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font JHMMFK+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font ANAHNP+AdvP4C4E74\r\nMar 30, 2016 12:42:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font ANAHNP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (2) in font DBFCOL+MathematicalPi-One\r\nMar 30, 2016 12:42:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11003 (3) in font DBFCOL+MathematicalPi-One\r\nMar 30, 2016 12:42:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11005 (4) in font DBFCOL+MathematicalPi-One\r\nMar 30, 2016 12:42:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (5) in font DBFCOL+MathematicalPi-One\r\nMar 30, 2016 12:42:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (6) in font DBFCOL+MathematicalPi-One\r\nMar 30, 2016 12:42:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11021 (7) in font DBFCOL+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font FHKIBB+AdvP4C4E74\r\nMar 30, 2016 12:42:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font FHKIBB+AdvP4C4E74\r\nMar 30, 2016 12:42:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font FHKIBB+AdvP4C4E74\r\nMar 30, 2016 12:42:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (1) in font FHLADD+AdvP4C4E5E\r\nMar 30, 2016 12:42:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font FHLADD+AdvP4C4E5E\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font JIINLG+AdvMacMthSy\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:42:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font NAGIKG+AdvP4C4E74\r\nMar 30, 2016 12:42:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font NAGIKG+AdvP4C4E74\r\nMar 30, 2016 12:42:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font NAGILI+AdvP4C4E59\r\nMar 30, 2016 12:42:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (3) in font NAGILI+AdvP4C4E59\r\nMar 30, 2016 12:42:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font NAGIMK+AdvSPSASORT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font PMGCOB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font PGOPAM+MATHG-1A\r\nMar 30, 2016 12:43:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font PGOPAM+MATHG-1A\r\nMar 30, 2016 12:43:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font PGOPAM+MATHG-1A\r\nMar 30, 2016 12:43:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (5) in font PGOPAM+MATHG-1A\r\nMar 30, 2016 12:43:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (6) in font PGOPAM+MATHG-1A\r\nMar 30, 2016 12:43:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC1 (2) in font PHABFG+OnemtmiguAAAA\r\nMar 30, 2016 12:43:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (3) in font PHABFG+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g148 (1) in font UARTMS+TT61t00\r\nMar 30, 2016 12:43:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for ;### (1) in font ODNMDG+TT15Ct00\r\nMar 30, 2016 12:43:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g539 (2) in font UARTMS+TT61t00\r\nMar 30, 2016 12:43:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (3) in font UARTMS+TT61t00\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font AGPNPP+AdvT042\r\nMar 30, 2016 12:43:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font AHABFN+AdvP4C4E74\r\nMar 30, 2016 12:43:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font AHABFN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font GFMIMK+MATHG-1A\r\nMar 30, 2016 12:43:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font GFMIMK+MATHG-1A\r\nMar 30, 2016 12:43:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font GFMIMI+MTSY\r\nMar 30, 2016 12:43:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font GFMIMK+MATHG-1A\r\nMar 30, 2016 12:43:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (5) in font GFMIMK+MATHG-1A\r\nMar 30, 2016 12:43:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (6) in font GFMIMK+MATHG-1A\r\nMar 30, 2016 12:43:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for bracketleftBig (2) in font GFMKBF+CMEX10\r\nMar 30, 2016 12:43:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for bracketrightBig (3) in font GFMKBF+CMEX10\r\nMar 30, 2016 12:43:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (2) in font GFMILH+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font IKOPHB+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p54 (54) in font CNMLDG+DMathTen\r\nMar 30, 2016 12:43:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p58 (58) in font CNMLDK+DMathFive\r\nMar 30, 2016 12:43:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p118 (109) in font CNMLDO+DMathNine\r\nMar 30, 2016 12:43:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p37 (37) in font CNMLDG+DMathTen\r\nMar 30, 2016 12:43:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p92 (92) in font CNMLDK+DMathFive\r\nMar 30, 2016 12:43:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p57 (57) in font CNMLDK+DMathFive\r\nMar 30, 2016 12:43:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p31 (31) in font CNMLDG+DMathTen\r\nMar 30, 2016 12:43:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p66 (66) in font CNMLDK+DMathFive\r\nMar 30, 2016 12:43:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p104 (97) in font CNMLDO+DMathNine\r\nMar 30, 2016 12:43:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p105 (98) in font CNMLDO+DMathNine\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (2) in font CADICE+AdvP4C4E74\r\nMar 30, 2016 12:43:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (2) in font CADIHD+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font KHLJJF+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font IIEDBM+AdvPSSym\r\nMar 30, 2016 12:43:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font IIEDBM+AdvPSSym\r\nMar 30, 2016 12:43:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font IIENHB+AdvP4C4E74\r\nMar 30, 2016 12:43:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font IIENHB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font ENKOKP+AdvP4C4E74\r\nMar 30, 2016 12:43:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font ENKOKP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:43:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\nMar 30, 2016 12:43:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for suppress (2) in font TVBDZW+CMR10\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font DOFOMK+AdvPSSym\r\nMar 30, 2016 12:43:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C160 (2) in font DOGCMI+AdvPSMP1\r\nMar 30, 2016 12:43:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C224 (3) in font DOGCMI+AdvPSMP1\r\nMar 30, 2016 12:43:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font DOGCIH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font OKMPAN+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font PLIEIN+AdvPSSym\r\nMar 30, 2016 12:43:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font PLIEIN+AdvPSSym\r\nMar 30, 2016 12:43:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font PLILCI+AdvP4C4E74\r\nMar 30, 2016 12:43:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font PLILCI+AdvP4C4E74\r\nMar 30, 2016 12:43:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font PLILCI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font GIFFIO+AdvT042\r\nMar 30, 2016 12:43:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font GIFHKE+AdvP4C4E74\r\nMar 30, 2016 12:43:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font GIFHKE+AdvP4C4E74\r\nMar 30, 2016 12:43:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font GIFHKE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (1) in font MathPackTen\r\nMar 30, 2016 12:43:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (1) in font MathematicalPi-One\r\nMar 30, 2016 12:43:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font MathPackThirteen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ACMFFB+AdvT042\r\nMar 30, 2016 12:43:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (2) in font ACMGBO+AdvP4C4E74\r\nMar 30, 2016 12:43:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font ACMGBO+AdvP4C4E74\r\nMar 30, 2016 12:43:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font ACMGBO+AdvP4C4E74\r\nMar 30, 2016 12:43:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (5) in font ACMGBO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font EHIEPP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font KKJHBM+AdvBMa1\r\nMar 30, 2016 12:43:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C30 (2) in font KKJHBM+AdvBMa1\r\nMar 30, 2016 12:43:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C27 (3) in font KKJHBM+AdvBMa1\r\nMar 30, 2016 12:43:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C29 (4) in font KKJHBM+AdvBMa1\r\nMar 30, 2016 12:43:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C28 (5) in font KKJHBM+AdvBMa1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (2) in font MathPackTen\r\nMar 30, 2016 12:43:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (2) in font MathPackThirteen\r\nMar 30, 2016 12:43:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (3) in font MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font LucidaNewMath-Symbol\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font PEIDOO+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font MDGBPM+AdvPSSym\r\nMar 30, 2016 12:43:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (1) in font MDGHIN+AdvP4C4E74\r\nMar 30, 2016 12:43:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font MDGBPM+AdvPSSym\r\nMar 30, 2016 12:43:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MDGHIN+AdvP4C4E74\r\nMar 30, 2016 12:43:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C213 (1) in font MDJMIM+AdvPSMP1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font NDEBEJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font HKMGHG+AdvP4C4E74\r\nMar 30, 2016 12:43:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font HKMGHG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:43:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:43:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:43:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:43:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font OMKDKG+AdvT042\r\nMar 30, 2016 12:43:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OMKFBB+AdvP4C4E74\r\nMar 30, 2016 12:43:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font OMKFBB+AdvP4C4E74\r\nMar 30, 2016 12:43:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font OMKFBB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font KNMJCE+AdvP4C4E74\r\nMar 30, 2016 12:43:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font KNMJCE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font OMOPBP+AdvP4C4E74\r\nMar 30, 2016 12:43:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font OMOPCP+AdvPSSym\r\nMar 30, 2016 12:43:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font OMOPCP+AdvPSSym\r\nMar 30, 2016 12:43:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (3) in font OMOPBP+AdvP4C4E74\r\nMar 30, 2016 12:43:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font OMOPBP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:43:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:43:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:43:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font CCMNHL+AdvP4C4E59\r\nMar 30, 2016 12:44:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (3) in font CCMNHL+AdvP4C4E59\r\nMar 30, 2016 12:44:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font CCMNIN+AdvSPSASORT\r\nMar 30, 2016 12:44:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font CCMNKO+AdvPSSym\r\nMar 30, 2016 12:44:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font CCMNKP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:43:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font MathPackThirteen\r\nMar 30, 2016 12:43:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (1) in font MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font JLDCCF+AdvPSSym\r\nMar 30, 2016 12:44:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font JLDDJB+AdvP4C4E74\r\nMar 30, 2016 12:44:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font JLDCCF+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font AdvPSSym\r\nMar 30, 2016 12:44:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (2) in font AdvPSSym\r\nMar 30, 2016 12:44:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C228 (3) in font AdvPSSym\r\nMar 30, 2016 12:44:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font OHCENK+AdvPSSym\r\nMar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font OHCENL+AdvP4C4E74\r\nMar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font OHCENK+AdvPSSym\r\nMar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C228 (4) in font OHCENK+AdvPSSym\r\nMar 30, 2016 12:44:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (5) in font OHCENK+AdvPSSym\r\nMar 30, 2016 12:44:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g325 (2) in font OHCJEJ+Calibri\r\nMar 30, 2016 12:44:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g415 (4) in font OHCJEJ+Calibri\r\nMar 30, 2016 12:44:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font OHCENL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font TimesNewRomanPS-BoldMT for NewCenturySchlbk-Bold\r\nMar 30, 2016 12:44:07 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font TimesNewRomanPSMT for NewCenturySchlbk-Roman\r\nMar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font TimesNewRomanPS-ItalicMT for NewCenturySchlbk-Italic\r\nMar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for betatwo (226) in font ECNJCF+TimesTenGreek-Inclined\r\nMar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font Arial-BoldMT for Helvetica-Narrow-Bold\r\nMar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font Arial-ItalicMT for Helvetica-Narrow-Oblique\r\nMar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font ArialMT for Helvetica-Narrow\r\nMar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for epsilon1 (15) in font ECNMEH+MTMI\r\nMar 30, 2016 12:44:09 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>\r\nWARNING: Using fallback font TimesNewRomanPS-BoldItalicMT for NewCenturySchlbk-BoldItalic\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9810 (2) in font MathPackTen\r\nMar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (2) in font MathPackThirteen\r\nMar 30, 2016 12:44:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (3) in font MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font ALCJHI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (2) in font MAGCEG+AdvPSSym\r\nMar 30, 2016 12:44:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font MAGCEG+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font KNGJIJ+MathematicalPi-One\r\nMar 30, 2016 12:44:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font KNGLKN+CmtmiAA\r\nMar 30, 2016 12:44:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font KNGNMB+MathematicalPi-Four\r\nMar 30, 2016 12:44:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font KNGJIJ+MathematicalPi-One\r\nMar 30, 2016 12:44:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (5) in font KNGIOL+MTSY\r\nMar 30, 2016 12:44:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (4) in font KNGJIJ+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font LucidaNewMath-Symbol\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font EBFDLO+AdvP4C4E59\r\nMar 30, 2016 12:44:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font EBFDNB+AdvP4C4E74\r\nMar 30, 2016 12:44:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font EBFDNB+AdvP4C4E74\r\nMar 30, 2016 12:44:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font EBFDNB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font CFPPHC+AdvP4C4E74\r\nMar 30, 2016 12:44:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font CFPPJG+AdvP4C4E5E\r\nMar 30, 2016 12:44:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font CFPPHC+AdvP4C4E74\r\nMar 30, 2016 12:44:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font CGAEBN+AdvSPSASORT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C34 (2) in font PEKCHB+AdvPi3\r\nMar 30, 2016 12:44:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C33 (3) in font PEKCHB+AdvPi3\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font GDCINB+AdvP4C4E74\r\nMar 30, 2016 12:44:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font GDCINB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (2) in font AANAKA+AdvP4C4E74\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font AANAKA+AdvP4C4E74\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font AANAKA+AdvP4C4E74\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (5) in font AANAKA+AdvP4C4E74\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (6) in font AANAKA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font EPCPOG+MathematicalPi-One\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font EPCPOG+MathematicalPi-One\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font EPCPOG+MathematicalPi-One\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Sigma1 (3) in font EPCPNE+MTMI\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font EPAPLJ+Calibri\r\nMar 30, 2016 12:44:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font EPAPOK+Calibri-Italic\r\nMar 30, 2016 12:44:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font EPBADJ+Calibri-Bold\r\nMar 30, 2016 12:44:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font EPBAEK+Calibri-BoldItalic\r\nMar 30, 2016 12:44:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g882 (3) in font EPAPLJ+Calibri\r\nMar 30, 2016 12:44:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g630 (4) in font EPAPLJ+Calibri\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g628 (5) in font EPAPLJ+Calibri\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g626 (6) in font EPAPLJ+Calibri\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g535 (7) in font EPAPLJ+Calibri\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g645 (8) in font EPAPLJ+Calibri\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g712 (9) in font EPAPLJ+Calibri\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g882 (3) in font EPBAEK+Calibri-BoldItalic\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g113 (2) in font EPBCKM+SymbolMT\r\nMar 30, 2016 12:44:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g882 (3) in font EPAPOK+Calibri-Italic\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g358 (10) in font EPAPLJ+Calibri\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g892 (4) in font EPAPOK+Calibri-Italic\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (2) in font EPBIFL+ArialMT\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (3) in font EPBIFL+ArialMT\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g534 (4) in font EPBIFL+ArialMT\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g626 (5) in font EPAPOK+Calibri-Italic\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g882 (3) in font EPBADJ+Calibri-Bold\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g651 (4) in font EPBADJ+Calibri-Bold\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g652 (5) in font EPBADJ+Calibri-Bold\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g651 (11) in font EPAPLJ+Calibri\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g652 (12) in font EPAPLJ+Calibri\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g541 (2) in font EPBIFK+TimesNewRomanPS-BoldMT\r\nMar 30, 2016 12:44:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g541 (5) in font EPBIFL+ArialMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (2) in font MathPackTen\r\nMar 30, 2016 12:44:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (3) in font MathPackTen\r\nMar 30, 2016 12:44:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9828 (4) in font MathPackTen\r\nMar 30, 2016 12:44:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (2) in font MathPackThirteen\r\nMar 30, 2016 12:44:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (2) in font MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font GEHBDC+AdvP4C4E74\r\nMar 30, 2016 12:44:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font GEHBDE+AdvPSSym\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font GEHBDE+AdvPSSym\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font GEHBDE+AdvPSSym\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GEHBDC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:44:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\nMar 30, 2016 12:44:29 PM org.apache.fontbox.ttf.CmapSubtable processSubtype14\r\nWARNING: Format 14 cmap table is not supported and will be ignored\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ODNDFK+AdvT042\r\nMar 30, 2016 12:44:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font ODOALM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font INPAJJ+AdvP4C4E74\r\nMar 30, 2016 12:44:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font INPAJJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font OKMPAN+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:44:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:44:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font BJKKIN+AdvP4C4E74\r\nMar 30, 2016 12:44:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font BJKKIN+AdvP4C4E74\r\nMar 30, 2016 12:44:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (4) in font BJKKIN+AdvP4C4E74\r\nMar 30, 2016 12:44:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font BJKKIN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font ACFJCP+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font HEKNMJ+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font KJOLCM+AdvSPSASORT\r\nMar 30, 2016 12:44:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (2) in font KJOLCL+AdvP4C4E59\r\nMar 30, 2016 12:44:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font KJOLDP+AdvP4C4E74\r\nMar 30, 2016 12:44:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font KJOLDP+AdvP4C4E74\r\nMar 30, 2016 12:44:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font KJOLDP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circle6 (1) in font ODNMDG+TT10Ft00\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font JFBCDK+MathematicalPi-Four\r\nMar 30, 2016 12:44:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font JFBCDO+MathematicalPi-One\r\nMar 30, 2016 12:44:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font JFBCDO+MathematicalPi-One\r\nMar 30, 2016 12:44:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (2) in font JFBCEO+MTSY\r\nMar 30, 2016 12:44:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11034 (4) in font JFBCDO+MathematicalPi-One\r\nMar 30, 2016 12:44:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font JFBCDO+MathematicalPi-One\r\nMar 30, 2016 12:44:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font JFBCEO+MTSY\r\nMar 30, 2016 12:44:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9004 (6) in font JFBCDO+MathematicalPi-One\r\nMar 30, 2016 12:44:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (7) in font JFBCDO+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font NIDBNP+MTSY\r\nMar 30, 2016 12:44:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font NIDCDC+MATHG-1A\r\nMar 30, 2016 12:44:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for NAK (2) in font NIDBNO+OnemtmiguAAAA\r\nMar 30, 2016 12:44:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font NIDCDC+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font NFKMIB+AdvPSSym\r\nMar 30, 2016 12:44:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font NFKMIB+AdvPSSym\r\nMar 30, 2016 12:44:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font NFKMHA+AdvP4C4E74\r\nMar 30, 2016 12:44:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font NFKMIB+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font EKINCK+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font OHHLPD+AdvPSSym\r\nMar 30, 2016 12:44:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font OHHLPD+AdvPSSym\r\nMar 30, 2016 12:44:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font OHHLPD+AdvPSSym\r\nMar 30, 2016 12:44:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OHIACL+AdvP4C4E74\r\nMar 30, 2016 12:44:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font OHIACL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font PFIMOG+AdvP4C4E74\r\nMar 30, 2016 12:44:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font PFIJJG+AdvPSSym\r\nMar 30, 2016 12:44:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (2) in font PFJAIB+AdvPSMSAM10\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:44:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:44:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:44:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (2) in font JIDALM+MATHG-1A\r\nMar 30, 2016 12:45:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font JIDALM+MATHG-1A\r\nMar 30, 2016 12:45:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font JIDALM+MATHG-1A\r\nMar 30, 2016 12:45:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (5) in font JIDALM+MATHG-1A\r\nMar 30, 2016 12:45:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (5) in font JIDAAL+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font NABNOG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font ODNEDJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C22 (1) in font OMCJNE+AdvP4C4E59\r\nMar 30, 2016 12:45:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font OMCJNE+AdvP4C4E59\r\nMar 30, 2016 12:45:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font OMCKIH+AdvP4C4E74\r\nMar 30, 2016 12:45:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font OMCKIH+AdvP4C4E74\r\nMar 30, 2016 12:45:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font OMCKIH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (1) in font MGCPIA+AdvP4C4E74\r\nMar 30, 2016 12:45:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font MGEOCM+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font NOCOHM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font MKCFMF+AdvPSSym\r\nMar 30, 2016 12:45:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font MKCFMF+AdvPSSym\r\nMar 30, 2016 12:45:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MKCLEI+AdvP4C4E74\r\nMar 30, 2016 12:45:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font MKCFMF+AdvPSSym\r\nMar 30, 2016 12:45:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font MKCLEI+AdvP4C4E74\r\nMar 30, 2016 12:45:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (4) in font MKCLEI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:13 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+302 (302) in font GKHAGL+TimesNewRomanPSMT\r\nMar 30, 2016 12:45:13 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+539 (539) in font GKHAGL+TimesNewRomanPSMT\r\nMar 30, 2016 12:45:13 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+537 (537) in font GKHAGL+TimesNewRomanPSMT\r\nMar 30, 2016 12:45:13 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+541 (541) in font GKHAGL+TimesNewRomanPSMT\r\nMar 30, 2016 12:45:13 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+263 (263) in font SimSun-GBK-EUC-H-Identity-H\r\nMar 30, 2016 12:45:13 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+533 (533) in font GKHAGL+TimesNewRomanPSMT\r\nMar 30, 2016 12:45:13 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+114 (114) in font GKHCEC+SymbolMT\r\nMar 30, 2016 12:45:13 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+302 (302) in font GKHCOP+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:45:13 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+539 (539) in font GKHCOP+TimesNewRomanPS-ItalicMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font ODOLBC+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font EDGHCG+AdvP4C4E59\r\nMar 30, 2016 12:45:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font EDGHEM+AdvPSSym\r\nMar 30, 2016 12:45:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C160 (1) in font EDILPB+AdvPSMP1\r\nMar 30, 2016 12:45:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C224 (3) in font EDILPB+AdvPSMP1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (2) in font EMMKEK+AdvP4C4E74\r\nMar 30, 2016 12:45:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font EMMMPD+AdvT042\r\n']
['Warning PDFBox', "Mar 30, 2016 12:45:17 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Using fallback font 'ArialMT' for 'Helvetica,Italic'\r\nMar 30, 2016 12:45:17 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Using fallback font 'Arial-BoldMT' for 'Helvetica,BoldItalic'\r\nMar 30, 2016 12:45:17 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Using fallback font 'Arial-BoldMT' for 'Helvetica,Bold'\r\n"]
['Warning PDFBox', 'Mar 30, 2016 12:45:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font EHEGLL+AdvP4C4E74\r\nMar 30, 2016 12:45:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (3) in font EHEGLL+AdvP4C4E74\r\nMar 30, 2016 12:45:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font EHEGLL+AdvP4C4E74\r\nMar 30, 2016 12:45:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (5) in font EHEGLL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (2) in font MOLINN+AdvPSSym\r\nMar 30, 2016 12:45:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (3) in font MOLINN+AdvPSSym\r\nMar 30, 2016 12:45:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C212 (4) in font MOLINN+AdvPSSym\r\nMar 30, 2016 12:45:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (5) in font MOLINN+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H18528 (1) in font OKDJHJ+Universal-NewswithCommPi\r\nMar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (1) in font OKDJIM+Universal-GreekwithMathPi\r\nMar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11022 (2) in font OKDJIM+Universal-GreekwithMathPi\r\nMar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (3) in font OKDJIM+Universal-GreekwithMathPi\r\nMar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11011 (4) in font OKDJIM+Universal-GreekwithMathPi\r\nMar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11569 (1) in font OKDKIC+MathematicalPi-Six\r\nMar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (5) in font OKDJIM+Universal-GreekwithMathPi\r\nMar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11005 (6) in font OKDJIM+Universal-GreekwithMathPi\r\nMar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (7) in font OKDJIM+Universal-GreekwithMathPi\r\nMar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11021 (8) in font OKDJIM+Universal-GreekwithMathPi\r\nMar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (9) in font OKDJIM+Universal-GreekwithMathPi\r\nMar 30, 2016 12:45:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9004 (10) in font OKDJIM+Universal-GreekwithMathPi\r\n']
['Warning PDFBox', "Mar 30, 2016 12:45:21 PM org.apache.fontbox.ttf.CmapSubtable processSubtype14\r\nWARNING: Format 14 cmap table is not supported and will be ignored\r\nMar 30, 2016 12:45:21 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Using fallback font 'CourierNewPSMT' for 'MSMincho'\r\n"]
['Warning PDFBox', 'Mar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:45:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:45:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (2) in font JIEIJL+MTSY\r\nMar 30, 2016 12:45:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font JIEIKM+MathematicalPi-One\r\nMar 30, 2016 12:45:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font JIEIKM+MathematicalPi-One\r\nMar 30, 2016 12:45:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font JIEIKM+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font FNNKPI+MATHG-1A\r\nMar 30, 2016 12:45:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font FNNKPI+MATHG-1A\r\nMar 30, 2016 12:45:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font FNNKPI+MATHG-1A\r\nMar 30, 2016 12:45:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font FNOKLJ+OnemtmiguAAAA\r\nMar 30, 2016 12:45:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font FNNKPI+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font KHBMDM+MathematicalPi-Four\r\nMar 30, 2016 12:45:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font KHBMEO+MathematicalPi-One\r\nMar 30, 2016 12:45:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (2) in font KHBMEP+MTSY\r\nMar 30, 2016 12:45:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font KHBMEO+MathematicalPi-One\r\nMar 30, 2016 12:45:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (4) in font KHBMEO+MathematicalPi-One\r\nMar 30, 2016 12:45:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font KHBMEO+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MCGNJE+AdvT042\r\nMar 30, 2016 12:45:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MCHEIM+AdvP4C4E74\r\nMar 30, 2016 12:45:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font MCHEIM+AdvP4C4E74\r\nMar 30, 2016 12:45:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font MCHEIM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:36 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+203 (203) in font KLKLMN+Wingdings2\r\nMar 30, 2016 12:45:37 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+186 (186) in font KLKLMN+Wingdings2\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MPBCBH+AdvP4C4E74\r\nMar 30, 2016 12:45:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font MPBCBH+AdvP4C4E74\r\nMar 30, 2016 12:45:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font MPBCBH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font EAANCI+AdvP4C4E74\r\nMar 30, 2016 12:45:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font EAANCI+AdvP4C4E74\r\nMar 30, 2016 12:45:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font EAANCI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font AdvPSSym\r\nMar 30, 2016 12:45:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font AdvP4C4E74\r\nMar 30, 2016 12:45:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:45:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:45:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C160 (2) in font PODONN+AdvPSMP1\r\nMar 30, 2016 12:45:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C224 (3) in font PODONN+AdvPSMP1\r\nMar 30, 2016 12:45:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font PODOPD+AdvPSSym\r\nMar 30, 2016 12:45:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font PODOPD+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MOMHOA+AdvP4C4E74\r\nMar 30, 2016 12:45:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font MOMKLB+AdvPSSym\r\nMar 30, 2016 12:45:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font MOMHOA+AdvP4C4E74\r\nMar 30, 2016 12:45:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font MOMKLB+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p54 (54) in font DFGMFG+DMathTen\r\nMar 30, 2016 12:45:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p104 (97) in font DFHAEE+DMathNine\r\nMar 30, 2016 12:45:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p107 (103) in font DFHAEE+DMathNine\r\nMar 30, 2016 12:45:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p105 (98) in font DFHAEE+DMathNine\r\nMar 30, 2016 12:45:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p115 (107) in font DFHAEE+DMathNine\r\nMar 30, 2016 12:45:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p37 (37) in font DFGMFG+DMathTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font FNHECI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font ENLMFK+AdvPSSym\r\nMar 30, 2016 12:45:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font ENLMFK+AdvPSSym\r\nMar 30, 2016 12:45:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font ENMAAG+AdvP4C4E74\r\nMar 30, 2016 12:45:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font ENMAAG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C23 (1) in font DLKPCB+AdvP4C4E5E\r\nMar 30, 2016 12:45:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C23 (2) in font DLKPBA+AdvP4C4E59\r\nMar 30, 2016 12:45:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font DLKPCC+AdvP4C4E74\r\nMar 30, 2016 12:45:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font DLKPCC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:45:59 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11003 (2) in font OJHBGA+MathematicalPi-One\r\nMar 30, 2016 12:46:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (3) in font OJHBGA+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ANPMHP+AdvT042\r\nMar 30, 2016 12:46:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font ANPMFO+AdvP4C4E74\r\nMar 30, 2016 12:46:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font ANPMFO+AdvP4C4E74\r\nMar 30, 2016 12:46:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font ANPMFO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font AEGFII+AdvMacMthSyN\r\nMar 30, 2016 12:46:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font AEGFII+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font GNOKNK+AdvP4C4E74\r\nMar 30, 2016 12:46:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g415 (2) in font GNOLLP+Calibri\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font NDNNGG+AdvPSSym\r\nMar 30, 2016 12:46:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font NDOBDD+AdvP4C4E74\r\nMar 30, 2016 12:46:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font NDNNGG+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font GJCIFD+AdvP4C4E59\r\nMar 30, 2016 12:46:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C22 (3) in font GJCIFD+AdvP4C4E59\r\nMar 30, 2016 12:46:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font GJCIGH+AdvP4C4E74\r\nMar 30, 2016 12:46:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font GJCIGH+AdvP4C4E74\r\nMar 30, 2016 12:46:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font GJCIGH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (2) in font MathPackThirteen\r\nMar 30, 2016 12:46:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (2) in font MathematicalPi-One\r\nMar 30, 2016 12:46:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (2) in font MathPackTen\r\nMar 30, 2016 12:46:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (3) in font MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font LCGBLI+AdvP4C4E74\r\nMar 30, 2016 12:46:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font LCGBLI+AdvP4C4E74\r\nMar 30, 2016 12:46:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font LCGBLI+AdvP4C4E74\r\nMar 30, 2016 12:46:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g415 (2) in font LCHIGF+Calibri-Bold\r\nMar 30, 2016 12:46:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font LCGBLI+AdvP4C4E74\r\nMar 30, 2016 12:46:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (6) in font LCGBLI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (1) in font IFFHFM+AdvP4C4E59\r\nMar 30, 2016 12:46:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C22 (3) in font IFFHFM+AdvP4C4E59\r\nMar 30, 2016 12:46:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (4) in font IFFHFM+AdvP4C4E59\r\nMar 30, 2016 12:46:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font IFFHGP+AdvP4C4E74\r\nMar 30, 2016 12:46:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font IFFHGP+AdvP4C4E74\r\nMar 30, 2016 12:46:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (4) in font IFFHGP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:46:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:46:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:46:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font AdvP4C4E46\r\nMar 30, 2016 12:46:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font AdvP4C4E74\r\nMar 30, 2016 12:46:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (4) in font AdvP4C4E74\r\nMar 30, 2016 12:46:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (5) in font AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font EPOHAP+MathematicalPi-One\r\nMar 30, 2016 12:46:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font EPOHAP+MathematicalPi-One\r\nMar 30, 2016 12:46:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g415 (2) in font EPOPBM+Calibri-Bold\r\nMar 30, 2016 12:46:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g332 (2) in font EPPEMJ+Calibri\r\nMar 30, 2016 12:46:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font EPOICJ+MTSY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font KFJKEF+AdvP4C4E74\r\nMar 30, 2016 12:46:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (2) in font KFJKEF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:46:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:46:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:46:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font AdvP4C4E74\r\nMar 30, 2016 12:46:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font AdvP4C4E74\r\nMar 30, 2016 12:46:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (5) in font AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font PHHFDF+AdvPSSym\r\nMar 30, 2016 12:46:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font PHHFDF+AdvPSSym\r\nMar 30, 2016 12:46:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font PHHIHE+AdvP4C4E74\r\nMar 30, 2016 12:46:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font PHHIHE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (1) in font MathPackTen\r\nMar 30, 2016 12:46:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (2) in font MathPackTen\r\nMar 30, 2016 12:46:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font MathPackThirteen\r\nMar 30, 2016 12:46:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9837 (3) in font MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font KGPFBF+AdvP4C4E74\r\nMar 30, 2016 12:46:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font KGPFBF+AdvP4C4E74\r\nMar 30, 2016 12:46:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (4) in font KGPFBF+AdvP4C4E74\r\nMar 30, 2016 12:46:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (5) in font KGPFBF+AdvP4C4E74\r\nMar 30, 2016 12:46:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (6) in font KGPFBF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:46:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:46:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:46:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font OKMFFK+AdvP4C4E74\r\nMar 30, 2016 12:46:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font OKMFFK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C27 (1) in font NDFBKL+AdvBMa1\r\nMar 30, 2016 12:46:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font NDFBKL+AdvBMa1\r\nMar 30, 2016 12:46:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C30 (3) in font NDFBKL+AdvBMa1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font CMIHNE+MATHG-1A\r\nMar 30, 2016 12:46:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font CMIHNE+MATHG-1A\r\nMar 30, 2016 12:46:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font CMIFPO+MTSY\r\nMar 30, 2016 12:46:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font CMIHNE+MATHG-1A\r\nMar 30, 2016 12:46:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font CMIHNE+MATHG-1A\r\nMar 30, 2016 12:46:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font CMIHNE+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (1) in font MathPackTwelve\r\nMar 30, 2016 12:46:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (1) in font MathPackTen\r\nMar 30, 2016 12:46:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font MathPackThirteen\r\nMar 30, 2016 12:46:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9797 (2) in font MathPackThirteen\r\nMar 30, 2016 12:46:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (2) in font MathPackTen\r\nMar 30, 2016 12:46:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9828 (3) in font MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font AdvPSSym\r\nMar 30, 2016 12:46:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font AdvP4C4E74\r\nMar 30, 2016 12:46:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font AdvPSSym\r\nMar 30, 2016 12:46:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font AdvP4C4E74\r\nMar 30, 2016 12:46:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font AdvPSSym\r\nMar 30, 2016 12:46:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:46:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (2) in font OPGAHG+AdvP4C4E74\r\nMar 30, 2016 12:46:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font OPGAHG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font CFAODG+AdvBMa1\r\nMar 30, 2016 12:46:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C27 (2) in font CFAODG+AdvBMa1\r\nMar 30, 2016 12:46:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C29 (3) in font CFAODG+AdvBMa1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C30 (1) in font DCMPJB+AdvBMa1\r\nMar 30, 2016 12:46:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C27 (2) in font DCMPJB+AdvBMa1\r\nMar 30, 2016 12:46:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (3) in font DCMPJB+AdvBMa1\r\nMar 30, 2016 12:46:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C28 (4) in font DCMPJB+AdvBMa1\r\nMar 30, 2016 12:46:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C29 (6) in font DCMPJB+AdvBMa1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (1) in font MathPackTen\r\nMar 30, 2016 12:46:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9828 (2) in font MathPackTen\r\nMar 30, 2016 12:46:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font MathPackThirteen\r\nMar 30, 2016 12:46:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (1) in font MathematicalPi-One\r\nMar 30, 2016 12:46:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (3) in font MathPackTen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AAJHHB+AdvPSSym\r\nMar 30, 2016 12:46:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font AAJPLE+AdvP4C4E74\r\nMar 30, 2016 12:46:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AAJHHB+AdvPSSym\r\nMar 30, 2016 12:46:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font AAJPLE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font LECADB+AdvP4C4E74\r\nMar 30, 2016 12:46:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font LECADB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font GOFLKM+MathematicalPi-One\r\nMar 30, 2016 12:46:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font GOFLKM+MathematicalPi-One\r\nMar 30, 2016 12:46:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (4) in font GOFLKM+MathematicalPi-One\r\nMar 30, 2016 12:46:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font GOFLJJ+MTSY\r\nMar 30, 2016 12:46:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font GOFLKM+MathematicalPi-One\r\nMar 30, 2016 12:46:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font GOFLKM+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HLJLEG+AdvP4C4E74\r\nMar 30, 2016 12:46:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font HLJLEG+AdvP4C4E74\r\nMar 30, 2016 12:46:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font HLJLEG+AdvP4C4E74\r\nMar 30, 2016 12:46:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (5) in font HLJLEG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:46:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font ICCNDM+MTSY\r\nMar 30, 2016 12:46:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font ICDJAE+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for trianglert (2) in font ADNEJJ+TT8E67B43o00\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:03 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2 <init>\r\nWARNING: Using fallback font Asimov for CID-keyed TrueType font MalgunGothicRegular\r\nMar 30, 2016 12:47:05 PM org.apache.pdfbox.pdmodel.font.PDCIDFontType2 <init>\r\nWARNING: Using fallback font AdobeMyungjoStd-Medium for CID-keyed TrueType font Batang\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font PMAJBN+AdvMacMthSyN\r\nMar 30, 2016 12:47:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font PMAJBN+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font CCBKMN+AdvT042\r\nMar 30, 2016 12:47:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (2) in font CCCBHD+AdvP4C4E74\r\nMar 30, 2016 12:47:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font CCCBHD+AdvP4C4E74\r\nMar 30, 2016 12:47:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font CCCBHD+AdvP4C4E74\r\nMar 30, 2016 12:47:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (5) in font CCCBHD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font NOOBLH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font AHLACJ+MathematicalPi-One\r\nMar 30, 2016 12:47:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17012 (2) in font AHLDMF+MathematicalPi-Six\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:13 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font PNBHEF+AdvPSSym\r\nMar 30, 2016 12:47:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font PNBION+AdvP4C4E74\r\nMar 30, 2016 12:47:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font PNBHEF+AdvPSSym\r\nMar 30, 2016 12:47:14 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font PNBION+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font BEFIHD+MathPiOneBold\r\nMar 30, 2016 12:47:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font BEFILH+MathematicalPi-One\r\nMar 30, 2016 12:47:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11349 (3) in font BEFILH+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C13 (1) in font KIACGI+AdvP4C4E74\r\nMar 30, 2016 12:47:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font KIACGI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font DKNKOC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font HDBJDH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font HMADND+AdvT042\r\nMar 30, 2016 12:47:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HMAEJA+AdvP4C4E74\r\nMar 30, 2016 12:47:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font HMAEJA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ECJFCA+AdvT042\r\nMar 30, 2016 12:47:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font ECJJBL+AdvP4C4E74\r\nMar 30, 2016 12:47:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font ECJJBL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font INGOID+AdvT042\r\nMar 30, 2016 12:47:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font INGOIE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font FMCDEN+AdvP4C4E74\r\nMar 30, 2016 12:47:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font FMCDEN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (1) in font OPKNBP+AdvP4C4E74\r\nMar 30, 2016 12:47:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font OPKNBP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font GAMHHI+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font DOHGEK+MathematicalPi-One\r\nMar 30, 2016 12:47:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17011 (2) in font DOJIJJ+MathematicalPi-Six\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font GCHAHO+AdvP4C4E59\r\nMar 30, 2016 12:47:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font GCHAIE+AdvP4C4E74\r\nMar 30, 2016 12:47:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font GCHAIE+AdvP4C4E74\r\nMar 30, 2016 12:47:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font GCHAIE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Omega1 (3) in font EFCMJD+MTMI\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font BGCNAO+MATHG-1A\r\nMar 30, 2016 12:47:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font BGCNAO+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font GNKIMP+AdvP4C4E74\r\nMar 30, 2016 12:47:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font GNKJCA+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:47:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:47:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:47:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font GOAAEJ+AdvT042\r\nMar 30, 2016 12:47:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font GOAAFJ+AdvP4C4E74\r\nMar 30, 2016 12:47:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font GOAAFJ+AdvP4C4E74\r\nMar 30, 2016 12:47:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font GOAAFJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:47:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:47:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font AdvPSSym\r\nMar 30, 2016 12:47:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MOCFLP+AdvT042\r\nMar 30, 2016 12:47:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font MOCJFL+AdvP4C4E74\r\nMar 30, 2016 12:47:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font MOCJFL+AdvP4C4E74\r\nMar 30, 2016 12:47:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font MOCJFL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MOCFLP+AdvT042\r\nMar 30, 2016 12:47:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font MOCJFL+AdvP4C4E74\r\nMar 30, 2016 12:47:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font MOCJFL+AdvP4C4E74\r\nMar 30, 2016 12:47:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font MOCJFL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font FOJEJJ+AdvT042\r\nMar 30, 2016 12:47:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font FOJFCH+AdvP4C4E74\r\nMar 30, 2016 12:47:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font FOJFCH+AdvP4C4E74\r\nMar 30, 2016 12:47:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font FOJFCH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MOOICD+AdvT042\r\nMar 30, 2016 12:47:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MOOKMF+AdvP4C4E74\r\nMar 30, 2016 12:47:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font MOOKMF+AdvP4C4E74\r\nMar 30, 2016 12:47:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font MOOKMF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ABLGAB+AdvT001\r\nMar 30, 2016 12:47:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font ABLGCB+AdvMT_SY\r\nMar 30, 2016 12:47:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font ABLGCB+AdvMT_SY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MAEMLB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (1) in font EBBCDJ+AdvP4C4E59\r\nMar 30, 2016 12:47:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (3) in font EBBCDJ+AdvP4C4E59\r\nMar 30, 2016 12:47:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (1) in font EBBCKD+AdvP4C4E74\r\nMar 30, 2016 12:47:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C226 (1) in font EBBCMG+AdvPSSym\r\nMar 30, 2016 12:47:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font EBBCNH+AdvSPSASORT\r\nMar 30, 2016 12:47:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font EBBCKD+AdvP4C4E74\r\nMar 30, 2016 12:47:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font EBBCKD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:47:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:47:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font BKNFBA+AdvT042\r\nMar 30, 2016 12:47:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font BKNKCD+AdvP4C4E74\r\nMar 30, 2016 12:47:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font BKNKCD+AdvP4C4E74\r\nMar 30, 2016 12:47:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (4) in font BKNKCD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font BEKNBP+AdvP4C4E74\r\nMar 30, 2016 12:48:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font BEKNBP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font OIDOOD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font FPAHPE+AdvP4C4E74\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font FPAIAF+AdvT042\r\nMar 30, 2016 12:48:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font FPAHPE+AdvP4C4E74\r\nMar 30, 2016 12:48:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font FPAHPE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font AMIPDG+Calibri\r\nMar 30, 2016 12:48:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (2) in font AMIPFH+ArialMT\r\nMar 30, 2016 12:48:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g68 (2) in font AMIPHI+SymbolMT\r\nMar 30, 2016 12:48:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g541 (3) in font AMIPFH+ArialMT\r\nMar 30, 2016 12:48:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (2) in font AMIPIJ+Arial-BoldItalicMT\r\nMar 30, 2016 12:48:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g168 (4) in font AMIPFH+ArialMT\r\nMar 30, 2016 12:48:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g250 (5) in font AMIPFH+ArialMT\r\nMar 30, 2016 12:48:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g120 (3) in font AMIPHI+SymbolMT\r\nMar 30, 2016 12:48:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g882 (3) in font AMIPDG+Calibri\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font FNCHBM+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:48:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:07 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font JLHDCC+AdvT042\r\nMar 30, 2016 12:48:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font JLHDNC+AdvP4C4E74\r\nMar 30, 2016 12:48:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font JLHDNC+AdvP4C4E74\r\nMar 30, 2016 12:48:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font JLHDNC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p105 (98) in font IELAFM+DMathNine\r\nMar 30, 2016 12:48:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p54 (54) in font IELAGA+DMathTen\r\nMar 30, 2016 12:48:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p118 (109) in font IELAFM+DMathNine\r\nMar 30, 2016 12:48:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p104 (97) in font IELAFM+DMathNine\r\nMar 30, 2016 12:48:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p66 (66) in font IELIDG+DMathFive\r\nMar 30, 2016 12:48:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p57 (57) in font IELIDG+DMathFive\r\nMar 30, 2016 12:48:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p92 (92) in font IELIDG+DMathFive\r\nMar 30, 2016 12:48:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p107 (103) in font IELAFM+DMathNine\r\nMar 30, 2016 12:48:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p108 (100) in font IELAFM+DMathNine\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font AJDJAO+Calibri\r\nMar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font AJDJCO+Calibri-Italic\r\nMar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g882 (3) in font AJDJAO+Calibri\r\nMar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g120 (2) in font AJDJFB+SymbolMT\r\nMar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g2020 (2) in font AJDJLA+Cambria\r\nMar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g237 (2) in font AJDJDP+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (3) in font AJDJLA+Cambria\r\nMar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g2010 (4) in font AJDJLA+Cambria\r\nMar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g397 (3) in font AJDJDP+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g541 (4) in font AJDJDP+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (5) in font AJDJDP+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g1842 (5) in font AJDJLA+Cambria\r\nMar 30, 2016 12:48:18 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+6632 (6632) in font ArialUnicodeMS-Identity-H\r\nMar 30, 2016 12:48:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g539 (6) in font AJDJDP+TimesNewRomanPSMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font LINDOE+MATHG-1A\r\nMar 30, 2016 12:48:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font LINDOE+MATHG-1A\r\nMar 30, 2016 12:48:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (4) in font LIMOBC+MTSY\r\nMar 30, 2016 12:48:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font LINDOE+MATHG-1A\r\nMar 30, 2016 12:48:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font LINDOE+MATHG-1A\r\nMar 30, 2016 12:48:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for SOH (2) in font LIMOCD+OnemtmiguAAAA\r\nMar 30, 2016 12:48:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (3) in font LIMOCD+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:48:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font KNHAJL+AdvMacMthSyN\r\nMar 30, 2016 12:48:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font KNHAJL+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+54 (54) in font GHPOIL+TimesNewRoman,Bold\r\nMar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+88 (88) in font GHPOIL+TimesNewRoman,Bold\r\nMar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+83 (83) in font GHPOIL+TimesNewRoman,Bold\r\nMar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+85 (85) in font GHPOIL+TimesNewRoman,Bold\r\nMar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+72 (72) in font GHPOIL+TimesNewRoman,Bold\r\nMar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+86 (86) in font GHPOIL+TimesNewRoman,Bold\r\nMar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+76 (76) in font GHPOIL+TimesNewRoman,Bold\r\nMar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+82 (82) in font GHPOIL+TimesNewRoman,Bold\r\nMar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+81 (81) in font GHPOIL+TimesNewRoman,Bold\r\nMar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+3 (3) in font GHPOIL+TimesNewRoman,Bold\r\nMar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+73 (73) in font GHPOIL+TimesNewRoman,Bold\r\nMar 30, 2016 12:48:22 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+533 (533) in font GHPOIL+TimesNewRoman,Bold\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font CNHPIA+AdvPSSym\r\nMar 30, 2016 12:48:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font CNHPIA+AdvPSSym\r\nMar 30, 2016 12:48:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font CNIBHG+AdvP4C4E74\r\nMar 30, 2016 12:48:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font CNIBHG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font DMGFJB+MTSY\r\nMar 30, 2016 12:48:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font DMGKGF+MathematicalPi-One\r\nMar 30, 2016 12:48:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for circlecopyrt (3) in font DMGFJB+MTSY\r\nMar 30, 2016 12:48:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11034 (3) in font DMGKGF+MathematicalPi-One\r\nMar 30, 2016 12:48:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font DMGKGF+MathematicalPi-One\r\nMar 30, 2016 12:48:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (5) in font DMGKGF+MathematicalPi-One\r\nMar 30, 2016 12:48:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font DMGKGF+MathematicalPi-One\r\nMar 30, 2016 12:48:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font DMGLEC+MTSYB\r\nMar 30, 2016 12:48:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (7) in font DMGKGF+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font LGGMHA+AdvT042\r\nMar 30, 2016 12:48:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font LGGNHL+AdvP4C4E74\r\nMar 30, 2016 12:48:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font LGGNHL+AdvP4C4E74\r\nMar 30, 2016 12:48:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font LGGNHL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font OLDKFN+AdvP4C4E59\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C212 (2) in font MOHMKE+AdvPSSym\r\nMar 30, 2016 12:48:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (3) in font MOHMKE+AdvPSSym\r\nMar 30, 2016 12:48:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font MOHMKE+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C27 (1) in font CHDKEP+AdvBMa1\r\nMar 30, 2016 12:48:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font CHDKEP+AdvBMa1\r\nMar 30, 2016 12:48:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C28 (3) in font CHDKEP+AdvBMa1\r\nMar 30, 2016 12:48:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (2) in font CHDPBD+AdvDM5\r\nMar 30, 2016 12:48:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C29 (5) in font CHDKEP+AdvBMa1\r\nMar 30, 2016 12:48:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C30 (6) in font CHDKEP+AdvBMa1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C212 (2) in font MOHMKE+AdvPSSym\r\nMar 30, 2016 12:48:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (3) in font MOHMKE+AdvPSSym\r\nMar 30, 2016 12:48:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font MOHMKE+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MMAOPJ+AdvT042\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MMBBDO+AdvP4C4E74\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font MMBBDO+AdvP4C4E74\r\nMar 30, 2016 12:48:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font MMBBDO+AdvP4C4E74\r\nMar 30, 2016 12:48:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (5) in font MMBBDO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font IBLPCI+AdvT042\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font IBMCBH+AdvP4C4E74\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font IBMCBH+AdvP4C4E74\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font IBMCBH+AdvP4C4E74\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (5) in font IBMCBH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g609 (2) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g607 (3) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g613 (4) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g611 (5) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g615 (6) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g602 (7) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g633 (8) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g604 (9) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g612 (10) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g585 (11) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g618 (12) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g616 (13) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g623 (14) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g606 (15) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g629 (16) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g620 (17) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g605 (18) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g607 (2) in font BMMAFD+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:48:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g541 (19) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g252 (20) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (21) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g534 (22) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g587 (3) in font BMMAFD+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g268 (23) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g591 (4) in font BMMAFD+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g148 (24) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g572 (25) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g253 (26) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g280 (27) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g247 (28) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g433 (29) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (30) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g417 (31) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g582 (33) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g303 (35) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g584 (36) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g588 (62) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g580 (92) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g570 (5) in font BMMAFD+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g254 (94) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g619 (6) in font BMMAFD+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:48:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g602 (7) in font BMMAFD+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g623 (8) in font BMMAFD+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g616 (9) in font BMMAFD+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g586 (10) in font BMMAFD+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g587 (96) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g570 (123) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g621 (124) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g575 (125) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g539 (129) in font BMMADC+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:37 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+3 (3) in font ArialUnicodeMS-KSCms-UHC-H-Identity-H\r\nMar 30, 2016 12:48:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g237 (130) in font BMMADC+TimesNewRomanPSMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:48:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (2) in font FEGHMO+MathematicalPi-One\r\nMar 30, 2016 12:48:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11021 (3) in font FEGHMO+MathematicalPi-One\r\nMar 30, 2016 12:48:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (4) in font FEGHMO+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g237 (2) in font GMANDA+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:48:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g237 (2) in font GMAMPA+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g1081 (2) in font GMANEA+MS-Mincho\r\nMar 30, 2016 12:48:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (3) in font GMAMPA+TimesNewRomanPSMT\r\nMar 30, 2016 12:48:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g541 (4) in font GMAMPA+TimesNewRomanPSMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font NFBCPN+AdvMacMthSyN\r\nMar 30, 2016 12:48:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font NFBCPN+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:48:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:48:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font KNDLJP+AdvT042\r\nMar 30, 2016 12:48:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font KNDMFM+AdvP4C4E74\r\nMar 30, 2016 12:48:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font KNDMFM+AdvP4C4E74\r\nMar 30, 2016 12:48:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font KNDMFM+AdvP4C4E74\r\nMar 30, 2016 12:48:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (5) in font KNDMFM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p105 (98) in font GEGOHD+DMathNine\r\nMar 30, 2016 12:48:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p104 (97) in font GEGOHD+DMathNine\r\nMar 30, 2016 12:48:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p54 (54) in font GEGOHH+DMathTen\r\nMar 30, 2016 12:48:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p66 (66) in font GEHCGD+DMathFive\r\nMar 30, 2016 12:48:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p118 (109) in font GEGOHD+DMathNine\r\nMar 30, 2016 12:48:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p98 (98) in font GEJJHH+BMathThirTeen\r\nMar 30, 2016 12:48:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p57 (57) in font GEHCGD+DMathFive\r\nMar 30, 2016 12:48:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p97 (97) in font GEJJHH+BMathThirTeen\r\nMar 30, 2016 12:48:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p68 (68) in font GEJJHH+BMathThirTeen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font LEOAAF+AdvT042\r\nMar 30, 2016 12:48:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font LEPADF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font AFFIOI+AdvT042\r\nMar 30, 2016 12:48:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font AFGAAP+AdvP4C4E74\r\nMar 30, 2016 12:48:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font AFGAAP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font JMFGDO+AdvSPSASORT\r\nMar 30, 2016 12:48:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (2) in font JMFGFC+AdvPSMSAM10\r\nMar 30, 2016 12:48:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font JMFGEB+AdvP4C4E74\r\nMar 30, 2016 12:48:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font JMFGFD+AdvPSSym\r\nMar 30, 2016 12:48:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font JMFGFD+AdvPSSym\r\nMar 30, 2016 12:48:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font JMFGEB+AdvP4C4E74\r\nMar 30, 2016 12:48:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (2) in font JMFIAB+AdvP4C4E46\r\nMar 30, 2016 12:48:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (3) in font JMFIAB+AdvP4C4E46\r\nMar 30, 2016 12:48:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (4) in font JMFGEB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:48:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MHGEBM+AdvT042\r\nMar 30, 2016 12:48:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MHGEPL+AdvP4C4E74\r\nMar 30, 2016 12:48:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (3) in font MHGEPL+AdvP4C4E74\r\nMar 30, 2016 12:48:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font MHGEPL+AdvP4C4E74\r\nMar 30, 2016 12:48:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (5) in font MHGEPL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HEGEMJ+AdvP4C4E74\r\nMar 30, 2016 12:49:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font HEGEMJ+AdvP4C4E74\r\nMar 30, 2016 12:49:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font HEGEMJ+AdvP4C4E74\r\n']
['Warning PDFBox', "Mar 30, 2016 12:49:02 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Using fallback font 'ArialMT' for 'MalgunGothicRegular'\r\n"]
['Warning PDFBox', 'Mar 30, 2016 12:49:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:49:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:49:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C181 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font CAGPMN+MATHG-1A\r\nMar 30, 2016 12:49:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font CAGPMN+MATHG-1A\r\nMar 30, 2016 12:49:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font CAGPMN+MATHG-1A\r\n']
['Warning PDFBox', "Mar 30, 2016 12:49:11 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Using fallback font 'TimesNewRomanPSMT' for 'CenturySchoolbook'\r\nMar 30, 2016 12:49:11 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Using fallback font 'TimesNewRomanPS-ItalicMT' for 'CenturySchoolbook-Italic'\r\n"]
['Warning PDFBox', 'Mar 30, 2016 12:49:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font KHEAJK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font CCOJOP+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font GFBMHK+AdvT042\r\nMar 30, 2016 12:49:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font GFBONO+AdvP4C4E74\r\nMar 30, 2016 12:49:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font GFBONO+AdvP4C4E74\r\nMar 30, 2016 12:49:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font GFBONO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:49:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:49:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font FCAKJG+AdvT001\r\nMar 30, 2016 12:49:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font FCAKGG+AdvMT_SY\r\nMar 30, 2016 12:49:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font FCAKGG+AdvMT_SY\r\nMar 30, 2016 12:49:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C20 (1) in font FCAKGF+AdvMT_MI\r\nMar 30, 2016 12:49:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font FCAKGG+AdvMT_SY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:49:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:49:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:49:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (2) in font MathPackTwelve\r\nMar 30, 2016 12:49:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9837 (3) in font MathPackTwelve\r\nMar 30, 2016 12:49:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9825 (2) in font MathPackTen\r\nMar 30, 2016 12:49:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9837 (3) in font MathPackTen\r\nMar 30, 2016 12:49:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (2) in font MathPackThirteen\r\nMar 30, 2016 12:49:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (4) in font MathPackTen\r\nMar 30, 2016 12:49:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11032 (2) in font MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font IGDNFH+AdvP4C4E74\r\nMar 30, 2016 12:49:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font IGEAFG+AdvT042\r\nMar 30, 2016 12:49:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font IGDNFH+AdvP4C4E74\r\nMar 30, 2016 12:49:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font IGDNFH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:49:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:49:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:49:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:49:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font CKGEHC+AdvPSSym\r\nMar 30, 2016 12:49:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font CKGEHC+AdvPSSym\r\nMar 30, 2016 12:49:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font CKGJDI+AdvP4C4E74\r\nMar 30, 2016 12:49:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (4) in font CKGEHC+AdvPSSym\r\nMar 30, 2016 12:49:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font CKGJDI+AdvP4C4E74\r\nMar 30, 2016 12:49:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (4) in font CKGJDI+AdvP4C4E74\r\nMar 30, 2016 12:49:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (2) in font CKGLHO+AdvPSMSAM10\r\nMar 30, 2016 12:49:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font CKHCCI+AdvSPSASORT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:49:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:49:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C181 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font KLKJOF+MATHG-1A\r\nMar 30, 2016 12:49:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (3) in font KLKJOF+MATHG-1A\r\nMar 30, 2016 12:49:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (4) in font KLKJOF+MATHG-1A\r\nMar 30, 2016 12:49:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font KLKJOF+MATHG-1A\r\nMar 30, 2016 12:49:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font KLIAPM+MTSY\r\nMar 30, 2016 12:49:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (6) in font KLKJOF+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:49:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:49:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C181 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font KFFIBN+MATHG-1A\r\nMar 30, 2016 12:49:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font KFFIBN+MATHG-1A\r\nMar 30, 2016 12:49:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (4) in font KFFIBN+MATHG-1A\r\nMar 30, 2016 12:49:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font KFFIBN+MATHG-1A\r\nMar 30, 2016 12:49:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font KFFHHP+MTSY\r\nMar 30, 2016 12:49:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font KFFIBN+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:49:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:49:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:43 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font BMHNCA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font LFBAPO+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (2) in font KKKFNF+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:49:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:49:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font LucidaNewMath-Symbol\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font BPGFBO+MTSY\r\nMar 30, 2016 12:49:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font BPGFBP+MathematicalPi-One\r\nMar 30, 2016 12:49:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for .notdef (31) in font IHLOJH+TimesNewRomanPSMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font BLJKOD+Calibri\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g507 (2) in font BLJKPD+TimesNewRomanPSMT\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g549 (3) in font BLJKPD+TimesNewRomanPSMT\r\nMar 30, 2016 12:49:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (4) in font BLJKPD+TimesNewRomanPSMT\r\nMar 30, 2016 12:49:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g148 (5) in font BLJKPD+TimesNewRomanPSMT\r\nMar 30, 2016 12:49:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (6) in font BLJKPD+TimesNewRomanPSMT\r\nMar 30, 2016 12:49:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g541 (7) in font BLJKPD+TimesNewRomanPSMT\r\nMar 30, 2016 12:49:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g507 (2) in font BLJLDE+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:49:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g524 (3) in font BLJLDE+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:49:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g524 (8) in font BLJKPD+TimesNewRomanPSMT\r\nMar 30, 2016 12:49:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g397 (9) in font BLJKPD+TimesNewRomanPSMT\r\nMar 30, 2016 12:49:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g539 (10) in font BLJKPD+TimesNewRomanPSMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:53 PM org.apache.fontbox.ttf.CmapSubtable processSubtype14\r\nWARNING: Format 14 cmap table is not supported and will be ignored\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font HAHPMI+AdvP697C\r\nMar 30, 2016 12:49:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (1) in font HAHPNK+AdvP4C4E59\r\nMar 30, 2016 12:49:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HAHPMH+AdvP4C4E74\r\nMar 30, 2016 12:49:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font HAHPMH+AdvP4C4E74\r\nMar 30, 2016 12:49:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font HAHPMH+AdvP4C4E74\r\nMar 30, 2016 12:49:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (5) in font HAHPMH+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:49:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\nMar 30, 2016 12:49:54 PM org.apache.fontbox.ttf.CmapSubtable processSubtype14\r\nWARNING: Format 14 cmap table is not supported and will be ignored\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font KCDOGB+AdvBMa1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:49:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font PDJIJI+AdvP4C4E74\r\nMar 30, 2016 12:49:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font PDJIJI+AdvP4C4E74\r\nMar 30, 2016 12:49:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (4) in font PDJIJI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font LCHIMG+AdvPSSym\r\nMar 30, 2016 12:50:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font LCHIMG+AdvPSSym\r\nMar 30, 2016 12:50:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font LCHLII+AdvP4C4E74\r\nMar 30, 2016 12:50:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font LCHIMG+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font HPPJMF+AdvP4C4E74\r\nMar 30, 2016 12:50:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font HPPJNF+AdvT042\r\nMar 30, 2016 12:50:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (3) in font HPPJMF+AdvP4C4E74\r\nMar 30, 2016 12:50:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font HPPJMF+AdvP4C4E74\r\nMar 30, 2016 12:50:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (5) in font HPPJMF+AdvP4C4E74\r\nMar 30, 2016 12:50:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (6) in font HPPJMF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:03 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font NGPKOD+AdvPSSym\r\nMar 30, 2016 12:50:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font NGPKOD+AdvPSSym\r\nMar 30, 2016 12:50:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font NHAFEG+AdvP4C4E74\r\nMar 30, 2016 12:50:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font NHAFEG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (1) in font PGKIAC+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for checkbld (1) in font ODNMDG+TT10Ft00\r\n']
['Warning PDFBox', "Mar 30, 2016 12:50:10 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>\r\nWARNING: Using fallback font 'TimesNewRomanPS-BoldMT' for 'BodoniMT-Bold'\r\n"]
['Warning PDFBox', 'Mar 30, 2016 12:50:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font HDCNMO+AdvPSSym\r\nMar 30, 2016 12:50:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font HDCNNA+AdvP4C4E74\r\nMar 30, 2016 12:50:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font HDCNNA+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:50:09 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\nMar 30, 2016 12:50:10 PM org.apache.fontbox.ttf.CmapSubtable processSubtype14\r\nWARNING: Format 14 cmap table is not supported and will be ignored\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (3) in font APLEAK+MTSY\r\nMar 30, 2016 12:50:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font APMFAP+MATHG-1A\r\nMar 30, 2016 12:50:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font APMFAP+MATHG-1A\r\nMar 30, 2016 12:50:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (4) in font APMFAP+MATHG-1A\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HJOFBH+AdvMacMthSyN\r\nMar 30, 2016 12:50:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (3) in font HJOFBH+AdvMacMthSyN\r\nMar 30, 2016 12:50:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font HJOFBH+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:17 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font ILIJOF+AdvPSSym\r\nMar 30, 2016 12:50:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font ILINED+AdvP4C4E74\r\nMar 30, 2016 12:50:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font ILINED+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font KIFBAB+AdvPSSym\r\nMar 30, 2016 12:50:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (1) in font KIFBAA+AdvP4C4E74\r\nMar 30, 2016 12:50:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C213 (1) in font KIFCDO+AdvPSMP1\r\nMar 30, 2016 12:50:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (2) in font KIFBAB+AdvPSSym\r\nMar 30, 2016 12:50:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font KIFBAA+AdvP4C4E74\r\nMar 30, 2016 12:50:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C212 (2) in font KIFCDO+AdvPSMP1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font HOJDHK+AdvPSSym\r\nMar 30, 2016 12:50:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font HOJDHK+AdvPSSym\r\nMar 30, 2016 12:50:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font HOJIDB+AdvP4C4E74\r\nMar 30, 2016 12:50:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font HOJIDB+AdvP4C4E74\r\nMar 30, 2016 12:50:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (4) in font HOJIDB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font MGAMHN+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (2) in font EOHEFL+MATHG-1A\r\nMar 30, 2016 12:50:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (3) in font EOHEFL+MATHG-1A\r\nMar 30, 2016 12:50:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (4) in font EOHEFL+MATHG-1A\r\nMar 30, 2016 12:50:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (5) in font EOHEFL+MATHG-1A\r\nMar 30, 2016 12:50:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (6) in font EOHEFL+MATHG-1A\r\nMar 30, 2016 12:50:21 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font EOHBJI+OnemtmiguAAAA\r\nMar 30, 2016 12:50:22 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (3) in font EOHBJI+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (1) in font CHMGBD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:25 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (1) in font EJAKAO+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:28 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C18 (2) in font GLGEPK+AdvMacMthRm\r\nMar 30, 2016 12:50:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font GLCLKE+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font LCLIPI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font GBBFII+AdvP4C4E74\r\nMar 30, 2016 12:50:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (3) in font GBBFII+AdvP4C4E74\r\nMar 30, 2016 12:50:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font GBBFII+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font CIDICP+AdvP4C4E74\r\nMar 30, 2016 12:50:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font CIDICP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font MAOADL+AdvT042\r\nMar 30, 2016 12:50:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MAOEOD+AdvP4C4E74\r\nMar 30, 2016 12:50:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font MAOEOD+AdvP4C4E74\r\nMar 30, 2016 12:50:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font MAOEOD+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font NIHPGG+AdvPSSym\r\nMar 30, 2016 12:50:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C255 (1) in font NIHPHI+AdvP4C4E74\r\nMar 30, 2016 12:50:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (2) in font NIHPHI+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (1) in font OGDNGJ+AdvP4C4E74\r\nMar 30, 2016 12:50:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font OGDNGJ+AdvP4C4E74\r\nMar 30, 2016 12:50:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C19 (1) in font OGFBPP+AdvP4C4E5E\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font BLHIGB+AdvT042\r\nMar 30, 2016 12:50:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font BLHNAL+AdvP4C4E74\r\nMar 30, 2016 12:50:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font BLHNAL+AdvP4C4E74\r\nMar 30, 2016 12:50:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font BLHNAL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font EBDNNA+Calibri\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (2) in font EBDNNB+TimesNewRomanPS-BoldMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g539 (2) in font EBDNOC+TimesNewRomanPSMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (3) in font EBDNOC+TimesNewRomanPSMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (4) in font EBDNOC+TimesNewRomanPSMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode\r\nWARNING: No Unicode mapping for CID+6632 (6632) in font ArialUnicodeMS-Identity-H\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g167 (5) in font EBDNOC+TimesNewRomanPSMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g541 (6) in font EBDNOC+TimesNewRomanPSMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g68 (2) in font EBDOCC+SymbolMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g148 (7) in font EBDNOC+TimesNewRomanPSMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (2) in font EBDODD+TimesNewRomanPS-ItalicMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (2) in font EBDONA+TimesNewRomanPS-BoldItalicMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (3) in font EBDONA+TimesNewRomanPS-BoldItalicMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g539 (4) in font EBDONA+TimesNewRomanPS-BoldItalicMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g507 (8) in font EBDNOC+TimesNewRomanPSMT\r\nMar 30, 2016 12:50:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g69 (3) in font EBDOCC+SymbolMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font OJIPHI+AdvPSSym\r\nMar 30, 2016 12:50:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font OJJDOP+AdvP4C4E74\r\nMar 30, 2016 12:50:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font OJIPHI+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9828 (1) in font MathPackTen\r\nMar 30, 2016 12:50:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9826 (2) in font MathPackTen\r\nMar 30, 2016 12:50:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for afii9839 (1) in font MathPackThirteen\r\nMar 30, 2016 12:50:46 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H17011 (1) in font MathematicalPi-Six\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font KFGPND+AdvP4C4E74\r\nMar 30, 2016 12:50:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font KFGPND+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (1) in font KEPBMA+AdvMacMthSyN\r\nMar 30, 2016 12:50:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font KEPBMA+AdvMacMthSyN\r\nMar 30, 2016 12:50:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font KEPBMA+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:50 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font OFONOB+AdvPSSym\r\nMar 30, 2016 12:50:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font OFOODE+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (2) in font HFCDAC+MathematicalPi-One\r\nMar 30, 2016 12:50:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font HFCDAC+MathematicalPi-One\r\nMar 30, 2016 12:50:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9253 (4) in font HFCDAC+MathematicalPi-One\r\nMar 30, 2016 12:50:52 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (5) in font HFCDAC+MathematicalPi-One\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font LFJBNO+AdvMacMthSyN\r\nMar 30, 2016 12:50:53 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font LFJBNO+AdvMacMthSyN\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:50:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:50:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:50:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:50:56 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:50:57 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font MNGICO+AdvPSSym\r\nMar 30, 2016 12:50:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font MNGICO+AdvPSSym\r\nMar 30, 2016 12:50:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MNGKNB+AdvP4C4E74\r\nMar 30, 2016 12:50:58 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font MNGKNB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9260 (2) in font PHKPKD+MATHG-1A\r\nMar 30, 2016 12:51:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (3) in font PHKPKD+MATHG-1A\r\nMar 30, 2016 12:51:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font PHKPKD+MATHG-1A\r\nMar 30, 2016 12:51:00 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (5) in font PHKPKD+MATHG-1A\r\nMar 30, 2016 12:51:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for DC4 (2) in font PHKPMD+OnemtmiguAAAA\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font GOFGGA+AdvPSSym\r\nMar 30, 2016 12:51:01 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font GOFIBK+AdvP4C4E74\r\nMar 30, 2016 12:51:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font GOFGGA+AdvPSSym\r\nMar 30, 2016 12:51:02 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font GOFIBK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HLJLEG+AdvP4C4E74\r\nMar 30, 2016 12:51:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font HLJLEG+AdvP4C4E74\r\nMar 30, 2016 12:51:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font HLJLEG+AdvP4C4E74\r\nMar 30, 2016 12:51:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (5) in font HLJLEG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font HLJLEG+AdvP4C4E74\r\nMar 30, 2016 12:51:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font HLJLEG+AdvP4C4E74\r\nMar 30, 2016 12:51:05 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font HLJLEG+AdvP4C4E74\r\nMar 30, 2016 12:51:06 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (5) in font HLJLEG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:04 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font HECAOO+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:06 PM org.apache.fontbox.ttf.CmapSubtable processSubtype14\r\nWARNING: Format 14 cmap table is not supported and will be ignored\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:08 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font NOKDCN+AdvT377\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:10 PM org.apache.fontbox.ttf.CmapSubtable processSubtype14\r\nWARNING: Format 14 cmap table is not supported and will be ignored\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ADHPDA+AdvT042\r\nMar 30, 2016 12:51:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font ADIHGB+AdvP4C4E74\r\nMar 30, 2016 12:51:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font ADIHGB+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:10 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ACECGF+AdvT001\r\nMar 30, 2016 12:51:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C21 (2) in font ACECFE+AdvMT_SY\r\nMar 30, 2016 12:51:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C14 (3) in font ACECFE+AdvMT_SY\r\nMar 30, 2016 12:51:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (4) in font ACECFE+AdvMT_SY\r\nMar 30, 2016 12:51:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font ACECLH+AdvMT_RM\r\nMar 30, 2016 12:51:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (5) in font ACECFE+AdvMT_SY\r\nMar 30, 2016 12:51:11 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (6) in font ACECFE+AdvMT_SY\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for BT (0) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CR (2) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CT (3) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D4 (4) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D8 (5) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CS (6) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C5 (7) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CP (8) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D2 (9) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D9 (10) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D7 (11) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for D6 (12) in font T1\r\nMar 30, 2016 12:51:12 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for CX (13) in font T1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C24 (2) in font MHPFGN+AdvP4C4E74\r\nMar 30, 2016 12:51:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font MHPFGN+AdvP4C4E74\r\nMar 30, 2016 12:51:15 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font MHPFGN+AdvP4C4E74\r\nMar 30, 2016 12:51:16 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (5) in font MHPFGN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:51:18 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:51:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C210 (3) in font AdvPSSym\r\nMar 30, 2016 12:51:19 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (4) in font AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:20 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font LFOEMG+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font ENANIP+AdvT042\r\nMar 30, 2016 12:51:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font ENCDOP+AdvP4C4E74\r\nMar 30, 2016 12:51:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font ENCDOP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p54 (54) in font NNNEMO+DMathTen\r\nMar 30, 2016 12:51:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p37 (37) in font NNNEMO+DMathTen\r\nMar 30, 2016 12:51:23 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p104 (97) in font NNNILK+DMathNine\r\nMar 30, 2016 12:51:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p105 (98) in font NNNILK+DMathNine\r\nMar 30, 2016 12:51:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p109 (109) in font NNOAIO+BMathThirTeen\r\nMar 30, 2016 12:51:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p57 (57) in font NOFFMA+DMathFive\r\nMar 30, 2016 12:51:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p66 (66) in font NOFFMA+DMathFive\r\nMar 30, 2016 12:51:24 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p92 (92) in font NOFFMA+DMathFive\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (1) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (2) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (3) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (4) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (5) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C120 (6) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (7) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (8) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C112 (9) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (10) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (11) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (12) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (13) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (14) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (15) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (16) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (17) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (18) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (19) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (20) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C76 (21) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C42 (22) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C44 (23) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C71 (24) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C67 (25) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C118 (26) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C70 (27) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (28) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C78 (29) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C83 (30) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (31) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C80 (32) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (33) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (1) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (2) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C112 (3) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (4) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (5) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (6) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (7) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (8) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (9) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (10) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (11) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (12) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (13) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C83 (14) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C122 (15) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (16) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C39 (17) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (18) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C118 (19) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (20) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C44 (21) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C70 (22) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C67 (23) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (24) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (25) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C85 (26) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (27) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C71 (28) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (29) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (30) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (31) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C49 (32) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C48 (33) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (34) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C82 (34) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (35) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C74 (36) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (37) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C48 (38) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C59 (39) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C49 (40) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (41) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C65 (1) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (2) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C115 (3) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C116 (4) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C114 (5) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (6) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C99 (7) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C87 (42) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C85 (43) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (44) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C57 (45) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C79 (46) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C72 (47) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (1) in font IMHEAE+AdvP4C4E74\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C177 (48) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C69 (49) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C84 (50) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (51) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C53 (52) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C45 (53) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font IMHEAE+AdvP4C4E74\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C58 (1) in font IMHEAL+AdvP4C4E51\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font IMHEAE+AdvP4C4E74\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (4) in font IMHEAE+AdvP4C4E74\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C135 (5) in font IMHEAE+AdvP4C4E74\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C40 (54) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C58 (55) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C55 (56) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C41 (57) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C122 (58) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C174 (59) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C113 (60) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C56 (61) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C52 (62) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C35 (1) in font IMHECH+AdvPi3\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C75 (35) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (36) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C58 (37) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C49 (8) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C46 (9) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C73 (10) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C110 (11) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C111 (12) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C100 (13) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C117 (14) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C105 (15) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C91 (63) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C93 (64) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C66 (65) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C54 (66) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C47 (67) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C36 (68) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C39 (69) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C86 (70) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C69 (38) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C45 (39) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C64 (71) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C98 (40) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C48 (6) in font IMHEAE+AdvP4C4E74\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C37 (72) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C106 (73) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (16) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C77 (17) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C101 (18) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C108 (19) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (20) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C104 (21) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C50 (41) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (74) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C79 (42) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C72 (43) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C177 (44) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C109 (1) in font IMHGEF+AdvPi1\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C56 (2) in font IMHGEF+AdvPi1\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (45) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C136 (7) in font IMHEAE+AdvP4C4E74\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C137 (8) in font IMHEAE+AdvP4C4E74\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C138 (9) in font IMHEAE+AdvP4C4E74\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (46) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (47) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C76 (48) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C47 (49) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C66 (50) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C80 (51) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C52 (52) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C40 (53) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C41 (54) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C55 (55) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C120 (56) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C53 (57) in font IMHDPF+AdvP4B2E3F\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C75 (75) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C60 (2) in font IMHEAL+AdvP4C4E51\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C51 (22) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C82 (23) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C60 (76) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C175 (77) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C97 (3) in font IMHGEF+AdvPi1\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C44 (24) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (10) in font IMHEAE+AdvP4C4E74\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C121 (11) in font IMHEAE+AdvP4C4E74\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C52 (25) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C68 (26) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C96 (78) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C107 (27) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C119 (28) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C103 (29) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C102 (30) in font IMHDPM+AdvP4A213B\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C89 (79) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C90 (80) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C193 (81) in font IMHDPB+AdvP41153C\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C88 (82) in font IMHDPB+AdvP41153C\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (1) in font JEFAMP+AdvBMa1\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C29 (2) in font JEFAMP+AdvBMa1\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C27 (3) in font JEFAMP+AdvBMa1\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font NHCHGP+AdvPSSym\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font NHCHGP+AdvPSSym\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font NHCLLG+AdvP4C4E74\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font NHCLLG+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font AdvPSSym\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (2) in font AdvP4C4E74\r\nMar 30, 2016 12:51:26 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font AdvPSSym\r\nMar 30, 2016 12:51:27 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:29 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font OIDCAP+AdvT042\r\nMar 30, 2016 12:51:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font OIDCLN+AdvP4C4E74\r\nMar 30, 2016 12:51:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font OIDCLN+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:30 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (1) in font JCNMPL+AdvP4C4E74\r\nMar 30, 2016 12:51:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font JCNMPL+AdvP4C4E74\r\nMar 30, 2016 12:51:31 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font JCNMPL+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:32 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p54 (54) in font NJMJKG+DMathTen\r\nMar 30, 2016 12:51:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p104 (97) in font NJMNJE+DMathNine\r\nMar 30, 2016 12:51:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p118 (109) in font NJMNJE+DMathNine\r\nMar 30, 2016 12:51:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p66 (66) in font NJNBHO+DMathFive\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font MMNLFF+AdvP4C4E74\r\nMar 30, 2016 12:51:34 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font MMNLFF+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (1) in font FBPJJK+AdvP4C4E74\r\nMar 30, 2016 12:51:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font FBPJJK+AdvP4C4E74\r\nMar 30, 2016 12:51:35 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font FBPJJK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:33 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (1) in font OEEECJ+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font FEMDGB+Calibri\r\nMar 30, 2016 12:51:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g74 (2) in font FEMDHC+SymbolMT\r\nMar 30, 2016 12:51:36 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (2) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (3) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g539 (4) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g192 (5) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g191 (6) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g534 (7) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font FEMJFC+Calibri-Italic\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g882 (3) in font FEMDGB+Calibri\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g114 (3) in font FEMDHC+SymbolMT\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g534 (2) in font FEMDGC+TimesNewRomanPS-BoldMT\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (3) in font FEMDGC+TimesNewRomanPS-BoldMT\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g74 (2) in font FEMMDI+Symbol\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g68 (3) in font FEMMDI+Symbol\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for ;#23#23#23 (4) in font FEMMDI+Symbol\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g120 (4) in font FEMDHC+SymbolMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p54 (1) in font HBBICL+DMathTen\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for p97 (1) in font HBBICP+BMathThirTeen\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font CMBGED+Calibri\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g68 (2) in font CMBGFG+SymbolMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (2) in font CMBGEF+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g74 (3) in font CMBGFG+SymbolMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g71 (4) in font CMBGFG+SymbolMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g78 (5) in font CMBGFG+SymbolMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g90 (6) in font CMBGFG+SymbolMT\r\nMar 30, 2016 12:51:37 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (3) in font CMBGEF+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g534 (4) in font CMBGEF+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g167 (5) in font CMBGEF+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g80 (7) in font CMBGFG+SymbolMT\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (2) in font CMBGEE+TimesNewRomanPS-BoldMT\r\nMar 30, 2016 12:51:38 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g69 (8) in font CMBGFG+SymbolMT\r\nMar 30, 2016 12:51:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g882 (3) in font CMBGED+Calibri\r\nMar 30, 2016 12:51:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font CMBKAD+Calibri-Italic\r\nMar 30, 2016 12:51:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font CMBKBE+Calibri-Bold\r\nMar 30, 2016 12:51:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g882 (3) in font CMBKAD+Calibri-Italic\r\nMar 30, 2016 12:51:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g68 (2) in font CMBPEF+Symbol\r\nMar 30, 2016 12:51:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g74 (3) in font CMBPEF+Symbol\r\nMar 30, 2016 12:51:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g71 (4) in font CMBPEF+Symbol\r\nMar 30, 2016 12:51:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g78 (5) in font CMBPEF+Symbol\r\nMar 30, 2016 12:51:39 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g120 (6) in font CMBPEF+Symbol\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font LCBFGG+AdvPSSym\r\nMar 30, 2016 12:51:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font LCBFGI+AdvP4C4E74\r\nMar 30, 2016 12:51:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font LCBFGG+AdvPSSym\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C25 (1) in font OIKLPP+AdvP4C4E74\r\nMar 30, 2016 12:51:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (3) in font OIKLPP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font FEMDGB+Calibri\r\nMar 30, 2016 12:51:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g74 (2) in font FEMDHC+SymbolMT\r\nMar 30, 2016 12:51:40 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (2) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g533 (3) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g539 (4) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g192 (5) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g191 (6) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g534 (7) in font FEMDHD+TimesNewRomanPSMT\r\nMar 30, 2016 12:51:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g3 (2) in font FEMJFC+Calibri-Italic\r\nMar 30, 2016 12:51:41 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g882 (3) in font FEMDGB+Calibri\r\nMar 30, 2016 12:51:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g114 (3) in font FEMDHC+SymbolMT\r\nMar 30, 2016 12:51:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g534 (2) in font FEMDGC+TimesNewRomanPS-BoldMT\r\nMar 30, 2016 12:51:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g302 (3) in font FEMDGC+TimesNewRomanPS-BoldMT\r\nMar 30, 2016 12:51:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g74 (2) in font FEMMDI+Symbol\r\nMar 30, 2016 12:51:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g68 (3) in font FEMMDI+Symbol\r\nMar 30, 2016 12:51:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for ;#23#23#23 (4) in font FEMMDI+Symbol\r\nMar 30, 2016 12:51:42 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for g120 (4) in font FEMDHC+SymbolMT\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for prime (2) in font MNOGIP+MTSY\r\nMar 30, 2016 12:51:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for Delta1 (2) in font MNOGMA+MTMI\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C223 (2) in font BMBLCB+AdvT042\r\nMar 30, 2016 12:51:44 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font BMBPBM+AdvP4C4E74\r\nMar 30, 2016 12:51:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font BMBPBM+AdvP4C4E74\r\nMar 30, 2016 12:51:45 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (4) in font BMBPBM+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:47 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font MIEJGO+AdvP4C4E74\r\nMar 30, 2016 12:51:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font MIEJGO+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:48 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (2) in font ANAHNP+AdvP4C4E74\r\nMar 30, 2016 12:51:49 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (3) in font ANAHNP+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:51 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C6 (2) in font BOGGNK+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C211 (2) in font GKIHLH+AdvPSSym\r\nMar 30, 2016 12:51:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C2 (2) in font GKIKHJ+AdvP4C4E74\r\nMar 30, 2016 12:51:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C176 (3) in font GKIHLH+AdvPSSym\r\nMar 30, 2016 12:51:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C0 (3) in font GKIKHJ+AdvP4C4E74\r\nMar 30, 2016 12:51:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C1 (4) in font GKIKHJ+AdvP4C4E74\r\nMar 30, 2016 12:51:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C15 (5) in font GKIKHJ+AdvP4C4E74\r\nMar 30, 2016 12:51:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for C3 (6) in font GKIKHJ+AdvP4C4E74\r\n']
['Warning PDFBox', 'Mar 30, 2016 12:51:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9252 (1) in font HPLGPD+MathematicalPi-One\r\nMar 30, 2016 12:51:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11001 (1) in font HPLGPK+Universal-GreekwithMathPi\r\nMar 30, 2016 12:51:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11350 (2) in font HPLGPD+MathematicalPi-One\r\nMar 30, 2016 12:51:54 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9262 (3) in font HPLGPD+MathematicalPi-One\r\nMar 30, 2016 12:51:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H9251 (4) in font HPLGPD+MathematicalPi-One\r\nMar 30, 2016 12:51:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11006 (2) in font HPLGPK+Universal-GreekwithMathPi\r\nMar 30, 2016 12:51:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11002 (3) in font HPLGPK+Universal-GreekwithMathPi\r\nMar 30, 2016 12:51:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11005 (4) in font HPLGPK+Universal-GreekwithMathPi\r\nMar 30, 2016 12:51:55 PM org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode\r\nWARNING: No Unicode mapping for H11021 (5) in font HPLGPK+Universal-GreekwithMathPi\r\n']",0,"Andreas Lehmkühler","Puking Robot",0,3,"30/Mar/16 11:26","08/Apr/16 06:50","05/Apr/16 20:38"
PDFBOX-3297,PDFBOX,"Infinite loop",Bug,CLOSED,Major,Fixed,"1.8.11, 1.8.12, 2.0.0, (2)","1.8.12, 2.0.1, 3.0.0 PDFBox",Rendering,None,,"For this PDF file attached, this function will hang:
public void testNewVersion() throws IOException {
PDDocument doc = PDDocument.load(PdfVerificationTest.class.getClassLoader().getResource("infinite_loop.pdf").openStream());
PDFRenderer pdfRenderer = new PDFRenderer(doc);
for(int i=1;i<doc.getNumberOfPages();i++)
{ pdfRenderer.renderImageWithDPI(i, 300, ImageType.RGB); }
}",0,"Tilman Hausherr","Cheng Chen",1,3,"30/Mar/16 21:47","27/Jun/18 04:41","31/Mar/16 17:12"
PDFBOX-3298,PDFBOX,"Can't show text (glyph) from ZapfDingbats font",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.2, 2.0.3, (1)","2.0.3, 3.0.0 PDFBox",FontBox,None,"linux, java 1.8","I am unable to add glyphs from the standard ZapfDingbats font to a PDF document. The issue seems to be that the encoding for the font (WinAnsiEncoding) does not have mappings for the "non-ASCII (???)" PDF names used in the font ("aXX"). (However, the PDSimpleFont.glyphList does contain mappings between Unicode codepoints and PDF names.)
Sample code:
PDDocument document = PDDocument.load(new File("myfile.pdf"));
PDPage page = document.getPages().get(0); // first page
PDPageContentStream contentStream = new PDPageContentStream(document, page, AppendMode.APPEND, true);

PDType1Font font = PDType1Font.ZAPF_DINGBATS;
String glyph = "\u2714";

contentStream.beginText();
contentStream.setFont(font, fontSize);
contentStream.newLineAtOffset(10, 10); // towards lower left corner of page
contentStream.showText(glyph);
contentStream.endText();
contentStream.close();

document.save("output.pdf");
document.close();
Exception thrown:
Exception in thread "main" java.lang.IllegalArgumentException: U+2714 ('a20') is not available in this font's encoding: WinAnsiEncoding
    at org.apache.pdfbox.pdmodel.font.PDType1Font.encode(PDType1Font.java:345)
    at org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:286)
    :",0,"Tilman Hausherr","Friedwin Fleischmann",1,3,"31/Mar/16 08:35","25/Mar/17 18:13","11/Jul/16 16:53"
PDFBOX-3299,PDFBOX,"TIFF-files with FillOrder=2 can't be converted to PDF",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 2.0.0, (2)","1.8.12, 2.0.1, 3.0.0 PDFBox",Rendering,None,,"I have issues with some TIFF-files that has the tag FillOrder=2 resulting in a corrupt PDF when trying to convert them with PDFBox. There's no warning or anything, but the resulting PDF can't be viewed.
Example code to reproduce:
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;

import java.io.File;
import java.io.IOException;

public class TiffFillOrder {
 public static void main(String[] args) throws IOException {
  PDDocument document = new PDDocument();
  PDImageXObject tif = CCITTFactory.createFromFile(document, new File(args[0]));

  PDPage page = new PDPage();
  document.addPage(page);

  PDPageContentStream content = new PDPageContentStream(document, page, PDPageContentStream.AppendMode.APPEND, true);
  content.drawImage(tif, 0, 0, PDRectangle.A4.getWidth(), PDRectangle.A4.getHeight());
  content.close();

  document.save(new File(args[1]));
 }
}
I can't attach an example since it contains personal information, but found this in another jira-issue that has the same problem: https://issues.apache.org/jira/secure/attachment/12558110/Wing.tif
It looks like TiffFaxDecoder has support for this, but the value 1 is always sent to the constructor and the tag for fillorder (266) is never parsed.",0,"Tilman Hausherr",Christofer,1,4,"31/Mar/16 09:45","03/Feb/19 20:43","31/Mar/16 17:24"
PDFBOX-3300,PDFBOX,"Space rendered as missing glyph",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox","FontBox, Rendering",None,,"In this file, the spaces are rendered with a "?".",0,"Andreas Lehmkühler","Tilman Hausherr",0,4,"31/Mar/16 17:08","25/Mar/17 18:13","28/Nov/16 20:46"
PDFBOX-3301,PDFBOX,"NPE in PDAcroForm.flatten if a widget doesn't contain a /P entry",Bug,CLOSED,Major,Fixed,2.0.0,"2.0.1, 3.0.0 PDFBox",AcroForm,None,,"A form filling issue was discussed on the users mailing list where one of the issues was that the widget annotations do not contain a /P entry.
This led to an NPE:
Exception in thread "main" java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.PDPageContentStream.<init>(PDPageContentStream.java:195)
As the /P entry is an optional entry the code would not opened on that entry.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"01/Apr/16 07:03","25/Mar/17 18:12","19/Apr/16 10:50"
PDFBOX-3302,PDFBOX,"Explicit support for certification signatures",Sub-task,CLOSED,Major,Fixed,2.0.0,"2.0.6, 3.0.0 PDFBox",Signing,None,,"After signing a PDF file, Adobe Reader show an icon on top of the document with the following text: "Signed and all signatures are valid".
I would like to certify the file and obtain the following icon text message :
"Certified by xxx certificate issued by xxx".
In my opinion this improvement will come with an explicit support for certification signatures :
NOT_CERTIFIED (Approval signature)
CERTIFIED_NO_CHANGES_ALLOWED (Author signature, no changes allowed)
CERTIFIED_FORM_FILLING (Author signature, form filling allowed)
CERTIFIED_FORM_FILLING_AND_ANNOTATIONS (Author signature, form filling and annotations allowed)",0,"Tilman Hausherr","Alexandre Yantouri",1,2,"01/Apr/16 16:11","15/May/17 20:28","20/Apr/17 16:18"
PDFBOX-3303,PDFBOX,"setWidgets should set connection to parent",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 3.0.0 PDFBox","2.0.1, 3.0.0 PDFBox",AcroForm,None,,"setWidgets() should set connection to parent. This call is used by people who create radio buttons. In my own test,
https://justpaste.it/CreateRadioButtons
the radio buttons were not displayed by Adobe Reader if the connection is not set.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"02/Apr/16 12:06","25/Mar/17 18:13","02/Apr/16 12:08"
PDFBOX-3305,PDFBOX,"PDPageContentStream should allow drawing images at current position",Improvement,CLOSED,Minor,Fixed,2.0.0,"2.0.1, 3.0.0 PDFBox",PDModel,None,,"The PDPageContentStream class has two drawImage methods (one calling the other) but both add a transformation to the graphics state. This patch adds a drawImage method with a single parameter (the image), which only adds the image without applying any transformation.
This is needed because otherwise there is no other way of setting a transform matrix manually which might have skew/rotation in addition to scaling/translation.
An alternative to this patch could also be a drawImage method which takes a Matrix and applies it. But still if for whatever reasons multiple images should be drawn with the same transformation matrix this would be inflexible.",0,"John Hewson","Michele Balistreri",0,3,"04/Apr/16 11:20","25/Mar/17 18:12","07/Apr/16 19:57"
PDFBOX-3306,PDFBOX,"SCALE_TO_FIT with DPI yields incorrect margins",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 2.0.2, (2)","2.0.3, 3.0.0 PDFBox",Rendering,print,,"When leveraging print margins using setImageableArea:
Works fine when SCALE_TO_FIT and DPI 0 are provided (vector-quality printing)
Works fine when ACTUAL_SIZE and non-zero DPI are provided
Does NOT work when SCALE_TO_FIT and non-zero DPI are provided.
Code to reproduce
public static void main(String[] args) throws Exception {
    PDDocument pdf = PDDocument.load(new URL(args[0]).openStream());
    PrinterJob job = PrinterJob.getPrinterJob();

    Paper paper = new Paper();
    paper.setSize(612, 792); //8.5 x 11 in
    paper.setImageableArea(72, 72, 468, 648); //1 inch margins

    PageFormat page = job.getPageFormat(null);
    page.setPaper(paper);

    //Vector print - works as expected, margins applied and scaled properly
    job.setPrintable(new PDFPrintable(pdf, Scaling.SCALE_TO_FIT, false, 0, false), page);
    job.print();

    //Unscaled raster print - works as expected, margins applied and document cut off
    job.setPrintable(new PDFPrintable(pdf, Scaling.ACTUAL_SIZE, false, 72, false), page);
    job.print();

    //Scaled raster print - unexpected results, same scale as vector print, but same cut off as unscaled raster print
    job.setPrintable(new PDFPrintable(pdf, Scaling.SCALE_TO_FIT, false, 72, false), page);
    job.print();

    pdf.close();
}",0,"Tilman Hausherr","Tres Finocchiaro",0,4,"04/Apr/16 13:55","25/Mar/17 18:12","03/Aug/16 19:49"
PDFBOX-3307,PDFBOX,"Enable AES128 encryption",Improvement,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 3.0.0 PDFBox","2.0.1, 3.0.0 PDFBox",Crypto,None,,"Expand API to allow AES 128 encryption, while keeping RC4 as default. The AES128 encryption itself has already been corrected for 2.0 in PDFBOX-2729.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"04/Apr/16 16:45","25/Mar/17 18:12","05/Apr/16 18:02"
PDFBOX-3308,PDFBOX,"Missing endOfName chars",Bug,CLOSED,Major,Fixed,"1.8.11, 2.0.0, 2.0.1, (1)","1.8.12, 2.0.1, 3.0.0 PDFBox",PDModel,None,,"I came across a document that was using a null char 0x00 as array items separator and it wasn't handled correctly. According to chapter 7.2.2 The White-space characters shown in Table 1 separate syntactic constructs such as names and numbers from each other. and Table 1 contains NUL, HT, LF, FF, CR, SP.
BaseParser::isEndOfName is missing NUL and FF, as a result, if you parse the array
[/Indexed /DeviceRGB 255 <000000>]
where /DeviceRGB and 255 are separated by NUL, and you write it back you get
[/Indexed /DeviceRGB#00255 <000000>]",0,"Tilman Hausherr","Andrea Vacondio",1,3,"05/Apr/16 14:56","25/Mar/17 18:12","05/Apr/16 18:17"
PDFBOX-3310,PDFBOX,"Unable re-write PDDocument.addSignature()",Wish,CLOSED,Minor,"Not A Problem",2.0.0,None,Signing,None,,"First of all congratulation for the new version!
With PDFBox 1.8.x I was able to re-write the addSignature() function in order to sign in an existing empty visible signature field.
When I wanted to redo the same with this new version, I failed because the setter COSDocument.setSignatureInterface() does not exist anymore and I found no way to set the signature interface without re-writing a ton of Java classes.
Now I may have a clean solution: make some attributes protected in PDDocument in order to extend it and override some functions.
You may have a better idea.
Thank you.",0,"Andreas Lehmkühler","Cyril Bremaud",0,2,"07/Apr/16 12:58","11/Apr/16 10:38","11/Apr/16 10:38"
PDFBOX-3311,PDFBOX,"Make SecurityHandlerFactory uses a genenic provider",Wish,CLOSED,Major,Duplicate,2.0.0,None,"Crypto, Parsing",None,,"I would like to be able to use my own provider to sign encrypted files. Indeed, org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory forces the use of org.bouncycastle.jce.provider.BouncyCastleProvider.
A solution is to make SecurityHandlerFactory uses a java.security.Provider instead.
Thank you.",0,"Andreas Lehmkühler","Cyril Bremaud",0,2,"08/Apr/16 08:19","11/Apr/16 11:45","11/Apr/16 11:45"
PDFBOX-3312,PDFBOX,"NPE in saveIncremental() / fix javadoc",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 3.0.0 PDFBox","2.0.1, 3.0.0 PDFBox",Signing,None,,"Cyril Bremaud mentioned in PDFBOX-2716:
You may want to change the javadoc because this is now possible to use saveIncremental() function on PDDocument loaded with InputStream.
I checked this and yes, it works with a stream, because since the rewrite of the caching stuff, the stream contents are stored in a file or in memory when the PDF is loaded from a stream. The javadoc wasn't changed in rev 1688018.
Then I tried this:
new PDDocument().saveIncremental(new FileOutputStream(new File("huhu.pdf")));
this results in an NPE. So I'm adding a check in saveIncremental(), similar to the check that was removed in 1688018, likely because nobody thought about the weird code above.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Apr/16 15:32","25/Mar/17 18:13","09/Apr/16 15:36"
PDFBOX-3313,PDFBOX,"Java 9 InaccessibleObjectException",Bug,CLOSED,Major,Fixed,2.0.0,"2.0.6, 3.0.0 PDFBox",Rendering,JDK9,,"java -jar ~/pdf-box-svn/app/target/pdfbox-app-2.1.0-SNAPSHOT.jar PDFToImage expected.pdf
Exception in thread "main" java.lang.reflect.InaccessibleObjectException: Unable to make member of class com.sun.imageio.plugins.jpeg.JPEGImageReader accessible: module java.desktop does not export com.sun.imageio.plugins.jpeg to unnamed module @72d1ad2e
at sun.reflect.Reflection.throwInaccessibleObjectException(java.base@9-ea/Reflection.java:420)
at java.lang.reflect.AccessibleObject.checkCanSetAccessible(java.base@9-ea/AccessibleObject.java:174)
at java.lang.reflect.Field.checkCanSetAccessible(java.base@9-ea/Field.java:170)
at java.lang.reflect.Field.setAccessible(java.base@9-ea/Field.java:164)
at org.apache.pdfbox.filter.DCTFilter.decode(DCTFilter.java:119)",0,"Tilman Hausherr","simon steiner",0,3,"12/Apr/16 13:06","15/May/17 20:28","27/Apr/17 16:27"
PDFBOX-3315,PDFBOX,"Dates falsely detected as different by preflight",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.0, (3)","1.8.13, 2.0.3, 3.0.0 PDFBox",Preflight,None,,"The two attached files pass PDF/A-1b tests with PDF-Tools, but not with preflight.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"12/Apr/16 20:47","25/Mar/17 18:12","09/Aug/16 15:34"
PDFBOX-3316,PDFBOX,"Add comment to PDF",Improvement,CLOSED,Minor,Fixed,"2.0.0, 2.0.1, 2.0.2, (1)","2.0.2, 3.0.0 PDFBox",Rendering,None,,"For our application we use some comment texts (prepended by a %) to mark content and perform text replacement.
We currently use the appendRawCommands() method to add these, but since this method has been marked as deprecated since version 2.0.
Would it be possible to add some like a addComment() method to PDPageContentStream?
The code would probably be something trivial like:
public void addComment(String comment) {
output.write("%" + comment + "\n");
}",0,"Tilman Hausherr","Jerrol Etheredge",0,4,"15/Apr/16 07:56","10/May/17 13:09","28/Apr/16 18:12"
PDFBOX-3317,PDFBOX,"Merged PDF/A files no longer valid PDF/A",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 3.0.0 PDFBox","2.0.1, 3.0.0 PDFBox",Utilities,None,,"From Alexander K. on the mailing list:
Situation: We have a bunch of PDF/A-1b compliant documents from a 3rd
party system and merge them into a new document. The end result is not
PDF/A-1b compliant though.
The cause is that the outputIntents are ignored. But if all are copied, the file isn't valid either because only one outputIntent is allowed.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"16/Apr/16 20:41","05/Jan/18 07:04","19/Apr/16 16:22"
PDFBOX-3318,PDFBOX,"IllegalArgumentException in PDPageTree constructor: root cannot be null",Bug,CLOSED,Major,Fixed,2.0.0,"2.0.6, 3.0.0 PDFBox",PDModel,None,,"When merging this pdf with another pdf, I get this exception. It looks similar to PDFBOX-2615.
java.lang.IllegalArgumentException: root cannot be null
 at org.apache.pdfbox.pdmodel.PDPageTree.<init>(PDPageTree.java:75)
 at org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages(PDDocumentCatalog.java:128)
 at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:484)
 at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:213)",0,"Andreas Lehmkühler","Arul Dhesiaseelan",1,6,"18/Apr/16 03:44","23/May/17 19:54","01/May/17 16:40"
PDFBOX-3319,PDFBOX,"Chinese character overlap other chinese character",Bug,CLOSED,Major,Fixed,2.0.0,"2.0.1, 3.0.0 PDFBox",Writing,None,,"i'm using SimHei.ttf copy from my windows fonts folder.
i found when i use my font to show Chinese.character will overlap other chinese. just for Chinese character, english is ok.
it looks the second character start from the a half width first character?",0,"Tilman Hausherr",huazhong,1,3,"18/Apr/16 05:40","25/Mar/17 18:13","19/Apr/16 16:27"
PDFBOX-3320,PDFBOX,"Statically cached COS objects are mutable",Bug,CLOSED,Major,Duplicate,1.8.11,None,Parsing,None,,"The range of COSInteger (from -100 to 256) instances, COSBoolean, many COSName instances and COSNull objects are statically cached in corresponding classes. Though such such kind of cached objects are supposed to be immutable, they are not: they inherit and do not block from modification parent COSBase class properties direct and needToBeUpdate. As these are properties are set during parsing and modification, and considered during writing the document, their mutability affects both the objects within the same document (when ex. the same COSNumber value from the cached range is used in different contexts both direct and indirect), as well as other documents, which might parsed and saved using the same classloader.",0,"Andreas Lehmkühler",Petras,0,2,"18/Apr/16 17:19","18/Apr/16 17:48","18/Apr/16 17:48"
PDFBOX-3321,PDFBOX,"ASCII stream data size is increased when written",Bug,CLOSED,Critical,Fixed,1.8.11,1.8.12,Parsing,"signature streams",,"This bug is quite complicated and was discovered when visual signatures were used along with parsing of the document with Preflight before signing.
I dig a bit trying to investigate this bug nature as the bug does not appear regularly. It appears that it manifests itself under such conditions:
Document is parsed when opened (ex. by Preflight) and entry with number value is detected, which is marked as direct by BaseParser.parseCOSDictionary(BaseParser.java:381);
Stream with ASCII filter is created or present in document having the same length as the number found in step 1 (ex. when visual signature is created by calling SignatureOptions#setVisualSignature());
While written COSWriter checks the stream length by its direct property. If /Length is present and is flaged as direct, it is not recalculated when written.
As a result, when doucument is written, the stream length is changed: written stream is increased by 2 bytes, while /Length entry still indicate the original length. That violates PDF requirements for the /Length entry:
The number of bytes from the beginning of the line following the keyword stream to the last byte just before the keyword endstream. (There may be an additional EOL marker, preceding endstream, that is not included in the count and is not logically part of the stream data.)
These bugs complement to this effect:
PDFBOX-3320 & PDFBOX-2685, as number used for stream length is marked as direct;
BaseParser.parseCOSStream(BaseParser.java:490) parses ASCII stream using EndstreamOutputStream class, which always includes all characters till the endstream keyword, though CRLF preceding endstream is not part of the stream data;
COSWriter checks the stream length by its direct property, even though it could be set as indirect via COSObject. As it is flaged as direct due to mutability of cached COSNumber, the stream length is not recalculated.
As COSWriter always adds CRLF at the end of the stream, the final stream data increased by 2 bytes.",0,"Tilman Hausherr",Petras,0,4,"19/Apr/16 08:05","25/Apr/16 17:24","21/Apr/16 16:38"
PDFBOX-3323,PDFBOX,"Cannot set destination meta data in PDFMergerUtility",Improvement,CLOSED,Major,Fixed,"1.8.9, 2.0.0","2.0.1, 3.0.0 PDFBox",None,"merge metadata",,"When merging multiple PDFs into one compound document via PDFMergerUtility, meta data like title, author, subject cannot be set but seem to be taken from one of the input documents. This is usually not the desired behaviour because as a user I have no direct influence on the meta data. As a user I would like to explicitly set or at least overwrite certain meta data for the destination document. Currently I can only set the destination stream or file name, but not the meta data.",0,"Tilman Hausherr","Alexander Kriegisch",0,4,"19/Apr/16 13:35","25/Mar/17 18:12","22/Apr/16 15:43"
PDFBOX-3324,PDFBOX,"Complete PDActionSound",Improvement,CLOSED,Major,Fixed,"2.0.0, 2.0.2, 2.0.3","2.0.3, 3.0.0 PDFBox",PDModel,None,,"I suspect that PDActionSound needs to have more setters added, see SO link.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Apr/16 05:09","25/Mar/17 18:13","09/Jul/16 15:29"
PDFBOX-3326,PDFBOX,"Issue in RenderingMode.isStroke method",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 2.0.2, (1)","2.0.2, 3.0.0 PDFBox","PDModel, Rendering",None,,"isStroke() method in RenderingMode class returns false result for STROKE_CLIP instance. It happens because in current realization pdfbox checks STROKE value twice instead of checking on STROKE and STROKE_CLIP.",0,"Tilman Hausherr","Timur Kamalov",1,3,"25/Apr/16 07:42","25/Mar/17 18:13","25/Apr/16 16:40"
PDFBOX-3327,PDFBOX,"IndexOutOfBoundsException when retrieving kerning information",Bug,CLOSED,Minor,Fixed,"2.0.0, 2.0.1, 2.0.2, (1)","2.0.2, 3.0.0 PDFBox",FontBox,None,,"When using TrueTypeFont::getKerning there is a large possibility that you will run into an out of bounds exception. This is because the binary search is split into two parts, and the second part incorrectly adds the offset to the found index.
Actually, with the current implementation there is no need to split the search into two parts. This is only 'needed' when using a binary search implementation which is optimised for cases where the length of the array is a power of two, which Arrays::binarySearch doesn't implement.",0,"Tilman Hausherr","Tim Koopman",0,4,"25/Apr/16 18:00","25/Mar/17 18:12","27/Apr/16 15:44"
PDFBOX-3329,PDFBOX,"Create PDFMergerUtility example with improved metadata handling",Improvement,CLOSED,Major,Fixed,"2.0.1, 2.0.2, 3.0.0 PDFBox","2.0.2, 3.0.0 PDFBox",PDModel,None,,"Create example as suggested by Alexander Kriegisch in PDFBOX-3323.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"26/Apr/16 18:30","25/Mar/17 18:13","30/Apr/16 10:48"
PDFBOX-3332,PDFBOX,"Apache PDFBox Form Fill TrueType text spacing issue",Bug,CLOSED,Critical,Fixed,2.0.1,"2.0.3, 3.0.0 PDFBox",AcroForm,None,"mac os x, java 1.8","I'm using Apache PDFBox to fill a PDF Form. I'm using a TrueType font (not a default font) called 'Impact', pretty standard fare. In the template I have a field called "Title" that has the Impact font assigned. I use the code below to take that template and populate the field with a value that has several words in it.
The issue is when you view the created PDF there are large spaces between the words. If you open the PDF in Acrobat and click on the field the text alters and the large spacing goes away. Editing the field in any way will permanently correct the issue, but I'm generating the forms to NOT be altered after the fact.
I've tried the same experiment with the default fonts (Helvetica in this case) and the above issue doesn't exist. I can create a blank form and add a field and set the custom font and duplicate the issue.
I've read that a similar issue was addressed in 2.0.0, PDFBOX-2062 but it was for changing font size, not a custom font.",0,"Andreas Lehmkühler","Richard Brown",0,6,"28/Apr/16 23:44","25/Mar/17 18:13","12/Sep/16 18:10"
PDFBOX-3333,PDFBOX,"Wrong appearance generation for rotated AcroForms fields",Bug,CLOSED,Critical,Fixed,"2.0.1, 2.0.2, 3.0.0 PDFBox","2.0.2, 3.0.0 PDFBox",AcroForm,Appearance,"mac os x, ubuntu","When filling a PDF field that is rotated the resulting generated PDF has the correct format. But when you generate an image of the PDF the image has the text in those rotated fields as not rotated.
I have tried a variety of templates and they all do the same thing: view the preview of the PDF and see unrotated text. Open the PDF and see the correctly rotated text.
Note that I generate the same PDF using iText 5.5.9 and the preview is correct, the text is correctly rotated. I'm basically bouncing back and forth between iText and PDFBox trying to find a working solution.
If it makes any difference I'm using an FDF file to fill with iText and an XFDF file for PDFBox because I can't figure out how to load an FDF in 2.0.1.",0,"Maruan Sahyoun","Richard Brown",0,4,"30/Apr/16 20:35","25/Mar/17 18:13","03/May/16 06:00"
PDFBOX-3335,PDFBOX,"Issue while Merging PDF with Hidden Layers",Bug,CLOSED,Major,Fixed,"1.8.9, 1.8.12, 2.0.1, (2)","1.8.13, 2.0.3, 3.0.0 PDFBox",Utilities,None,,"We are using the software pdfbox-app-1.8.9.jar to merge pdf files.
The issue is the merged file shows hidden layers which are sent as hidden in the original file used for merging. As of a result of this when we try to print the file out of sap the hidden layers show up in the print out.",0,"Tilman Hausherr","Kinnary Koshiya",0,3,"02/May/16 18:52","25/Mar/17 18:12","21/Jun/16 17:41"
PDFBOX-3336,PDFBOX,"several errors in the incremental save",Bug,CLOSED,Blocker,Fixed,"2.0.1, 2.0.2, 3.0.0 PDFBox","2.0.2, 3.0.0 PDFBox","Signing, Writing",regression,"java 1.8","We have several mistakes in pdf signature.
1) Some PDF ar not signed but no error is arised
2) Others contain the signature but acrobat reader does not show it .
The documents of the first type are confidential and we can only provide the information appendend by pdfbox to the original PDF.
For the second case we will provide you the original document .",0,"Tilman Hausherr","Marco Monacelli",1,4,"03/May/16 16:51","25/Mar/17 18:13","04/May/16 15:36"
PDFBOX-3337,PDFBOX,"Regression: NullPointerException in subsetting",Bug,CLOSED,Major,Fixed,"2.0.1, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",FontBox,None,,"The attached test files runs without problems with 2.0.0 but fails with 2.0.1.
Something must have changed concerning the subsetting of TTF files.
Basically I'm trying to reuse a TrueTypeFont for several PDFs to avoid parsing it over and over again.",0,"John Hewson","Philip Helger",0,5,"03/May/16 18:06","11/Jun/17 13:38","19/Jun/16 07:32"
PDFBOX-3338,PDFBOX,"CCITT Fax decoder fails",Bug,CLOSED,Major,Fixed,"1.8.12, 2.0.1","2.0.2, 3.0.0 PDFBox",None,"CCITTFaxDecode ccitt",,"I have a PDF which does not render in PDFBox. It contains pages from a scanner, encoded as CCITT Fax Tiffs. On each page, the decoder always runs into IOException("TIFFFaxDecoder: EOL encountered in black run.") (or the same message just with "white" instead of "black"). Unfortunately, the PDF contains sensitive data and I cannot share it.
As a test, I have replaced the TIFFFaxDecoder by the class CCITTFaxDecoderStream from the Twelve Monkeys ImageIO library. All worked fine after that and PDFToImage produced the expected result.
I have extracted the first few bytes of the TIFF to show the problem without sharing the confidential content. See the attached test program and test file.
I have tested this against latest trunk version of PDFBox, but I think the decoder implementation is basically the same in all versions.",0,"Tilman Hausherr","Petr Slaby",0,4,"04/May/16 13:07","25/Mar/17 18:12","30/May/16 20:43"
PDFBOX-3340,PDFBOX,"Image decoded twice without a real need",Improvement,CLOSED,Minor,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",None,optimization,,"Take the pdf from PDFBOX-1708, put a breakpoint into the class CCITTFaxFilter, method decode() and run PDFToImage. You will see the debugger stop twice, even if the pdf contains a single image.
The second call is arrives when the image is rendered to G2D, this is OK. But for the first time, the image is decompressed in the constructor of PDImageXObject - line 147
this(stream, resources, stream.createInputStream());
just to allow the filter (CCITTFaxFilter in this case) to provide additional dictionary parameters in case something is missing in the input (COLORSPACE would be set to DeviceGray if missing here).
I think this is a complete waste. The filter should be able to fix the dictionary without having to decode the image. As far as I can tell, this could be done by implementing a repair method on COSStream and on implementations of Filter.
Also, I do not see that the stream created in the above mentioned constructor of PDImageXObject would ever be closed. This seems to be a more general issue. I have put a counter into COSInputStream.create(), there where it creates new RandomAccessInputStream(buffer). With the testfile from PDFBOX-1708, I end up with 3 unclosed streams when the program finishes. I am not sure whether this is important, but I guess the unclosed streams are uselessly occupying space in the scratch file.
Sorry if this is just lack of understanding of the code from my side, but I could not resist to report what I see.",0,"Tilman Hausherr","Petr Slaby",1,4,"05/May/16 20:45","24/Mar/18 09:41","04/Mar/18 12:08"
PDFBOX-3341,PDFBOX,"currentAccessPermission.setReadOnly() not set in StandardSecurityHandler",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.1, (2)","1.8.13, 2.0.2, 3.0.0 PDFBox",Crypto,None,,"Reported by Joe Ye in the mailing list
While troubleshooting an encryption related issue, I discovered that
currentAccessPermission.setReadOnly() is called in method
pdfbox.pdmodel.encryption.PublicKeySecurityHandler#prepareForDecryption but
NOT in
pdfbox.pdmodel.encryption.StandardSecurityHandler#prepareForDecryption.
Could you please explain why there is the difference? As we're using
StandardSecurityHandler, it appears ReadOnly is never set..",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/May/16 21:42","25/Mar/17 18:12","05/May/16 22:30"
PDFBOX-3342,PDFBOX,"Add example to jump to a local page to AddAnnotations",Improvement,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 2.0.2","2.0.2, 3.0.0 PDFBox",PDModel,Annotations,,"From the mailing list:
right now I'm trying to create an inline link, but I can't find an example",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/May/16 12:08","25/Mar/17 18:13","07/May/16 12:12"
PDFBOX-3344,PDFBOX,"Caused by: java.lang.ClassCastException: org.apache.fontbox.ttf.OpenTypeFont can not be cast to org.apache.fontbox.cff.CFFFont",Bug,CLOSED,Major,Fixed,2.0.1,"2.0.3, 3.0.0 PDFBox",FontBox,None,,"I'm getting this error opening a specific pdf
Caused by: java.lang.ClassCastException: org.apache.fontbox.ttf.OpenTypeFont can not be cast to org.apache.fontbox.cff.CFFFont",0,"John Hewson","373 mch",1,6,"09/May/16 09:38","25/Mar/17 18:12","07/Aug/16 12:11"
PDFBOX-3346,PDFBOX,"Create example with empty signature",Bug,CLOSED,Major,Fixed,"2.0.2, 3.0.0 PDFBox","2.0.2, 3.0.0 PDFBox","AcroForm, Signing",None,,"Motivation from the mailing list:
I got fillable PDF working with interactive forms examples. I also 
have added a button in the PDF, I want to add the signature image (as 
in signature example) on click of that button (see attached). Once 
signature is in place, I want to remove the button and save the PDF. 
Is this something possible? Does anyone have working example of the same? ",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/May/16 12:59","25/Mar/17 18:13","10/May/16 16:33"
PDFBOX-3347,PDFBOX,"COSName parsing doesn't handle ISO-8859-1 encoded bytes",Bug,CLOSED,Minor,Fixed,"1.8.12, 2.0.1, 2.0.2","2.0.6, 3.0.0 PDFBox","Parsing, Writing",None,,"As discussed here http://stackoverflow.com/questions/36964496/pdfbox-2-0-overcoming-dictionary-key-encoding/ a byte sequence making up a COSName is interpreted during parsing and writing where it shouldn't. Details are given my mkl's excellent analysis.",0,"John Hewson","Maruan Sahyoun",0,4,"10/May/16 13:02","15/May/17 20:28","05/May/17 16:01"
PDFBOX-3348,PDFBOX,"NPE in Type1Parser.parseBinary",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 2.0.2, (1)","2.0.2, 3.0.0 PDFBox",FontBox,None,,"NPE happens in this code if the content is crap, because peekToken() can be null:
        // find /Private dict
        while (!lexer.peekToken().getText().equals("Private"))
        {
            lexer.nextToken();
        }",0,"Tilman Hausherr","Tilman Hausherr",0,2,"11/May/16 18:33","25/Mar/17 18:12","11/May/16 18:49"
PDFBOX-3350,PDFBOX,"Switch to kramdown for jekyll 3.x",Task,CLOSED,Minor,Fixed,None,None,Documentation,None,,"With jekyll 3 github moved to using kramdown only as the engine for markdown processing. In order to stay in sync with that move, although we are not using Github pages. we should do the same.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"16/May/16 17:14","31/Jan/17 10:59","16/May/16 17:18"
PDFBOX-3351,PDFBOX,"NPE when drawing annotation with empty border color array",Bug,CLOSED,Major,Fixed,"2.0.1, 2.0.2, 3.0.0 PDFBox","2.0.2, 3.0.0 PDFBox",Rendering,Annotations,,"Caused by: java.lang.NullPointerException: null
    org.apache.pdfbox.rendering.PageDrawer.getPaint(PageDrawer.java:237)
    org.apache.pdfbox.rendering.PageDrawer.drawAnnotationLinkBorder(PageDrawer.java:1035)
    org.apache.pdfbox.rendering.PageDrawer.showAnnotation(PageDrawer.java:949)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:193)
    org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:208)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:139)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)
The /C array is empty, this currently results in a PDColor with empty array and null colorspace. The specification mentions "no color; transparent".",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/May/16 09:03","25/Mar/17 18:13","17/May/16 11:02"
PDFBOX-3352,PDFBOX,"Calendar values are parsed with unknown timezones",Improvement,CLOSED,Major,Fixed,"1.8.12, 2.0.1, 2.0.2, (1)","1.8.13, 2.0.2, 3.0.0 PDFBox",Parsing,jdk8,,"Example of Calendar instance parsed from document:
java.util.SimpleTimeZone[id=unknown,offset=7200000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]
Although calling e.g. timeZone.getDisplayName() shows correclty 'GMT+02:00', timeZone.toZoneId() fails with following stack trace:
java.time.zone.ZoneRulesException: Unknown time-zone ID: unknown
 at java.time.zone.ZoneRulesProvider.getProvider(ZoneRulesProvider.java:272)
 at java.time.zone.ZoneRulesProvider.getRules(ZoneRulesProvider.java:227)
 at java.time.ZoneRegion.ofId(ZoneRegion.java:120)
 at java.time.ZoneId.of(ZoneId.java:411)
 at java.time.ZoneId.of(ZoneId.java:359)
 at java.time.ZoneId.of(ZoneId.java:315)
 at java.util.TimeZone.toZoneId(TimeZone.java:556)
        ...
This is fixed in PDFBOX-1633 but although the fixVersion is 1.8.3, I couldn't find the commit on 1.8 branch (only on 2.0)",0,"Tilman Hausherr","Robert Šiška",0,3,"17/May/16 13:12","25/Mar/17 18:13","20/May/16 11:34"
PDFBOX-3354,PDFBOX,"PDCIDFont.getAverageFontWidth always returns 0",Bug,CLOSED,Minor,Fixed,"2.0.1, 2.0.2, 3.0.0 PDFBox","2.0.2, 3.0.0 PDFBox",None,None,,"PDCIDFont.getAverageFontWidth method is using the field averageWidth as a cache, but fails to update its contents. Instead all the calculations go into a local variable with identical name,
PDCIDFont.java
    public float getAverageFontWidth()
    {
        if (averageWidth == 0)
        {
            float totalWidths = 0.0f;
            float characterCount = 0.0f;
            if (widths != null)
            {
                characterCount = widths.size();
                Collection<Float> widthsValues = widths.values();
                for (Float width : widthsValues)
                {
                    totalWidths += width;
                }
            }
            float averageWidth = totalWidths / characterCount;
            if (averageWidth <= 0 || Float.isNaN(averageWidth))
            {
                averageWidth = getDefaultWidth();
            }
        }
        return averageWidth;
    }
A potential fix is the removal of the local variable declaration.
float averageWidth = totalWidths / characterCount;",0,"Tilman Hausherr","Gabriel Carabas",0,3,"19/May/16 08:45","25/Mar/17 18:12","19/May/16 18:36"
PDFBOX-3355,PDFBOX,"PDPageLabels.getLabelsByPageIndices() returns Uppercase letters for style a",Bug,CLOSED,Trivial,Fixed,"1.8.12, 1.8.13, 2.0.1, (2)","1.8.13, 2.0.2, 3.0.0 PDFBox",PDModel,easyfix,windows,"For the style 'a' the Method getLabelsByPageIndices returns uppercase due to the method LabelGenerator.makeLetterLabel always returns uppercase. Then the method LabelGenerator.getNumber shoule be changed from:
} else if (PDPageLabelRange.STYLE_LETTERS_LOWER.equals(style)) {
    return makeLetterLabel(pageIndex);
} else if (PDPageLabelRange.STYLE_LETTERS_UPPER.equals(style)) {
    return makeLetterLabel(pageIndex).toUpperCase();
}
to:
} else if (PDPageLabelRange.STYLE_LETTERS_LOWER.equals(style)) {
    return makeLetterLabel(pageIndex).toLowerCase();
} else if (PDPageLabelRange.STYLE_LETTERS_UPPER.equals(style)) {
    return makeLetterLabel(pageIndex);
}",0,"Tilman Hausherr","Carlos Cabral",0,3,"20/May/16 00:51","25/Mar/17 18:13","23/May/16 01:07"
PDFBOX-3360,PDFBOX,"java.lang.IllegalArgumentException: dash lengths all zero",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 2.0.2","2.0.2, 3.0.0 PDFBox",Rendering,None,,"java.lang.IllegalArgumentException: dash lengths all zero
    org.apache.pdfbox.rendering.PageDrawer.getStroke(PageDrawer.java:567)
    org.apache.pdfbox.rendering.PageDrawer.strokePath(PageDrawer.java:576)
    org.apache.pdfbox.contentstream.operator.graphics.StrokePath.process(StrokePath.java:36)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:814)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:471)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:445)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:187)
    org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:208)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:139)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)
The dash values are not "all zero", but NaN, which is because the CTM in this file grows bigger and bigger until they are infinite.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"23/May/16 18:27","25/Mar/17 18:12","23/May/16 19:14"
PDFBOX-3361,PDFBOX,"Can't sign PDF document with forms or annotations",Bug,CLOSED,Blocker,Duplicate,"2.0.0, 2.0.1",None,Signing,None,,"It is not possible to sign a PDF document which contains a form.
There is no exception traces.
Please find attached 8 documents :
A document with a visual signature form (does not work) (Doc1)
A probably latex generated document (does not work) (Doc2)
A document with an annotation (does not work) (Doc3WithAnnot)
And the same document without annotation ( which works well ) (Doc3WithoutAnnot)
And their signed release.",0,"Tilman Hausherr","Cyril Bremaud",0,2,"24/May/16 14:44","25/May/16 15:44","25/May/16 15:44"
PDFBOX-3362,PDFBOX,"PageLayout.TwoColumnRight was Illegal",Bug,CLOSED,Major,Fixed,"2.0.1, 2.0.2, 3.0.0 PDFBox","2.0.2, 3.0.0 PDFBox",PDModel,regression,"windows, eclipse","I tried to load PageLayout.TwoColumnRight PDF occurred an error java.lang.IllegalArgumentException: TwoColumnRight.
someone forgot to implement in PageLayout#fromString maybe.",0,"Tilman Hausherr",kohdai,0,3,"25/May/16 11:18","25/Mar/17 18:12","25/May/16 15:53"
PDFBOX-3363,PDFBOX,"Leftover file in temp directory when signing",Bug,CLOSED,Major,Fixed,"2.0.1, 2.0.2, 3.0.0 PDFBox","2.0.2, 3.0.0 PDFBox",Signing,None,,"As reported by Damien Butaye on the mailing list:
I'm trying to add a signature to a PDF using PDFBOX 2.0.1. During the
process, a tmp file (e.g: tmpPDFBoxXXX.pdf) is stored inside the /tmp
directory (RehHat server). This file is not deleted after completion.
After some checks, it seems that the object responsible of the file
creation is "RandomAccessBufferedFileInputStream(InputStream is)". This
object is used by the PDFParser object which doesn't close the stream
after
completion.
and his solution:
For your information I found a workaround to avoid the problem of tmp file
deletion. In the SignatureOptions object, I modified the method *public
void setVisualSignature(InputStream is) *with the following content :
RandomAccessBufferedFileInputStream tmp=new
RandomAccessBufferedFileInputStream(is); --> NEW LINE
PDFParser parser = new PDFParser(tmp); --> NEW LINE
parser.parse();
visualSignature = parser.getDocument();
tmp.close(); --> NEW LINE
Tmp files are well deleted and all unit tests passed without error on the
pdfbox maven project.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"25/May/16 17:21","25/Mar/17 18:12","25/May/16 17:37"
PDFBOX-3364,PDFBOX,"PDModel.getSignatureFields() only returns top level signature fields",Improvement,CLOSED,Minor,Fixed,"2.0.0, 2.0.1, 2.0.2, (1)","2.0.2, 3.0.0 PDFBox",PDModel,None,,"From the users mailing list
I'm tying to rewrite my code in order to use the PDFBox in place of the
current library.
First of all, thank you for the great work you are doing!
I'm trying to manage signatures of a PDFdocuments and the method that I use
to obtain the Signatures' list from the PDDocument is:
public List<PDSignature> *getSignatureDictionaries *() throws IOException
I'm in trouble with a specific signed PDF document because this method
returns an empty signature list.
The user correctly spotted that we only return top level fields and not descendant fields (as can be seen from the source code).",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"26/May/16 15:25","25/Mar/17 18:12","26/May/16 18:36"
PDFBOX-3367,PDFBOX,"PDFToImage class not in javadocs",Bug,CLOSED,Major,Fixed,2.0.1,2.0.2,Documentation,None,,https://pdfbox.apache.org/docs/2.0.1/javadocs/,0,"Maruan Sahyoun","simon steiner",0,2,"27/May/16 15:02","09/Jun/16 17:44","07/Jun/16 21:00"
PDFBOX-3368,PDFBOX,"ContainsKey don't work for the Map<String, Object> returned by PDStructureTreeRoot.getRoleMap",Bug,CLOSED,Trivial,Fixed,"1.8.12, 2.0.1","1.8.13, 2.0.2, 3.0.0 PDFBox",PDModel,patch,"windows 10","No sure if it is an expected behaviour or a bug.
The Method PDStructureTreeRoot.getRoleMap returns a map which the key is a String (Map<String, Object>).
However when we use map.containsKey("Header") it always return false because instead of a String it is waiting for A COSName instance.
Then we have to use map.containsKey(COSName.getPDFName("Header"));
In the other the method map.get("Header"); works
Test.java
//PDF Filte tested: 
//http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PDF32000_2008.pdf
try (PDDocument document = PDDocument.load(new File("PDF32000_2008.pdf"));){
  PDStructureTreeRoot treeRoot = document.getDocumentCatalog().getStructureTreeRoot();
  Map<String, Object> roleMap = treeRoot.getRoleMap();
  //Returned map: COSDictionaryMap<K,V>
  System.out.println(roleMap.containsKey("Header"));//No work
  System.out.println(  roleMap.containsKey(COSName.getPDFName("Header")));//Works
} catch (IOException ex) {  
  ex.printStackTrace();
}",0,"Andreas Lehmkühler","Carlos Cabral",0,3,"30/May/16 07:30","25/Mar/17 18:13","30/May/16 16:20"
PDFBOX-3369,PDFBOX,"Error expected floating point number actual='0.00-35095424'",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.0, (3)","1.8.13, 2.0.2, 3.0.0 PDFBox",Parsing,None,,"pdfbox.version=2.0.0
File file = new File("/home/user/error/withError.pdf");
try (PDDocument document = PDDocument.load(file)) {
}
exception: Error expected floating point number actual='0.00-35095424'",0,"Tilman Hausherr","Ilia Karabanov",0,3,"31/May/16 05:57","12/Jan/18 18:05","31/May/16 07:10"
PDFBOX-3370,PDFBOX,"Error reading the double L",Bug,CLOSED,Critical,"Not A Problem","1.8.7, 1.8.8, 1.8.9, (5)",None,"Text extraction","extraction ll text",netbeans,"When trying to read some pdf with words containing LL , the library draws only one of the L. Perform a test with the iTextPDF library and working properly.",0,"Tilman Hausherr","José Jiménez",0,2,"01/Jun/16 21:53","02/Jun/16 17:00","02/Jun/16 16:17"
PDFBOX-3373,PDFBOX,"Create example with empty signature incomplete",Bug,CLOSED,Major,Fixed,"2.0.1, 2.0.2, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox","Signing, Utilities",None,,"Forgot to add signature field to acroform field list.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Jun/16 16:55","25/Mar/17 18:13","09/Jun/16 18:40"
PDFBOX-3375,PDFBOX,"Use a static lock for a singleton",Bug,CLOSED,Major,Fixed,"2.0.2, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",PDModel,None,,"Our build is failing from time to time throwing the following exception
java.awt.color.CMMException: Invalid profile data
 at sun.java2d.cmm.kcms.CMM.checkStatus(CMM.java:180)
 at sun.java2d.cmm.kcms.CMM.createTransform(CMM.java:134)
 at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:166)
 at org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init(PDDeviceRGB.java:69)
 at org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB(PDDeviceRGB.java:103)
 at org.apache.pdfbox.rendering.PageDrawer.getPaint(PageDrawer.java:237)
 at org.apache.pdfbox.rendering.PageDrawer.getNonStrokingPaint(PageDrawer.java:529)
 at org.apache.pdfbox.rendering.PageDrawer.fillPath(PageDrawer.java:600)
 at org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroRule.process(FillNonZeroRule.java:36)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:178)
 at org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:70)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:189)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:55)
 at org.apache.pdfbox.rendering.TestRendering.render(TestRendering.java:79)
In PDDeviceRGB the non-static init method is synchronized using the instance of the class as lock object. So far so good. But as the class is used a singleton a static object has to be used as lock object.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,6,"09/Jun/16 18:24","25/Mar/17 18:12","06/Dec/16 10:59"
PDFBOX-3377,PDFBOX,"font caching never stops in AIX",Bug,CLOSED,Major,Fixed,2.0.2,"2.0.9, 3.0.0 PDFBox",Rendering,None,,"I'm trying to convert PDF to Image.
When I call PDFRenderer.renderImage(), the log message like belows appears.
 WARN(FileSystemFontProvider.java)[2016-06-10 10:44:39,969]-New fonts found, font cache will be re-built
 WARN(FileSystemFontProvider.java)[2016-06-10 10:44:39,969]-Building on-disk font cache, this may take a while
It never stops. No response or change since those message appears.
I can't attach font cache file because I don't know where it is located.
+ I attached pdfbox tmp file "pdfbox377219359369560029tmp" that I found in /tmp/ directory.
tail of the file is like belows
<?xpacket begin="癤? id="W5M0MpCehiHzreSzNTczkc9d"?><x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39"><rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:pdf="http://ns.adobe.com/pdf/1.3/"><pdf:PDFVersion>1.4</pdf:PDFVersion><pdf:Producer>Hancom PDF 1.3.0.480</pdf:Producer></rdf:Description><rdf:Description rdf:about="" xmlns:xap="http://ns.adobe.com/xap/1.0/"><xap:CreatorTool>Hancom PDF 1.3.0.480</xap:CreatorTool><xap:CreateDate>2016-05-24T18:54:06+09:00</xap:CreateDate><xap:ModifyDate>2016-05-24T18:54:06+09:00</xap:ModifyDate><xap:MetadataDate>2016-05-24T18:54:06+09:00</xap:MetadataDate></rdf:Description><rdf:Description rdf:about="" xmlns:dc="http://purl.org/dc/elements/1.1/"><dc:format>application/pdf</dc:format><dc:title><rdf:Seq><rdf:li>李⑥꽭? ??숉넻?⑹젙蹂댁떆?ㅽ뀥 援ъ텞?ъ뾽</rdf:li></rdf:Seq></dc:title><dc:date><rdf:Seq><rdf:li>2016-05-24T18:54:06+09:00</rdf:li></rdf:Seq></dc:date></rdf:Description><rdf:Description rdf:about="" xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"><xapMM:DocumentID>43D906A6-241D-4E39-B165-0418769B224B</xapMM:DocumentID><xapMM:InstanceID>uuid:4AB60C4F-752D-4C5C-B438-65F54D57FDF1</xapMM:InstanceID></rdf:Description><rdf:Description rdf:about="" xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/">
<pdfaid:part>1</pdfaid:part>
<pdfaid:conformance>B</pdfaid:conformance>
</rdf:Description></rdf:RDF></x:xmpmeta><?xpacket end="w"?>
+ I also attached three files found from $USER_HOME/.fontconfig directory which seem to be font cache files.",0,"Tilman Hausherr","Donghe Youn",0,5,"10/Jun/16 06:10","24/Mar/18 09:41","13/Nov/17 16:58"
PDFBOX-3379,PDFBOX,"PDType0Font Subsetting Monospace DejaVuSansMono",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",FontBox,None,,"Hi,
we came across the problem that the monospace font dejaVuSansMono has problems with spaces in strings if they are rendered in a pdf and a PDFType0Font is used for subsetting. If a space is placed within the strings the letters from every word are placed overlapping each other, see attached files. Seems that the advancedWidth array int the HorizontalMetricsTable contains a wrong, very low value as 3rd entry after subsetting the font. We compared it with a second monospace font, and it worked there. The difference between the two fonts is that the dejaVu Mono only contains 4 advanceWidth entries and the second one contains an entry for every glyph. This second font was VeraMono.ttf . The fonts are loaded via PDType0Font.load(doc, fontfile).",0,"Tilman Hausherr","Christian Maierhofer",0,3,"10/Jun/16 08:33","25/Mar/17 18:13","13/Jun/16 16:44"
PDFBOX-3381,PDFBOX,"PDF rendering regression",Bug,CLOSED,Major,Fixed,2.0.2,2.0.3,Rendering,None,,"This PDF is rendered with black margins if rendered at 55 DPI in 2.0.2, but looks fine 2.0.1.
PDF: ftp://ftp.cse.ohio-state.edu/pub/tech-report/2010/TR11.pdf",0,"Tilman Hausherr","Christopher Clark",0,3,"12/Jun/16 01:53","17/Sep/16 09:45","13/Jun/16 05:54"
PDFBOX-3382,PDFBOX,"pdf creation very slow",Improvement,CLOSED,Minor,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox","FontBox, Writing","optimization perform",,"compared to older 1.8.x versions, the new 2.0.x branch is awesomely slow.
benchmarks using a multipage document with few images and many text-lines indiciate a performance penalty of about 1:20 compared with the old 1.8.x branch.
profiling via VisualVM indicates that the new font handling causes this performance drawback:
TrueTypeFont.nameToGid() [31%]
TrueTypeFont.hasGlyph() [23%]
PDFont.getWidth() [16%]
PDType1Font.encode() [9%]
is there any workaround for this? the current setup only creates about 10 PDFs/second compared to over 200/second for the 1.8.x branch...",0,"Tilman Hausherr",kazu,0,4,"15/Jun/16 13:10","17/Sep/18 18:10","30/Jun/16 17:36"
PDFBOX-3383,PDFBOX,"Refactor to allow tsa timestamping for visible signatures",Improvement,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",Signing,None,,"Put TSA stuff into SignatureBase, allow tsa parameter.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"15/Jun/16 20:32","25/Mar/17 18:13","15/Jun/16 20:48"
PDFBOX-3386,PDFBOX,"Downgrade maven-bundle-plugin to ensure jdk6 compatibility",Bug,CLOSED,Major,Fixed,"2.0.2, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",None,None,,"With PDFBOX-3020 some of the maven plugins were updated. The 3.0.x version of the maven-bundle-plugin plugin isn't jdk 6 compatible, so that every build using jdk6 fails, see our travis builds. e.g. 4051",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"19/Jun/16 13:07","25/Mar/17 18:13","19/Jun/16 13:20"
PDFBOX-3387,PDFBOX,"AcroFrom fields (values) invisible when printing",Improvement,CLOSED,Major,Fixed,2.0.2,"2.0.3, 3.0.0 PDFBox",AcroForm,None,,"AcrobatReader/FoxitReader/... won't print values of e.g. AcroForm TextFields within a PDF created with PDFBox. Neither the print-preview shows the values within the fields, nor does the printed result.
Minimal example to reproduce:
the one provided within the repository:
https://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateSimpleForm.java
Also had this issue with 1.8.x versions but maybe my code just wasn't correct..",0,"Maruan Sahyoun",kazu,1,5,"20/Jun/16 10:14","25/Mar/17 18:12","22/Jun/16 21:25"
PDFBOX-3391,PDFBOX,"PDButton.getOnValues seems to be using the wrong source for getting the allowed values",Improvement,CLOSED,Major,Fixed,2.0.1,"2.0.3, 3.0.0 PDFBox",AcroForm,None,,"We are in the process of migrating from itext to pdfbox and noticed that an exception was being thrown when trying to set a radio button with PDField.setValue(). The values returned from PDButton.getOnValues() which is used by PDButton.checkValue() called from PDButton.setValue() are only returning 0,1 instead of what we had been using with itext. After investigating itext's source code and playing around with pdfbox I was able to get to what I believe are the appropriate allowed values by using the following code.
        if (field instanceof PDButton)
        {
            final COSBase item = field.getCOSObject().getItem(COSName.OPT);
            if (item != null && item instanceof COSArray)
            {
                final COSArray optArray = (COSArray)item;

                for (int i = 0 ; i < optArray.size() ; i++)
                {
                    // Each item in this array is an allowed value
                    // optArray.getString(i);
                }
            }
        }",0,"Maruan Sahyoun","Scott Coldwell",0,4,"21/Jun/16 07:29","25/Mar/17 18:13","28/Jun/16 19:19"
PDFBOX-3395,PDFBOX,"Throwing exception when PDF has unused empty fonts embedded.",Bug,CLOSED,Major,Fixed,"2.0.1, 2.0.2, 2.0.3","2.0.3, 3.0.0 PDFBox",FontBox,None,,"I was trying to follow up on the issues in our system and found that some PDF files threw ERRORs. These PDFs are produced by a publishing system and that system seems to add fonts when you change to them and add them even though they are never used. Or only space is used. Then they add this font with an empty glyf table. This results in that errors are thrown on files that are fine.
Line 310 in TTFParser removes empty glyf tables.
// skip tables with zero length
if (table.getLength() == 0)
{ return null; }
return table;
Line 215 of TTFParser throws exception when glyf table is missing.
if (font.getGlyph() == null)
{ throw new IOException("glyf is mandatory"); }",0,"Tilman Hausherr","Daniel Persson",0,3,"23/Jun/16 12:23","25/Mar/17 18:12","13/Jul/16 20:03"
PDFBOX-3396,PDFBOX,"flattening AcroForm with visible sign field ETSI.CAdES.detached",Bug,CLOSED,Critical,Fixed,"2.0.1, 2.0.2","2.0.4, 3.0.0 PDFBox",AcroForm,None,"java 1.8","Hallo,
I've got a problem with the flattaning function of AcroForm class of a PDSignatureField. I've a signed pdf document with ETSI.CAdES.detached visible image at bottom of the file. I want to flattan the PDSignatureField of the sign to eliminate sign cryptography element of the field and to embad the sign marker immage of the sign, in the same position of the original immage that is a part of the marker sign ETSI.CAdES.detached. I try this way(pseudo code similare to real code):
PDDocument pdDoc = PDDocument.load("signed-document.pdf");

PDDocumentCatalog pdCatalog = pdDoc.getDocumentCatalog();
PDAcroForm acroForm = pdCatalog.getAcroForm();

List<PDField> fields = acroForm.getFields();

fields.stream().filter(pf -> pf.getFieldType().toLowerCase().contains("sig")).forEach(pf -> {
try {
      PDSignatureField pfs = ((PDSignatureField)(pf));
      
       log.info("START remove Sign Flags");
       pfs.setReadOnly(true);
       pfs.setRequired(false);
       pfs.setNoExport(true);
       log.info("END remove Sign Flags");
       
       log.info("START flatten field");
       pfs.getAcroForm().flatten();
       pfs.getAcroForm().refreshAppearances();
       log.info("END flatten field");
     
} catch (Exception ex) {
   log.error("flattenFile --> Error: " + ex.getMessage());
   throw new RuntimeException(ex);
}
});

ByteArrayOutputStream baos = new ByteArrayOutputStream();
pdDoc.save(baos);
.
.
.
At the and of the process, the pdf file in output, has no sign cryptography element, but the visible marker immage of the sign is placed in a wrong position, on top of sign above paragraph of the document and not in original position of the signed marker immage. That's happen when i call the following method:
       pfs.getAcroForm().flatten();
In other words, the flattened pdf of the original signed pdf, has in a correct way no more sign inside but, the immage of the ETSI.CAdES.detached signe is embedded in a wrong position, over the text of the nearest above paragraph of the pdf document.
My questions are:
1-My way, is the correct way to flattan a signed ETSI.CAdES.detached file?
2-Is there a method to remove CadES/PadES sign with a official visible marker image and, embad immage in the acctual original position in pdf file?
Thank you for your support and sorry for my poor English.
Best regards,
Fabio Evangelista",0,"Maruan Sahyoun",Fabio,0,4,"23/Jun/16 14:05","25/Mar/17 18:12","12/Dec/16 06:01"
PDFBOX-3397,PDFBOX,"PDFDebugger shows XML Metadata in ISO-8859-1",Improvement,CLOSED,Minor,Fixed,"2.0.1, 2.0.2","2.0.3, 3.0.0 PDFBox",Utilities,None,,"When viewing XML metadata in the PDFDebugger the content is displayed using ISO-8859-1 instead of UTF-8 (or even more intelligent by looking at the begin attribute.
So instead of this
<rdf:li>S.Straße_2</rdf:li>
we get this
<rdf:li>S.StraÃ e_2</rdf:li>",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"23/Jun/16 14:19","25/Mar/17 18:12","02/Jul/16 07:20"
PDFBOX-3401,PDFBOX,"PDObjectReference getReferencedObject() returns null if referenced obj is not a COSStream",Bug,CLOSED,Major,Fixed,"1.8.9, 2.0.2, 2.0.3, (1)","2.0.9, 3.0.0 PDFBox",PDModel,StructureTree,,"When creating a pdf I am setting a PDAnnotation as the referenced object of a PDObjectReference using setReferencedObject.
When I subsequently load the same document and then call getReferencedObject on the PDObjectReference, null is returned. This is because an exception is thrown in PDXObject.createXObject (called inside getReferencedObject) as the referenced object is not a COSStream, just a COSDictionary.",0,"Tilman Hausherr","Mark Melling",1,4,"27/Jun/16 12:31","24/Mar/18 09:41","10/Nov/17 20:41"
PDFBOX-3403,PDFBOX,"IllegalArgumentException: Symbolic fonts must have a built-in encoding",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",PDModel,None,,"Happens with text extraction and rendering:
Exception in thread "main" java.lang.IllegalArgumentException: Symbolic fonts must have a built-in encoding
 at org.apache.pdfbox.pdmodel.font.encoding.DictionaryEncoding.<init>(DictionaryEncoding.java:113)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.readEncoding(PDSimpleFont.java:126)
 at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:131)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:60)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:123)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:829)",0,"John Hewson","Tilman Hausherr",0,4,"28/Jun/16 06:12","25/Mar/17 18:12","07/Aug/16 13:02"
PDFBOX-3404,PDFBOX,"Threads using PDFBox getting stuck when using standard 14 fonts",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.2, 2.0.3, (1)","2.0.3, 3.0.0 PDFBox",PDModel,multithreading,,"user Patrick Stahle reports:
We have a relatively heavily threaded application which is calling pdfbox to stamp certain
pdf files. We have been in production for a little over a week and have run into a few threads
getting stuck. The stack trace is the following:
### Thread id=34, name="dispatch_2_20160626211454_1064"
# ThreadInfo: "dispatch_2_20160626211454_1064" Id=34 RUNNABLE
# CPU: threadCpuTime=49,541,548.824 ms, threadUserTime=49,538,533.066 ms
# Contention: blockedCount=33 , blockedTime=123 ms
# Contention: lockName=null , lockOwnerId=-1, lockOwnerName=null
java.util.HashMap.put(HashMap.java:473)
java.util.HashSet.add(HashSet.java:217)
java.util.AbstractCollection.addAll(AbstractCollection.java:334)
org.apache.pdfbox.pdmodel.font.encoding.Encoding.contains(Encoding.java:109)
org.apache.pdfbox.pdmodel.font.PDType1Font.encode(PDType1Font.java:343)
org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:286)
org.apache.pdfbox.pdmodel.font.PDFont.getStringWidth(PDFont.java:315)
com.tycoelectronics.emcs.stamppdf.StampEnginePDFBox.getLongestTextWidth(StampEnginePDFBox.java:1369)
We seem to be getting stuck in PDFont classes HashMap which is unsynchronized class.
We are using "PDType1Font.HELVETICA".
The problem is that for the standard 14 fonts, each font is a singleton, but its code is being used multithreaded, so we have to secure that.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"28/Jun/16 15:36","25/Mar/17 18:12","08/Jul/16 15:48"
PDFBOX-3405,PDFBOX,"Display font size",Improvement,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox","Documentation, (1)",None,,"I (along with others) have found using the font size of text to be very useful when doing things like trying to recover the structure of PDFs. For example, in heuristics like 'text with large font sizes are probably titles'. However, I noticed a few cases where getFontSizeInPt or getFontSize return seemingly very inaccurate results. For example, in the attached pdf the getFontSizeInPt for the title text is over 500.
After digging into this a little, as I understand it neither of these methods return the a font size scaled to the display space. getFontSize returns the "raw" encoded font size and getFontSizeInPt returns the font size scaled by the text matrix, but not by the current transformation matrix.
Basically, in order to get reliable font information, it would be helpful if either
1) getFontSizeInPt includes the effect of using the current transformation matrix
2) A new method like getDisplayFontSize is added that returns the font size scaled to the display space
As a side note, I have seen several users (including myself), assume that getFontSize returns the font size as would be observed when one opens the PDF, and the been confused when these method occasionally do not return the results expected. I think getFontSize would benefit from a clear note that the results might not include scaling factors that were used when the text was rendered.",0,"Tilman Hausherr","Christopher Clark",0,4,"28/Jun/16 23:19","25/Mar/17 18:12","03/Jul/16 10:03"
PDFBOX-3408,PDFBOX,"Correct validation of Widget Annotations for PDF/A-1",Bug,CLOSED,Minor,Fixed,"1.8.12, 2.0.2, 2.0.3, (1)","2.0.3, 3.0.0 PDFBox",Preflight,None,,"The TECHNICAL CORRIGENDUM 2 for ISO 19005-1:2005 (PDF/A-1) added a clause for Widget Annotations:
For all annotation dictionaries containing an AP key, the appearance dictionary that it defines as its value shall contain only the N key. If an annotation dictionary’s Subtype key has a value of Widget and its FT key has a value of Btn, the value of the N key shall be an appearance subdictionary; otherwise the value of the N key shall be an appearance stream.
We currently (only) validate with the original clause of ISO 19005-1:2005 (PDF/A-1) which has
If an annotation dictionary contains the AP key, the appearance dictionary that it defines as its value shall contain only the N key, whose value shall be a stream defining the appearance of the annotation.
Previous versions of PDFBox report an error for such a widget
5.3.1 : Invalid field value in an annotation definition, The N Appearance must be a Stream",0,"Tilman Hausherr","Maruan Sahyoun",0,3,"01/Jul/16 15:28","25/Mar/17 18:13","04/Jul/16 21:22"
PDFBOX-3409,PDFBOX,"TextToPDF drops leading spaces",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.12, 1.8.13, (3)","1.8.13, 2.0.3, 3.0.0 PDFBox",Utilities,features,aix,"We want to use TextToPDF in batch command line mode to convert legacy reports which assume a mono-spaced font, but the PDF files created ignore all leading spaces. Obviously, this messes up column alignment. We can't use the tool without a fix for this. Or is there a parameter we can pass? Here is the command line we are using: java -jar pdfbox-app-1.8.10.jar TextToPDF -standardFont Courier -fontSize 6 gprod.pdf gprod.txt.
I tried downloading 2.0.2, but it is stuck at "WARNING: Building on-disk font cache, this may take a while".
P.S. I am also submitting a second ticket (PDFBOX-3410) regarding the need for orientation control in TextToPDF. Most of our old legacy reports are 128 characters wide and without a Landscape option, they come out wrapped into illegibility.",0,"Tilman Hausherr","Marc Stuart",1,3,"01/Jul/16 21:45","23/May/17 14:33","04/Jul/16 16:47"
PDFBOX-3410,PDFBOX,"TextToPDF needs orientation control","New Feature",CLOSED,Major,Fixed,"1.8.10, 1.8.12, 1.8.13, (3)","1.8.13, 2.0.3, 3.0.0 PDFBox",Utilities,features,aix,"We want to use TextToPDF in batch command line mode to convert legacy reports which assume a mono-spaced font, but most of our old legacy reports are 128 characters wide and without a Landscape option, they come out wrapped into illegibility. Using a Courier 6 font just barely keeps them from wrapping, but it messes up the pagination. Please note that this ticket relates to PDFBOX-3409, where leading spaces are lost, which is even more of a deal-breaker for us than this. A Courier 10 example is attached. See ticket PDFBOX-3409 for a Courier 6 example.",0,"Tilman Hausherr","Marc Stuart",1,3,"01/Jul/16 22:09","25/Mar/17 18:12","04/Jul/16 16:47"
PDFBOX-3411,PDFBOX,"Incorrect embedding of non-subset fonts.",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.2, 2.0.3, (1)","2.0.3, 3.0.0 PDFBox",PDModel,None,,"The following code produces a broken PDF.
final String DIR = "/Users/user/Documents/pdf/";
PDDocument doc = new PDDocument();
PDPage pg = new PDPage();
PDPageContentStream con = new PDPageContentStream(doc, pg);
con.beginText();
// Working fine when below is true, not when it is false.
con.setFont(PDType0Font.load(doc, new FileInputStream(DIR + "NotoSans-Regular.ttf"), false), 16);
con.setTextMatrix(Matrix.getTranslateInstance(50, 600));
con.showText("Hello World");
con.endText();
con.close();
doc.addPage(pg);
doc.save(new File(DIR + "out.pdf"));
doc.close();
As mentioned in the code, it works fine when the subset is true. I've tried it with a few fonts. The referenced font is downloadable from here:
https://www.google.com/fonts#UsePlace:use/Collection:Noto+Sans
Behavior in Chrome: Shows random characters.
Behavior in Mac Preview: Shows selectable whitespace.
Behavior in Acrobat Reader: Shows message on open (Cannot find or create the font 'NotoSans'. Some characters may not display or print correctly). Shows dots instead of characters.
Behavior in Safari: Same as preview.
Tested with 2.0.0 and 2.0.2.
Why does this matter? We need a complete font to embed to use in text acro form fields.
Thanks.",0,"Tilman Hausherr","Dan Fickling",0,3,"02/Jul/16 14:16","25/Mar/17 18:12","06/Jul/16 05:13"
PDFBOX-3412,PDFBOX,"Using fallback font 'TimesNewRomanPSMT' for 'Wingdings'",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",Rendering,None,"windows 7","The attached file has the non embedded "Wingdings" font. That one is available on windows, however its name is "Wingdings-Regular" so it doesn't match.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"06/Jul/16 18:18","02/Oct/17 17:49","19/Sep/16 17:02"
PDFBOX-3414,PDFBOX,"Add orientation parameter to PrintPDF command line tool",Improvement,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",Rendering,printing,,"Add orientation parameter to PrintPDF command line tool, and improve usage dialog ("secret" option -printerName isn't mentioned).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Jul/16 20:22","25/Mar/17 18:12","08/Jul/16 20:25"
PDFBOX-3416,PDFBOX,"CreateVisibleSignature example does not use the correct alias",Improvement,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",Signing,None,"mac os x","When attempting to use the create visible signature example with a valid pfx from Ascertia, the following is thrown:
Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.examples.signature.CreateVisibleSignature.<init>(CreateVisibleSignature.java:102)
at org.apache.pdfbox.examples.signature.CreateVisibleSignature.main(CreateVisibleSignature.java:228)
It appears the first alias in the key file can not be found. However, iterating through the aliases to find a certificate that can be used does work.
The following patch will iterate through the aliases until a workable alias is found.
--- CreateVisibleSignature.java 2016-07-11 17:54:42.000000000 +0100
+++ CreateVisibleSignature.java.new 2016-07-11 17:54:21.000000000 +0100
@@ -90,21 +90,26 @@
         // alias that should be used.
         Enumeration<String> aliases = keystore.aliases();
         String alias = null;
-        if (aliases.hasMoreElements())
-        {
+        Certificate cert = null;
+        while (aliases.hasMoreElements()) {
             alias = aliases.nextElement();
+            setPrivateKey((PrivateKey) keystore.getKey(alias, pin));
+            Certificate[] certChain = keystore.getCertificateChain(alias);
+            if (certChain == null) {
+                continue;
+            }
+            cert = certChain[0];
+            setCertificate(cert);
+            if (cert instanceof X509Certificate)
+            {
+                // avoid expired certificate
+                ((X509Certificate) cert).checkValidity();
+            }
+            break;
         }
-        else
-        {
-            throw new IOException("Could not find alias");
-        }
-        setPrivateKey((PrivateKey) keystore.getKey(alias, pin));
-        Certificate cert = keystore.getCertificateChain(alias)[0];
-        setCertificate(cert);
-        if (cert instanceof X509Certificate)
-        {
-            // avoid expired certificate
-            ((X509Certificate) cert).checkValidity();
+
+        if (cert == null) {
+            throw new IOException("Could not find certificate");
         }
     }",0,"Tilman Hausherr","Vittal Aithal",0,3,"11/Jul/16 17:08","25/Mar/17 18:12","11/Jul/16 18:44"
PDFBOX-3417,PDFBOX,"Redundant/incorrect code in PDVisibleSignDesigner.java",Bug,CLOSED,Trivial,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",PDModel,None,,"org/apache/pdfbox/pdmodel/interactive/digitalsignature/visible/PDVisibleSignDesigner.java contains the following in the calculatePageSize method:
    float x = pageWidth;
    float y = 0;
    pageWidth += y;
    float tPercent = (100 * y / (x + y));
    imageSizeInPercents = 100 - tPercent;
I can't see how this would result in anything but an imageSizeInPercents of 100.",0,"Tilman Hausherr","Vittal Aithal",0,3,"12/Jul/16 10:57","25/Mar/17 18:13","18/Jul/16 19:04"
PDFBOX-3418,PDFBOX,"Slow string to hex conversion in ToUnicodeWriter",Improvement,CLOSED,Trivial,Fixed,"2.0.1, 2.0.2, 2.0.3","2.0.3, 3.0.0 PDFBox",PDModel,"optimization perform",ubuntu,"The ToUnicodeWriter.writeTo(OutputStream) method converts a lot of shorts and strings to hexadecimal strings. This is done with String.format and therefore not very efficient.
The ToUnicodeWriter.toHex(int) and ToUnitcodeWriter.stringToHex(String) methods could be rewritten to generate a char-array and being generally more efficient.",0,"Tilman Hausherr","Michael Doswald",0,3,"12/Jul/16 15:43","25/Mar/17 18:13","12/Jul/16 19:26"
PDFBOX-3419,PDFBOX,"DublinCoreSchema.getDates always returns empty list",Bug,CLOSED,Major,Fixed,"2.0.1, 2.0.2, 2.0.3","2.0.3, 3.0.0 PDFBox",XmpBox,None,,"Creating and empty document and adding a dates to the DublinCore schema.
getDates() won't read the previously saved values.",0,"Tilman Hausherr","Svetlozar Argirov",0,3,"12/Jul/16 20:54","25/Mar/17 18:13","27/Jul/16 21:47"
PDFBOX-3420,PDFBOX,"Can't sign pdf with a particular attachment",Bug,CLOSED,Major,Fixed,1.8.12,1.8.13,Signing,None,,"We have a few problematic PDF files which the Adobe Reader opens without any error but when we attach them with PDFBox 1.8.12 to any other PDF and try to sign the file with the attachment, it throws an exception and the signing fails.
The thrown exception is:
org.apache.pdfbox.exceptions.SignatureException: The PDF file has no pages
If we use PDFBox 2.0.2 to attach, the signing succeeds.
Unfortunately we cannot publish the PDFs, they have confidential informations.",0,"Tilman Hausherr","Daniel Zsigus",0,3,"13/Jul/16 12:45","09/Dec/16 10:56","19/Jul/16 16:04"
PDFBOX-3421,PDFBOX,"Optimize float to string conversion in PDAbstractContentStream",Improvement,CLOSED,Trivial,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",PDModel,"optimization perform",ubuntu,"Drawing lines in a PDF (and also other operations) writes the coordinates to the content stream. Currently, the PDAbstractContentStream#writeOperand(float) method uses the NumberFormat class to convert the float values. This is inefficient for multiple reasons:
NumberFormat is designed to format numbers locale dependent. That is not needed in this case
NumberFormat uses a pattern to format the value which is also not needed in this case
The formatting first creates a String object, converts it to a byte array with ASCII encoding and then writes it to the stream. This generates a lot of garbage.
A different approach to formatting real operands should be used.",0,"Tilman Hausherr","Michael Doswald",0,3,"13/Jul/16 14:41","25/Mar/17 18:12","19/Jul/16 16:05"
PDFBOX-3424,PDFBOX,"Regression from 1.8.10: IOException: XREF for 171:0 points to wrong object: 173:0",Bug,CLOSED,Major,Fixed,2.0.2,"2.0.8, 3.0.0 PDFBox",Parsing,None,"windows 7, java 1.8","The following stacktrace is shown with ExtractText and PDFReader when opening a file previously parsed by 1.8.10:
java.lang.RuntimeException: java.io.IOException: XREF for 171:0 points to wrong object: 173:0
    org.apache.pdfbox.debugger.PDFDebugger.openMenuItemActionPerformed(PDFDebugger.java:593)
    org.apache.pdfbox.debugger.PDFDebugger.access$400(PDFDebugger.java:113)
    org.apache.pdfbox.debugger.PDFDebugger$4.actionPerformed(PDFDebugger.java:312)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
Caused by: java.io.IOException: XREF for 171:0 points to wrong object: 173:0
    org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:746)
    org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:721)
    org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:652)
    org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:612)
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:215)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:249)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:840)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:780)
    org.apache.pdfbox.debugger.PDFDebugger.parseDocument(PDFDebugger.java:1243)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1165)
    org.apache.pdfbox.debugger.PDFDebugger.openMenuItemActionPerformed(PDFDebugger.java:587)
    org.apache.pdfbox.debugger.PDFDebugger.access$400(PDFDebugger.java:113)
    org.apache.pdfbox.debugger.PDFDebugger$4.actionPerformed(PDFDebugger.java:312)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)",0,"Andreas Lehmkühler","Luis Filipe Nassif",0,3,"18/Jul/16 18:17","02/Nov/17 21:01","01/Oct/17 16:06"
PDFBOX-3425,PDFBOX,"IOException: Number 'ªªªªªªªªªªªªªªªªªªªª' is getting too long, stop reading at offset 1199435",Bug,CLOSED,Major,"Cannot Reproduce",2.0.2,None,Parsing,None,"windows 7, java 1.8","The following stacktrace is shown with ExtractText and PDFReader when opening a file previously parsed by 1.8.10. Unfortunately the file can not be shared.
java.lang.RuntimeException: java.io.IOException: Number 'ªªªªªªªªªªªªªªªªªªªª' is getting too long, stop reading at offset 1199435
    org.apache.pdfbox.debugger.PDFDebugger.openMenuItemActionPerformed(PDFDebugger.java:593)
    org.apache.pdfbox.debugger.PDFDebugger.access$400(PDFDebugger.java:113)
    org.apache.pdfbox.debugger.PDFDebugger$4.actionPerformed(PDFDebugger.java:312)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
Caused by: java.io.IOException: Number 'ªªªªªªªªªªªªªªªªªªªª' is getting too long, stop reading at offset 1199435
    org.apache.pdfbox.pdfparser.BaseParser.readStringNumber(BaseParser.java:1379)
    org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1341)
    org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber(BaseParser.java:1278)
    org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:739)
    org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:721)
    org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:652)
    org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:612)
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:215)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:249)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:840)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:780)
    org.apache.pdfbox.debugger.PDFDebugger.parseDocument(PDFDebugger.java:1243)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1165)
    org.apache.pdfbox.debugger.PDFDebugger.openMenuItemActionPerformed(PDFDebugger.java:587)
    org.apache.pdfbox.debugger.PDFDebugger.access$400(PDFDebugger.java:113)
    org.apache.pdfbox.debugger.PDFDebugger$4.actionPerformed(PDFDebugger.java:312)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)",0,"Andreas Lehmkühler","Luis Filipe Nassif",0,2,"18/Jul/16 18:28","17/Oct/16 14:44","17/Oct/16 14:44"
PDFBOX-3426,PDFBOX,"ExecutionException: java.lang.ArrayIndexOutOfBoundsException: 0",Bug,CLOSED,Major,Fixed,"2.0.1, 2.0.2, 2.0.3","2.0.3, 3.0.0 PDFBox",Parsing,None,"windows 7, java 1.8","The following stacktrace is shown with ExtractText and PDFReader when opening a file previously parsed by 1.8.10. Unfortunately the file can not be shared.
java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.ArrayIndexOutOfBoundsException: 0
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.done(PagePane.java:176)
    sun.swing.AccumulativeRunnable.run(Unknown Source)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
Caused by: java.util.concurrent.ExecutionException: java.lang.ArrayIndexOutOfBoundsException: 0
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.done(PagePane.java:165)
    sun.swing.AccumulativeRunnable.run(Unknown Source)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 0
    org.apache.fontbox.ttf.TrueTypeFont.getUnicodeCmap(TrueTypeFont.java:566)
    org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:183)
    org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:70)
    org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont(PDFontFactory.java:125)
    org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:128)
    org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
    org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:123)
    org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:189)
    org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:208)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:139)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:156)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:139)
    java.lang.Thread.run(Unknown Source)",0,"Tilman Hausherr","Luis Filipe Nassif",0,3,"18/Jul/16 18:32","25/Mar/17 18:12","04/Aug/16 16:49"
PDFBOX-3427,PDFBOX,"IOException: Error reading stream, expected='endstream' actual='' at offset 430840",Improvement,CLOSED,Minor,Fixed,2.0.2,2.0.7,Parsing,None,"windows 7, java 1.8","The following stacktrace is shown with ExtractText and PDFReader when opening a file previously parsed by 1.8.10 (and opened by chrome and icepdf):
java.lang.RuntimeException: java.io.IOException: Error reading stream, expected='endstream' actual='' at offset 430840
    org.apache.pdfbox.debugger.PDFDebugger.openMenuItemActionPerformed(PDFDebugger.java:593)
    org.apache.pdfbox.debugger.PDFDebugger.access$400(PDFDebugger.java:113)
    org.apache.pdfbox.debugger.PDFDebugger$4.actionPerformed(PDFDebugger.java:312)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
Caused by: java.io.IOException: Error reading stream, expected='endstream' actual='' at offset 430840
    org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:996)
    org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:760)
    org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:721)
    org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:652)
    org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:612)
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:215)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:249)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:840)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:780)
    org.apache.pdfbox.debugger.PDFDebugger.parseDocument(PDFDebugger.java:1243)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1165)
    org.apache.pdfbox.debugger.PDFDebugger.openMenuItemActionPerformed(PDFDebugger.java:587)
    org.apache.pdfbox.debugger.PDFDebugger.access$400(PDFDebugger.java:113)
    org.apache.pdfbox.debugger.PDFDebugger$4.actionPerformed(PDFDebugger.java:312)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)",0,"Andreas Lehmkühler","Luis Filipe Nassif",0,4,"18/Jul/16 19:32","02/Oct/17 18:51","01/Oct/17 16:04"
PDFBOX-3432,PDFBOX,"Optimize CID to GlyphId mapping (TTF)",Improvement,CLOSED,Trivial,Fixed,"2.0.1, 2.0.2, 2.0.3","2.0.4, 3.0.0 PDFBox",FontBox,"optimization perform",ubuntu,"TTF fonts map code-points (Code IDs) to glyphs. These are mappings from int to int. Because the JDK lacks map classes for primitive types, the code (e.g. in CmapSubtable) currently uses Map<Integer,Integer> for those mappings. This is inefficient in different ways:
Autoboxing/unboxing introduces a performance penalty
Boxing to Integer objects has a memory overhead
The JDK Map implementation has a big memory overhead for such simple objects
For efficiency (execution time and memory consumption) I would propose to introduce a simple IntIntMap implementation which works with primitive integers.",0,"Tilman Hausherr","Michael Doswald",1,4,"21/Jul/16 08:46","25/Mar/17 18:13","28/Nov/16 19:33"
PDFBOX-3433,PDFBOX,"Optimize image conversion in LosslessFactory",Improvement,CLOSED,Trivial,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",PDModel,"optimization perform",ubuntu,"Conversion of BufferedImage objects into PDImageXObject objects could be optimized by
Pre-sizing the buffers
Reading whole lines of pixels instead of pixel-by-pixel
Prevent unnecessary copying of byte arrays",0,"Tilman Hausherr","Michael Doswald",0,3,"21/Jul/16 14:22","25/Mar/17 18:13","21/Jul/16 16:25"
PDFBOX-3435,PDFBOX,"Text extraction - words on same line detection failing in 2.x",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 2.0.2, (2)","2.0.3, 3.0.0 PDFBox","Text extraction",None,,"The ability to extract a line of text as it appears in the PDF is no longer working in the 2.x version of pdfbox.
java -jar pdfbox-app-1.8.4.jar ExtractText -console -sort ~/Desktop/text-extraction-issues.pdf
results in:
. . .
Your Code        Our Code                            Description                                              Qty    Price Ex   Total Ex  
11SP             100129630       IRWIN VICE-GRIP 11 C-CLAMP SWIVEL PAD           4         00.00      000.00
IR-0352          100094584       IRWIN 600MM TOOL BAG                            1         00.00       00.00
EM81.9           100088913       EMPIRE TORPEDO LEVEL ALUMINIUM                  1         00.00       00.00
20566-618R       100023443       LENOX RECIPRO BLADE 150X20X0.9MM 18TPI 5P        3          0.00       00.00
. . .
while
java -jar pdfbox-app-2.0.2.jar ExtractText -console -sort ~/Desktop/text-extraction-issues.pdf
results in:
. . .
Your Code        Our Code                            Description                                              Qty    Price Ex   Total Ex  
IRWIN VICE-GRIP 11 C-CLAMP SWIVEL PAD    
11SP             100129630              4         00.00      000.00
IRWIN 600MM TOOL BAG                     
IR-0352          100094584              1         00.00       00.00
EMPIRE TORPEDO LEVEL ALUMINIUM           
EM81.9           100088913              1         00.00       00.00
LENOX RECIPRO BLADE 150X20X0.9MM 18TPI 5P
20566-618R       100023443              3          0.00       00.00
. . .",0,"Tilman Hausherr","Lee van Hooff",0,3,"22/Jul/16 14:17","25/Mar/17 18:13","04/Aug/16 16:36"
PDFBOX-3439,PDFBOX,"DomXmpParser fails to parse date",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",XmpBox,None,,"XMP specifies YYYY-MM-DDThh:mmTZD as valid date format, but the parser fails to parse 2011-11-20T10:09Z with the following exception:
org.apache.xmpbox.xml.XmpParsingException: Failed to instanciate property in xap:CreateDate
at org.apache.xmpbox.xml.DomXmpParser.createProperty(DomXmpParser.java:361)
at org.apache.xmpbox.xml.DomXmpParser.parseChildrenAsProperties(DomXmpParser.java:311)
at org.apache.xmpbox.xml.DomXmpParser.parseDescriptionRoot(DomXmpParser.java:240)
at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:204)
at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:111)
at pmedit.TestDcDates.testDateFormat(TestDcDates.java:110)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.IllegalArgumentException: Failed to instanciate property
at org.apache.xmpbox.type.TypeMapping.instanciateSimpleProperty(TypeMapping.java:204)
at org.apache.xmpbox.xml.DomXmpParser.manageSimpleType(DomXmpParser.java:424)
at org.apache.xmpbox.xml.DomXmpParser.createProperty(DomXmpParser.java:348)
... 34 more
Caused by: java.lang.reflect.InvocationTargetException
at sun.reflect.GeneratedConstructorAccessor5.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.apache.xmpbox.type.TypeMapping.instanciateSimpleProperty(TypeMapping.java:184)
... 36 more
Caused by: java.lang.IllegalArgumentException: 2011-11-20T10:09
at com.sun.org.apache.xerces.internal.jaxp.datatype.XMLGregorianCalendarImpl$Parser.read(XMLGregorianCalendarImpl.java:2837)
at com.sun.org.apache.xerces.internal.jaxp.datatype.XMLGregorianCalendarImpl$Parser.skip(XMLGregorianCalendarImpl.java:2843)
at com.sun.org.apache.xerces.internal.jaxp.datatype.XMLGregorianCalendarImpl$Parser.parse(XMLGregorianCalendarImpl.java:2766)
at com.sun.org.apache.xerces.internal.jaxp.datatype.XMLGregorianCalendarImpl.<init>(XMLGregorianCalendarImpl.java:435)
at com.sun.org.apache.xerces.internal.jaxp.datatype.DatatypeFactoryImpl.newXMLGregorianCalendar(DatatypeFactoryImpl.java:536)
at javax.xml.bind.DatatypeConverterImpl._parseDateTime(DatatypeConverterImpl.java:422)
at javax.xml.bind.DatatypeConverterImpl.parseDateTime(DatatypeConverterImpl.java:417)
at javax.xml.bind.DatatypeConverter.parseDateTime(DatatypeConverter.java:327)
at org.apache.xmpbox.DateConverter.fromISO8601(DateConverter.java:369)
at org.apache.xmpbox.DateConverter.toCalendar(DateConverter.java:101)
at org.apache.xmpbox.type.DateType.isGoodType(DateType.java:98)
at org.apache.xmpbox.type.DateType.setValue(DateType.java:118)
at org.apache.xmpbox.type.AbstractSimpleProperty.<init>(AbstractSimpleProperty.java:59)
at org.apache.xmpbox.type.DateType.<init>(DateType.java:57)
... 40 more",0,"Tilman Hausherr","Svetlozar Argirov",0,3,"27/Jul/16 14:10","25/Mar/17 18:13","27/Jul/16 20:43"
PDFBOX-3441,PDFBOX,"NumberFormatException when loading large PDF file",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox","Parsing, PDModel",None,"windows 10","If you trying to load very large PDF file (over 2GB), you get java.io.IOException: java.lang.NumberFormatException: For input string: "2313730984".
It fails in COSParser.java in parseXrefTable(long startByteOffset). On the line 2006, if Integer.parseInt(splitString[1]) reads number which is bigger than maximum int.
//////
java.io.IOException: java.lang.NumberFormatException: For input string: "2313730984"
at org.apache.pdfbox.pdfparser.COSParser.parseXrefTable(COSParser.java:2012)
at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:223)
at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:192)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:249)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:840)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:765)
at Test.main(Test.java:17)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)
Caused by: java.lang.NumberFormatException: For input string: "2313730984"
at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
at java.lang.Integer.parseInt(Integer.java:583)
at java.lang.Integer.parseInt(Integer.java:615)
at org.apache.pdfbox.pdfparser.COSParser.parseXrefTable(COSParser.java:2005)
... 11 more",0,"Tilman Hausherr","Pavel Fol",0,5,"28/Jul/16 10:11","25/Mar/17 18:12","29/Jul/16 15:59"
PDFBOX-3442,PDFBOX,"OOM for single page pdf file",Improvement,CLOSED,Minor,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",PDModel,None,,"On TIKA-2045, a user posted a single page document that leads to OOM with -Xmx1g. I confirmed this with PDFBox's ExtractText.
Might be a memory leak with the fonts? See this for some diagnostics I did.",0,"Tilman Hausherr","Tim Allison",0,4,"29/Jul/16 17:40","25/Mar/17 18:12","06/Aug/16 13:12"
PDFBOX-3446,PDFBOX,"Infinite loop while parsing",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.2, (2)","1.8.13, 2.0.3, 3.0.0 PDFBox",Parsing,None,,"Attached file is corrupt, but should fail gracefully. Instead it goes into a loop:
Aug 01, 2016 9:35:14 PM org.apache.pdfbox.pdfparser.COSParser parseXrefTable
WARNUNG: invalid xref line: 0000497701 00000 ¶ñw%?CÞ?ò.þ=^VP?»?y2+?6Aºo;-Ó?^?úrhf-d?lÍ£YYD
Aug 01, 2016 9:35:14 PM org.apache.pdfbox.pdfparser.COSParser parseXref
WARNUNG: Expected trailer object at position 507957, keep trying
Aug 01, 2016 9:35:14 PM org.apache.pdfbox.pdfparser.COSParser parseXrefTable
WARNUNG: invalid xref line: 0000497701 00000 ¶ñw%?CÞ?ò.þ=^VP?»?y2+?6Aºo;-Ó?^?úrhf-d?lÍ£YYD
Aug 01, 2016 9:35:14 PM org.apache.pdfbox.pdfparser.COSParser parseXref
WARNUNG: Expected trailer object at position 507957, keep trying
Aug 01, 2016 9:35:14 PM org.apache.pdfbox.pdfparser.COSParser parseXrefTable
WARNUNG: invalid xref line: 0000497701 00000 ¶ñw%?CÞ?ò.þ=^VP?»?y2+?6Aºo;-Ó?^?úrhf-d?lÍ£YYD
Aug 01, 2016 9:35:14 PM org.apache.pdfbox.pdfparser.COSParser parseXref
WARNUNG: Expected trailer object at position 507957, keep trying
Aug 01, 2016 9:35:14 PM org.apache.pdfbox.pdfparser.COSParser parseXrefTable",0,"Tilman Hausherr","Tilman Hausherr",1,3,"01/Aug/16 19:31","04/Sep/17 15:04","16/Aug/16 16:11"
PDFBOX-3447,PDFBOX,"IllegalArgumentException: Dimensions (width=99999 height=99999) are too large",Bug,CLOSED,Major,Fixed,"2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",None,pattern,,"Caused by: java.lang.IllegalArgumentException: Dimensions (width=99999 height=99999) are too large
    org.apache.pdfbox.rendering.TilingPaint.getImage(TilingPaint.java:138)
    org.apache.pdfbox.rendering.TilingPaint.<init>(TilingPaint.java:69)
    org.apache.pdfbox.rendering.PageDrawer.getPaint(PageDrawer.java:263)
    org.apache.pdfbox.rendering.PageDrawer.getNonStrokingPaint(PageDrawer.java:599)
    org.apache.pdfbox.rendering.PageDrawer.fillPath(PageDrawer.java:675)
    org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroRule.process(FillNonZeroRule.java:36)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:829)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:485)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:453)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:156)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:196)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:238)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:219)
    java.lang.Thread.run(Thread.java:745)
The problem is large XStep and YStep values in a pattern.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"01/Aug/16 20:48","25/Mar/17 18:12","02/Aug/16 16:38"
PDFBOX-3448,PDFBOX,"NullPointerException at org.apache.pdfbox.pdmodel.common.COSArrayList.convertFloatCOSArrayToList",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.2, (2)","1.8.13, 2.0.3, 3.0.0 PDFBox","PDModel, Text extraction",WK,,"A number of valid PDF documents failing in Apache Tika 1.14-SNAPSHOT (PDF Box 2.0.2) on text extraction with following exception:
org.apache.tika.exception.TikaException: Unexpected RuntimeException from org.apache.tika.parser.pdf.PDFParser@3e14c16d
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:282)
at org.apache.tika.parser.ParserDecorator.parse(ParserDecorator.java:188)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:120)
at com.wolterskluwer.atlas.transformer.processFileResources.DocumentsTextExtractor.extractText(DocumentsTextExtractor.java:44)
at com.wolterskluwer.atlas.transformer.processFileResources.DocumentsTextExtractor.main(DocumentsTextExtractor.java:134)
Caused by: java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.common.COSArrayList.convertFloatCOSArrayToList(COSArrayList.java:297)
at org.apache.pdfbox.pdmodel.font.PDFont.getWidths(PDFont.java:462)
at org.apache.pdfbox.pdmodel.font.PDFont.getWidth(PDFont.java:229)
at org.apache.pdfbox.pdmodel.font.PDFont.getDisplacement(PDFont.java:212)
at org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:695)
at org.apache.pdfbox.contentstream.PDFStreamEngine.showTextString(PDFStreamEngine.java:564)
at org.apache.pdfbox.contentstream.operator.text.ShowText.process(ShowText.java:55)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
at org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:136)
at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)
at org.apache.tika.parser.pdf.PDF2XHTML.processPage(PDF2XHTML.java:144)
at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)
at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:112)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:151)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
... 6 more
Please, find failing documents and log with exceptions StackTrace in attachments.",0,"Tilman Hausherr","Yauheni Salopiy",1,3,"02/Aug/16 08:16","25/Mar/17 18:12","02/Aug/16 16:31"
PDFBOX-3450,PDFBOX,"ArrayIndexOutOfBoundsException at org.apache.fontbox.cmap.CMapParser.increment",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.2, (2)","1.8.13, 2.0.3, 3.0.0 PDFBox","FontBox, PDModel, (1)",WK,,"Apache Tika 1.14-SNAPSHOT (PDF Box 2.0.2) throws following exception on text extraction from valid PDF document:
org.apache.tika.exception.TikaException: Unexpected RuntimeException from org.apache.tika.parser.pdf.PDFParser@349c1daf
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:282)
at org.apache.tika.parser.ParserDecorator.parse(ParserDecorator.java:188)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:120)
at com.wolterskluwer.atlas.transformer.processFileResources.DocumentsTextExtractor.extractText(DocumentsTextExtractor.java:44)
at com.wolterskluwer.atlas.transformer.processFileResources.DocumentsTextExtractor.main(DocumentsTextExtractor.java:134)
Caused by: java.lang.ArrayIndexOutOfBoundsException: -1
at org.apache.fontbox.cmap.CMapParser.increment(CMapParser.java:684)
at org.apache.fontbox.cmap.CMapParser.increment(CMapParser.java:672)
at org.apache.fontbox.cmap.CMapParser.parseBeginbfrange(CMapParser.java:393)
at org.apache.fontbox.cmap.CMapParser.parse(CMapParser.java:136)
at org.apache.pdfbox.pdmodel.font.CMapManager.parseCMap(CMapManager.java:73)
at org.apache.pdfbox.pdmodel.font.PDFont.readCMap(PDFont.java:178)
at org.apache.pdfbox.pdmodel.font.PDFont.<init>(PDFont.java:122)
at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:119)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:123)
at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
at org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:136)
at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)
at org.apache.tika.parser.pdf.PDF2XHTML.processPage(PDF2XHTML.java:144)
at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)
at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:112)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:151)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
... 6 more
Please, find failing document and log with StackTrace in attachments.",0,"Tilman Hausherr","Yauheni Salopiy",1,3,"02/Aug/16 08:51","25/Mar/17 18:12","02/Aug/16 15:44"
PDFBOX-3457,PDFBOX,"Glyphs rendered in wrong width",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.9, 3.0.0 PDFBox",Rendering,None,,"Fonts rendered in wrong size. The cause is related to wrong values in the /WIDTHS table and this code in PageDrawer:
            // stretch non-embedded glyph if it does not match the width contained in the PDF
            if (!font.isEmbedded())
            {
                float fontWidth = font.getWidthFromFont(code);
                if (fontWidth > 0 && // ignore spaces
                        Math.abs(fontWidth - displacement.getX() * 1000) > 0.0001)
                {
                    float pdfWidth = displacement.getX() * 1000;
                    at.scale(pdfWidth / fontWidth, 1);
                }
            }
I suspect that there must be another condition to skip the stretching, but I didn't find out which one.",0,"Tilman Hausherr","Tilman Hausherr",0,4,"09/Aug/16 15:51","24/Mar/18 09:41","04/Mar/18 20:56"
PDFBOX-3458,PDFBOX,"Using RenderingMode with PDPageContentStream",Improvement,CLOSED,Major,Fixed,"2.0.1, 2.0.2, 2.0.3","2.0.3, 3.0.0 PDFBox",PDModel,None,,"When outputting text with a PDPageContentStream I'd like to set the rendering mode (particularly to invisible/RenderingMode.NEITHER). Use of PDPageContentStream.appendRawCommands("3 Tr"), is deprecated in PDFBox version 2.0.2. I suggest to implement something like a setRenderingMode on PDPageContentStream as an enhancement.",0,"Tilman Hausherr","Juergen Uhl",1,3,"10/Aug/16 10:33","25/Mar/17 18:12","10/Aug/16 16:12"
PDFBOX-3459,PDFBOX,"Move Glyph2D functionality into PDFont subclasses",Improvement,RESOLVED,Major,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox","PDModel, Rendering",None,,"The Glyph2D classes perform some extra normalisation and substitution of glyph paths so that they are ready for final rendering. It would be better for this functionality to be part of the various PDFont subclasses so that it's easy to get access to the final glyph bounds. We've had user requests for this.",0,"John Hewson","John Hewson",0,3,"10/Aug/16 16:04","25/Mar/17 18:12","10/Aug/16 18:35"
PDFBOX-3460,PDFBOX,"Warn users not to use legacy code",Improvement,CLOSED,Minor,Fixed,None,"2.0.3, 3.0.0 PDFBox",None,None,,"PDFTextStreamEngine has been the cause of some confusion amongst users on the mailing list. It's legacy code and we should label it more clearly.",0,"John Hewson","John Hewson",0,1,"10/Aug/16 19:58","25/Mar/17 18:13","10/Aug/16 20:07"
PDFBOX-3461,PDFBOX,"Improve handling of line breaking characters when setting AcroForm field values",Improvement,CLOSED,Major,Fixed,"2.0.1, 2.0.2, 2.0.3, (1)","2.0.3, 3.0.0 PDFBox",AcroForm,Appearance,,"When filling AcroForm fields the text supplied to setValue might contain control characters such as \n \r, \t and others which leads to an {{ java.lang.IllegalArgumentException}} for most fonts as there is no glyph to represent these.
We could enhance the processing of the string provided to provide proper replacements similar to how Adobe Acrobat handles that.",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"11/Aug/16 16:09","25/Mar/17 18:12","22/Aug/16 13:53"
PDFBOX-3463,PDFBOX,"XMPSchemaBasic.getLabel() always returns null",Bug,CLOSED,Major,Fixed,1.8.12,1.8.13,JempBox,None,,"It seems that while the Label is being saved correctly with setlabel() it is impossible to read it back.
Looking at the source
    public void setLabel( String label )
    {
        setTextProperty( prefix + ":Label", label );
    }
    
    public String getLabel()
    {
        return getTextProperty( prefix + "p:Label" );
    }
It is quite obvious that the problem is the p in "p:Label" .",0,"Tilman Hausherr","Svetlozar Argirov",0,3,"13/Aug/16 05:47","09/Dec/16 10:56","13/Aug/16 11:02"
PDFBOX-3466,PDFBOX,"Java 9 warnings",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.2, (2)","1.8.13, 2.0.3, 3.0.0 PDFBox",None,jdk9,,"mvn clean install -DskipTests
Java 9 deprecated some methods:
[WARNING] pdf-box-svn/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java:[601,26] Double(java.lang.String) in java.lang.Double has been deprecated
[WARNING] pdf-box-svn/preflight/src/test/java/org/apache/pdfbox/preflight/TestPreflightPath.java:[66,22] Integer(int) in java.lang.Integer has been deprecated
[WARNING] pdf-box-svn/xmpbox/src/test/java/org/apache/xmpbox/parser/DeserializationTest.java:[146,29] Integer(int) in java.lang.Integer has been deprecated
[WARNING] pdf-box-svn/xmpbox/src/test/java/org/apache/xmpbox/parser/DeserializationTest.java:[147,29] Integer(int) in java.lang.Integer has been deprecated
[WARNING] pdf-box-svn/xmpbox/src/test/java/org/apache/xmpbox/parser/DeserializationTest.java:[152,29] Integer(int) in java.lang.Integer has been deprecated
[WARNING] pdf-box-svn/xmpbox/src/test/java/org/apache/xmpbox/parser/DeserializationTest.java:[153,29] Integer(int) in java.lang.Integer has been deprecated",0,"Tilman Hausherr","simon steiner",0,3,"17/Aug/16 11:47","25/Mar/17 18:13","17/Aug/16 17:42"
PDFBOX-3467,PDFBOX,"PDPage.getAnnotations() modifies the PDF",Bug,CLOSED,Major,Fixed,2.0.2,2.0.3,PDModel,None,,"I stumbled across this bug while using PDFDebugger.
PDPage.getAnnotations() writes to the Page's COSDictionary, adding a new Annots entry if it is missing.
This violates one of the rules which we introduced for 2.0, that reading from a PDF file should not result in the file's COS model being modified.",0,"John Hewson","John Hewson",0,2,"17/Aug/16 22:39","17/Sep/16 09:45","18/Aug/16 17:05"
PDFBOX-3468,PDFBOX,"ERROR: dash lengths all zero, ignored",Wish,CLOSED,Trivial,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",Parsing,log-level,,"On Friday our production log system alerted us that we had an error ("dash lengths all zero, ignored"). We investigated and found that the PDF processed gave an error when opening it up in Adobe Reader as well but the page looked fine and was processed fine as well. But still we got this error. For us this is a false positive, even though a line pattern should not be empty the page isn't broken or can't be viewed so why handle it as an error.
My suggestion is to handle the errors in the code below as an information logging or warning.
In our case we got an update 1 hour later with a PDF that didn't have the empty line dash pattern.
SetLineDashPattern.java
        for (COSBase base : dashArray)
        {
            if (base instanceof COSNumber)
            {
                COSNumber num = (COSNumber) base;
                if (num.floatValue() != 0)
                {
                    allZero = false;
                    break;
                }
            }
            else
            {
                LOG.error("dash array has non number element " + base + ", ignored");
                dashArray = new COSArray();
                break;
            }
        }
        if (dashArray.size() > 0 && allZero)
        {
            LOG.error("dash lengths all zero, ignored");
            dashArray = new COSArray();
        }",0,"Tilman Hausherr","Daniel Persson",0,3,"22/Aug/16 06:25","25/Mar/17 18:12","22/Aug/16 15:32"
PDFBOX-3470,PDFBOX,"Set border and background color in AcroForm field appearance",Bug,CLOSED,Major,Fixed,"2.0.1, 2.0.2, 2.0.3","2.0.3, 3.0.0 PDFBox",AcroForm,None,,"Follow-up on PDFBOX-2918 - set border and background color so that the CreateSimpleForm.java example can be improved with this code, which I've had for some time and forgot to commit:
        // set green border and yellow background
        // if you prefer defaults, just delete this code block
        PDAppearanceCharacteristicsDictionary fieldAppearance
                = new PDAppearanceCharacteristicsDictionary(new COSDictionary());
        fieldAppearance.setBorderColour(new PDColor(new float[]{0,1,0}, PDDeviceRGB.INSTANCE));
        fieldAppearance.setBackground(new PDColor(new float[]{1,1,0}, PDDeviceRGB.INSTANCE));
        widget.setAppearanceCharacteristics(fieldAppearance);
without needing to call acroForm.setNeedAppearances(true);. While looking at it, I also found a bug in the current code, the border color is set with the non stroking color.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"22/Aug/16 15:16","25/Mar/17 18:13","22/Aug/16 15:20"
PDFBOX-3471,PDFBOX,"XMP parsing fails if XMP contain comments",Bug,CLOSED,Major,Fixed,2.0.2,"2.0.3, 3.0.0 PDFBox",XmpBox,None,,"DomXmpParser parser fails with such correct XMP:
<?xpacket begin="" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.1.0-jc003">
    <!-- PDF/A standarto versija (1 ar 2) ir suderinamumo lygmuo (A, B ar U) -->
    <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        <rdf:Description rdf:about = ""
                         xmlns:pdfaid = "http://www.aiim.org/pdfa/ns/id/">
            <pdfaid:part>1</pdfaid:part>
            <pdfaid:conformance>B</pdfaid:conformance>
        </rdf:Description>
    </rdf:RDF>
</x:xmpmeta>
<?xpacket end="w"?>
DomXmpParser finds comment node and fails:
org.apache.xmpbox.xml.XmpParsingException: More than one element found in x:xmpmeta
 at org.apache.xmpbox.xml.DomXmpParser.findDescriptionsParent(DomXmpParser.java:750)
 at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:183)
 at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:111)
...",0,"Maruan Sahyoun",Petras,0,4,"23/Aug/16 08:42","25/Mar/17 18:12","25/Aug/16 05:19"
PDFBOX-3472,PDFBOX,"NPE when PDF/A identification metadata does not contain ID",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.2, (2)","1.8.13, 2.0.3, 3.0.0 PDFBox",Preflight,None,,"If malformed PDF/A identification metadata without <pdfaid:part> element is present, Preflight PDFAIdentificationValidation throws NPE:
java.lang.NullPointerException
 at org.apache.pdfbox.preflight.metadata.PDFAIdentificationValidation.validatePDFAIdentifer(PDFAIdentificationValidation.java:85)
...
PDFAIdentificationValidation.checkPartNumber() method should register an error instead.",0,"Tilman Hausherr",Petras,0,3,"23/Aug/16 12:52","25/Mar/17 18:12","23/Aug/16 18:04"
PDFBOX-3473,PDFBOX,"IllegalArgumentException: resourceDictionary is null in PDFMerger (2)",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",Utilities,None,,"As reported in PDFBOX-2546 by Miklos Krivan
Caused by: java.lang.IllegalArgumentException: resourceDictionary is null
at org.apache.pdfbox.pdmodel.PDResources.<init>(PDResources.java:70)
at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:559)
at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:261)
The cause is an empty PDPage, i.e. without resources.
(Required; inheritable) A dictionary containing any resources required by the page (see 7.8.3, "Resource Dictionaries"). If the page requires no resources, the value of this entry shall be an empty dictionary. Omitting the entry entirely indicates that the resources shall be inherited from an ancestor node in the page tree.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"24/Aug/16 16:41","25/Mar/17 18:12","24/Aug/16 18:47"
PDFBOX-3475,PDFBOX,"IllegalArgumentException: 2058 > -49861164 in PDType1Font.java",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",FontBox,None,,"java.lang.IllegalArgumentException: 2058 > -49861164
    java.util.Arrays.copyOfRange(Unknown Source)
    org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:223)
    org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)
This is because the /Fontfile /Length2 values are bogus. A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange(), a huge value eats up memory because of padding. So I'm doing a repair for the /Length2 as well.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"26/Aug/16 17:15","25/Mar/17 18:13","26/Aug/16 17:33"
PDFBOX-3476,PDFBOX,"Updated to BouncyCastle 1.55",Improvement,RESOLVED,Minor,Fixed,2.0.2,"3.0.0 PDFBox",Crypto,None,,"You may want to consider updating to BC 1.55 - https://www.bouncycastle.org/releasenotes.html",0,"Tilman Hausherr","Philip Helger",0,3,"29/Aug/16 06:04","25/Mar/17 18:12","30/Aug/16 17:14"
PDFBOX-3477,PDFBOX,"CA and ca values should be clipped",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.1, (2)","1.8.13, 2.0.3, 3.0.0 PDFBox",Rendering,None,,"The attached file has yellow highlights that appear purple, because of incorrect CA and ca values of 2. The change I did in rev 1609908 was "too careful".",0,"Tilman Hausherr","Tilman Hausherr",0,2,"31/Aug/16 18:25","25/Mar/17 18:12","31/Aug/16 18:46"
PDFBOX-3479,PDFBOX,"NPE in AppearanceGeneratorHelper.setAppearanceValue() if no rectangle in widget",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",AcroForm,None,,"As reported in the linked stackoveflow question, can be reproduced with the CreateSimpleForm example by removing the widget.setRectangle(rect);.
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.setAppearanceValue(AppearanceGeneratorHelper.java:137)
at org.apache.pdfbox.pdmodel.interactive.form.PDTextField.constructAppearances(PDTextField.java:263)
at org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField.applyChange(PDTerminalField.java:225)
at org.apache.pdfbox.pdmodel.interactive.form.PDTextField.setValue(PDTextField.java:218)
I'll throw an IOException.",0,"Maruan Sahyoun","Tilman Hausherr",0,3,"01/Sep/16 17:37","25/Mar/17 18:13","09/Sep/16 10:36"
PDFBOX-3481,PDFBOX,"Localization in XRef generation results in unusable PDFs",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.2, (2)","1.8.13, 2.0.3, 3.0.0 PDFBox",Writing,"easyfix locale newbi",,"PDFBox appears to be using a localized number formatter when encoding the XRef table. Depending on locale settings, this can result in unicode characters being used, which prevents PDFBox from loading the PDF.
The following code demonstrates this:
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Locale;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.common.PDRectangle;

class Example {

  public static void main(String [] args) throws Exception {
    File tempFile = File.createTempFile("example", ".pdf");
    Locale arabicLocale = new Locale.Builder().setLanguageTag("ar-EG-u-nu-arab").build();
    Locale.setDefault(arabicLocale);

    try (FileOutputStream out = new FileOutputStream(tempFile)) {
      PDDocument doc = new PDDocument();
      doc.addPage(new PDPage(PDRectangle.LETTER));

      doc.save(out);
      doc.close();
    }

    try (FileInputStream in = new FileInputStream(tempFile)) {
      PDDocument doc = PDDocument.load(in);
      // This will throw.
      doc.getPage(0);
    }
  }
}",0,"Tilman Hausherr","Edward Kupershlak",0,4,"05/Sep/16 02:38","22/Feb/19 15:59","05/Sep/16 16:20"
PDFBOX-3484,PDFBOX,"Implement some caching of PDImageXObject",Improvement,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",Rendering,None,,"Markus Barbey mentioned on the mailing list that PageDrawer.drawImage(PDImage) has a new instance every time, because the caching in PDResources is disabled, so the caching of the BufferedImage is useless.
It is indeed disabled, see near the bottom of PDFBOX-2370.
I'll enable it for cases where PDImageXObject does not need anything from the resources. An image could be in several pages with the same colorspace name, but that name could be something different in different pages. (very unlikeky, but possible!)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Sep/16 17:08","25/Mar/17 18:13","09/Sep/16 15:32"
PDFBOX-3485,PDFBOX,"NullPointerException in PageDrawer.drawAnnotationLinkBorder() due to /Rect array containing indirect objects",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",Rendering,None,,"Caused by: java.lang.NullPointerException: null
    org.apache.pdfbox.rendering.PageDrawer.drawAnnotationLinkBorder(PageDrawer.java:1168)
    org.apache.pdfbox.rendering.PageDrawer.showAnnotation(PageDrawer.java:1079)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:201)
The cause is that the rectangle values are references.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Sep/16 15:39","25/Mar/17 18:12","09/Sep/16 15:44"
PDFBOX-3486,PDFBOX,"IllegalArgumentException for images without dimensions",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",Rendering,None,,"Caused by: java.lang.IllegalArgumentException: Width (-1) and height (-1) must be > 0
    org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage(SampledImageReader.java:154)
    org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage(PDImageXObject.java:341)
    org.apache.pdfbox.rendering.PageDrawer.drawImage(PageDrawer.java:808)
I'll throw a checked exception instead.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Sep/16 15:47","25/Mar/17 18:12","09/Sep/16 15:54"
PDFBOX-3487,PDFBOX,"ClassCastException in COSWriter.write() when saving PDF",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.2, (2)","1.8.13, 2.0.3, 3.0.0 PDFBox",Writing,None,,"Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSInteger cannot be cast to org.apache.pdfbox.cos.COSArray
 at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1349)
 at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1287)
 at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1160)
 at pdfboxpageimageextraction.LoadSave.main(LoadSave.java:22)
The cause is a bad /ID, that isn't an array.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Sep/16 16:00","25/Mar/17 18:12","09/Sep/16 16:08"
PDFBOX-3488,PDFBOX,"NullPointerException in PDTrueTypeFont.java if glyf table is missing",Bug,CLOSED,Major,Fixed,2.0.2,2.0.3,"FontBox, Rendering",None,,"Caused by: java.lang.NullPointerException: null
    org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getPath(PDTrueTypeFont.java:444)
    org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getNormalizedPath(PDTrueTypeFont.java:502)
    org.apache.pdfbox.rendering.GlyphCache.getPathForCharacterCode(GlyphCache.java:71)
    org.apache.pdfbox.rendering.PageDrawer.showFontGlyph(PageDrawer.java:350)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showGlyph(PDFStreamEngine.java:756)
    org.apache.pdfbox.debugger.pagepane.DebugPageDrawer.showGlyph(DebugPageDrawer.java:59)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:713)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showTextString(PDFStreamEngine.java:572)
    org.apache.pdfbox.contentstream.operator.text.ShowText.process(ShowText.java:55)
The cause is the change in PDFBOX-3395; previously PDFBox would consider the font to be bad and replace it. Now we don't do that because the glyf table is not always needed.
I'm throwing a checked exception for now but a better solution should be found. Adobe Reader displays glyphs.",0,"John Hewson","Tilman Hausherr",0,3,"09/Sep/16 16:38","17/Sep/16 09:45","13/Sep/16 06:32"
PDFBOX-3490,PDFBOX,"NullPointerException in PDType1Font.generateBoundingBox",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.3, 3.0.0 PDFBox",Rendering,None,,"Caused by: java.lang.NullPointerException: null
    org.apache.pdfbox.pdmodel.font.PDType1Font.generateBoundingBox(PDType1Font.java:519)
    org.apache.pdfbox.pdmodel.font.PDType1Font.getBoundingBox(PDType1Font.java:509)
    org.apache.pdfbox.text.LegacyPDFStreamEngine.showGlyph(LegacyPDFStreamEngine.java:162)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:715)
The cause is an empty font descriptor and a missing check for null. I'll add the check at other places too.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/Sep/16 12:02","25/Mar/17 18:13","10/Sep/16 12:06"
PDFBOX-3491,PDFBOX,"NumberFormatException in CFFParser.readRealNumber",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.2, (2)","1.8.13, 2.0.3, 3.0.0 PDFBox",FontBox,None,,"Caused by: java.lang.NumberFormatException: empty String
    sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1020)
    java.lang.Double.valueOf(Double.java:504)
    org.apache.fontbox.cff.CFFParser.readRealNumber(CFFParser.java:390)
    org.apache.fontbox.cff.CFFParser.readEntry(CFFParser.java:270)
    org.apache.fontbox.cff.CFFParser.readDictData(CFFParser.java:236)
    org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:397)
    org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:141)
    org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:68)
    org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:102)
    org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:60)
I've tried several things, and returning 0 resulted in the same rendering as Adobe Reader.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/Sep/16 12:57","25/Mar/17 18:13","10/Sep/16 13:00"
PDFBOX-3493,PDFBOX,"AcroFormValidationProcess.validateField fails to check multiple widgets",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.2, (2)","2.0.3, 3.0.0 PDFBox",Preflight,None,,"I'll do the FIXME mentioned in the code.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"11/Sep/16 10:59","25/Mar/17 18:13","11/Sep/16 11:03"
PDFBOX-3498,PDFBOX,"Unexpected spaces in text extraction",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.3","2.0.4, 3.0.0 PDFBox","Text extraction",None,,"In the tests by Tim Allison regressions were found with files from Delaware courts, see reduced file attached.
The extracted text with 2.0.2 and 2.0.3 is
IN THE  COUR T OF  CHAN CER Y O F TH E STA TE OF  D ELA WARE
in 2.0.1 and 1.8 it was
IN THE COURT OF CHANCERY OF THE STATE OF DELAWARE
The cause is the /W ranges table:
/W [1 1 0 2 3 250 4 10 0 11
12 333 13 14 0 15 15 250 16 16
333 17 17 250 18 18 277 19 19 0
20 23 500 24 35 0 36 36 722 37
37 666 38 39 722 40 40 666 41 41
610 42 43 777 44 44 389 45 45 0
46 46 777 47 47 666 48 48 943 49
49 722 50 50 777 51 51 610 52 52
0 53 53 722 54 54 556 55 55 666
56 57 722 59 59 0 60 60 722 61
67 0 68 68 500 69 69 556 70 70
443 71 71 556 72 72 443 73 73 333
74 74 500 75 75 556 76 76 277 77
77 0 78 78 556 79 79 277 80 80
833 81 81 556 82 82 500 83 84 556
85 85 443 86 86 389 87 87 333 88
88 556 89 89 0 90 90 722 91 92
500 93 178 0 179 180 500 181 181 0
182 182 333 183 751 0 752 752 198 753
794 0 795 795 612 796 1126 0 1127 1127
125 1129 1129 2000 1130 65534 0]
For text extraction, the width of a space is caculated by taking an average of all widths. However these files have a lot (over 60000) of widths that are 0. So I'll just ignore widths <= 0, as it is already done in PDFont.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"15/Sep/16 16:06","25/Mar/17 18:13","15/Sep/16 16:26"
PDFBOX-3500,PDFBOX,"Error expected floating point number actual='0.-262'",Bug,CLOSED,Major,Fixed,"1.8.12, 1.8.13, 2.0.3, (1)","1.8.13, 2.0.4, 3.0.0 PDFBox",Parsing,None,,"As reported by Simon Gaeremynck in the user mailing list with attached file.
[3] Stack trace:
[error] at org.apache.pdfbox.cos.COSFloat.<init>(COSFloat.java:81)
[error] at org.apache.pdfbox.cos.COSNumber.get(COSNumber.java:115)
[error] at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:939)
His proposed change in COSFloat
-            if (aFloat.matches("^0\\.0+\\-\\d+"))
+            if (aFloat.matches("^0\\.0*\\-\\d+"))
I'll commit it after running regression tests.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"15/Sep/16 19:56","12/Jan/18 18:05","16/Sep/16 16:09"
PDFBOX-3502,PDFBOX,"add character spacing to content stream",Improvement,CLOSED,Major,Fixed,"2.0.2, 2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",Writing,None,,"As requested on the user mailing list. I'll add word spacing as well.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Sep/16 13:53","09/Aug/18 17:10","17/Sep/16 13:56"
PDFBOX-3504,PDFBOX,"Special characters issue",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",FontBox,None,,"special characters are not supporting in my program
eg: "α"(alpha)
My sample code:
package com.test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

public class SimpleTest {

 public static void main(String[] args) throws Exception {
  SimpleTest s = new SimpleTest();
  s.pdfGeneration();
 }

 public void pdfGeneration() throws IOException {
  String outputFileName = "Simple123.pdf";

  // Create a document and add a page to it
  PDDocument document = new PDDocument();
  PDPage page1 = new PDPage(PDRectangle.A4);
  // PDRectangle.LETTER and others are also possible
  PDRectangle rect = page1.getMediaBox();
  // rect can be used to get the page width and height
  document.addPage(page1);

  // Create a new font object selecting one of the PDF base fonts
  PDFont fontPlain = PDType1Font.HELVETICA;
  PDFont fontBold = PDType1Font.HELVETICA_BOLD;
  PDFont fontItalic = PDType1Font.HELVETICA_OBLIQUE;
  PDFont fontMono = PDType1Font.COURIER;

  // Start a new content stream which will "hold" the to be created
  // content
  PDPageContentStream cos = new PDPageContentStream(document, page1);

  int line = 0;

  List<String> sampleData = new ArrayList<String>();
  sampleData.add("ss1 s");
  sampleData.add("dd α");
  // String tt ="sss";
  for (String tt : sampleData) {
   ++line;
   drawText(cos, fontPlain,  tt, rect, line);

  }
  cos.close();

  document.save(outputFileName);
  document.close();
 }

 public void drawText(PDPageContentStream cos, PDFont fontPlain,String text,
   PDRectangle rect, int line) throws IOException {

  try {

   cos.beginText();
   cos.setFont(fontPlain, 12);
   cos.newLineAtOffset(100, rect.getHeight() - 50 * (line));
   cos.showText(text);
   cos.endText();
  } catch (Exception e) {
   e.printStackTrace();
  // cos.endText();
  } 
 }
}
Exception:
java.lang.IllegalArgumentException: U+03B1 ('alpha') is not available in this font's encoding: WinAnsiEncoding
 at org.apache.pdfbox.pdmodel.font.PDType1Font.encode(PDType1Font.java:345)
 at org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:286)
 at org.apache.pdfbox.pdmodel.PDPageContentStream.showText(PDPageContentStream.java:411)
 at com.test.SimpleTest.drawText(SimpleTest.java:67)
 at com.test.SimpleTest.pdfGeneration(SimpleTest.java:50)
 at com.test.SimpleTest.main(SimpleTest.java:18)
And also please let me know whether pdf box will supports for localization or not?",0,"Tilman Hausherr","KUMARA SWAMY PALLUKURI",0,3,"19/Sep/16 17:36","25/Mar/17 18:12","27/Sep/16 16:10"
PDFBOX-3505,PDFBOX,"Bad display of NO-BREAK SPACE U+00A0 (160) character",Bug,CLOSED,Major,Duplicate,"2.0.3, 2.0.4",None,Rendering,None,,"NO-BREAK SPACE U+00A0 (160) character is displayed as empty frame with thin border.",0,"Andreas Lehmkühler","Petr Michálek",0,3,"20/Sep/16 17:51","24/Sep/16 16:32","24/Sep/16 16:32"
PDFBOX-3506,PDFBOX,"Not able to read the custom metadata in trailer section",Bug,CLOSED,Major,Fixed,"2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",Parsing,None,"windows 7","When using below code does not able to retrieve custom metadata stored in trailer section of pdf
PDDocumentInformation documentInformation = document.getDocumentInformation();
Set<String> customMetadataKeys = documentInformation.getMetadataKeys();
Pdfbox 1.8.12 does not have this issues",0,"Tilman Hausherr","Kent Lee",0,5,"21/Sep/16 04:35","25/Mar/17 18:12","17/Nov/16 18:00"
PDFBOX-3507,PDFBOX,"Modern OS X doesn't show JMenuBar in PDFDebugger app",Bug,CLOSED,Minor,Fixed,"3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",Utilities,None,"mac os x, java","OS X apparently doesn't support `System.setProperty("apple.laf.useScreenMenuBar", "true");` these days, so that line should be removed from the main method on PDFDebugger. The debugger app is a lot more useful with the menu than without. Forcing it to a single value in main disallows overriding it via `-Dapple.laf.useScreenMenuBar=false`, which means the menubar is invisible and unrecoverable in Mac OS X.
I built from source at HEAD on trunk, and run with the following command:
java -jar ./app/target/pdfbox-app-2.1.0-SNAPSHOT.jar PDFDebugger my-doc.pdf
After removing the aforementioned line and rebuilding, I have access to the menubar (which is handy!).",0,"John Hewson","Chris Brown",0,3,"21/Sep/16 21:14","25/Mar/17 18:13","23/Sep/16 22:11"
PDFBOX-3509,PDFBOX,"DrawPrintTextLocations example fails with cropBox and rotated pages",Bug,CLOSED,Major,Fixed,"2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",Utilities,None,,"I noticed that the red rectangles are wrong for rotated pages, and the cyan rectangles wrong for pages with a cropBox.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"22/Sep/16 19:15","25/Mar/17 18:12","22/Sep/16 19:37"
PDFBOX-3510,PDFBOX,""java.io.IOException: Stream closed" while parsing a page without contents",Bug,CLOSED,Minor,Fixed,"2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",PDModel,newbie,,"I get the following exception while parsing page number 4 from http://openil.sourceforge.net/docs/DevIL%20Manual.pdf
with PDFStreamParser.parse(). The dictionary for page 4 doesn't contain a "/Contents" entry.
java.io.IOException: Stream closed
Stream closed
java.io.IOException: Stream closed
at java.io.PushbackInputStream.ensureOpen(Unknown Source)
at java.io.PushbackInputStream.read(Unknown Source)
at org.apache.pdfbox.pdfparser.InputStreamSource.read(InputStreamSource.java:46)
at org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1275)
at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:142)
at org.apache.pdfbox.pdfparser.PDFStreamParser.parse(PDFStreamParser.java:115)",0,"Tilman Hausherr","Esteban Nicolas Ruiz",0,3,"22/Sep/16 20:07","25/Mar/17 18:12","23/Sep/16 19:37"
PDFBOX-3511,PDFBOX,"NullPointerException - missing glyph description",Bug,CLOSED,Minor,Fixed,"2.0.0, 2.0.1, 2.0.2, 2.0.3","2.0.4, 3.0.0 PDFBox",FontBox,None,,"Hi Team.
We process many PDF documents every day and today we ran into a file that we couldn't create an image to. For some reason it has glyphs that didn't have any glyph description.
In GlyfCompositeDescript there is atleast two functions (Line 258, 271) that fetch an GlyphDescription from a map like this:
GlyphDescription gd = descriptions.get(c.getGlyphIndex());
Then the functions use the description without a null check which results in an NullPointer exception.
Exception in thread "main" java.lang.NullPointerException
        at org.apache.fontbox.ttf.GlyfCompositeDescript.getCompositeCompEndPt(GlyfCompositeDescript.java:272)
        at org.apache.fontbox.ttf.GlyfCompositeDescript.getEndPtOfContours(GlyfCompositeDescript.java:126)
        at org.apache.fontbox.ttf.GlyphRenderer.describe(GlyphRenderer.java:72)
        at org.apache.fontbox.ttf.GlyphRenderer.getPath(GlyphRenderer.java:56)
        at org.apache.fontbox.ttf.GlyphData.getPath(GlyphData.java:116)
        at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.getPath(PDCIDFontType2.java:446)
        at org.apache.pdfbox.pdmodel.font.PDType0Font.getPath(PDType0Font.java:506)
        at org.apache.pdfbox.rendering.TTFGlyph2D.getPathForGID(TTFGlyph2D.java:137)
        at org.apache.pdfbox.rendering.TTFGlyph2D.getPathForCharacterCode(TTFGlyph2D.java:93)
        at org.apache.pdfbox.rendering.PageDrawer.drawGlyph2D(PageDrawer.java:353)
        at org.apache.pdfbox.rendering.PageDrawer.showFontGlyph(PageDrawer.java:334)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.showGlyph(PDFStreamEngine.java:744)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:701)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.showTextString(PDFStreamEngine.java:564)
        at org.apache.pdfbox.contentstream.operator.text.ShowText.process(ShowText.java:55)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
        at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:189)
        at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
        at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:94)
        at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:236)
        at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:94)
So far we have only seen one file with this issue in our processing. I've tried to run the PDFToImage with all versions of PDFBox 2 and they fail.
PDFBox 1.8.12 gives some error output but generates an working image.
Sep 23, 2016 7:36:53 AM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFO: unsupported/disabled operation: BDC
Sep 23, 2016 7:36:53 AM org.apache.pdfbox.util.PDFStreamEngine processOperator
INFO: unsupported/disabled operation: EMC
Sep 23, 2016 7:36:55 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
WARNING: Changing font on <•> from <null> to the default font
Sep 23, 2016 7:36:55 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
WARNING: Changing font on <•> from <null> to the default font
Sep 23, 2016 7:36:55 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
WARNING: Changing font on <•> from <null> to the default font
Sep 23, 2016 7:36:55 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
WARNING: Changing font on <•> from <null> to the default font
Sep 23, 2016 7:36:55 AM org.apache.pdfbox.pdmodel.font.PDSimpleFont drawString
WARNING: Changing font on <•> from <null> to the default font
Sep 23, 2016 7:36:55 AM org.apache.pdfbox.util.PDFImageWriter writeImage
INFO: Writing: [Removed Identifer]_01_07_201609231.jpg
At the time of writing the bug report the file is to fresh to disclose. Might be able to add it in a week or so depending on the customer, and if it's required for the resolution of this issue.
Thanks for your time.",0,"Tilman Hausherr","Daniel Persson",0,3,"23/Sep/16 05:56","25/Mar/17 18:12","28/Nov/16 19:35"
PDFBOX-3514,PDFBOX,"Stackoverflow exception",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Parsing,None,,"pdf from PDFBOX-1365
PDDocument x = PDDocument.load(new File("out_PDFA.pdf"));
x.getPage(0).getCOSObject().toString();
x.close();",0,"Tilman Hausherr","simon steiner",0,3,"27/Sep/16 15:48","23/Oct/18 16:55","10/Oct/16 17:56"
PDFBOX-3515,PDFBOX,"Problems with CourierStd font",Bug,CLOSED,Major,Fixed,"2.0.3, 2.0.4, 3.0.0 PDFBox","2.0.7, 3.0.0 PDFBox",FontBox,None,windows,"Pdf file using CourierStd font doesn't display properly with PDF Debugger (CourierStd font not installed, using substitute font). File is properly displayed in Adobe Reader.
PDF Debugger output:
ADVERTENCIA: Using fallback LiberationSans for CID-keyed font CourierStd
sep 27, 2016 4:42:00 PM org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode
ADVERTENCIA: No Unicode mapping for CID+36 (36) in font CourierStd
sep 27, 2016 4:42:00 PM org.apache.pdfbox.rendering.CIDType0Glyph2D getPathForCharacterCode
ADVERTENCIA: No glyph for 36 (CID 0024) in font CourierStd
If I install CourierStd otf font from http://freeopentypefonts.com/fonts-beginning-with-c/courierstd-open-type-font-download-open-type-font then I get the following exception:
java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.ClassCastException: org.apache.fontbox.cff.CFFType1Font cannot be cast to org.apache.fontbox.cff.CFFCIDFont
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.done(PagePane.java:258)
    sun.swing.AccumulativeRunnable.run(Unknown Source)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
Caused by: java.util.concurrent.ExecutionException: java.lang.ClassCastException: org.apache.fontbox.cff.CFFType1Font cannot be cast to org.apache.fontbox.cff.CFFCIDFont
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.done(PagePane.java:247)
    sun.swing.AccumulativeRunnable.run(Unknown Source)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
Caused by: java.lang.ClassCastException: org.apache.fontbox.cff.CFFType1Font cannot be cast to org.apache.fontbox.cff.CFFCIDFont
    org.apache.pdfbox.pdmodel.font.PDCIDFontType0.<init>(PDCIDFontType0.java:134)
    org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont(PDFontFactory.java:121)
    org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:128)
    org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
    org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
Maybe similar to: https://issues.apache.org/jira/browse/PDFBOX-3344",0,"Tilman Hausherr","Esteban Nicolas Ruiz",0,4,"27/Sep/16 19:43","21/Jul/17 04:40","17/Jun/17 10:23"
PDFBOX-3517,PDFBOX,"[Patch] CCITTFactory.createFromFile methods do not release lock on source file",Bug,CLOSED,Minor,Fixed,"2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",PDModel,None,"windows 8","When using CCITTFactory.createFromFile methods, a RandomAccessFile is created on the source file, but never closed.
On Windows, this locks the file. I haven't had the time yet to test on Linux.
I have prepared a patch in GitHub, will post as soon as it's pushed.",0,"Tilman Hausherr","Thierry Guérin",0,4,"29/Sep/16 14:58","25/Mar/17 18:12","29/Sep/16 19:49"
PDFBOX-3518,PDFBOX,"ClassCastException rendering Type3 font",Bug,CLOSED,Minor,Duplicate,2.0.3,None,Rendering,None,,"Using the PDFBox Debugger to render a page we get this exception:
Caused by: java.lang.ClassCastException: org.apache.pdfbox.cos.COSName cannot be cast to org.apache.pdfbox.cos.COSDictionary
    org.apache.pdfbox.pdmodel.font.PDType3Font.readEncoding(PDType3Font.java:69)
    org.apache.pdfbox.pdmodel.font.PDType3Font.<init>(PDType3Font.java:57)
    org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:79)
    org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
    org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:189)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:236)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:1)
    java.lang.Thread.run(Thread.java:745)
where this is the Type3 font dictionary
/inlineImage5: 21 0 R -> Dictionary of type: /Font
Dictionary of type: /Font
/Name: /inlineImage5
/FirstChar: 97
/Subtype: /Type3
/Type: /Font
/CharProcs: Dictionary
/FontBBox: [0, 0, 1000.0, 947.36842]
/Encoding: /WinAnsiEncoding
/FontMatrix: [0.001, 0, 0, 0.001, 0, 0]
/Resources: 83 0 R -> Dictionary
/LastChar: 97
/Widths: [1000.0]
I assume the issue is the Encoding that is supposed to be a dictionary while in this case is a name but I'm not really an expert in this area. The doc displays fine with every reader I tried (Acrobat, PDFjs, Evince ...)",0,"Andreas Lehmkühler","Andrea Vacondio",0,3,"29/Sep/16 16:59","29/Sep/16 18:09","29/Sep/16 17:08"
PDFBOX-3519,PDFBOX,"COSName is not ascii",Bug,CLOSED,Minor,Fixed,2.0.3,"2.0.6, 3.0.0 PDFBox",Parsing,None,,"Trunk seems ok
PDF is from PDFBOX-783
public static void main( String[] args ) throws IOException {
    PDDocument doc = PDDocument.load(new File("A02Gj780LZ.pdf"));
    COSDictionary x = doc.getPage(0).getResources().getCOSObject();
        read(x);
    doc.close();
}

private static void read(COSBase b) {
    if (b instanceof COSObject) {
        read(((COSObject) b).getObject());
    } else if (b instanceof COSDictionary) {
        for (COSBase x : ((COSDictionary) b).getValues()) {
            read(x);
        }
    } else if (b instanceof COSName) {
        if(((COSName) b).getName().charAt(0) > 256)
            throw new RuntimeException(((COSName) b).getName());
    }
}",0,"Andreas Lehmkühler","simon steiner",0,4,"30/Sep/16 13:20","15/May/17 20:28","05/May/17 16:07"
PDFBOX-3520,PDFBOX,"Security manager fails",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox","FontBox, PDModel",None,,"Related to PDFBOX-3145
PDF from PDFBOX-5
java -Djava.security.manager -Djava.security.policy=security.policy -jar ~/pdf-box-svn/app/target/pdfbox-app-2.1.0-SNAPSHOT.jar PDFToImage chinese.pdf",0,"Tilman Hausherr","simon steiner",0,3,"03/Oct/16 10:27","25/Mar/17 18:13","09/Oct/16 13:15"
PDFBOX-3521,PDFBOX,"FontProvider not thread safe",Bug,CLOSED,Minor,Fixed,"2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",PDModel,concurrency,,"I understand that PDFBox is not yet thread-safe, however, from reading this comment on a similar ticket, it seems like the fonts should be thread safe and is something that we want to fix. However, I am experiencing an intermittent NullPointerException when running multi-threaded unit tests that attempt to read several PDFs at once (see details here.
Inside FontMapperImpl.java the getProvider and setProvider methods are synchronised:
    public synchronized void setProvider(FontProvider fontProvider)
    {
        this.fontProvider = fontProvider;
        fontInfoByName = createFontInfoByName(fontProvider.getFontInfo());
    }

    /**
     * Returns the font service provider. Defaults to using FileSystemFontProvider.
     */
    public synchronized FontProvider getProvider()
    {
        if (fontProvider == null)
        {
            setProvider(DefaultFontProvider.INSTANCE);
        }
        return fontProvider;
    }
However, the calling code from the findFont() method is not synchronised:
        // make sure the font provider is initialized
        if (fontProvider == null)
        {
            getProvider();
        }

        // first try to match the PostScript name
        FontInfo info = getFont(format, postScriptName);
        if (info != null)
        {
            return info.getFont();
        }
As a result, if multiple threads attempt to access this at once, thread A may be in the setProvider method and have set fontProvider, but still processing the creation of fontInfoByName - so thread B could attempt to access before initialised.",0,"Tilman Hausherr","rob hinds",0,3,"03/Oct/16 13:33","25/Mar/17 18:13","08/Oct/16 18:51"
PDFBOX-3524,PDFBOX,"signatureField.setValue() not implemented",Sub-task,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Signing,None,,"In the CreateEmptySignatureForm example, adding
signatureField.setValue(new PDSignature());
before saving brings this
Exception in thread "main" java.lang.UnsupportedOperationException: not implemented
 at org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField.constructAppearances(PDSignatureField.java:237)
 at org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField.applyChange(PDTerminalField.java:226)
 at org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField.setValue(PDSignatureField.java:121)
 at org.apache.pdfbox.examples.signature.CreateEmptySignatureForm.main(CreateEmptySignatureForm.java:84)
Although there's nothing to construct, visual signing is a different area of PDFBox.
What does work is this:
signatureField.getCOSObject().setItem(COSName.V, new PDSignature());
I wanted to add this line because this would make it possible to sign this specific field with PDFBox, due to the findSignatureField() method in PDDocument, which would allow to pre-fill a PDSignature object.",0,"Maruan Sahyoun","Tilman Hausherr",1,4,"07/Oct/16 15:23","25/Mar/17 18:12","01/Nov/16 10:14"
PDFBOX-3525,PDFBOX,"reference existing signature field when signing",Sub-task,CLOSED,Major,Fixed,"2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",Signing,None,,"Allow PDFBox to sign prepared empty signatures, similar to those created by the CreateEmptySignatureForm.java example.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Oct/16 18:36","25/Mar/17 18:13","19/Oct/16 16:55"
PDFBOX-3526,PDFBOX,"DataFormatException: invalid stored block lengths",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Parsing,None,,"java -jar pdf-box-svn/app/target/pdfbox-app-2.1.0-SNAPSHOT.jar WriteDecodedDoc 601501018.pdf
Exception in thread "main" java.io.IOException: java.util.zip.DataFormatException: invalid stored block lengths
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:82)",0,"Tilman Hausherr","simon steiner",0,3,"10/Oct/16 12:14","25/Mar/17 18:12","13/Oct/16 17:14"
PDFBOX-3527,PDFBOX,"Converted PDF/A Online validator error",Bug,CLOSED,Major,Duplicate,2.0.3,None,Preflight,newbie,java,"Good morning, we have a java application that converts a file in pdf / a. If we test at this link http://www.pdf-tools.com/pdf/validate-pdfa-online.aspx we get the following error:
Validating file "ATTO PUBBLICO_PDFA.CONV.pdf" for conformance level pdfa-1b
dc:title/*[0] :: Missing language qualifier.
The document does not conform to the requested standard.
The document's meta data is either missing or inconsistent or corrupt.
Done.
Can you help me?
Thanks",0,"Andreas Lehmkühler",Francesco,0,2,"11/Oct/16 10:46","12/Oct/16 07:04","11/Oct/16 15:18"
PDFBOX-3528,PDFBOX,"Converted PDF/A Online validator error",Bug,CLOSED,Major,Invalid,None,None,Preflight,None,java,"Good morning, we have a java application that converts a file in pdf / a. If we test at this link http://www.pdf-tools.com/pdf/validate-pdfa-online.aspx we get the following error:
Validating file "ATTO PUBBLICO_PDFA.CONV.pdf" for conformance level pdfa-1b
dc:title/*[0] :: Missing language qualifier.
The document does not conform to the requested standard.
The document's meta data is either missing or inconsistent or corrupt.
Done.
Can you help me?
Thanks",0,"Andreas Lehmkühler",Francesco,0,3,"11/Oct/16 10:46","12/Oct/16 10:04","12/Oct/16 10:04"
PDFBOX-3529,PDFBOX,"Read overprint attributes",Improvement,CLOSED,Major,Fixed,"2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",PDModel,overprintcontrol,,"Expand PDExtendedGraphicsState.copyIntoGraphicsState so that "OP" and "op" are no longer ignored. Add them to PDGraphicsState, even if we don't support overprint in rendering.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"11/Oct/16 16:25","25/Mar/17 18:12","11/Oct/16 16:29"
PDFBOX-3530,PDFBOX,"WriteDecodedDoc slow due to decoding images",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Parsing,None,,"PDF from PDFBOX-323
time qpdf --stream-data=uncompress About\ Stacks.pdf /tmp/out.pdf
real 0m0.200s
user 0m0.020s
sys 0m0.180s
time java -jar pdf-box-svn/app/target/pdfbox-app-2.1.0-SNAPSHOT.jar WriteDecodedDoc About\ Stacks.pdf /tmp/out.pdf
real 0m1.536s
user 0m1.497s
sys 0m0.798s",0,"Tilman Hausherr","simon steiner",0,3,"12/Oct/16 10:18","25/Mar/17 18:12","13/Oct/16 09:23"
PDFBOX-3531,PDFBOX,"LCMS error 13: Couldn't link the profiles",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Rendering,None,"java 1.8","I am also running against the error "LCMS error 13: Couldn't link the profiles"
The error occures frequent times, depending on which document to be displayed with PDFBox.
Stack:
Exception in thread "main" java.awt.color.CMMException: LCMS error 13: Couldn't link the profiles
 at sun.java2d.cmm.lcms.LCMS.createNativeTransform(Native Method)
 at sun.java2d.cmm.lcms.LCMS.createTransform(Unknown Source)
 at sun.java2d.cmm.lcms.LCMSTransform.doTransform(Unknown Source)
 at sun.java2d.cmm.lcms.LCMSTransform.colorConvert(Unknown Source)
 at java.awt.image.ColorModel.getLinearGray16ToOtherGray8LUT(Unknown Source)
 at java.awt.image.ComponentColorModel.setupLUTs(Unknown Source)
 at java.awt.image.ComponentColorModel.<init>(Unknown Source)
 at java.awt.image.ComponentColorModel.<init>(Unknown Source)
 at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.toRGBImageAWT(PDColorSpace.java:275)
 at org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.toRGBImage(PDICCBased.java:200)
 at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit(SampledImageReader.java:257)
 at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage(SampledImageReader.java:143)
 at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage(PDImageXObject.java:340)
 at org.apache.pdfbox.rendering.PageDrawer.drawImage(PageDrawer.java:793)
 at org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:62)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:189)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:94)
 at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:236)
Reproduced the bug with the 2.0.0-RC, and now also with the 2.0.3
Reason are the "TÜV/QA" certified images at the bottom of the pages.
Created a document where it's clearly reproducible with pdfbox-app
So the "final" argument mentioned in PDFBOX-2454, that it wasn't reproducible, now isn't valid any more.
Steps to reproduce:
download PDF file from http://www.igs.at/downloads/PDFBOX_LCMS_Error_13.pdf and save as C:\test.pdf
run the PDFBox image rendering app "PDFToImage":
java -cp pdfbox-2.0.3.jar;pdfbox-app-2.0.3.jar;preflight-2.0.3.jar;preflight-app-2.0.3.jar org.apache.pdfbox.tools.PDFToImage C:\test.pdf
> you will immediately see the stack mentioned above, in console/error output.",0,"Tilman Hausherr","Christoph Bimminger",0,3,"13/Oct/16 14:47","25/Mar/17 18:12","14/Oct/16 16:32"
PDFBOX-3533,PDFBOX,"IOException "expected number, actual=COSArray{...}" on a valid PDF",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Parsing,None,"windows 7, jvm","On the attached PDF file, which opens fine with Adobe Reader, the PDDocument.load() method errors with the following message:
"expected number, actual=COSArray{[COSObject{7, 0}, COSName{XYZ}, COSNull{}, COSNull{}, COSNull{}]} at offset 497"",0,"Andreas Lehmkühler","Seva Alekseyev",0,3,"19/Oct/16 18:26","05/Apr/18 18:11","05/Apr/18 18:11"
PDFBOX-3535,PDFBOX,"ClassCastException in PDAnnotationLink.getAction()",Bug,CLOSED,Trivial,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",PDModel,None,,"Caused by: java.lang.ClassCastException: org.apache.pdfbox.cos.COSString cannot be cast to org.apache.pdfbox.cos.COSDictionary
 at org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink.getAction(PDAnnotationLink.java:88)
Seva Alekseyev raised this issue on TIKA-2121. I confirmed that it happens with PDFBox 2.0.3. I haven't confirmed trunk yet.",0,"Tilman Hausherr","Tim Allison",0,4,"20/Oct/16 00:04","25/Mar/17 18:12","20/Oct/16 17:34"
PDFBOX-3536,PDFBOX,"IOException "Invalid dictionary, found: 'r' but expected: '/' at offset 1148" on a valid PDF",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.7, 3.0.0 PDFBox",Parsing,None,"windows 7, jvm","On the attached file, which loads fine with Adobe Reader, the PDDocument.load() methpod throws the following error:
java.io.IOException: Unknown dir object c='>' cInt=62 peek='>' peekInt=62 at offset 1196
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:982)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:153)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair(BaseParser.java:277)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:210)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:885)
at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:757)
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:726)
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:657)
at org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically(COSParser.java:2092)
at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:203)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:252)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:957)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:913)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:861)
at Temp.PDFTemp.App.main(App.java:19)",0,"Andreas Lehmkühler","Seva Alekseyev",0,5,"20/Oct/16 16:37","21/Jul/17 04:40","18/Jun/17 13:11"
PDFBOX-3537,PDFBOX,"Create example of AcroForm creation with field that has two widgets",Improvement,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",AcroForm,None,,"Create PDF with two pages and one field which has a widget on each page.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Oct/16 17:43","25/Mar/17 18:13","21/Oct/16 17:54"
PDFBOX-3538,PDFBOX,"IOException over NumberFormatException on a valid PDF",Bug,CLOSED,Major,Fixed,None,"2.0.5, 3.0.0 PDFBox",Parsing,None,"windows 7, jvm","On the attached document, which loads and displays with Adobe Reader fine, PDDocument.load() throws the following exception:
java.io.IOException: java.lang.NumberFormatException: For input string: "0000000-21"
at org.apache.pdfbox.pdfparser.COSParser.parseXrefTable(COSParser.java:2017)
at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:224)
at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:194)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:252)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:957)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:913)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:861)
at Temp.PDFTemp.App.main(App.java:19)
Caused by: java.lang.NumberFormatException: For input string: "0000000-21"
at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
at java.lang.Long.parseLong(Long.java:589)
at java.lang.Long.parseLong(Long.java:631)
at org.apache.pdfbox.pdfparser.COSParser.parseXrefTable(COSParser.java:2010)
... 7 more",0,"Andreas Lehmkühler","Seva Alekseyev",0,3,"21/Oct/16 19:59","25/Mar/17 18:13","29/Jan/17 12:41"
PDFBOX-3539,PDFBOX,"Close Document after printing",Test,CLOSED,Minor,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Utilities,None,,"In the example class:
org.apache.pdfbox.examples.printing.Printing
PDDocument is not closed after job.print();",0,"Tilman Hausherr","Ivan Ridao Freitas",0,3,"21/Oct/16 21:34","25/Mar/17 18:13","22/Oct/16 05:27"
PDFBOX-3540,PDFBOX,"Trailer Syntax error, ID is different in the first and the last trailer - for PDF with incremental updates",Bug,CLOSED,Major,Fixed,"1.8.12, 2.0.3","2.0.4, 3.0.0 PDFBox",Preflight,None,,"As reported at the users mailing list:
Hello guys,
I have the following problem using apache.pdfbox when validating a valid PDF/A-1 file, which is being signed twice:
1. The online validator confirms that the file is valid (https://www.pdf-tools.com/pdf/validate-pdfa-online.aspx)
2. But when I validate it using the following code:
PreflightParser parser = new PreflightParser(byteDatasource);
parser.parse();
PreflightDocument document = parser.getPreflightDocument();
document.validate();
result = document.getResult();
3. The file is linearized
4. I get that the file is invalid and the error description reads:
Trailer Syntax error, ID is different in the first and the last trailer</i>
According to issues PDFBOX-3256 and PDFBOX-2502 this should be fixed?
Could anyone give me a tip how to go around this problem or would that be a bug?
The pdf file is attached.
Analysis:
The original PDF is linearized with a subsequent incremental update.
According to ISO 32000-1 F1
Incremental update shall still be permitted, but the resulting PDF is no longer linearized and subsequently shall be treated as ordinary PDF. Linearizing it again may require reprocessing the entire file; see G.7, "Accessing an Updated File" for details.
as the file shall no longer be treated as linearized the provision about matching ID's as outlined in PDFBOX-2502 no longer applies.",0,"Tilman Hausherr","Maruan Sahyoun",0,4,"22/Oct/16 07:18","25/Mar/17 18:12","22/Oct/16 17:13"
PDFBOX-3541,PDFBOX,"Use /L entry to determine if a linearized file shall be treated as such for PDF/A validation",Improvement,CLOSED,Minor,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Preflight,None,,"With PDFBOX-3540 the detection of a linearized file which has later been updated for PDF/A validation was improved so that provisions can be properly applied or ignored. That could be improved by checking the /L entry of the linearization dictionary. The ISO 19005-1:2005/Cor.2:2011 has this:
In a linearized PDF, if the ID keyword is present in both the first page trailer dictionary and the last
trailer dictionary, the value to both instances of the ID keyword shall be identical.
...
This provision shall not apply where the value to the L key in the linearization dictionary does not match the actual length of the PDF.",0,"Tilman Hausherr","Maruan Sahyoun",0,3,"23/Oct/16 07:41","25/Mar/17 18:12","26/Oct/16 16:46"
PDFBOX-3545,PDFBOX,"COSParser.parseXref failing if startXrefOffset over pdf size",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.6, 3.0.0 PDFBox",None,None,,"Any PDF which had wrong startxref was parsed with warning in PdfBox 1.8 thanks to self healing mechanism.
In version 2.0 the COSParser.parseXref (called from PDFParser) tries to seek to the startxref position.
If the position is wrong, but within the file size, the PDF is parsed with warning.
But when the startxref is over the file size, the parsing ended with exception.
We could either test if startxref is not over source.length(), or catch the exception.",0,"Andreas Lehmkühler","Matus Zamborsky",0,5,"27/Oct/16 06:37","15/May/17 20:28","05/May/17 18:13"
PDFBOX-3546,PDFBOX,"IOException over DataFormatException, "invalid stored block lengths" on a valid PDF",Bug,CLOSED,Major,Fixed,"1.8.12, 2.0.3","1.8.13, 2.0.4, 3.0.0 PDFBox",Parsing,None,"windows 7, jvm","On the attached document, which loads and displays with Adobe Reader fine, PDDocument.load() throws the following exception:
java.io.IOException: java.util.zip.DataFormatException: invalid stored block lengths
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:82)
at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:69)
at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:162)
at org.apache.pdfbox.pdfparser.PDFXrefStreamParser.<init>(PDFXrefStreamParser.java:56)
at org.apache.pdfbox.pdfparser.COSParser.parseXrefStream(COSParser.java:2053)
at org.apache.pdfbox.pdfparser.COSParser.parseXrefObjStream(COSParser.java:333)
at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:259)
at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:194)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:252)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:957)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:913)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:861)
at Temp.PDFTemp.App.main(App.java:19)
Caused by: java.util.zip.DataFormatException: invalid stored block lengths
at java.util.zip.Inflater.inflateBytes(Native Method)
at java.util.zip.Inflater.inflate(Inflater.java:259)
at java.util.zip.Inflater.inflate(Inflater.java:280)
at org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:107)
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:73)
... 12 more",0,"Tilman Hausherr","Seva Alekseyev",0,6,"27/Oct/16 20:29","23/Aug/17 16:29","02/Nov/16 17:05"
PDFBOX-3547,PDFBOX,"[Patch] Improved signing of existing signature fields",Improvement,CLOSED,Major,Fixed,2.0.4,"2.0.4, 3.0.0 PDFBox",Signing,None,,"Short: The handling of signing existing signature fields must be improved (and this patch is part of that effort).
Details and background
The current implementation for visible signatures always adds new signature fields when signing documents.
In that case for that signature everything has to be definied (field properties, coordinates etc.).
Another quite common use case is the use of an existing signature field which should be signed.
There are basically two different roles: The document creator who creates the document with all its texts, graphics and form fields. The creator knows best where everything should be positioned and is even sometimes bound by certain regulations etc. The document creator defines his intend with the "Usage rights" and may add a usage right signature.
Then later a document user e.g. a customer fills out form fields and signs those predefined signature fields.
In that case the coordinates and a lot of attributes are alrady defined and there is no need (and sometimes it is even forbidden) to change the physical attributes of those signature fields. The only two things which are of interest is to set the signature dictionary and to recreate the appearance.
In the current implementation however one needs to define the coordinates of an existing signature field again. But not enough since the screen coordinates in java (and in the PDFBox PDVisibleSigBuilder) and PDF coordinates have a different origin one must convert those existing PDF coordinates to screen coordinates which are later converted to PDF coordinates again. This is cumbersome, error prone and totally unecessary... With the supplied patch there is no conversion of coordinates anymore.",0,"Tilman Hausherr",Lonzak,0,4,"28/Oct/16 15:42","25/Mar/17 18:12","02/Nov/16 18:54"
PDFBOX-3549,PDFBOX,"Can't read embedded ICC 4 profile (Invalid profile sequence)",Bug,CLOSED,Trivial,Fixed,"2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",Parsing,"ICC icc4","ubuntu, java 1.7","1) Goto this page: http://www.color.org/version4ready.xalter
2) Download this file: http://www.color.org/version4pdf.pdf
3) Run this command:
java -jar pdfbox-app-2.0.3.jar PDFToImage version4pdf.pdf
4) PDFBox output error:
Can't read embedded ICC profile (Invalid profile sequence), using alternate color space: DeviceRGB
5) Open the output file: version4pdf1.jpg, you will found there is a rendering error.",0,"Tilman Hausherr","Liu Huasong",0,3,"31/Oct/16 13:35","25/Mar/17 18:12","02/Nov/16 16:59"
PDFBOX-3551,PDFBOX,"CLI Decrypt broken, only allows 1 argument",Bug,CLOSED,Major,Fixed,2.0.3,"1.8.13, 2.0.4, 3.0.0 PDFBox",Utilities,"CLI Decrypt Decrypt.",java,"This is about the Decrypt.java CLI wrapper fails when using certificates.
Plain and simple. The following file just simply doesn't allow for more than one CLI argument: tools/src/main/java/org/apache/pdfbox/tools/Decrypt.java
WHEN, I supply the argument keyStore and password, the usage documentation is thrown.
WHEN, I hack the Decrypt.java CLI wrapper in tools, and allow the password AND keyStore arguments to BOTH be present, the decrypt works.
The command I am trying to run:
java -jar pdfbox-app-2.0.3.jar Decrypt -password password -keyStore keystore.p12 encrypted.pdf decrypted.pdf
PDFBox CLI docs for decrypt WHERE clearly password AND keyStore need to be used together: http://pdfbox.apache.org/2.0/commandline.html#decrypt
IN CLOSING, instead of fighting my case that the CLI Decrypt method is NOT working, I am choosing to keep it simple by stating fact that ONLY ONE argument is allowed OTHERWISE the usage docs are thrown.
Thank you kindly. I have been able to rebuild the jar files with my own fix by using Maven to re-jar. I absolutely sure I am generating proper certs and p12 keyStore files and again I am successfully encrypting/decrypting with my update pdfbox.jar file",0,"Maruan Sahyoun","acker apple",0,4,"02/Nov/16 00:16","25/Mar/17 18:12","02/Nov/16 15:23"
PDFBOX-3552,PDFBOX,"Allow external signing in two steps",Improvement,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Signing,None,,"As requested by user Fabricio Pombo Koch in the mailing list:
I'm trying to sign a PDF with an external service. This service receives the PDF's content (hash) and returns the signature (hash).
I followed the "CreateSignature" and "CreateVisibleSignature" examples and I was able to make it works.
But, I need to sign the PDF in 2 steps:
1- Get PDF's content, calculate the hash and send the hash to the service that is responsible to sign the hash.
2- Get the signature hash returned from the service and insert it into my PDF.
Note that in the 2nd step I'm not in the same context from 1st step, so, I can't access the PDF that was loaded in step 1. I would need to load it again.
As discussed in the mailing list, the strategy will be:
1) call saveIncrementalForExternalSigning and get the signing content
2) set a dummy singature, e.g. externalSigning.setSignature(new byte[0]);
3) before closing, get the ByteRange from the signature object
4) after getting the real signature, sign with the help of the byte range. The file must be reopened, but PDFBox isn't needed, one just writes the ascii hex signature at the proper place.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"02/Nov/16 17:20","25/Mar/17 18:12","29/Nov/16 18:56"
PDFBOX-3554,PDFBOX,"Crash in kerning calculations",Bug,CLOSED,Major,Duplicate,2.0.0,None,FontBox,easyfix,,"A bug in the usage of the result of a binary search causes a crash in the calculation of kerning information. Here's the patch:
--- a/fontbox/src/main/java/org/apache/fontbox/ttf/KerningSubtable.java
+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/KerningSubtable.java
@@ -292,7 +292,7 @@ public class KerningSubtable
             index = Arrays.binarySearch(pairs, searchRange, pairs.length, key, this);
             if (index >= 0)
             {
-                return pairs[searchRange + index][2];
+                return pairs[index][2];
             }
             return 0;
         }
Explanation: The searchRange parameter is passed to binarySearch(), but the result of binarySearch() is relative to the start of the array, not the passed-in start. So no need to add searchRange to the result. Adding causes the indexing to go off the end of the array.",0,"Andreas Lehmkühler","Lawrence Kesteloot",0,2,"04/Nov/16 06:01","04/Nov/16 07:00","04/Nov/16 07:00"
PDFBOX-3555,PDFBOX,"FlateFilter.decode cause native memory leaks",Bug,CLOSED,Major,Fixed,"1.8.12, 2.0.3, 3.0.0 PDFBox","1.8.13, 2.0.4, 3.0.0 PDFBox",None,None,"debian, java 1.8","The FlateFilter.decode method calls the private method FlateFilter.decompress which instanciates a java.util.zip.Inflater.
But this method never calls the Inflater.end method so I think the native memory allocated by the Inflater is never released.
By consequence, the java process memory size keeps growing over time.
The simplest way we found to fix this is to call the Inflater.end when the inflater has done its job and is not used anymore at the end of FlateFilter.decompress.
With this fix, the java process memory size remains stable over time.
Just ask me if more details are needed.",0,"Andreas Lehmkühler","Yoan Alvarez",1,4,"04/Nov/16 15:35","25/Mar/17 18:12","04/Nov/16 16:36"
PDFBOX-3556,PDFBOX,"Error "Error getting header version: %PDF--33" on a valid document",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Parsing,None,"windows 7, jvm","On the attached document, which opens fine in Adobe Reader, the PDDocument.load() method throws the following error:
java.io.IOException: Error getting header version: %PDF--33
at org.apache.pdfbox.pdfparser.COSParser.parseHeader(COSParser.java:1935)
at org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader(COSParser.java:1853)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:245)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:957)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:913)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:861)",0,"Tilman Hausherr","Seva Alekseyev",0,3,"04/Nov/16 20:04","25/Mar/17 18:12","04/Nov/16 21:27"
PDFBOX-3558,PDFBOX,"NPE in JBig2Filter if BitsPerComponent is missing",Bug,CLOSED,Major,Fixed,"1.8.12, 2.0.3","1.8.13, 2.0.4, 3.0.0 PDFBox","Rendering, Utilities",None,,"From Erik Zeiske in the mailing list:
I have an issue with PDFBox and the handling of a MRC Compressed PDF.
The issue is related to the JBIG2 Compression used in the PDF. If I
try to extract the different Images used in the PDF attached, the
library throws an NullPointerException cause the Bits are not defined
in the JBIG2-Filter. I think this is because in the PDF there is no
"Bits per Component" defined in the JBIG2-Image. If I try to define
the Bits in the JAVA-Code the program runs without an error, but it
doesn't apply the JBIG2 mask properly to the foreground-colour-image
of the PDF. To fix this issue I tried to extract the mask into a file,
but it seems like the mask-image is the same as the foreground-image.
I couldn't find the reason for this and I don't think it is related to
the PDF itself.
I haven't understood all of this (maybe it is moot after the upcoming bugfix), but one thing is sure: an NPE is thrown if BitsPerComponent does not exist.
Our code can only process bpc=1, so we can use that one as default.
Edit: I've now understood the 2nd problem, it will be handled in PDFBOX-3559.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Nov/16 17:21","25/Mar/17 18:13","08/Nov/16 17:04"
PDFBOX-3559,PDFBOX,"ExtractImages does not apply masks in some jpegs",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Utilities,None,,"This is a follow-up to PDFBOX-3558 - ExtractImages goes "fast path" with some jpegs i.e. outputs the stream directly. However this is not OK if the images have a mask.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Nov/16 17:02","25/Mar/17 18:12","10/Nov/16 20:06"
PDFBOX-3560,PDFBOX,"PDPattern.getCOSObject() always returns null",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",PDModel,None,,"As reported by Clifford in the mailing list:
PDPage page = new PDPage();
PDColorSpace cs = PDColorSpace.create(COSName.PATTERN,page.getResources());
System.out.println(cs.getCOSObject());
this outputs null because the array field is not initialized.
The PDF specification has this:
A colour space shall be defined by an array object whose first element is a name object identifying the colour space family. The remaining array elements, if any, are parameters that further characterize the colour space; their number and types vary according to the particular family. For families that do not require parameters, the colour space may be specified simply by the family name itself instead of an array.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Nov/16 19:40","25/Mar/17 18:12","09/Nov/16 20:52"
PDFBOX-3561,PDFBOX,"PDTilingPattern not initialized correctly",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",PDModel,None,,"PDTilingPattern no parameter constructor is not initialized correctly:
resources are a must; if they are missing, Adobe Reader does not show the pattern
it must be a stream, not just a dictionary",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Nov/16 22:15","25/Mar/17 18:12","10/Nov/16 06:16"
PDFBOX-3562,PDFBOX,"PDFBox hangs indefinately when rendering certain files",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Rendering,shading,"ubuntu, java 1.8","There seems to be an issue with PDFBox when rendering certain PDF files, when calling renderImageWithDPI; the call seems to hang indefinitely.
My jar file is ruunning with the parameter: -Dsun.java2d.cmm=sun.java2d.cmm.kcms.KcmsServiceProvider
I noticed this issue on this file:[ https://1drv.ms/b/s!Av-Yk52R4YupvcUEZFueSnXFh6_pXw]
Here is the call to renderImageWithDPI:
PDDocument doc = PDDocument.load(file);
PDFRenderer renderer = new PDFRenderer(doc);
BufferedImage img = renderer.renderImageWithDPI(0, 300.0f, ImageType.RGB);
checking the stack trace using jstack gives me the following:
"pool-3-thread-1" #14 prio=5 os_prio=0 tid=0x00007f0bd41d2000 nid=0x76d4 runnable [0x00007f0bb44db000]
java.lang.Thread.State: RUNNABLE
at org.apache.log4j.Category.getEffectiveLevel(Category.java:442)
at org.apache.log4j.Category.log(Category.java:855)
at org.slf4j.impl.Log4jLoggerAdapter.log(Log4jLoggerAdapter.java:595)
at org.apache.commons.logging.impl.SLF4JLocationAwareLog.warn(SLF4JLocationAwareLog.java:179)
at org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingContext.collectTriangles(Type4ShadingContext.java:152)
at org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingContext.<init>(Type4ShadingContext.java:64)
at org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingPaint.createContext(Type4ShadingPaint.java:66)
at sun.java2d.pipe.AlphaPaintPipe.startSequence(AlphaPaintPipe.java:84)
at sun.java2d.pipe.AAShapePipe.renderTiles(AAShapePipe.java:168)
at sun.java2d.pipe.AAShapePipe.renderPath(AAShapePipe.java:159)
at sun.java2d.pipe.AAShapePipe.fill(AAShapePipe.java:68)
at sun.java2d.pipe.PixelToParallelogramConverter.fill(PixelToParallelogramConverter.java:164)
at sun.java2d.pipe.ValidatePipe.fill(ValidatePipe.java:160)
at sun.java2d.SunGraphics2D.fill(SunGraphics2D.java:2527)
at org.apache.pdfbox.rendering.PageDrawer.shadingFill(PageDrawer.java:933)
at org.apache.pdfbox.contentstream.operator.graphics.ShadingFill.process(ShadingFill.java:41)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:189)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:94)
at com.documentconverter.PDFManager_Box.GetThumbPDF(PDFManager_Box.java:58)
I left my application running over the weekend to see if the call will eventually return, three days later and still the application is at the same spot.",0,"Tilman Hausherr","Zaid Amir",0,3,"10/Nov/16 09:42","25/Mar/17 18:12","10/Nov/16 16:51"
PDFBOX-3563,PDFBOX,"Create sample code for creating a PDF with patterns","New Feature",CLOSED,Minor,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",PDModel,None,,"I'm adding the sample code with patterns that I posted to the mailing list. We can never have too many examples.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/Nov/16 17:13","25/Mar/17 18:12","10/Nov/16 17:17"
PDFBOX-3564,PDFBOX,"SoftMask needs consider colormodel of input Image",Improvement,CLOSED,Major,Fixed,2.0.3,"2.0.5, 3.0.0 PDFBox",Rendering,None,,"I'm currently following a rendering problem of a poster. While doing so I found a first lead, that resulted in a first patch.
The PDF I'll attach contains an image with a mask applied to it. If rendering works correctly, only a single green "OK" should be visible. With pdfbox 2.0.3 and HEAD I get a white sheet.
I tracked this down into SoftMask.java. There a source raster is sampled by querying the pixel data via getPixel(int,int,int[]). This will only work correctly for RGBA input sources. In my case the input image is an RGB image and getPixel does not overwrite the initial 0 value in the rgba value array.
The attached patch uses the colormodel corresponding to the source raster to convert into the components. This correctly returns the alpha value of an RGB image as 255.",0,"Tilman Hausherr","Matthias Bläsing",0,3,"10/Nov/16 21:52","25/Mar/17 18:13","04/Jan/17 21:16"
PDFBOX-3566,PDFBOX,"ClassCastException in JPEGFactory.createFromImage()",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",None,None,"linux, java 1.8","I was trying to save all the pages from a PDF as images and adding them to a newly created PDF.
PDDocument newDoc = new PDDocument();

PDFRenderer pdfRenderer = new PDFRenderer(oldDoc);

floag width = ...
float height = ...

page.setMediaBox(new PDRectangle(width, height));

newDoc.addPage(page);

PDPageContentStream contents = new PDPageContentStream(newDoc, page);

BufferedImage bufferedImage = pdfRenderer.renderImageWithDPI(0, 200, ImageType.RGB);

PDImageXObject imageXObject = JPEGFactory.createFromImage(newDoc, bufferedImage, 0.75);

contents.drawImage(imageXObject, 0, 0, width, height);

contents.close();

...
Sometimes it's working just fine, sometimes it's trowing a ClassCastException in JPEGFactory.createFromImage:
java.lang.ClassCastException: com.sun.media.imageioimpl.plugins.jpeg.CLibJPEGImageWriteParam cannot be cast to javax.imageio.plugins.jpeg.JPEGImageWriteParam
 at org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory.encodeImageToJPEGStream(JPEGFactory.java:244)
 at org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory.createJPEG(JPEGFactory.java:212)
 at org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory.createFromImage(JPEGFactory.java:175)
 at org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory.createFromImage(JPEGFactory.java:160)
 at com.mimecast.ttpservice.app.jpati.ConvertPDF.saveDoc(ConvertPDF.java:1390)
This is happening in the following code of above mentioned class:
imageWriter = ImageIO.getImageWritersBySuffix("jpeg").next();
...
JPEGImageWriteParam jpegParam = (JPEGImageWriteParam)imageWriter.getDefaultWriteParam();
In my case I can get more than one ImageWritter when calling ImageIO.getImageWritersBySuffix("jpeg") as follows:
com.sun.imageio.plugins.jpeg.JPEGImageWriter
com.sun.media.imageioimpl.plugins.jpeg.CLibJPEGImageWriter
I suspect that sometimes the CLibJPEGImageWriter is returned before JPEGImageWriter, which produces the ClassCastException a bit later.
As I need to keep the JAI installed, is it possible to change the above code to loop through all ImageWriters found in order to pick the one needed by PdfBox?
I would recommend doing something like this:
Iterator<ImageWriter> iterator = ImageIO.getImageWritersBySuffix("jpeg");
while (iterator.hasNext()) {
    ImageWriter foundWriter = iterator.next();

    if (foundWriter instanceof JPEGImageWriter) {
        imageWriter = foundWriter;
        break;
    }
}

if (imageWriter == null) {
    throw new InvalidStateException("No image writer found of JPEGImageWriter type");
}",0,"Tilman Hausherr",ceakki,1,4,"11/Nov/16 09:39","25/Mar/17 18:13","11/Nov/16 17:06"
PDFBOX-3567,PDFBOX,"Process softmasks in ExtractImages",Improvement,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Utilities,None,,"When running ExtractImages with gs-bugzilla691157.pdf (see PDFBOX-3000), the image in the softmask was not included, so we need to improve that tool accordingly.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"11/Nov/16 19:29","25/Mar/17 18:12","11/Nov/16 19:55"
PDFBOX-3569,PDFBOX,"Performance regression in PDColorSpace#toRGBImageAWT",Bug,CLOSED,Major,Fixed,"2.0.3, 3.0.0 PDFBox","2.0.4, 3.0.0 PDFBox",Rendering,None,,"I've a private pdf containing 1900 tiny inline images (CMYK, 8bit) which renders way too slow. Again the CMYK2RGB conversion is the culprit here, BUT the known issue with the KCMS/LCMS change isn't the main problem here.
I ran some tests on linux (PDFToImage time -imageType png -resolution 150)
1.6.0_37: 355s
1.7.0_25: 289s
1.7.0_75: 298s
1.8.0_101: cancelled after 15 min",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,6,"14/Nov/16 18:27","25/Mar/17 18:13","12/Dec/16 06:19"
PDFBOX-3570,PDFBOX,"JDK-8054565 Java 8 close contract issue",Bug,CLOSED,Major,Fixed,"1.8.10, 1.8.11, 1.8.12","1.8.13, 2.0.4, 3.0.0 PDFBox",None,None,,"Java 8 bug uncovered, and wondering if the PDFBox team would be willing to
work around it? You should probably reply with an emphatic "no", butI
figure it is worth a shot.
Here is the openjdk bug: https://bugs.openjdk.java.net/browse/JDK-8054565
PDDocument.saveIncremental(OutputStream) calls close() twice - once in
try{} and once in finally{}, relying on the Closable contract which says it
will do nothing if the stream is already close.
But, we see this:
Caused by: java.io.IOException: Closed LOB
    at
oracle.jdbc.driver.DatabaseError.SQLToIOException(DatabaseError.java:519)
    at
oracle.jdbc.driver.OracleBlobOutputStream.ensureOpen(OracleBlobOutputStream.java:231)
    at
oracle.jdbc.driver.OracleBlobOutputStream.flush(OracleBlobOutputStream.java:167)
    at java.io.FilterOutputStream.flush(FilterOutputStream.java:140)
    at java.io.FilterOutputStream.close(FilterOutputStream.java:158)
    at org.apache.pdfbox.pdfwriter.COSWriter.close(COSWriter.java:300)
    at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1366)
    at ourpackage.util.pdf.PdfDRM.applyDRM(PdfDRM.java:225)
    at
ourpackage.db.liquibase.customchanges.IQMDxContentLoader.applyDrmToCesPdfDocumentInDatabase(IQMDxContentLoader.java:383)
    at
ourpackage.db.liquibase.customchanges.IQMDxContentLoader.applyZippedCesDocumentChangesToDatabase(IQMDxContentLoader.java:265)
    at
ourpackage.db.liquibase.customchanges.IQMDxContentLoader.generateStatements(IQMDxContentLoader.java:153)
    ... 33 more
Because Java 8's FilterOutputStream.close() is calling flush() on the
second close and Oracle's driver code doesn't like that.
The bug can be worked around it by implementing close() in
COSStandardOutputStream as below:
        private boolean closed;

        @Override
        public void close() throws IOException
        {
                try (OutputStream ostream = out)
                {
                        if (!closed)
                                flush();
                }
                closed = true;
        }
I've done this in our project code base, by cloning and owning
COSStandardOutputStream and adding it to our classpath first. Not ideal.
Also, mailing list thread on openjdk that recognizes the bug
http://marc.info/?t=141767408700004&r=1&w=2. Although, it is fixed in Java
9 with no plan of backporting. Not sure how to request a backport, but
that would be the ideal solution.
original mailing list report http://asfmail.lucidworks.io/mail_files/pdfbox-users/201509.mbox/%3CCALRFkrtvYZC1Y7CFXG8x17kkmD+7byyXgxsR0uMqXz_MVD0F4w@mail.gmail.com%3E
(note: listed versions I know this affects)",0,"Tilman Hausherr","Caleb Cushing",0,3,"14/Nov/16 19:27","25/Mar/17 18:13","16/Nov/16 15:45"
PDFBOX-3571,PDFBOX,"sRGB Color Space Profile is subject to 3rd party copyright",Bug,CLOSED,Major,Fixed,"1.8.12, 2.0.3, 3.0.0 PDFBox","1.8.13, 2.0.4, 3.0.0 PDFBox",None,None,,"Hi
The file /examples/src/main/resources/org/apache/pdfbox/resources/pdfa/sRGB Color Space Profile.icm
The license: /examples/src/main/resources/org/apache/pdfbox/resources/pdfa/sRGB Color Space Profile.icm.LICENSE.txt
contains the following:
"...permission to use, copy and distribute this file for any purpose is
hereby granted without fee, provided that the file is not changed
including the HP copyright notice tag, ... "
The license says: "provided that the file is not changed"
It does not respect the criteria "The license must meet the Open Source Definition."
The OSD [1] says:
"3. Derived Works
The license must allow modifications"
[1] http://www.opensource.org/osd.html
http://www.apache.org/legal/resolved.html#no-modification",0,"Andreas Lehmkühler","gil cattaneo",0,3,"15/Nov/16 12:29","25/Mar/17 18:12","23/Nov/16 16:14"
PDFBOX-3572,PDFBOX,"AES-Decryption with Bouncycastle throws NullPointerException",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.1, 2.0.2, 2.0.3","2.0.4, 3.0.0 PDFBox",Crypto,"bouncycastle decrypt",,"Using AES-Encryption with PdfBox and Bouncycastle yields a null pointer. When JCE is used everything works nicely: com.sun.crypt.provider.AESCipher returns an empty byte array for the last 16 bytes of the metadata dictionary. Bouncycastle returns a null reference.
Demo.java
public class Demo {

    public static void main(String[] args) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException {
        String password = "pw";
        String cipherString = "AES/CBC/PKCS5Padding";
        String testFilename = "test.pdf";

        PDDocument document = new PDDocument();
        AccessPermission ap = new AccessPermission();
        ap.setReadOnly();

        StandardProtectionPolicy policy = new StandardProtectionPolicy(password, password, ap);
        policy.setEncryptionKeyLength(128);
        policy.setPreferAES(true);
        document.protect(policy);
        document.getDocumentInformation().setAuthor("author");
        document.save(testFilename);
        document.close();

        // Decryption with SunJCE works
        Cipher cipher = Cipher.getInstance(cipherString);
        System.out.printf("Provider to use for %s decryption: %s\n", cipherString, cipher.getProvider());
        document = PDDocument.load(new File(testFilename), password);

        Security.removeProvider("SunJCE");

        // Decryption with BouncyCastle fails with NPE
        cipher = Cipher.getInstance(cipherString);
        System.out.printf("Provider to use for %s decryption: %s\n", cipherString, cipher.getProvider());
        document = PDDocument.load(new File(testFilename), password);
    }

}
Output with stacktrace
Provider to use for AES/CBC/PKCS5Padding decryption: SunJCE version 1.8
Provider to use for AES/CBC/PKCS5Padding decryption: BC version 1.54
Exception in thread "main" java.lang.NullPointerException
 at java.io.OutputStream.write(OutputStream.java:75)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptDataAESother(SecurityHandler.java:269)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:152)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptString(SecurityHandler.java:532)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decrypt(SecurityHandler.java:391)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptDictionary(SecurityHandler.java:512)
 at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decrypt(SecurityHandler.java:399)
 at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:798)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:726)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:657)
 at org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically(COSParser.java:2092)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:201)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:249)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:891)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:831)
This could possibly be fixed with a null check in the SecurityHandler before writing to the OutputStream.",0,"Tilman Hausherr","Markus Fensterer",0,3,"15/Nov/16 16:06","25/Mar/17 18:12","16/Nov/16 08:39"
PDFBOX-3576,PDFBOX,"Add getter methods to TextPosition",Improvement,CLOSED,Major,Fixed,2.0.3,"2.0.5, 3.0.0 PDFBox",None,None,,"I've inherited code in my department that created a local copy of TextPosition and broke it's immutability. I'm trying to refactor this code and use the core Apache implementation and I understand the need for TextPosition to be immutable, but can getters be added to provide read-only access to the class's fields?
We have custom code that does comparison of endX/endY values to determine if there are overlapping characters and other features. In our application, we also have a swap feature where we need to create/clone new TextPosition instances with minor differences between an existing TextPosition instance. Since there are a lot of fields that are required by the constructor of the new instances, but can't be read from an existing instance, we need a way to access these fields.
There probably should also be an override for equals() and hashCode().",0,"Tilman Hausherr","Kurt Devlin",1,5,"16/Nov/16 18:00","18/May/17 19:14","28/Jan/17 12:57"
PDFBOX-3577,PDFBOX,"remove mygrid repository in 1.8",Task,CLOSED,Major,Fixed,1.8.12,1.8.13,None,None,,"remove the mygrid repository as it is often down, similar to the 2.* builds.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Nov/16 18:01","09/Dec/16 10:56","17/Nov/16 18:07"
PDFBOX-3578,PDFBOX,"java.lang.IllegalArgumentException: dash lengths all zero",Bug,CLOSED,Major,Fixed,1.8.12,1.8.13,Rendering,None,,"Same as PDFBOX-3360 but for 1.8. The dash values are not "all zero", but NaN, which is because the CTM in this file grows bigger and bigger until they are infinite.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Nov/16 18:52","09/Dec/16 10:56","17/Nov/16 19:02"
PDFBOX-3579,PDFBOX,"Giant glyphs when rendering embedded fonts",Bug,CLOSED,Minor,Fixed,2.0.3,"2.0.5, 3.0.0 PDFBox",FontBox,None,,"Hi,
I try to generate an image out of the attatched pdf. PDFViewer like "Acrobat Reader" or the Ubuntu "Document Viewer" are able to display the PDF in a correct way. PDFBox is a little bit confused about the font.
Checked with the latest relase version:
java -jar pdfbox-app-2.0.3.jar PDFToImage 978-3-86764-721-2_t2.pdf",0,"Andreas Lehmkühler","Holger Floerke",1,4,"18/Nov/16 10:05","25/Mar/17 18:12","26/Feb/17 14:43"
PDFBOX-3584,PDFBOX,"Build and test PDFBox with JDK9",Task,CLOSED,Major,Fixed,"2.0.7, 3.0.0 PDFBox","2.0.8, 3.0.0 PDFBox",None,jdk9,,"Issue to collect problems and solutions for building and testing PDFBox with JDK9.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"19/Nov/16 19:30","02/Nov/17 21:00","12/Aug/17 13:48"
PDFBOX-3587,PDFBOX,"Flatten not working on attached pdf form",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",AcroForm,None,,"Please see attached FlattenIssue.java. This code populates form fields in the OpenOfficeForm.pdf form and then it flattens the form. However the output OpenOfficeForm_filled_flattened.pdf is not correct. The values of the fields are incorrectly moved in left down corner.
I have found a way how to workaround the issue please see FlattenIssueWorkaround.java which generates correct OpenOfficeForm_filled_flattened_workaround.pdf
Attaching whole eclipse java project",0,"Maruan Sahyoun",rumburak,0,5,"22/Nov/16 09:32","25/Mar/17 18:12","10/Dec/16 06:58"
PDFBOX-3589,PDFBOX,"Double negative float",Improvement,CLOSED,Minor,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Parsing,None,,"We have a document where the content stream contains a float with double negative so something like --242.0 and this result in a wrong operator:
  0 -242.0 72.08 TD
while it should be
-242.0 72.08 TD
Compared to Acrobat Reader or pdf.js, this results in missing text when rendering the page. Here is a relevant section in pdf.js source code:
 if (ch === 0x2D) { // '-'
        sign = -1;
        ch = this.nextChar();

        if (ch === 0x2D) { // '-'
          // Ignore double negative (this is consistent with Adobe Reader).
          ch = this.nextChar();
        }
} ",0,"Tilman Hausherr","Andrea Vacondio",0,3,"22/Nov/16 17:47","25/Mar/17 18:13","29/Nov/16 17:45"
PDFBOX-3590,PDFBOX,"AccessPermission not applied",Bug,CLOSED,Major,Fixed,"1.8.12, 2.0.3","1.8.13, 2.0.4, 3.0.0 PDFBox",Documentation,None,,"Using PdfBox 2.0.3 from maven repository.
I modified a PDF with Adobe Pro to add editable fields that I can edit with PdfBox in JAVA.
Everything works well but I wanted to set the document as read-only so people downloading the generated pdf could not change values.
So I followed https://pdfbox.apache.org/2.0/cookbook/encryption.html but it's not working.
Here is my method https://gist.github.com/mgohin/b09fed91e7475c09326d1ae25686dcd1",0,"Tilman Hausherr","Maelig Gohin",0,3,"23/Nov/16 12:35","25/Mar/17 18:12","24/Nov/16 16:40"
PDFBOX-3592,PDFBOX,"Missing stream in /XrefStm causes parse to break",Bug,CLOSED,Trivial,"Not A Problem","1.8.9, 2.0.0",None,Parsing,None,,"When the pdf document contains a startref and xref table (a la PDF1.4) as well as an /XRefStm, but the offset given by /XRefStm does not describe a xref (stream or otherwise), PDFBox does its level best to find the xref info using a brute force search. In the case where the document only contains the xref table given by startxref, and does not contain an object of /Type /XRef, the brute force search results in the xref table.
See diffs for COSParser.java(2.0.0) and NonSequentialPDFParser.java (1.8.9), below.",0,"Andreas Lehmkühler","Pat Hickey",0,3,"23/Nov/16 19:36","27/Nov/16 20:12","27/Nov/16 20:12"
PDFBOX-3594,PDFBOX,"Use PDOutlineItem#findDestinationPage() cannot get PDPage, return was null",Bug,CLOSED,Major,Fixed,"1.8.12, 2.0.3","1.8.13, 2.0.4, 3.0.0 PDFBox",PDModel,None,"java 1.8","Overview
I try to extract Bookmarks of a PDF, but I could not get a destination page.
PDF
http://www.line6.jp/products/pod-hd-x/img-pod-hd-x-resource/pod-hd-500x-advanced-guide.pdf
Code
main.PDFBookmarkExtractor.java
package main;

import java.io.File;
import java.io.IOException;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline;
import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem;
import org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode;

public class PDFBookmarkExtractor {

 public static void main(String args[]) throws Exception {
  PDFBookmarkExtractor extractor = new PDFBookmarkExtractor();
  extractor.extract();
 }

 public void extract() {
  File pdf = new File("pod-hd-500x-advanced-guide.pdf");
  try (PDDocument document = PDDocument.load(pdf)) {
   PDDocumentOutline outline =  document.getDocumentCatalog().getDocumentOutline();
   this.getBookmarks(document, outline);
  } catch(IOException e) {
   e.printStackTrace();
  }
 }

 private void getBookmarks(PDDocument document, PDOutlineNode outlineNode) throws IOException {
  PDOutlineItem current = outlineNode.getFirstChild();
  while(current != null) {
   this.getBookmark(document, current, 0);
   current = current.getNextSibling();
  }
 }
 private int getBookmark(PDDocument document, PDOutlineItem current, int indentCount) throws IOException {
  PDPage page = current.findDestinationPage(document);

  StringBuilder sb = new StringBuilder();
  for(int i=0; i<indentCount; i++) {
   sb.append("\t");
  }
  sb.append(current.getTitle());
  sb.append("[").append(page).append("]");
  System.out.println(sb);

  if(current.hasChildren()) {
   for(PDOutlineItem child : current.children()) {
    this.getBookmark(document, child, indentCount + 1);
   }
  }
  return indentCount;
 }
}
Result
POD® HD500 アドバンスド・ガイド[org.apache.pdfbox.pdmodel.PDPage@5910e440]
1 - 概要[null]
 ホーム・ビュー[null]
  チューナー・モード[null]
  タップ・テンポ[null]
  接続[null]
  POD HD500エディット・ソフトウエア[null]
 2 - システム･セットアップ[org.apache.pdfbox.pdmodel.PDPage@26a1ab54]
  システム・セットアップへアクセスする[org.apache.pdfbox.pdmodel.PDPage@26a1ab54]
  ページ 1、Setup：Utilities[org.apache.pdfbox.pdmodel.PDPage@3d646c37]
  ページ 2、Setup：Utilities[org.apache.pdfbox.pdmodel.PDPage@41cf53f9]

[...snip...]
Problem
I think PDNameTreeNode#getValue has problems.
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.java
    /**
     * The name to retrieve.
     *
     * @param name The name in the tree.
     * @return The value of the name in the tree.
     * @throws IOException If an there is a problem creating the destinations.
     */
    public T getValue( String name ) throws IOException
    {
        T retval = null;
        Map<String, T> names = getNames();
        if( names != null )
        {
            retval = names.get( name );
        }
        else
        {
            List<PDNameTreeNode<T>> kids = getKids();
            if (kids != null)
            {
                for( int i=0; i<kids.size() && retval == null; i++ )
                {
                    PDNameTreeNode<T> childNode = kids.get( i );
                    // [Problem] Cannot get retval.
                    // Because "kids" were not sorted by name
                    if( childNode.getLowerLimit().compareTo( name ) <= 0 &&
                        childNode.getUpperLimit().compareTo( name ) >= 0 )
                    {
                        retval = childNode.getValue( name );
                    }
                }
            }
            else
            {
                LOG.warn("NameTreeNode does not have \"names\" nor \"kids\" objects.");
            }
        }
        return retval;
    }",0,"Tilman Hausherr",kohdai,0,3,"25/Nov/16 00:40","25/Mar/17 18:12","25/Nov/16 16:39"
PDFBOX-3596,PDFBOX,"FDFDocument.loadXFDF not working",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.5, 3.0.0 PDFBox",PDModel,xfdf,,"I have attached sample files that I used for testing in the external issue URL.
I am trying to read in the values of each of the fields to create a font subset, however when I try to read the value of the fields, a blank line is returned. On closer inspection, the value stored in the field is a COSName object. When I set the value manually using field.setValue the value stored is a COSString object and it works correctly.
Also, when trying to save the xfdf, the values are omitted.
Expected:
Imported XFDF values are stored as COSString objects
saveXFDF correctly outputs values.",0,"Maruan Sahyoun","Matt Wise",1,5,"27/Nov/16 04:34","25/Mar/17 18:13","13/Mar/17 17:45"
PDFBOX-3599,PDFBOX,"Support 16 bit JPG2000 images",Improvement,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Rendering,"JPEG2000 JPXDecode J",,"This will improve page 13 of the ECI Altona 2.0 test suite.
http://www.eci.org/_media/downloads/altona_test_suite/eci_altona-test-suite-v2_technical2_one-patch-per-page_x4.pdf",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/Nov/16 17:09","25/Mar/17 18:12","28/Nov/16 17:14"
PDFBOX-3600,PDFBOX,"How to use Preflight component to get PDF's colorspace",Wish,CLOSED,Critical,Invalid,None,None,Preflight,None,,"I want to get a PDF's color property before sending it to Color-printer or Monochrome-Only printer in my program.
But I don't know how to implement this by Preflight component.
No samples can be found anywhere.",0,"Andreas Lehmkühler","Yan Bing",0,3,"29/Nov/16 04:22","29/Nov/16 07:41","29/Nov/16 06:57"
PDFBOX-3605,PDFBOX,"Infinite Read Loop in BufferedRandomAccesssFile",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",FontBox,None,,"When reading an input file using the BufferedRandomAccesssFile an infinite loop will occur once the buffer is drained and the value leftover becomes 0, since the read method will continue to return 0 as the -1 result from fillBuffer() is never propagated upstream and any code that is executing in a loop using -1 as an indicator that the file has been fully read will never exit.
An example of where this occurs can be found here:
https://github.com/apache/pdfbox/blob/782ac20dcea7b2e5bb6848f4da9a68c00b4d69a3/fontbox/src/main/java/org/apache/fontbox/ttf/TTFDataStream.java#L264",0,"Tilman Hausherr","Cameron Rollheiser",1,3,"29/Nov/16 16:49","25/Mar/17 18:13","29/Nov/16 18:16"
PDFBOX-3607,PDFBOX,"Font with name containing cache separator",Bug,CLOSED,Minor,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",PDModel,None,,"We came across this font http://www.myfontfree.com/def_writer___base_cyr-myfontfreecom126f65213.htm where the font name is Def Writer | BASE Cyr containing the separator used in the font cache and finally resulting in
java.lang.ExceptionInInitializerError
 at org.apache.pdfbox.pdmodel.font.FontMapperImpl.getProvider(FontMapperImpl.java:149)
 at org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFont(FontMapperImpl.java:413)
 at org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFontBoxFont(FontMapperImpl.java:376)
 at org.apache.pdfbox.pdmodel.font.FontMapperImpl.getFontBoxFont(FontMapperImpl.java:350)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:146)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<clinit>(PDType1Font.java:79)
 at org.apache.pdfbox.MyTest.test4(MyTest.java:87)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
 at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
 at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
 at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
 at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
 at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
 at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
 at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: java.lang.IllegalArgumentException: No enum constant org.apache.pdfbox.pdmodel.font.FontFormat.BASECyr
 at java.lang.Enum.valueOf(Enum.java:238)
 at org.apache.pdfbox.pdmodel.font.FontFormat.valueOf(FontFormat.java:1)
 at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.loadDiskCache(FileSystemFontProvider.java:406)
 at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.<init>(FileSystemFontProvider.java:217)
 at org.apache.pdfbox.pdmodel.font.FontMapperImpl$DefaultFontProvider.<clinit>(FontMapperImpl.java:130)
 ... 30 more",0,"Tilman Hausherr","Andrea Vacondio",0,3,"30/Nov/16 11:05","25/Mar/17 18:12","11/Dec/16 11:22"
PDFBOX-3608,PDFBOX,"byte/short tiff tags not read correctly",Bug,CLOSED,Minor,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",PDModel,None,,"All tag values (even byte/short) are currently read as a long value. That works fine as long as the value is padded with 0. Unfortunately, the very first file from production environment I tried to process with CCITTFactory failed, because short value was not padded with 0 (the complete tag data is 1201 0300 0100 0000 0100 3832 - little endian):
java.io.IOException: Orientation 842530817 is not supported
at org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory.extractFromTiff(CCITTFactory.java:392)
at org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory.createFromRandomAccessImpl(CCITTFactory.java:219)
at org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory.createFromFile(CCITTFactory.java:167)
at org.apache.pdfbox.pdmodel.graphics.image.CCITTFactoryTest.testCreateFromRandomAccessSingle(CCITTFactoryTest.java:66)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)",0,"Tilman Hausherr","Štěpán Schejbal",1,3,"30/Nov/16 13:08","25/Mar/17 18:12","30/Nov/16 21:53"
PDFBOX-3609,PDFBOX,"ClassCastException in PDCIDFont.readWidths()",Bug,CLOSED,Major,Fixed,"1.8.12, 2.0.3","1.8.13, 2.0.4, 3.0.0 PDFBox",PDModel,None,,"Caused by: java.lang.ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSNumber
    org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths(PDCIDFont.java:88)
    org.apache.pdfbox.pdmodel.font.PDCIDFont.<init>(PDCIDFont.java:65)
    org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:83)
    org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:70)
    org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont(PDFontFactory.java:125)
The cause is an indirect object in the width array.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"30/Nov/16 17:07","25/Mar/17 18:12","30/Nov/16 19:50"
PDFBOX-3610,PDFBOX,"ArrayIndexOutOfBoundsException in PDICCBased.loadICCProfile()",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",PDModel,None,,"Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 1
        at java.awt.color.ICC_ColorSpace.fromRGB(Unknown Source)
        at org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.loadICCProfile(PDICCBased.java:145)
        at org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.<init>(PDICCBased.java:89)
The line that triggers this is this new line
awtColorSpace.fromRGB(new float[3]);
According to the javadoc ArrayIndexOutOfBoundsException happens only if the input array is smaller than 3.... I'll just add ArrayIndexOutOfBoundsException to the catch list. Probably yet another JDK bug.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"30/Nov/16 19:55","25/Mar/17 18:13","30/Nov/16 20:08"
PDFBOX-3614,PDFBOX,"Directly use the BouncyCastleProvider rather than installing it",Improvement,CLOSED,Major,Fixed,2.0.3,"2.0.6, 3.0.0 PDFBox",None,None,,"The BouncyCastleProvider is in installed in a static block and this makes it available to other code, when the usage can be contained to a single class inside of PDFBox by using the provider directly.
Doing this also has the added advantage of not requiring additional security permissions when running code that is protected by a SecurityManager. Currently one needs to grant
permission java.security.SecurityPermission "insertProvider"
since the provider is being installed.",0,"Andreas Lehmkühler","Jay Modi",0,2,"01/Dec/16 14:07","15/May/17 20:28","05/May/17 10:16"
PDFBOX-3615,PDFBOX,"Multiply transparency not anti-aliased",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Rendering,None,,"Not sure if this is related to other transparency issues like PDFBOX-3000, but I noticed that certain elements were really jagged in my PDFs.
It looks like items with multiply transparency applied aren't anti-aliased.
I've attached an example PDF and resulting PNG from pdfbox-app-2.0.3.jar",0,"Tilman Hausherr","Jon Wu",0,3,"02/Dec/16 22:57","25/Mar/17 18:12","03/Dec/16 15:14"
PDFBOX-3618,PDFBOX,"Helvetica in PDF/A - warn in PDType1Font.java about licensing issues",Improvement,CLOSED,Minor,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",None,None,,"PDType1Font.java has a predefined list of fonts like Times-Roman, Helvetica, Courier, Symbol and ZapfDingbats.
When creating a pdf/A, the font is embedded and not taken from the reader's operating system.
As per https://de.wikipedia.org/wiki/Helvetica_(Schriftart) , this may lead to a licensing issue.
Suggestions:
1) Use a free font such as
https://de.wikipedia.org/wiki/Nimbus_Sans_L instead
2) at least warn in JavaDoc about the issue
Or is it an non-issue?",0,"Maruan Sahyoun","Ralf Hauser",0,5,"06/Dec/16 10:59","25/Mar/17 18:12","10/Dec/16 13:04"
PDFBOX-3619,PDFBOX,"TextStripper red bounds not shown correctly in rotated text",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Utilities,None,,"DrawPrintTextLocations draws the red bounds of rotated texts in at the wrong place. This can be seen with PDFBOX-3616.pdf and PDFJS-1710-p1.pdf .",0,"Tilman Hausherr","Tilman Hausherr",0,2,"06/Dec/16 17:47","25/Mar/17 18:13","06/Dec/16 17:53"
PDFBOX-3622,PDFBOX,"DCTDecode image with separation colorspace not rendered correctly",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.4, 3.0.0 PDFBox",Rendering,"LabColorspace Separa",,"PDF reported by Ford Wang in the mailing list. The "herbs" have weird purple dots. The cause are DCTDecode (jpeg) images with a separation colorspace, e.g. Root/Pages/Kids/[0]/Resources/XObject/Im5267 . The image itself is a grayscale image, i.e. it has only one color component. The separation colorspace is a green (PANTONE 355 C), which is based on an Lab colorspace.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Dec/16 18:17","20/Apr/17 16:12","09/Dec/16 16:49"
PDFBOX-3625,PDFBOX,"Use correct file encoding when saving fdf data",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.3, 3.0.0 PDFBox","1.8.14, 2.0.4, 3.0.0 PDFBox",Writing,None,,"When FDF data is saved the resulting xml file defines UTF-8 as encoding but the file itself is saved using the default file encoding which isn't necessarily UTF-8",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"11/Dec/16 11:13","25/Mar/17 18:13","11/Dec/16 11:22"
PDFBOX-3626,PDFBOX,"StackOverflowException on a valid PDF",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.5, 3.0.0 PDFBox",Parsing,None,"windows 7, jvm","On the attached document, which opens fine in Acrobat, PDDocument,load() throws a StackOverflowException:
Exception in thread "main" java.lang.StackOverflowError
at sun.nio.cs.UTF_8$Decoder.decodeLoop(UTF_8.java:412)
at java.nio.charset.CharsetDecoder.decode(CharsetDecoder.java:579)
at java.nio.charset.CharsetDecoder.decode(CharsetDecoder.java:802)
at org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8(BaseParser.java:805)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSName(BaseParser.java:785)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:905)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:153)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair(BaseParser.java:277)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:210)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:885)
at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:772)
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:741)
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:672)
at org.apache.pdfbox.pdfparser.COSParser.getLength(COSParser.java:897)
at org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:949)
at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:780)
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:741)
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:672)
...",0,"Andreas Lehmkühler","Seva Alekseyev",0,4,"13/Dec/16 16:02","25/Mar/17 18:12","12/Feb/17 16:04"
PDFBOX-3627,PDFBOX,""/Prev loop at offset 77418" on a valid document",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.5, 3.0.0 PDFBox",Parsing,None,"windows 7, jvm","On the attached document, which opens fine with Word, the PDDocument.load() is throwing an error:
java.io.IOException: /Prev loop at offset 77418
at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:320)
at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:194)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:252)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:966)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:922)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:870)",0,"Andreas Lehmkühler","Seva Alekseyev",7,5,"13/Dec/16 16:55","25/Mar/17 18:13","22/Jan/17 15:33"
PDFBOX-3631,PDFBOX,"Signature interoperability issue / visible signature not visible on some viewers",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.10, 3.0.0 PDFBox",Signing,None,"java 1.8, windows","Some files if signed with PDFBox produce not visible signature in chrome, pdfium foxit.
If the same file is signed on some Actobat, Foxit or itext the signature is visible.
The test fle are inserted in an encrypted zip. If possible I would like to communicate the password with a private message.",0,"Tilman Hausherr","Marco Monacelli",8,10,"14/Dec/16 14:29","21/Jun/18 20:27","12/Apr/18 16:58"
PDFBOX-3634,PDFBOX,"getSuffix() returns null for JBIG2",Bug,CLOSED,Minor,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",None,None,,"When parsing PDFs (by way of Tika) and the Levigo JBIG2 image reader is installed, the following warnings are logged many times over:
Dec 18, 2016 5:26:16 PM org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject getSuffix
WARNING: getSuffix() returns null, filters: COSArrayList{COSArray{[COSName{JBIG2Decode}]}}",0,"Tilman Hausherr","Matthew Caruana Galizia",0,3,"18/Dec/16 17:37","25/Mar/17 18:12","19/Dec/16 13:56"
PDFBOX-3635,PDFBOX,"Remove workaround to avoid SSLHandshakeException",Improvement,CLOSED,Major,Fixed,"1.8.13, 2.0.4, 3.0.0 PDFBox","1.8.14, 2.0.5, 3.0.0 PDFBox",None,None,,"Remove workaround from PDFBOX-3532 as pdfa.org renews the SSL-certificate",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"18/Dec/16 18:18","25/Mar/17 18:12","18/Dec/16 18:32"
PDFBOX-3638,PDFBOX,"NullPointerException when setting form field value",Bug,CLOSED,Major,Fixed,"2.0.3, 2.0.4","2.0.5, 3.0.0 PDFBox",AcroForm,None,,"Hi,
I am not able to fill out form fields using 2.0.3 or 2.0.4.
When calling field.setValue("value") I get a NullPointerException.
Code:
PDDocument doc = PDDocument.load(new File("input.pdf"));
PDAcroForm form = doc.getDocumentCatalog().getAcroForm();
form.getField("firstname").setValue("name");
form.flatten();
doc.save("output.pdf");
Stacktrace:
Exception in thread "main" java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.PDPageContentStream.getName(PDPageContentStream.java:964)
 at org.apache.pdfbox.pdmodel.PDPageContentStream.setNonStrokingColor(PDPageContentStream.java:1172)
 at org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.initializeAppearanceContent(AppearanceGeneratorHelper.java:211)
 at org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.setAppearanceValue(AppearanceGeneratorHelper.java:167)
 at org.apache.pdfbox.pdmodel.interactive.form.PDTextField.constructAppearances(PDTextField.java:263)
 at org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField.applyChange(PDTerminalField.java:228)
 at org.apache.pdfbox.pdmodel.interactive.form.PDTextField.setValue(PDTextField.java:218)
The private property PDResources resources is null.
If I set form.setNeedAppearances(true); before setting the value, the NullPointerException is gone. But then form.flatten() does break something, all form fields are empty in the resulting pdf.
Maybe this is an issue with our pdf. The same code works using version 2.0.2, but there I suffer from the black border issue (see 3454)
I attached the pdf and a screenshot with some infos from the PDFDebugger tool as requested.
Thanks in advance.",0,"Tilman Hausherr","Tilman Ginzel",0,3,"20/Dec/16 12:45","25/Mar/17 18:12","20/Dec/16 21:01"
PDFBOX-3639,PDFBOX,"FDF does not parse: Missing root object specification in trailer.",Bug,CLOSED,Minor,Fixed,2.0.6,"2.0.8, 3.0.0 PDFBox",Parsing,regression,"java 1.8","FDF file generated with IText does not parse with PDFBox FDFParser
FDFParser parser = new FDFParser(new FileInputStream("D:/dev/failsfdf.fdf"));
parser.parse();
java.io.IOException: Missing root object specification in trailer.
at org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically(COSParser.java:2121)
Content of FDF file:
%FDF-1.4
%âãÏÓ
1 0 obj
<</FDF<</Fields[<</T(ELD Goal2)/V()>><</T(ELD Goal3)/V()>><</T(ELD Goal1)/V()>><</Kids[<</T(modifications:3)/V()>><</T(level)/V(Early Advanced)>><</T(variations:1)/V(Test in small group)>><</T(accommodations:3)/V(Test over more than one day)>><</T(variations:3)/V()>><</T(variations:2)/V()>><</T(accommodations:1)/V(Administer at time most beneficial to student)>><</T(accommodations:2)/V(Supervised breaks within a section of the test)>><</T(modifications:2)/V()>><</T(modifications:1)/V()>>]/T(EL_Listening)>><</T(Alt Ed Levels)/V( )>><</Kids[<</T(modifications:3)/V()>><</T(level)/V(Early Advanced)>><</T(variations:1)/V(Test in small group)>><</T(accommodations:3)/V(Test over more than one day)>><</T(variations:3)/V()>><</T(variations:2)/V()>><</T(accommodations:1)/V(Administer at time most beneficial to student)>><</T(accommodations:2)/V(Supervised breaks within a section of the test)>><</T(modifications:2)/V()>><</T(modifications:1)/V()>>]/T(EL_Speaking)>><</T(ELD Location)/V(General education class)>><</T(Meeting Date)/V(9/10/2013)>><</T(ELD Services)/V/SEI>><</T(ELD Strategies4)/V( )>><</T(ELD Strategies2)/V(Think/pair/share)>><</T(_NATIV_LANG1)/V(Spanish)>><</T(ELD Strategies3)/V(Modeling & visualizing)>><</T(ELD Frequency)/V(day)>><</T(ELD Strategies1)/V(Graphic organizers or study guides)>><</T(BIRTHDATE)/V(8/30/2001)>><</T(_NATIV_LANG2)/V(Spanish)>><</Kids[<</T(modifications:3)/V()>><</T(level)/V(Beginning)>><</T(variations:1)/V(Test in small group)>><</T(variations:3)/V()>><</T(accommodations:3)/V(Test over more than one day)>><</T(variations:2)/V()>><</T(accommodations:1)/V(Administer at time most beneficial to student)>><</T(accommodations:2)/V(Supervised breaks within a section of the test)>><</T(modifications:2)/V()>><</T(modifications:1)/V()>>]/T(EL_Reading)>><</Kids[<</T(modifications:3)/V()>><</T(level)/V(Early Intermediate)>><</T(variations:1)/V(Test in small group)>><</T(accommodations:3)/V(Test over more than one day)>><</T(variations:3)/V()>><</T(variations:2)/V()>><</T(accommodations:1)/V(Administer at time most beneficial to student)>><</T(accommodations:2)/V(Supervised breaks within a section of the test)>><</T(modifications:2)/V()>><</T(modifications:1)/V()>>]/T(EL_Writing)>><</T(SELPA Header)/V(LA County Charter)>><</T(NATIV_LANG)/V(Spanish)>><</T(ELD Location minutes)/V()>><</T(Assmt Instrument)/V(CELDT)>><</Kids[<</T(level)/V(Early Intermediate)>>]/T(EL_Overall)>><</T(EL CELDT Overall Date)/V()>>]>>>>
endobj
trailer
<</Root 1 0 R>>
%%EOF",0,"Tilman Hausherr","Joe Masinter",1,3,"20/Dec/16 18:33","02/Nov/17 21:01","21/Jul/17 18:10"
PDFBOX-3640,PDFBOX,"java.awt.geom.NoninvertibleTransformException: Determinant is -0.0",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",None,shading,,"I have this error trying to parse a specific PDF file:
o.a.p.p.g.s.AxialShadingContext [AxialShadingContext.java:115] ERROR - java.awt.geom.NoninvertibleTransformException: Determinant is -0.0
 java.awt.geom.NoninvertibleTransformException: Determinant is -0.0
        at java.awt.geom.AffineTransform.createInverse(AffineTransform.java:2668)
        at org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingContext.<init>(AxialShadingContext.java:110)
        at org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingPaint.createContext(AxialShadingPaint.java:67)
        at sun.java2d.pipe.AlphaPaintPipe.startSequence(AlphaPaintPipe.java:84)
        at sun.java2d.pipe.AAShapePipe.renderTiles(AAShapePipe.java:168)
        at sun.java2d.pipe.AAShapePipe.renderPath(AAShapePipe.java:159)
        at sun.java2d.pipe.AAShapePipe.fill(AAShapePipe.java:68)
        at sun.java2d.pipe.PixelToParallelogramConverter.fill(PixelToParallelogramConverter.java:164)
        at sun.java2d.pipe.ValidatePipe.fill(ValidatePipe.java:160)
        at sun.java2d.SunGraphics2D.fill(SunGraphics2D.java:2527)
        at org.apache.pdfbox.rendering.PageDrawer.shadingFill(PageDrawer.java:921)
        at org.apache.pdfbox.contentstream.operator.graphics.ShadingFill.process(ShadingFill.java:41)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
        at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:189)
        at org.apache.pdfbox.rendering.PDFRenderer.renderPage(PDFRenderer.java:208)
        at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:139)",0,"Tilman Hausherr","Marco Silva",0,3,"27/Dec/16 15:14","25/Mar/17 18:13","28/Dec/16 12:25"
PDFBOX-3641,PDFBOX,"ICC_ColorSpace usage is not thread safe",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Rendering,None,,"Unfortunately ICC_ColorSpace is not thread safe. Even creating Color instances and passing an ICC_ColorSpace can't be considered thread safe. All color conversion calls lazy initialize a value without a memory barrier: https://github.com/openjdk-mirror/jdk/blob/jdk8u/jdk8u/master/src/share/classes/java/awt/color/ICC_ColorSpace.java#L172 . This seems like a bug in Java, but PDFBox triggers it
PDFBox seems to attempt to initialize colorspaces/colors in a thread-safe way around https://github.com/apache/pdfbox/blob/f419d203ebebc4deb83ba71ef0a0e6bb1ff22c5a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java#L146 , but calls to toRGB/fromRGB aren't synchronized. I think calling all 4 (to/from)(CIEXYZ/RGB) in a locked block should initialize the instances enough to be thread safe.
The symptoms of this problem look like this (exception formatting due to clojure):
                     org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI               PDFRenderer.java:   94
                            org.apache.pdfbox.rendering.PDFRenderer.renderImage               PDFRenderer.java:  145
                                org.apache.pdfbox.rendering.PageDrawer.drawPage                PageDrawer.java:  189
                    org.apache.pdfbox.contentstream.PDFStreamEngine.processPage           PDFStreamEngine.java:  149
                  org.apache.pdfbox.contentstream.PDFStreamEngine.processStream           PDFStreamEngine.java:  446
         org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators           PDFStreamEngine.java:  472
                org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator           PDFStreamEngine.java:  815
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorSpace.process  SetNonStrokingColorSpace.java:   41
                            org.apache.pdfbox.pdmodel.PDResources.getColorSpace               PDResources.java:  166
                            org.apache.pdfbox.pdmodel.PDResources.getColorSpace               PDResources.java:  196
                   org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create              PDColorSpace.java:  182
                     org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.<init>                PDICCBased.java:   89
             org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.loadICCProfile                PDICCBased.java:  145
                                                          java.awt.Color.<init>                     Color.java:  542
                                            java.awt.color.ICC_ColorSpace.toRGB            ICC_ColorSpace.java:  179
java.lang.NullPointerException:",0,"Tilman Hausherr","Mike Kaplinskiy",1,3,"28/Dec/16 22:32","16/Apr/19 17:12","05/Mar/17 08:46"
PDFBOX-3642,PDFBOX,"java.lang.ClassCastException is thrown when flattening form with a picture",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",AcroForm,None,,"Without picture in the form flattening works ok. With picture the following exception is thrown:
Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject cannot be cast to org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject
at org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm.resolveNeedsTranslation(PDAcroForm.java:726)
at org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm.flatten(PDAcroForm.java:276)
at org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm.flatten(PDAcroForm.java:192)
at test.FlattenIssue.main(FlattenIssue.java:27)
Attaching source PDF form (generated in open office).",0,"Maruan Sahyoun",rumburak,0,3,"29/Dec/16 10:05","25/Mar/17 18:12","25/Jan/17 17:05"
PDFBOX-3644,PDFBOX,"PrintURLs example doesn't detect all URLs",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",PDModel,Annotations,,"In the attached file, URLs are not in link annotations but as action in a widget annotation. To catch these too, reflection is used.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"06/Jan/17 21:55","25/Mar/17 18:12","06/Jan/17 22:07"
PDFBOX-3646,PDFBOX,"Annotations parsed from XFDF containing ampersand characters are not properly imported",Bug,CLOSED,Major,Fixed,"2.0.3, 2.0.4, 2.0.5, 2.0.6","2.0.13, 3.0.0 PDFBox","AcroForm, PDModel",xfdf,"java 1.8","Annotations containing "&" in their text are displayed incorrectly when parsed unmodified from XFDF (the ampersands are encoded as "&" there) and added to a PDF document.
This occurs for both "text comment" and "text box" type annotations.
However, if the XFDF is modified by replacing "&" with "&amp;" prior to parsing, the imported annotations are then displayed correctly.
The attached code produces two pdf files. One is the PDF with the unmodified XFDF imported, two the PDF with the modifed XFDF.
A XFDF containing both a text box and text comment annotation is embedded in the source and attached as a separated file.
Update 23.03.2017 : This problem persists in 2.0.5 and we noticed the same corruption of merged annotations occur, if the annotation text contains a "<" (encoded as "lt" entity)
Update 17.10.2018 : This corruption is caused by FDFAnnotation.richContentsToString. This method reads "<" and "&" from the parsed values in the document and puts them as such into the markup, but these characters must be replaced with their entities.
I'll add this substitution to my proposed bugfix of 4345, please refer to https://issues.apache.org/jira/projects/PDFBOX/issues/PDFBOX-4345",0,"Tilman Hausherr","Kai Keggenhoff",1,4,"09/Jan/17 10:46","02/Dec/18 17:06","20/Oct/18 13:07"
PDFBOX-3647,PDFBOX,"Shading cut off",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.4","2.0.5, 3.0.0 PDFBox",Rendering,shading,,"The attached file is reduced from file "***417" that I mentioned in PDFBOX-3000. The shading is all black (type 0 function that is all black). It is cut off in rendering by PDFBox. This is somehow related to the BBox and to the cm operation before the sh. Changing them changes the cutoff.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Jan/17 22:35","25/Mar/17 18:12","10/Jan/17 20:10"
PDFBOX-3648,PDFBOX,"EOFException parsing PDFs with invalid xref offsets",Bug,CLOSED,Minor,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Parsing,None,,"ScratchFileBuffer does not allow seeking past the end of file. If the xref table claims an object offset past the end of file an IOException is incorrectly thrown.
COSParser.checkObjectKeys() seeks to the offset claimed in the xref table and looks for a valid object number and generation number there.
If there is an IOException while trying to READ in COSParser.checkObjectKeys(), the exception is caught and the parser falls back to brute force searching for objects offsets.
The problem is that IOExceptions are not caught when attempting to SEEK to the offset claimed in the xref table. Solution: move the seek operation inside the try {} block.",0,"Andreas Lehmkühler","Jesse Long",0,3,"10/Jan/17 02:47","25/Mar/17 18:13","10/Jan/17 18:32"
PDFBOX-3652,PDFBOX,"PDFMergerUtility: The source outline of merged PDF can be end up inside deep sub-outline if destination outline contain sub-outline",Improvement,CLOSED,Minor,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Utilities,"patch pdfmergerutili",,"The source outline of merged PDF can be end up inside deep sub-outline if destination outline contain sub-outline.
The patch propose to change this behavior that merged source outline will always at the root of destination outline.",0,"Tilman Hausherr","Christian Hadi",0,4,"17/Jan/17 08:52","19/Apr/17 16:17","19/Jan/17 16:33"
PDFBOX-3653,PDFBOX,"NegativeArraySizeException thrown when converting PDF to Image (in TilingPaint.java)",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",None,None,,"Specifically page 7 of the PDF document is failing.
PDF Document:
http://download.win2pdf.com/samples/PowerPoint-slides.pdf
(also attached to ticket)
Stack trace:
Exception in thread "main" java.lang.NegativeArraySizeException
at java.awt.image.DataBufferByte.<init>(DataBufferByte.java:76)
at java.awt.image.Raster.createInterleavedRaster(Raster.java:266)
at java.awt.image.Raster.createInterleavedRaster(Raster.java:212)
at java.awt.image.ComponentColorModel.createCompatibleWritableRaster(ComponentColorModel.java:2825)
at org.apache.pdfbox.rendering.TilingPaint.getImage(TilingPaint.java:134)
at org.apache.pdfbox.rendering.TilingPaint.<init>(TilingPaint.java:69)
at org.apache.pdfbox.rendering.PageDrawer.getPaint(PageDrawer.java:251)
at org.apache.pdfbox.rendering.PageDrawer.getNonStrokingPaint(PageDrawer.java:526)
at org.apache.pdfbox.rendering.PageDrawer.fillPath(PageDrawer.java:597)
at org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddRule.process(FillEvenOddRule.java:36)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:829)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:486)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:460)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:189)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:94)
at org.apache.pdfbox.tools.PDFToImage.main(PDFToImage.java:236)
at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:94)",0,"Tilman Hausherr","Emily Coyne",0,3,"18/Jan/17 14:57","30/Jun/17 16:17","24/Jan/17 17:05"
PDFBOX-3654,PDFBOX,"Parse error reading embedded Type1 font",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",FontBox,"type1 type1font","freebsd, java 1.8, scala","Attached file works with Acrobat Reader, mupdf, pdftk, and so on.
When using pdfbox to render first page to an image:
16:01:13.042 [run-main-0] WARN o.a.pdfbox.pdmodel.font.PDType1Font - Using fallback font ArialMT for Frutiger
16:01:13.047 [run-main-0] WARN o.a.pdfbox.pdmodel.font.PDType1Font - Using fallback font Arial-BoldMT for Frutiger45,Bold
16:01:13.168 [run-main-0] ERROR o.a.pdfbox.pdmodel.font.PDType1Font - Can't read the embedded Type1 font KIX-Barcode-Regular
java.io.IOException: unexpected closing parenthesis
at org.apache.fontbox.type1.Type1Lexer.readToken(Type1Lexer.java:123)
at org.apache.fontbox.type1.Type1Lexer.nextToken(Type1Lexer.java:75)
at org.apache.fontbox.type1.Type1Parser.parseBinary(Type1Parser.java:468)
at org.apache.fontbox.type1.Type1Parser.parse(Type1Parser.java:64)
at org.apache.fontbox.type1.Type1Font.createWithSegments(Type1Font.java:85)
at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:262)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:829)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:486)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:460)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:189)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)
To reproduce (Scala, sorry, but straightforward to reproduce):
val doc = new PDDocument.load(...)
val renderer = new PDFRenderer(doc)
val img = renderer.renderImage(0, 1.0f)",0,"Tilman Hausherr","Dennis Noordsij",0,3,"18/Jan/17 15:31","25/Mar/17 18:13","19/Jan/17 05:44"
PDFBOX-3656,PDFBOX,"Problem when setting COSName.Off on radio button",Bug,CLOSED,Major,Fixed,"2.0.3, 2.0.4","2.0.5, 3.0.0 PDFBox",AcroForm,None,,"The following error occurs when trying to set the radio button to COSName.Off when the field contains /Opt values:
ERROR (PDFDocument.java:98) - Error populating form us/gov/opm/SF2817
java.lang.ArrayIndexOutOfBoundsException: -1
 at java.util.ArrayList.elementData(ArrayList.java:418) ~[na:1.8.0_45]
 at java.util.ArrayList.get(ArrayList.java:431) ~[na:1.8.0_45]
 at org.apache.pdfbox.pdmodel.common.COSArrayList.get(COSArrayList.java:544) ~[pdfbox-2.0.3.jar:2.0.3]
 at org.apache.pdfbox.pdmodel.interactive.form.PDButton.constructAppearances(PDButton.java:275) ~[pdfbox-2.0.3.jar:2.0.3]
 at org.apache.pdfbox.pdmodel.interactive.form.PDTerminalField.applyChange(PDTerminalField.java:228) ~[pdfbox-2.0.3.jar:2.0.3]
 at org.apache.pdfbox.pdmodel.interactive.form.PDButton.setValue(PDButton.java:167) ~[pdfbox-2.0.3.jar:2.0.3]
the code that triggers the error is:
field.setValue(COSName.Off.getName());",0,"Maruan Sahyoun","Scott Coldwell",0,4,"18/Jan/17 19:13","25/Mar/17 18:13","13/Feb/17 05:37"
PDFBOX-3657,PDFBOX,"Image rendering fails (1 bit per component image)",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Rendering,None,"windows 10","I'm trying to extract an image from a pdf. But somehow PDFBox makes a mess with the image components. I've attached the PDF page and the output image (Converted with PDFBox-PDFToImage 2.0.4) Perhaps there is a bug in the SampledImageReader?",0,"Tilman Hausherr","Ch. Schlatter",1,3,"19/Jan/17 11:48","25/Mar/17 18:12","19/Jan/17 16:21"
PDFBOX-3659,PDFBOX,"Can't create text with PDFType1Font.ZAPF_DINGBATS or PDFType1Font.SYMBOL without installed fonts",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",PDModel,None,,"On a system with no fonts, it is not possible to create PDF files that use the Standard 14 Symbol and Zapf Dingbats fonts. The current code tries to look at the generic fallback font (LiberationSans), which of course doesn't have these characters so an exception is thrown. But this lookup isn't needed - we have all the metrics needed for the standard 14 fonts and don't need any actual font.
Solution: change PDType1Font.encode() so that it doesn't use the generic font for standard 14 fonts.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Jan/17 07:28","25/Mar/17 18:12","21/Jan/17 14:44"
PDFBOX-3660,PDFBOX,"Handling of invalid annotation border",Improvement,CLOSED,Minor,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Rendering,None,,"We came across a doc where a link annotation border was set to an array of one element [0], maybe PDAnnotation::getBorder should check the array instance has a valid size too.
java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.IndexOutOfBoundsException: Index: 2, Size: 1
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.done(PagePane.java:258)
    sun.swing.AccumulativeRunnable.run(AccumulativeRunnable.java:112)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)
Caused by: java.util.concurrent.ExecutionException: java.lang.IndexOutOfBoundsException: Index: 2, Size: 1
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.done(PagePane.java:247)
    sun.swing.AccumulativeRunnable.run(AccumulativeRunnable.java:112)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)
Caused by: java.lang.IndexOutOfBoundsException: Index: 2, Size: 1
    java.util.ArrayList.rangeCheck(ArrayList.java:653)
    java.util.ArrayList.get(ArrayList.java:429)
    org.apache.pdfbox.cos.COSArray.get(COSArray.java:210)
    org.apache.pdfbox.rendering.PageDrawer.getAnnotationBorder(PageDrawer.java:1110)
    org.apache.pdfbox.rendering.PageDrawer.drawAnnotationLinkBorder(PageDrawer.java:1162)
    org.apache.pdfbox.rendering.PageDrawer.showAnnotation(PageDrawer.java:1083)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:198)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:236)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:1)
    java.lang.Thread.run(Thread.java:745)",0,"Tilman Hausherr","Andrea Vacondio",0,3,"22/Jan/17 10:53","25/Mar/17 18:13","22/Jan/17 12:40"
PDFBOX-3661,PDFBOX,"Problem With Malformed xref",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Parsing,None,"windows 10, jvm","Some files generated with unknown software. Generated malformed xref table, this instead of being well-formed with the correct EOL is in one line.
Other readers correctly read the file, and sign it.
PDFBox instead give Exception for malformed xref.
I tried created a patch that allows you to read the above mentioned file. Because the original file is private I proceeded to recreate one the patch works with both.",0,"Andreas Lehmkühler","Marco Monacelli",5,6,"23/Jan/17 08:51","25/Mar/17 18:13","07/Feb/17 10:44"
PDFBOX-3662,PDFBOX,"Regression on this file as a result of PDFBOX-3446 fix",Bug,CLOSED,Major,Fixed,2.0.4,2.0.5,Parsing,None,,"This file was parsed correctly in old versions, both 1.8.* and 2.0.2
In 2.0.4 parsing gets an Exception
at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:320)
org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:194)
which is apparently due to the change for PDFBOX-3446.
This file clearly has something amiss, re-saving it from Acrobat makes the problem go away. But it was working fine in the older versions. FWIW the file was redacted by an unknown PDF editor in January 2015.",0,"Andreas Lehmkühler","Joel Hirsh",0,3,"25/Jan/17 16:55","17/Mar/17 17:44","06/Mar/17 20:38"
PDFBOX-3663,PDFBOX,"NullPointerException when signing a PDF with AcroForm and no fields",Bug,CLOSED,Major,Fixed,"2.0.4, 3.0.0 PDFBox","2.0.5, 3.0.0 PDFBox",AcroForm,None,,"This is related to PDFBOX-1719. The workaround made there calls PDAcroForm.setFields with an empty list when the acro form has no fields:
PDDocument.java (Line 286)
List<PDField> fields = acroForm.getFields();
if (fields == null)
{
    fields = new ArrayList<PDField>();
    acroForm.setFields(fields);
}
else
{
    COSArray fieldArray = (COSArray) acroForm.getCOSObject().getDictionaryObject(COSName.FIELDS);
    fieldArray.setNeedToBeUpdated(true);
}
This doesn't work anymore because PDAcroFrom.getFields never returns null in the current version, instead it returns an empty list and a NPE raises in line 295.
The source of the problem seems to be that the PDAcroForm's dictionary's COSName.FIELDS field contains null instead of an empty array. An empty array is implicitly created when calling PDAcroForm.setFields with an empty list. The PDAcroForm(PDDocument) constructor also sets an empty COSArray for the field. You could also do this in the second constrcutor, that would fix the error:
PDAcroForm.java
public PDAcroForm(PDDocument doc, COSDictionary form)
{
    document = doc;
    dictionary = form;
    if (dictionary.getItem(COSName.FIELDS) == null)
    {
      dictionary.setItem(COSName.FIELDS, new COSArray());
    }
}",0,"Tilman Hausherr","Moritz Orth",1,3,"26/Jan/17 13:58","25/Mar/17 18:12","30/Jan/17 08:36"
PDFBOX-3664,PDFBOX,"Iterate on all acroform fields, not just on root fields for signing",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.4","2.0.5, 3.0.0 PDFBox","AcroForm, Signing",None,,"In PDDocument findSignatureField() and checkSignatureField() use only the root level fields. Using iterator allows to go through all fields.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/Jan/17 14:18","25/Mar/17 18:12","28/Jan/17 14:23"
PDFBOX-3665,PDFBOX,"PDFBox text and images are blurry on HiDPI display",Bug,CLOSED,Minor,Fixed,"2.0.4, 3.0.0 PDFBox","2.0.5, 3.0.0 PDFBox","Rendering, Utilities",jdk9,"windows 8","See the JDK issue https://bugs.openjdk.java.net/browse/JDK-8169976
The same problem can also be seen with the Apache PDFBOX debugger-app-2.0.3.jar (get it at https://pdfbox.apache.org/download.cgi ), run
java -jar pdfbox-app-2.0.3.jar PDFReader <pdf filename>
The application frame is larger than in jdk8. Displaying a PDF (you can drag a file or open it in the menu) shows the same weird effects with glyphs.",0,"Tilman Hausherr",Alexander,1,3,"30/Jan/17 07:49","28/Apr/18 05:43","02/Feb/17 21:29"
PDFBOX-3668,PDFBOX,"COSParser can't detect length of stream and then PDFRenderer does not render pages at some files",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Parsing,None,"java 1.8","I have a lot of files when PDF Box can't render pages to PNG files.
Example with one of these files in attachement.
In result I have console log:
jan 30, 2017 4:45:07 PM org.apache.pdfbox.pdfparser.COSParser parseCOSStream
WARNING: The stream doesn't provide any stream length, using fallback readUntilEnd, at offset 764
jan 30, 2017 4:45:07 PM org.apache.pdfbox.pdfparser.COSParser parseCOSStream
WARNING: The stream doesn't provide any stream length, using fallback readUntilEnd, at offset 519350
jan 30, 2017 4:45:08 PM org.apache.pdfbox.contentstream.PDFStreamEngine operatorException
WARNING: Image stream is empty
jan 30, 2017 4:45:08 PM org.apache.pdfbox.contentstream.PDFStreamEngine operatorException
WARNING: Image stream is empty

Process finished with exit code 0
And white pages as result of rendering.",0,"Tilman Hausherr","Vitaliy Parfenov",1,5,"30/Jan/17 11:58","08/Jun/17 17:57","30/Jan/17 20:02"
PDFBOX-3669,PDFBOX,"PDPageContentStream: Add setMiterLimit()","New Feature",CLOSED,Minor,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Writing,None,,"Currently PDPageContentStream has no method to set the miter limit. At the moment one has to resort to
contentStream.appendRawCommands(11f + " M ");
as workaround. But appendRawCommand() is deprecated, so there should be a official method to do so:
    /**
     * Set the miter limit.
     *
     * @param miterLimit the new miter limit.
     * @throws IOException If the content stream could not be written.
     */ 
    public void setMiterLimit(float miterLimit) throws IOException
    {
        if (inTextMode)
        {
            throw new IllegalStateException("Error: setMiterLimit is not allowed within a text block.");
        }
        writeOperand(miterLimit);
        writeOperator("M");
    }
Please add this method to PDPageContentStream. Thank you.",0,"Tilman Hausherr","Emmeran Seehuber",1,3,"30/Jan/17 12:04","29/Oct/17 12:02","30/Jan/17 19:43"
PDFBOX-3671,PDFBOX,"Adjust signature field for rotated pages",Sub-task,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Signing,None,,"As requested on stackoverflow and on the users mailing list - adjust signature field for pages with a /Rotate entry.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"31/Jan/17 20:25","25/Mar/17 18:12","02/Feb/17 08:27"
PDFBOX-3672,PDFBOX,"Exception on font PDType1Font.ZAPF_DINGBATS",Bug,CLOSED,Major,Fixed,"2.0.4, 3.0.0 PDFBox","2.0.5, 3.0.0 PDFBox",PDModel,None,,"Hi
I am getting this exception using snapshot pdfbox-2.1.0-20170131.210242-692.jar and fontbox-2.1.0-20170131.215925-709.jar
Debugging PDType1Font.java, the unicode value passed to method "protected byte[] encode(int unicode) throws IOException" was 84
and the call to method "encode(int unicode)" was triggered from font.getStringWidth(...) when font was PDType1Font.ZAPF_DINGBATS
java.lang.IllegalArgumentException: U+0054 ('.notdef') is not available in this font ZapfDingbats (generic: MS-Gothic) encoding: ZapfDingbatsEncoding
at org.apache.pdfbox.pdmodel.font.PDType1Font.encode(PDType1Font.java:409)
at org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:316)
at org.apache.pdfbox.pdmodel.font.PDFont.getStringWidth(PDFont.java:345)",0,"Tilman Hausherr","Said Herzallah",0,3,"31/Jan/17 23:58","25/Mar/17 18:12","02/Feb/17 06:21"
PDFBOX-3673,PDFBOX,"Filled form fields appear gray instead of black after flatten",Bug,CLOSED,Major,Fixed,"2.0.3, 2.0.4, 2.0.5, (1)","2.0.5, 3.0.0 PDFBox",AcroForm,None,,"Hi,
I'm facing the following issue: When filling out an acrobat form and flattening it, the text color in the resulting pdf is gray instead of black.
I attached the input.pdf and several output files for different pdfbox versions. Using pdfbox 2.0.2, I get the expected result with black text, as from version >=2.0.3 the text is gray.
Code:
public static void main(String[] args) throws IOException {
    PDDocument doc = PDDocument.load(new File("input.pdf"));
    PDAcroForm form = doc.getDocumentCatalog().getAcroForm();
    form.getField("Text1").setValue("value");
    form.getField("Text2").setValue("value");
    form.getField("Text3").setValue("value");
    form.flatten();
    doc.save("output.pdf");
}
The default appearance for every text field is set to something like /Helv 0 Tf 0 g. Our current workaround is to replace 0 g with 0 0 0 rg. But in my understanding, they both should yield the same result.
Thanks in advance.",0,"Maruan Sahyoun","Tilman Ginzel",1,4,"01/Feb/17 11:59","25/Mar/17 18:13","06/Mar/17 16:51"
PDFBOX-3675,PDFBOX,"PreflightParser can only use main mem for scratch",Improvement,CLOSED,Minor,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Preflight,None,,"PreflightParser has no constructors which allow the user to specify what ScratchFile is to be used. It always defaults to using ScratchFile.getMainMemoryOnlyInstance() via the PDFParser constructors it calls.",0,"Tilman Hausherr","Viktor Ivanov",1,3,"02/Feb/17 07:20","25/Mar/17 18:12","02/Feb/17 19:32"
PDFBOX-3676,PDFBOX,"Bad glyph rendering of type 1 font",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox","FontBox, Rendering","type1 type1font",,"Bad glyph rendering for attached PDF file",0,"Tilman Hausherr","Tilman Hausherr",0,2,"04/Feb/17 13:44","25/Mar/17 18:12","04/Feb/17 19:50"
PDFBOX-3677,PDFBOX,"NullPointerException in Type1Parser.read",Bug,CLOSED,Major,Fixed,"2.0.3, 2.0.4","2.0.5, 3.0.0 PDFBox",FontBox,"type1 type1font","windows 10, java 1.8","Text extraction from certain PDFs is not possible and PDF Box responses with NullPointerException. Text extraction from same PDF with version 1.8.13 is working.
Originally the issue was discovered while using the newest Apache Tika 1.14 library. I can not down-grade to PDF Box 1.8.13 with Apache Tika 1.14.
Unfortunately I can not provide the PDFs that fail to you. However, I did some testing and found out that “Token token = lexer.nextToken();” return Null.
Feb 07, 2017 12:17:40 PM org.apache.pdfbox.pdmodel.font.PDType1Font <init>
SEVERE: Can't read the embedded Type1 font AAAAAB+Arial-BoldMT
java.io.IOException: Found token=null but expected NAME
Caused by: java.io.EOFException
at org.apache.pdfbox.io.ScratchFileBuffer.seek(ScratchFileBuffer.java:302)
at org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset(COSParser.java:1177)
at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:202)",0,"Tilman Hausherr",ManuelG,0,4,"07/Feb/17 11:20","25/Mar/17 18:13","09/Feb/17 17:20"
PDFBOX-3681,PDFBOX,"Text not rendered in mode 7 (3)",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Rendering,None,,"Instead of the word "could", a black bar is shown.
The cause is a flaw with caching the clipping path. The intersected clipping path is the same object as the variable "lastClip" so PDFBox thinks it was already set.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/Feb/17 16:36","22/Jun/17 16:27","10/Feb/17 17:31"
PDFBOX-3682,PDFBOX,"Wrong value stored for a radio button with an /Opts entry",Bug,CLOSED,Major,Fixed,"2.0.4, 2.0.5, 3.0.0 PDFBox","2.0.5, 3.0.0 PDFBox",AcroForm,None,,"When a radio button has an /Opts entry PDFBox saves the index of the value in the /Opts array as the fields value in /V instead of the appearance entries name for the On state the index is pointing to.",0,"Maruan Sahyoun","Maruan Sahyoun",1,3,"12/Feb/17 08:44","25/Mar/17 18:12","17/Feb/17 16:23"
PDFBOX-3684,PDFBOX,"PDFBox StackOverflowError on malformed files when merging",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox","Utilities, Writing",None,,"I supply 2 PDF files (certificate-of-analysis.pdf and questionario-sulle.pdf) which cause an exception if i try to merge them using PDFMergerUtility.
I've implemented code examples which run to the exceptions:
https://bitbucket.org/radistao/pdfbox-merge-bug/
or just take the same sources from the attached radistao-pdfbox-merge-bug.zip
Those 2 files are included into the repository (test/resources/).
Error stack trace for certificate-of-analysis.pdf:
using addSource():
java.lang.StackOverflowError
at java.util.HashMap.hash(HashMap.java:338)
at java.util.HashMap.containsKey(HashMap.java:595)
at java.util.HashSet.contains(HashSet.java:203)
at org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite(COSWriter.java:472)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray(COSWriter.java:927)
at org.apache.pdfbox.cos.COSArray.accept(COSArray.java:515)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary(COSWriter.java:1061)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary(COSWriter.java:1020)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary(COSWriter.java:1020)
using appendDocument()
org.apache.pdfbox.cos.COSDocument finalize
WARNING: Warning: You did not close a PDF Document
org.apache.pdfbox.cos.COSDocument finalize
WARNING: Warning: You did not close a PDF Document
org.apache.pdfbox.cos.COSDocument finalize
WARNING: Warning: You did not close a PDF Document
org.apache.pdfbox.cos.COSDocument finalize
WARNING: Warning: You did not close a PDF Document
org.apache.pdfbox.cos.COSDocument finalize
WARNING: Warning: You did not close a PDF Document
java.lang.StackOverflowError
at org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey(COSWriter.java:892)
at org.apache.pdfbox.pdfwriter.COSWriter.writeReference(COSWriter.java:1175)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray(COSWriter.java:928)
at org.apache.pdfbox.cos.COSArray.accept(COSArray.java:515)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary(COSWriter.java:1061)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary(COSWriter.java:1020)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary(COSWriter.java:1020)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary(COSWriter.java:1020)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary(COSWriter.java:1020)
Note: in version 1.8.13 (see https://bitbucket.org/radistao/pdfbox-merge-bug/branch/test/v1.8.13) file questionario-sulle.pdf merged fine (see attached merge result v1.8.13-PdfMergerAddSourceTest-questionario-sulle.pdf), but with just warnings:
org.apache.pdfbox.pdfparser.PDFParser parseObject
WARNING: expected='%%EOF' actual=''
org.apache.pdfbox.pdfparser.XrefTrailerResolver setStartxref
WARNING: Did not found XRef object at specified startxref position 0",0,"Tilman Hausherr","Andrii Radistao",0,4,"12/Feb/17 15:47","25/Mar/17 18:12","19/Feb/17 14:27"
PDFBOX-3685,PDFBOX,"ClassCastException in SetMatrix() operator processor",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Parsing,None,,"java.lang.ClassCastException: org.apache.pdfbox.cos.COSName cannot be cast to org.apache.pdfbox.cos.COSNumber
 at org.apache.pdfbox.contentstream.operator.state.SetMatrix.process(SetMatrix.java:45)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:509)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:477)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:158)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:223)
with digitalcorpora file 626148.pdf p21",0,"Tilman Hausherr","Tilman Hausherr",0,2,"15/Feb/17 17:35","25/Mar/17 18:12","15/Feb/17 17:40"
PDFBOX-3686,PDFBOX,"IllegalArgumentException: Color parameter outside of expected range: Red Green Blue",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Rendering,None,," java.lang.IllegalArgumentException: Color parameter outside of expected range: Red Green Blue
    org.apache.pdfbox.rendering.PageDrawer.getPaint(PageDrawer.java:238)
    org.apache.pdfbox.rendering.PageDrawer.getNonStrokingPaint(PageDrawer.java:526)
    org.apache.pdfbox.rendering.PageDrawer.fillPath(PageDrawer.java:597)
    org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroRule.process(FillNonZeroRule.java:36)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"15/Feb/17 17:52","25/Mar/17 18:12","15/Feb/17 18:04"
PDFBOX-3687,PDFBOX,"PDFBox doesn't respect different setting of /DA at PDAnnotationWidget level to /DA at PDField level",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.6, 3.0.0 PDFBox",AcroForm,None,,"See the attached file "SF1152.pdf" and locate the "Bureau" field. If you open this document in Acrobat the font size shows as Auto and functions as such in Acrobat/Acrobat Reader. However, PDFBox thinks the font size is set to 9. I confirmed this in both PDFDebugger and in our rendering code.
The second attachment "TestSF1152-LL.pdf" shows the behavior from PDFBox not picking up the correct Auto font size. The value is truncated unless you click inside the field or delete the value and replace it.
The following code shows the problem:
            final PDDocument document = PDDocument.load(ClassLoader.getSystemResourceAsStream("SF1152.pdf"));
            final PDAcroForm form = document.getDocumentCatalog().getAcroForm();
            final PDTextField field = (PDTextField)form.getField("Bureau");
            final COSDictionary dict = field.getCOSObject();
            String defaultAppearance = ((COSString)dict.getDictionaryObject(COSName.DA)).getString();
            System.out.println(defaultAppearance);
results in:
/Helv 9 Tf 0 0 0.5 rg
If I manually set the font size to auto using:
dict.setString(COSName.DA, "/Helv 0 Tf 0 0 0.5 rg");
the PDF renders correctly.
But we shouldn't have to manipulate font sizes in code when it's set correctly in the PDF.",0,"Maruan Sahyoun","Scott Coldwell",0,6,"15/Feb/17 22:19","22/Jun/17 15:57","12/May/17 05:51"
PDFBOX-3688,PDFBOX,"Cache TilingPaint generation",Improvement,CLOSED,Minor,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",PDModel,None,,"The attached file gs-bugzilla692158-schleuse-veryslow.pdf is extremely slow to render. It takes hours. The cause is that identical TilingPaint objects are generated again and again, i.e. each time the pattern image must be drawn again. I tried a very simple caching mechanism and now the file renders in 20 seconds.
Although the very basic caching worked for all test files, it can't be used because parameters could change: initial matrix, xform, color and colorspace.
For this I'll use a factory class that has a class to compare the parameters, and this is to be used as key.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Feb/17 17:32","10/Jan/18 19:55","16/Feb/17 18:37"
PDFBOX-3691,PDFBOX,"ClassCastException in SetStrokingColorSpace.process",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Parsing,None,,"java.lang.ClassCastException: org.apache.pdfbox.cos.COSInteger cannot be cast to org.apache.pdfbox.cos.COSName
 at org.apache.pdfbox.contentstream.operator.color.SetStrokingColorSpace.process(SetStrokingColorSpace.java:39)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:509)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:477)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:158)
happens in p7 of 685985.pdf",0,"Tilman Hausherr","Tilman Hausherr",0,2,"18/Feb/17 10:43","25/Mar/17 18:13","18/Feb/17 10:47"
PDFBOX-3692,PDFBOX,"ArrayIndexOutOfBoundsException in SetTextRenderingMode.process",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Parsing,None,,"java.lang.ArrayIndexOutOfBoundsException: 60
    org.apache.pdfbox.pdmodel.graphics.state.RenderingMode.fromInt(RenderingMode.java:70)
    org.apache.pdfbox.contentstream.operator.text.SetTextRenderingMode.process(SetTextRenderingMode.java:50)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
with 656282.pdf p1",0,"Tilman Hausherr","Tilman Hausherr",0,2,"18/Feb/17 11:02","25/Mar/17 18:12","18/Feb/17 11:11"
PDFBOX-3693,PDFBOX,"IllegalArgumentException in Type2CharString.java",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",FontBox,None,,"Happens at several places with attached file, e.g. like this:
IllegalArgumentException: fromIndex(0) > toIndex(-6)
    java.util.SubList.<init>(AbstractList.java:624)
    java.util.RandomAccessSubList.<init>(AbstractList.java:775)
    java.util.AbstractList.subList(AbstractList.java:484)
    java.util.Vector.subList(Vector.java:1038)
    org.apache.fontbox.cff.Type2CharString.handleCommand(Type2CharString.java:233)
    org.apache.fontbox.cff.Type2CharString.access$000(Type2CharString.java:32)
    org.apache.fontbox.cff.Type2CharString$1.handleCommand(Type2CharString.java:89)
    org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:45)
    org.apache.fontbox.cff.Type2CharString.convertType1ToType2(Type2CharString.java:92)
    org.apache.fontbox.cff.Type2CharString.<init>(Type2CharString.java:58)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"18/Feb/17 12:38","25/Mar/17 18:12","18/Feb/17 12:45"
PDFBOX-3694,PDFBOX,"java.io.IOException: Image stream is empty for inline image (2)",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Parsing,None,,"IOException: Image stream is empty
    org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage(SampledImageReader.java:114)
    org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getImage(PDInlineImage.java:344)
    org.apache.pdfbox.rendering.PageDrawer.drawImage(PageDrawer.java:986)
    org.apache.pdfbox.contentstream.operator.graphics.BeginInlineImage.process(BeginInlineImage.java:40)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
Unlike in PDFBOX-2237 the inline image is really empty:
BI
/CS/G
/W 2
/H 1
/BPC 8
ID EI
EI
Solution: warn and skip.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"18/Feb/17 16:22","25/Mar/17 18:13","18/Feb/17 17:13"
PDFBOX-3695,PDFBOX,"ClassCastException in SetRenderingIntent.process",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Parsing,None,,"ClassCastException: org.apache.pdfbox.cos.COSFloat cannot be cast to org.apache.pdfbox.cos.COSName
    org.apache.pdfbox.contentstream.operator.state.SetRenderingIntent.process(SetRenderingIntent.java:43)
happens with the file from PDFBOX-3693.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Feb/17 09:22","25/Mar/17 18:12","19/Feb/17 09:25"
PDFBOX-3696,PDFBOX,"Undeprecate CCITTFactory.createFromRandomAccess()",Improvement,CLOSED,Minor,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Rendering,newbie,"java 1.6","I am processing images, mostly TIFF Group 4, from a repository, and outputting them as PDF. The images always come to me in a byte array, never as a file. In fact, I've no option to get it as a file. The repository may or may not be local--it is accessed through its own API.
I would like to convert this buffer directly to a PDImageXObject, but both the CCITTFactory.createFromRandomAccess() are deprecated, forcing me to first create a BufferedImage. Looking at the source for the CCITTFactory class, they do essentially the same thing as the createFromFile() methods, which first create a RandomAccessFile before calling createFromRandomAccessImpl().
Can the CCITTFactory.createFromRandomAccess() methods be undeprecated, or is there a problem with RandomAccessBuffer?",0,"Tilman Hausherr","Thad Humphries",1,4,"19/Feb/17 10:35","25/Mar/17 18:12","09/Mar/17 21:49"
PDFBOX-3698,PDFBOX,"Static Initialization Deadlock between COSNumber/COSInteger",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.5, 3.0.0 PDFBox",None,None,"mac os x, java","Problem
Using Tika 1.10 (PDF Box 1.8.10) to parse PDF documents in a multi-threaded application, processing unexpectedly halted. Investigating the output of a kill -3, we found:
"pool-2-thread-18" #50 prio=5 os_prio=0 tid=0x00002af088a67000 nid=0xc9b9 in Object.wait() [0x00002af0dc803000]
   java.lang.Thread.State: RUNNABLE
  at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1348)

x 15

"pool-2-thread-13" #45 prio=5 os_prio=0 tid=0x00002af0cf910800 nid=0xc9b4 in Object.wait() [0x00002af0dc2ff000]
   java.lang.Thread.State: RUNNABLE
  at org.apache.pdfbox.cos.COSDocument.getObjectFromPool(COSDocument.java:720)
  at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:685)

x 2

"pool-2-thread-11" #43 prio=5 os_prio=0 tid=0x00002af0cfba6000 nid=0xc9b2 in Object.wait() [0x00002af0dc0fc000]
   java.lang.Thread.State: RUNNABLE
  at org.apache.pdfbox.cos.COSNumber.<clinit>(COSNumber.java:33)
  at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:1348)

x 1
Upon further investigation, it appears that there is a risk for deadlock when BaseParser calls COSNumber.get() and COSDocument call COSInteger.get().
I was able to semi-reliably replicate this issue with the below Spock test:
import org.apache.pdfbox.cos.COSInteger
import org.apache.pdfbox.cos.COSNumber
import spock.lang.Specification

class ThreadingIssueSpec extends Specification{

    def "testy test"(){
        setup:
        Thread thread = new Thread(new Runnable(){

            @Override
            void run() {
                for (int i =0; i<100; i++){
                    COSNumber.get("-")
                }
            }
        })
        thread.start()

        for(int i =0; i<100; i++) {
            COSInteger.get("-")
        }

        thread.join()

        expect:
        1==1
    }
}
(you'll likely need to run this several times before the test hangs, but it does eventually hang)
I updated my Tika dep to 1.14 (PDF Box 2.0.3) and was still able to replicate this issue.",0,"Tilman Hausherr","Sean Story",1,7,"20/Feb/17 16:31","13/Feb/18 19:36","09/Mar/17 21:49"
PDFBOX-3702,PDFBOX,"ArrayIndexOutOfBoundsException in CCITTFaxDecoderStream.decode2D",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Parsing,"CCITTFaxDecode ccitt",,"java.lang.ArrayIndexOutOfBoundsException: 25
    org.apache.pdfbox.filter.CCITTFaxDecoderStream.decode2D(CCITTFaxDecoderStream.java:192)
    org.apache.pdfbox.filter.CCITTFaxDecoderStream.decodeRowType6(CCITTFaxDecoderStream.java:292)
    org.apache.pdfbox.filter.CCITTFaxDecoderStream.decodeRow(CCITTFaxDecoderStream.java:304)
    org.apache.pdfbox.filter.CCITTFaxDecoderStream.fetch(CCITTFaxDecoderStream.java:117)
    org.apache.pdfbox.filter.CCITTFaxDecoderStream.read(CCITTFaxDecoderStream.java:457)
    org.apache.pdfbox.filter.CCITTFaxFilter.readFromDecoderStream(CCITTFaxFilter.java:119)
    org.apache.pdfbox.filter.CCITTFaxFilter.decode(CCITTFaxFilter.java:91)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"27/Feb/17 14:49","25/Mar/17 18:13","09/Mar/17 20:16"
PDFBOX-3703,PDFBOX,"ArrayIndexOutOfBoundsException in PDDeviceRGB.toRGB()",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Rendering,None,,"java.lang.ArrayIndexOutOfBoundsException: 1
 at java.awt.color.ICC_ColorSpace.toRGB(ICC_ColorSpace.java:179)
 at org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB(PDDeviceRGB.java:104)
 at org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.toRGB(PDICCBased.java:195)
 at org.apache.pdfbox.rendering.PageDrawer.getPaint(PageDrawer.java:286)
 at org.apache.pdfbox.rendering.PageDrawer.getStrokingPaint(PageDrawer.java:620)
 at org.apache.pdfbox.rendering.PageDrawer.strokePath(PageDrawer.java:689)
 at org.apache.pdfbox.contentstream.operator.graphics.StrokePath.process(StrokePath.java:36)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:509)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:477)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:158)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:223)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:147)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:69)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:56)
 at pdfboxziptest.PDFBoxZipTest.doPdf(PDFBoxZipTest.java:203)
 at pdfboxziptest.PDFBoxZipTest.main(PDFBoxZipTest.java:63)
The cause is that the parameter check is done only for device colorspaces, but it should be done for all except patterns.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"27/Feb/17 14:57","25/Mar/17 18:13","27/Feb/17 15:01"
PDFBOX-3704,PDFBOX,"Update CCITTFaxDecoderStream.java from twelvemonkeys",Task,CLOSED,Major,Fixed,2.0.4,"2.0.5, 3.0.0 PDFBox",Rendering,None,,"update changes made after May 7, 2016 up to commit ceb2c82",0,"Tilman Hausherr","Tilman Hausherr",0,2,"27/Feb/17 15:06","28/Mar/18 16:09","27/Feb/17 15:10"
PDFBOX-3705,PDFBOX,"PDFBox PDF Print Operation eliminates (prints blank) MS Word Table tiling pattern",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.4","2.0.5, 3.0.0 PDFBox","Rendering, Utilities","newbie print printin","windows, java 1.8","PdfBox PDF Print operation eliminates i.e prints blank MS word table tiling pattern.
Print results are varies according to the environment.
In some cases PDF print operation prints blank pages with some characters or print operation failed.",0,"Tilman Hausherr",GirishPatil,0,3,"02/Mar/17 01:47","25/Mar/17 18:12","08/Mar/17 17:40"
PDFBOX-3706,PDFBOX,"Article separation with PDFTextStripper",Improvement,CLOSED,Major,"Not A Problem",2.0.4,None,"Text extraction",None,"java 1.7, windows 10","I found no solution in PDFTextStripper which realy separates text articles with the method setArticleStart or setArticleEnd. Currently it seems the article start is always after the page start and the article end is always before the page end.
When I extract the content of the atachment as xml with article tags i get the following:
<article>
<paragraph>
Einfacher Textinhalt - nicht eingerückt
Einfacher Textinhalt - nicht eingerückt
Einfacher Textinhalt - nicht eingerückt
</paragraph>
<paragraph>
Einfacher Textinhalt - 1* eingerückt
Einfacher Textinhalt - 1* eingerückt
Einfacher Textinhalt - 1* eingerückt
</paragraph>
<paragraph>
Einfacher Textinhalt - 2* eingerückt
Einfacher Textinhalt - 2* eingerückt
Einfacher Textinhalt - 2* eingerückt
</paragraph>
<paragraph>
Einfacher Textinhalt - nicht eingerückt
Einfacher Textinhalt - nicht eingerückt
Einfacher Textinhalt - nicht eingerückt
</paragraph>
<paragraph>
Einfacher Textinhalt - 2* eingerückt
Einfacher Textinhalt - 2* eingerückt
Einfacher Textinhalt - 2* eingerückt
</paragraph>
</article>
I would expect:
<article>
<paragraph>
Einfacher Textinhalt - nicht eingerückt
Einfacher Textinhalt - nicht eingerückt
Einfacher Textinhalt - nicht eingerückt
</paragraph>
<paragraph>
Einfacher Textinhalt - 1* eingerückt
Einfacher Textinhalt - 1* eingerückt
Einfacher Textinhalt - 1* eingerückt
</paragraph>
<paragraph>
Einfacher Textinhalt - 2* eingerückt
Einfacher Textinhalt - 2* eingerückt
Einfacher Textinhalt - 2* eingerückt
</paragraph>
</article>
<article>
<paragraph>
Einfacher Textinhalt - nicht eingerückt
Einfacher Textinhalt - nicht eingerückt
Einfacher Textinhalt - nicht eingerückt
</paragraph>
</article>
<article>
<paragraph>
Einfacher Textinhalt - 2* eingerückt
Einfacher Textinhalt - 2* eingerückt
Einfacher Textinhalt - 2* eingerückt
</paragraph>
</article>",0,"Maruan Sahyoun","Daniel Ritter",0,2,"02/Mar/17 09:17","05/Mar/17 21:16","05/Mar/17 15:23"
PDFBOX-3714,PDFBOX,"PDF with blanks at the beginning can't be parsed",Bug,CLOSED,Major,Fixed,"2.0.4, 3.0.0 PDFBox","2.0.5, 3.0.0 PDFBox",Parsing,None,,"The attached files don't parse. The have some CRs and TABs at the beginning. The files parse properly if the blanks are removed. I thought we were resilient against this type of flaw...",0,"Andreas Lehmkühler","Tilman Hausherr",0,4,"09/Mar/17 17:32","25/Mar/17 18:13","12/Mar/17 15:35"
PDFBOX-3716,PDFBOX,"Read images from byte array",Improvement,CLOSED,Major,Fixed,2.0.4,2.0.6,None,"features patch",,"When we create several PDF files with the same images, a lot of time spend to read image's files. I added possibility to create image from byte array, which user can keep in memory.",0,"Tilman Hausherr","Alex Yolkin",0,3,"15/Mar/17 11:37","15/May/17 20:28","16/Mar/17 20:53"
PDFBOX-3717,PDFBOX,"java.io.IOException: Missing root object specification in trailer",Bug,CLOSED,Major,Fixed,2.0.4,2.0.6,Parsing,regression,,"java.io.IOException: Missing root object specification in trailer.
java.io.IOException: Missing root object specification in trailer.
    org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically(COSParser.java:2156)
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:222)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:271)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:987)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:943)
    org.apache.pdfbox.debugger.PDFDebugger.parseDocument(PDFDebugger.java:1369)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1283)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1266)
    org.apache.pdfbox.debugger.PDFDebugger.main(PDFDebugger.java:254)
    org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:85)
This worked in 2.0.4. Files with the same issue (not attached):
015664.pdf
023505.pdf
047586.pdf
051613.pdf
069020.pdf <= smallest, attached here
193175.pdf
287698.pdf
303385.pdf
526394.pdf
587123.pdf
643304.pdf",0,"Andreas Lehmkühler","Tilman Hausherr",0,5,"15/Mar/17 18:13","30/Mar/18 23:22","18/Mar/17 11:54"
PDFBOX-3722,PDFBOX,"make font cache error message less scary",Improvement,CLOSED,Major,Fixed,2.0.4,"2.0.6, 3.0.0 PDFBox",PDModel,None,,"The "Could not write to font cache" error message is too scary and not really helpful. I'll make it less scary (warning instead of error because work can go on without problem) and more informative.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Mar/17 16:47","15/May/17 20:28","17/Mar/17 16:48"
PDFBOX-3723,PDFBOX,"FDFField.getValue() doesn't return the values in line with the Javadoc.",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.4, 2.0.5","2.0.6, 3.0.0 PDFBox",PDModel,None,,"For the 2.0.x releases FDFField.getValue() doesn't neither return the documented PDTextStream return type nor String for values of type COSString or COSStream. This has somewhat be masked by another issue fixed in PDFBOX-3596.
As PDTextStream is no longer available we should return as String (which is inline with PDField) and adjust the javadoc accordingly.",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"18/Mar/17 18:56","15/May/17 20:28","23/Mar/17 11:06"
PDFBOX-3724,PDFBOX,"Wrong size in rendering of some artifacts",Bug,CLOSED,Minor,Fixed,"1.8.13, 2.0.5","1.8.14, 2.0.6, 3.0.0 PDFBox",Rendering,None,,"Seems that some artifacts get the wrong width when rendering. I've tested my way to that the artifact is a stroked line and it seems the stroke width is larger than a single pixel and stroke width might only be applied to how wide a stroke is and the length of the stroke might have a minimal length? Poppler seem to handle this stroke correctly.
----- OFF TOPIC
We do text extraction with PDFBox and use poppler today to extract our images because we had a lot of artifacts earlier but with the tremendous work by the team to solve PDFBOX-3000 issues we are looking into using PDFBox for image rendering. A lot of our examples have even more details than the poppler rendered images.
Great work people.",0,"Tilman Hausherr","Daniel Persson",1,3,"20/Mar/17 06:17","15/May/17 20:28","21/Mar/17 20:39"
PDFBOX-3726,PDFBOX,"NPE when setting the field value in an AcroForm and the NormalAppearance entry exists but is COSNull",Bug,CLOSED,Major,Fixed,"2.0.5, 3.0.0 PDFBox","2.0.6, 3.0.0 PDFBox",AcroForm,None,,"When the NormalAppearance entry exists in a PDAnnotationWidget but the entry is COSNull and NPE is raised similar to
Exception in thread "main" java.lang.NullPointerException at
org.apache.pdfbox.pdmodel.interactive.form.AppearanceGeneratorHelper.setAppearanceValue(AppearanceGeneratorHelper.java:137) 
See PDFBOX-3723 for a sample.",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"20/Mar/17 21:54","15/May/17 20:28","23/Mar/17 11:06"
PDFBOX-3727,PDFBOX,""premature EOF, image will be incomplete"",Bug,CLOSED,Major,Fixed,"2.0.4, 2.0.5","2.0.6, 3.0.0 PDFBox",Parsing,"CCITTFaxDecode ccitt","windows 10","I am trying to extract all the embeded images from Pdf file. But some times the images extracted are throwing warnings below.
[main] WARN  o.a.p.p.g.image.SampledImageReader - premature EOF, image will be incomplete
The extracted images are half-complete(half- greyed out)
I would like to know if any solution available for this. Below is my code snippet
Any Help is greatly appreciated.
 public static void testPDFBoxExtractImages() throws Exception {
     PDDocument document = PDDocument.load(new File(fileName));
     PDPageTree list = document.getPages();
     for (PDPage page : list) {
         PDResources pdResources = page.getResources();
         System.out.println(page.getRotation());
         for (COSName c : pdResources.getXObjectNames()) {
             PDXObject o = pdResources.getXObject(c);
             if (o instanceof org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject) {
                 File file = new File("C:/temp/" + System.nanoTime() + ".png");
                 ImageIO.write(((org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject)o).getImage(), "png", file);
             }
         }
     }
 }",0,"Tilman Hausherr",Ravi,0,3,"21/Mar/17 03:21","15/May/17 20:28","22/Mar/17 16:43"
PDFBOX-3728,PDFBOX,"org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSStream",Bug,CLOSED,Major,Fixed,"2.0.4, 2.0.5","2.0.6, 3.0.0 PDFBox","Rendering, Text extraction",None,"ubuntu, windows, java 1.8","The attached PDF document produces an exception in rendering or text extraction.
Stacktrace:
java.lang.ClassCastException: org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSStream
at org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:157)
at org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:485)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:469)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:206)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)
at biz.pinnau.rcp.pdf.java.PDFBoxHandler.renderCurrentImage(PDFBoxHandler.java:52)
at biz.pinnau.rcp.pdf.SWTPDFPositionChooser$12.run(SWTPDFPositionChooser.java:403)",0,"Tilman Hausherr","Peter Pinnau",0,4,"21/Mar/17 14:21","15/May/17 20:28","21/Mar/17 18:47"
PDFBOX-3730,PDFBOX,"Encapsulate outputStream into BufferedOutputStream in PDDocument.save()",Improvement,CLOSED,Minor,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox","Documentation, Writing",None,,"I recognized very slow performance of PDDocument.save() with a FileOutputStream over a VPN connection.
I did some testing and found out that using PDDocument.save(File file) solved the issue. So the BufferedInputStream makes the difference.
Since my document API uses streams I encapsulate the OutputStream in a BufferedOutputStream if neccessary:
if (!(outputStream instanceof BufferedOutputStream)) {
outputStream = new BufferedOutputStream(outputStream);
}
pdDocument.save(outputStream);
PDDocument.load() already does that with the InputStream. So I wonder if that would be an improvement for save(), too?",0,"Tilman Hausherr","Peter Pinnau",0,3,"22/Mar/17 16:05","15/May/17 20:28","23/Mar/17 19:50"
PDFBOX-3731,PDFBOX,"IOException: Found Token[kind=NAME, text=bind] but expected ND at offset 91",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",FontBox,"type1 type1font",," Error  [PDType1Font] Can't read the embedded Type1 font CULYPI+CairoFont-1-0
    java.io.IOException: Found Token[kind=NAME, text=bind] but expected ND at offset 91
 at org.apache.fontbox.type1.Type1Parser.readDef(Type1Parser.java:756)
 at org.apache.fontbox.type1.Type1Parser.readDictValue(Type1Parser.java:354)
 at org.apache.fontbox.type1.Type1Parser.parseBinary(Type1Parser.java:556)
 at org.apache.fontbox.type1.Type1Parser.parse(Type1Parser.java:65)
 at org.apache.fontbox.type1.Type1Font.createWithSegments(Type1Font.java:85)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:262)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:509)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:477)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:158)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:223)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:147)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:69)
 at org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:290)
 at org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:259)
 at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
 at java.util.concurrent.FutureTask.run(FutureTask.java:266)
 at javax.swing.SwingWorker.run(SwingWorker.java:334)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
 at java.lang.Thread.run(Thread.java:745)
This is because of
/RD {string currentfile exch readstring pop} bind executeonly def
I'll add something to the parser.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"22/Mar/17 18:33","15/May/17 20:28","22/Mar/17 18:45"
PDFBOX-3732,PDFBOX,"IllegalArgumentException when refreshing an appearance and no font resources are defined",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",AcroForm,None,,"PDDocument doc = PDDocument.load(new File("out.pdf"));
doc.getDocumentCatalog().getAcroForm().setNeedAppearances(false);
doc.getDocumentCatalog().getAcroForm().refreshAppearances();
doc.save("pdfbox.pdf");
doc.close();
Exception in thread "main" java.lang.IllegalArgumentException: /DR is a required entry
at org.apache.pdfbox.pdmodel.interactive.form.PDDefaultAppearanceString.<init>(PDDefaultAppearanceString.java:82)",0,"Maruan Sahyoun","simon steiner",0,4,"23/Mar/17 11:26","06/Dec/18 10:54","12/May/17 05:51"
PDFBOX-3733,PDFBOX,"image added to pdf by tool AddImageToPDF is turn-overed",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.5","1.8.14, 2.0.6, 3.0.0 PDFBox",PDModel,None,"windows 7","I had a pdf file (see attachement test.pdf), i try pdfbox tools AddImageToPDF to add any test image to first page of my test pdf. the image added in pdf always turn-overed. But if i tried other pdf like scanned version, there is no such problem.
You can reproduce it by my test.pdf with any image.",0,"Tilman Hausherr","Yachun Miao",0,3,"24/Mar/17 09:43","15/May/17 20:28","25/Mar/17 06:50"
PDFBOX-3735,PDFBOX,"Update to Bouncy Castle 1.56",Improvement,RESOLVED,Major,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox",None,None,,"We should update to Bouncy Castle 1.56",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"25/Mar/17 18:19","25/Mar/17 18:37","25/Mar/17 18:37"
PDFBOX-3736,PDFBOX,"Switch the current 3.0.0 trunk to java 7",Task,RESOLVED,Major,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox",None,None,,"We should switch the current trunk version to java 7 as discussed on dev@",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"27/Mar/17 20:58","24/Apr/17 16:31","27/Mar/17 21:22"
PDFBOX-3738,PDFBOX,"Signature not visible on Acrobat",Bug,CLOSED,Blocker,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",Signing,None,"java 1.8","Signing this specific file with PDFBox, I get a non-visible signature in Acrobat.
Using iText the signature is visible.",0,"Tilman Hausherr","Marco Monacelli",3,4,"28/Mar/17 07:38","15/May/17 20:28","06/May/17 14:34"
PDFBOX-3739,PDFBOX,"ImageWriterIterator.next() and ImageReaderIterator.next() can return null",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.5","1.8.14, 2.0.6, 3.0.0 PDFBox",PDModel,None,,"See in linked SO issue - next() can return null even if hasNext() is true, we should catch this.
ImageIO source code:
http://www.docjar.com/html/api/javax/imageio/ImageIO.java.html",0,"Tilman Hausherr","Tilman Hausherr",0,2,"31/Mar/17 16:27","15/May/17 20:28","31/Mar/17 17:23"
PDFBOX-3740,PDFBOX,"Standard 14 and Encoding",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox","PDModel, Preflight",None,linux,"before I attempted to become PDF/A compatible, I was happy with just an Encoding entry for the standard 14...
I have made a few tests:
1 - full embedding of font
2 - just Encoding
3 - complete font descriptor
rendering results and preflight warnings
gs acro xpdf preflight
ok ok bad many
ok ok ok 2
ok bad ok 1",0,"Tilman Hausherr","Wolfgang Hamann",0,4,"01/Apr/17 12:34","15/May/17 20:28","06/Apr/17 08:07"
PDFBOX-3741,PDFBOX,"usage of default colorspace not checked by preflight",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.5","2.0.6, 3.0.0 PDFBox",Preflight,None,,"In the test1.pdf file of PDFBOX-3740, the default colorspace DeviceGray with color 0 (black) is used for text output (in PDF specification: "The default colour shall be black (in DeviceGray")). Preflight should check whether there is an output intent but this isn't done. VeraPDF finds this. It should also be checked for other operations that may use the default
There are two separate colour space parameters: one for stroking and one for all other painting operations. Initial value: DeviceGray.
...
There are two separate colour parameters: one for stroking and one for all other painting operations. Initial value: black.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"01/Apr/17 17:25","15/May/17 20:28","04/Apr/17 16:28"
PDFBOX-3742,PDFBOX,"Unknown dir object c='>' cInt=62 peek='>' peekInt=62",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.5","1.8.14, 2.0.6, 3.0.0 PDFBox",Parsing,None,tika,"This was originally stumbled upon when running a 69-page long PDF through Tika. I could isolate the issue to in-between those two pages. Tika ends up responding with a faulty XML, as the attached screenshot shows - together with a stacktrace on the logs that includes the PDFBox exception, shown below as reproduced from the standalone CLI tool.
I'm using Tika 1.1.4, although I'm not exactly sure what version of PDFBox it uses. Here's the base Dockerfile.
$ java -jar pdfbox-app-2.0.5.jar ExtractText buggy.pdf 
Apr 01, 2017 10:08:44 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>
WARNING: Using fallback font 'LiberationSans-Bold' for 'Arial-BoldMT'
Apr 01, 2017 10:08:44 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>
WARNING: Using fallback font 'LiberationSans' for 'ArialMT'
Apr 01, 2017 10:08:44 PM org.apache.pdfbox.pdmodel.font.PDTrueTypeFont <init>
WARNING: Using fallback font 'LiberationSerif' for 'TimesNewRomanPSMT'
Apr 01, 2017 10:08:44 PM org.apache.pdfbox.pdfparser.BaseParser parseCOSArray
WARNING: Corrupt object reference at offset 150196
Exception in thread "main" java.io.IOException: Unknown dir object c='>' cInt=62 peek='>' peekInt=62 at offset 150196
 at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:954)
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray(BaseParser.java:654)
 at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:175)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:502)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:469)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
 at org.apache.pdfbox.text.LegacyPDFStreamEngine.processPage(LegacyPDFStreamEngine.java:139)
 at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)
 at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)
 at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)
 at org.apache.pdfbox.tools.ExtractText.startExtraction(ExtractText.java:237)
 at org.apache.pdfbox.tools.ExtractText.main(ExtractText.java:82)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:60)
Seems related to PDFBOX-1327.",0,"Tilman Hausherr","Igor Santos",0,3,"02/Apr/17 02:50","15/May/17 20:28","02/Apr/17 09:53"
PDFBOX-3743,PDFBOX,"Running GC between signing and saving document closes stream",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox","Documentation, Signing",None,ubuntu,"Running GC between signing and saving document closes stream and signing process fails. It happens only if signature image is added via PDVisibleSignDesigner e.g.
import org.apache.commons.io.IOUtils;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature;
import org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions;
import org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties;
import org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner;
import java.io.*;
import java.net.URISyntaxException;
import static java.lang.Thread.currentThread;
public class Foo {
public static void main(String[] args) throws IOException, URISyntaxException {
byte[] unsignedPdf = getResourceAsBytes("pdf-sample.pdf");
try (PDDocument doc = PDDocument.load(unsignedPdf)) {
doc.addSignature(
new PDSignature(),
is -> new byte[0],
getSignatureOptions(doc, getFile("util/test-pdf-signature.jpg"))
);
System.gc();
try (FileOutputStream out = new FileOutputStream(File.createTempFile("signed", ".pdf")))
{ doc.saveIncremental(out); }
}
}
private static SignatureOptions getSignatureOptions(PDDocument doc, File signatureImage) throws IOException {
SignatureOptions result = new SignatureOptions();
PDVisibleSignDesigner visibleSignature;
try (InputStream input = new FileInputStream(signatureImage))
{ visibleSignature = new PDVisibleSignDesigner(doc, input, 1); }
PDVisibleSigProperties visibleSignatureProperties = new PDVisibleSigProperties();
visibleSignatureProperties.setPdVisibleSignature(visibleSignature).buildSignature();
result.setVisualSignature(visibleSignatureProperties);
return result;
}
public static byte[] getResourceAsBytes(String filePath) throws IOException, URISyntaxException
{ return IOUtils.toByteArray(getFile(filePath).toURI()); }
public static File getFile(String filePath) throws URISyntaxException
{ return new File(currentThread().getContextClassLoader().getResource(filePath).toURI()); }
}
constantly fails with:
Exception in thread "main" java.io.IOException: COSStream has been closed and cannot be read. Perhaps its enclosing PDDocument has been closed?
at org.apache.pdfbox.cos.COSStream.checkClosed(COSStream.java:77)
at org.apache.pdfbox.cos.COSStream.createRawInputStream(COSStream.java:125)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1203)
at org.apache.pdfbox.cos.COSStream.accept(COSStream.java:383)
at org.apache.pdfbox.cos.COSObject.accept(COSObject.java:158)
at org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:522)
at org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects(COSWriter.java:460)
at org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:444)
at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1099)
at org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:419)
at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1370)
at org.apache.pdfbox.pdmodel.PDDocument.saveIncremental(PDDocument.java:1276)
at Foo.main(Foo.java:27)",0,"Tilman Hausherr","Dmitri Ess",0,3,"03/Apr/17 07:37","15/May/17 20:28","04/Apr/17 15:38"
PDFBOX-3745,PDFBOX,"Wrong character width",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",PDModel,None,"windows 10","I tried to convert a PDF file to an image. But there is a error with the character width computation. As you can see inside the blue box, there are gaps after every umlaut mark (ä ,ö ,ü). Some characters in the font doesn't contain any width information. The distance between the character is handled by position adjustment. For example:
[1., -278, ), -844, H, -722, ä, -556, u, -611, sliche P, -667, f, -333, lege] TJ
I guess there is an error in the font.getWidth() implementation. If I call font.getWidth("ä") it returns 556. (Instead of 0, what would fit)
I attached the PDF and the converted image.",0,"Tilman Hausherr","Ch. Schlatter",0,3,"05/Apr/17 15:29","15/May/17 20:28","06/Apr/17 17:57"
PDFBOX-3747,PDFBOX,"CmapSubtable#getCharCodes provides values in random order",Bug,CLOSED,Major,Fixed,"2.0.5, 3.0.0 PDFBox","2.0.6, 3.0.0 PDFBox",FontBox,None,,"Some fonts may have an ambigious glyphId to character code mapping. CmapSubtable#getCharCodes provides all of them, but in a random order. We should sort the list to provide a consistent order.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"06/Apr/17 12:16","15/May/17 20:28","06/Apr/17 16:56"
PDFBOX-3748,PDFBOX,"java.lang.UnsupportedOperationException: Kerning table version 0 format 2 not yet supported.",Bug,CLOSED,Major,Fixed,"2.0.4, 2.0.5","2.0.6, 3.0.0 PDFBox",FontBox,None,,"Hi everyone, I am currently using pdfbox to extract text from pdf files and I an encountering an UnsupportedOperationException while trying to extract text from provided file (file.pdf)
...
Caused by: java.lang.UnsupportedOperationException: Kerning table version 0 format 2 not yet supported.
at org.apache.fontbox.ttf.KerningSubtable.readSubtable0Format2(KerningSubtable.java:231)
at org.apache.fontbox.ttf.KerningSubtable.readSubtable0(KerningSubtable.java:215)
at org.apache.fontbox.ttf.KerningSubtable.read(KerningSubtable.java:70)
at org.apache.fontbox.ttf.KerningTable.read(KerningTable.java:80)
at org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:324)
at org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:174)
at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:150)
at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:106)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:178)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:75)
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:829)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:486)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:460)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
at org.apache.pdfbox.text.LegacyPDFStreamEngine.processPage(LegacyPDFStreamEngine.java:139)
at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)
at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)
at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)
at org.apache.pdfbox.text.PDFTextStripper.getText(PDFTextStripper.java:227)
...
I would like to understand what in my file causes this error and if anyone knows a workaround to perform text extraction successfully on this file.
Thank you in advance guys",0,"Tilman Hausherr","Thomas Penne",0,3,"07/Apr/17 15:38","15/May/17 20:28","10/Apr/17 16:13"
PDFBOX-3750,PDFBOX,"java.util.zip.DataFormatException when parsing a PDF",Bug,CLOSED,Major,Fixed,2.0.3,"2.0.6, 3.0.0 PDFBox",None,None,"java 1.8","I use the following code to parse a PDF:
PDFParser pdfparser = new PDFParser();
        pdfparser.parse(Test.class.getResourceAsStream("/testdoc.pdf"), handler, metadata, pcontext);
This results in the following exception:
Exception in thread "main" org.apache.tika.exception.TikaException: Unable to extract PDF content
 at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:133)
 at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:150)
 at com.curecomp.tika.Test.main(Test.java:28)
Caused by: java.io.IOException: java.util.zip.DataFormatException: too many length or distance symbols
 at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:82)
 at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:69)
 at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:162)
 at org.apache.pdfbox.pdmodel.font.PDFont.readCMap(PDFont.java:189)
 at org.apache.pdfbox.pdmodel.font.PDFont.<init>(PDFont.java:134)
 at org.apache.pdfbox.pdmodel.font.PDSimpleFont.<init>(PDSimpleFont.java:84)
 at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:164)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:75)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
 at org.apache.pdfbox.text.LegacyPDFStreamEngine.processPage(LegacyPDFStreamEngine.java:139)
 at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)
 at org.apache.tika.parser.pdf.PDF2XHTML.processPage(PDF2XHTML.java:141)
 at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)
 at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)
 at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:111)
 ... 2 more
Caused by: java.util.zip.DataFormatException: too many length or distance symbols
 at java.util.zip.Inflater.inflateBytes(Native Method)
 at java.util.zip.Inflater.inflate(Inflater.java:259)
 at java.util.zip.Inflater.inflate(Inflater.java:280)
 at org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:107)
 at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:73)
 ... 21 more
The PDF can be read using Adobe Reader XI 11.0.12.",0,"Tilman Hausherr","Moritz Becker",0,3,"10/Apr/17 18:47","08/Jun/18 21:07","13/Apr/17 16:36"
PDFBOX-3751,PDFBOX,"Flattening a pdf with refreshAppearances set to true causes a NullPointerException",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",AcroForm,None,,"Flattening a pdf with refreshAppearances set to true causes a NullPointerException. This is because some fields do not have a NormalAppearance set.
For example:
        try(PDDocument pdfDocument = PDDocument.load(new File("/Users/travis/Desktop/fdpAttachment2.pdf"))) {

            pdfDocument.getDocumentCatalog().getAcroForm().flatten(pdfDocument.getDocumentCatalog().getAcroForm().getFields(), true);
        }
causes:
Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.interactive.form.PDButton.updateByValue(PDButton.java:356)
at org.apache.pdfbox.pdmodel.interactive.form.PDButton.constructAppearances(PDButton.java:285)
at org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm.refreshAppearances(PDAcroForm.java:348)
at org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm.flatten(PDAcroForm.java:223)
at org.kuali.coeus.sys.pdf.FlattenException.main(FlattenException.java:13)
The workaround is pretty simple. Just make sure every widget without a NormalAppearance has one before calling flatten. I would think pdfbox could do a null check internally when trying to refresh appearance.
        pdfDocument.getDocumentCatalog().getAcroForm().getFields()
                .stream()
                .flatMap(f -> f.getWidgets().stream())
                .filter(w -> w.getAppearance() == null)
                .forEach(w -> {
                    final PDAppearanceDictionary appearance = new PDAppearanceDictionary(new COSDictionary());
                    appearance.setNormalAppearance(new PDAppearanceEntry(new COSDictionary()));
                    w.setAppearance(appearance);
                });",0,"Maruan Sahyoun","Travis Schneeberger",0,3,"12/Apr/17 13:11","08/Jun/17 16:08","08/Jun/17 15:59"
PDFBOX-3752,PDFBOX,"PDVariableText text color changes to be the same as the background color after flattening",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",AcroForm,None,,"PDVariableText text color changes to be the same as the background color after flattening. This effectively makes the text hidden and appear to be lost.
This includes field types such as ListBox and TextField. I don't believe I have tested a combo box.
For example:
        try(PDDocument pdfDocument = PDDocument.load(new File("/Users/travis/Desktop/fdpAttachment2.pdf"))) {

            final PDDocumentCatalog docCatalog = pdfDocument.getDocumentCatalog();
            final PDAcroForm acroForm = docCatalog.getAcroForm();

            final PDField textField = acroForm.getField("Subaward Number");
            textField.setValue("12345");

            final PDField listBoxField = acroForm.getField("Contact for carryforward");
            listBoxField.setValue("Administrative Contact");


            //when flattening with refreshAppearances, a NPE will occur if each widget doesn't have a
            //PDAppearanceDictionary instance with a normal PDAppearanceEntry instance set PDFBOX-3751
            pdfDocument.getDocumentCatalog().getAcroForm().getFields()
                    .stream()
                    .flatMap(f -> f.getWidgets().stream())
                    .filter(w -> w.getAppearance() == null)
                    .forEach(w -> {
                        final PDAppearanceDictionary appearance = new PDAppearanceDictionary(new COSDictionary());
                        appearance.setNormalAppearance(new PDAppearanceEntry(new COSDictionary()));
                        w.setAppearance(appearance);
                    });

pdfDocument.getDocumentCatalog().getAcroForm().flatten(pdfDocument.getDocumentCatalog().getAcroForm().getFields(), true);
            pdfDocument.save("/Users/travis/Desktop/fdpAttachment2-example-flattened.pdf");
        }
Notice in the attached fdpAttachment2-example-flattened.pdf, the fields are correctly set but the text is not visible.
If I execute the same code but do not flatten, the text is visible for certain field types in certain pdf viewers. See attached fdpAttachment2-example-not-flattened.pdf
In Adobe Acrobat Reader DC build 15.23.20056.213124 the "Subaward Number" field shows up but only when clicking on the field. When using the Preview app in MacOS Sierra, it is visible. In both apps the "Contact for carryforward" list box shows the text "Administrative Contact"
As a side note I wonder if the behavior of the "Subaward Number" in relation to different pdf views may be related to a difference problem. I think the real issue here is the text color.",0,"Maruan Sahyoun","Travis Schneeberger",0,3,"12/Apr/17 13:31","08/Jun/17 16:25","05/May/17 14:17"
PDFBOX-3753,PDFBOX,"setting a RadioButton with export values does not update the appearance",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",AcroForm,None,,"Setting a RadioButton with export values does not update the appearance. The attached form has two sets of RadioButtons. One called "Group1" and one called "_6_ Treatment of Program Inco_nwAbuWIn0JWsW9e68RWN8A". "Group1" is easy to set or unset. I noticed during debugging doesn't have any "ExportValues" and so the value is set in a different way than the other set of RadioButtons. "_6_ Treatment of Program Inco_nwAbuWIn0JWsW9e68RWN8A" does have ExportValues and this appears to be related to the problems with setting the value.
For example:
        try(PDDocument pdfDocument = PDDocument.load(new File("/Users/travis/Desktop/fdpAttachment2.pdf"))) {

            final PDDocumentCatalog docCatalog = pdfDocument.getDocumentCatalog();
            final PDAcroForm acroForm = docCatalog.getAcroForm();

        final PDRadioButton group1Field = (PDRadioButton) acroForm.getField("Group1");
            group1Field.setValue("NIH");

            final PDRadioButton topiField = (PDRadioButton) acroForm.getField("_6_  Treatment of Program Inco_nwAbuWIn0JWsW9e68RWN8A");
            topiField.setValue("Additive");


            pdfDocument.save("/Users/travis/Desktop/fdpAttachment2-radio-buttons.pdf");
        }
Notice in "fdpAttachment2-radio-buttons.pdf" that "Group1" RadioButton has NIH toggled while "_6_ Treatment of Program Inco_nwAbuWIn0JWsW9e68RWN8A" is not toggled even though "Additive" is a valid value.
The workaround for this is to set the appearance state (AS). I'm still learning the pdfbox api so I apologize if my workaround is a little strange.
        try(PDDocument pdfDocument = PDDocument.load(new File("/Users/travis/Desktop/fdpAttachment2.pdf"))) {

            final PDDocumentCatalog docCatalog = pdfDocument.getDocumentCatalog();
            final PDAcroForm acroForm = docCatalog.getAcroForm();

            final PDRadioButton group1Field = (PDRadioButton) acroForm.getField("Group1");
            group1Field.setValue("NIH");

            final PDRadioButton topiField = (PDRadioButton) acroForm.getField("_6_  Treatment of Program Inco_nwAbuWIn0JWsW9e68RWN8A");
            topiField.setValue("Additive");

            //Additive ends up being index 0.  If I add an AS with "0" it toggle the Additive radio button
            final int idx = topiField.getExportValues().indexOf((topiField).getValue());

            topiField.getWidgets().forEach(w -> {
                PDAppearanceEntry appearanceEntry = w.getAppearance().getNormalAppearance();

                if (((COSDictionary) appearanceEntry.getCOSObject()).containsKey(String.valueOf(idx))) {
                    w.getCOSObject().setName(COSName.AS, String.valueOf(idx));
                }
            });


            pdfDocument.save("/Users/travis/Desktop/fdpAttachment2-radio-buttons-workaround.pdf");
        }
Notice in "fdpAttachment2-radio-buttons-workaround.pdf" both sets of RadioButtons are toggled which is the desired behavior",0,"Maruan Sahyoun","Travis Schneeberger",0,3,"12/Apr/17 14:03","08/Jun/17 16:25","05/May/17 14:36"
PDFBOX-3754,PDFBOX,"Skip << >> in type1 font parser",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",FontBox,type1font,,"The attached file contains this in the ASCII parts of its type1 fonts:
%!FontType1-1.0:  
13 dict begin
/FontInfo 2 dict dup begin
/GlyphNames2HostCode <<
>> def
/GlyphNames2Unicode <<
>> def
end readonly def
PDFBox and (probably PDF.js) choke on the empty postscript dictionary. So I'll add parsing of empty dictionaries.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"12/Apr/17 17:07","15/May/17 20:28","12/Apr/17 18:08"
PDFBOX-3755,PDFBOX,"ClassCastException in PDColor constructor: org.apache.pdfbox.cos.COSNull cannot be cast to org.apache.pdfbox.cos.COSNumber",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",Rendering,None,,"java.lang.ClassCastException: org.apache.pdfbox.cos.COSNull cannot be cast to org.apache.pdfbox.cos.COSNumber
    org.apache.pdfbox.pdmodel.graphics.color.PDColor.<init>(PDColor.java:66)
    org.apache.pdfbox.contentstream.operator.color.SetColor.process(SetColor.java:49)
    org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceGrayColor.process(SetNonStrokingDeviceGrayColor.java:40)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:838)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:495)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:469)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:206)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:246)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:227)
    java.lang.Thread.run(Unknown Source)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"13/Apr/17 04:08","15/May/17 20:28","13/Apr/17 04:16"
PDFBOX-3757,PDFBOX,"TTFSubsetter scrambles PostScript names and unicode codepoints when subset contains diaeresis",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",FontBox,None,,"I tried to build a standalone FontSubsetter with the great fontbox tools. It works so far for OpenType/TrueType fonts, but when the glyph subset contains characters with diaeresis (like german umlauts äöü), the TTFSubsetter class scrambles PostScript names and unicode codepoints.
When creating a subset from DejaVuSans.ttf for example, with only those two characters "Ö " (O umlaut and a hair space \u200A), the resulting font subset is recognized as a valid font, but the unicode codepoint 200A in the resulting font file has the postscript name "Dieresis" and the single dieresis are named "uni200A". See screenshot "fontbox-2.0.5-ttfsubsetter_dieresis-scrambled-names.png" and the subsetted Font "Subset-DejaVuSans__dieresis-scrambled-names.ttf".
When there are more glyphs in the subset, more whitespace, special chars and umlauts, the scrambling goes even further and also scrambles unicode codepoints and not only postscript names:
glyphs in subset: "RabenköigKrmloEyGfthsTjHdAu cvFüD. w,äUp:IzWVZSN-ßLC PB5M«»O2013Q©/;x978-()64XJ'!Ä?‹› ...ÜqY &Öé|_•{}[]>#*$^
+"
Resulting font: "Subset-DejaVuSans__scrambled-codepoints.ttf"
Screenshot: "fontbox-2.0.5-ttfsubsetter_scrambled-codepoints.png"
I considder this a bug, as it does not appear when there are no umlauts or diaeresis in the subset.",0,"Tilman Hausherr","Tobias Fischer",1,3,"18/Apr/17 10:33","15/May/17 20:28","19/Apr/17 11:41"
PDFBOX-3761,PDFBOX,"Exception in thread "main" java.lang.NullPointerException",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",Utilities,regression,"java 1.8, windows","Getting Nullpointer exception when running PDFMergerExample
Exception in thread "main" java.lang.NullPointerException
at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:432)
at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:261)
at scrach_pad.batch_email.PDFMergerExample.merge(PDFMergerExample.java:87)
at scrach_pad.batch_email.TestMergePdf.main(TestMergePdf.java:50)",0,"Tilman Hausherr","Durgesh Agrawal",0,3,"18/Apr/17 20:45","15/May/17 20:28","19/Apr/17 16:38"
PDFBOX-3763,PDFBOX,"Optimize SampledImageReader.getStencilImage()",Improvement,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",Rendering,optimization,,"I have a PDF file (which I can't share, it is p182 of the one from https://stackoverflow.com/questions/43248021/pdfbox-2-unusual-memory-consumption ) that needs over 3GB for rendering due to two stencil images that are 18694 x 13214. PDFBox converts stencil images to RGB images, where 1 pixel needs 4 bytes, so such an image uses 1GB.
After many dead ends over the easter weekend, I realized today that the BufferedImage isn't needed at all - we can process the bits directly.
Memory footprint is down from 3.6GB to 2.2GB and it is faster too.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Apr/17 16:42","15/May/17 20:28","19/Apr/17 17:05"
PDFBOX-3768,PDFBOX,"Optimize SampledImageReader.from1Bit()",Improvement,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",Rendering,optimization,,"The from1bit() path passes a raster to colorSpace.toRGBImage(raster) where an RGB BufferedImage is created, which means a big memory footprint for scanned images.
I tried optimizing by using the raster to create smaller BufferedImages. Instead of calling colorSpace.toRGBImage(raster) where the raster would be copied into an RGB image, I did this:
byte[] indexedValues = new byte[] { 0, (byte)0xFF };
ColorModel colorModel = new IndexColorModel(1, 2, indexedValues, indexedValues, indexedValues);
return new BufferedImage(colorModel, raster, false, null);
Sadly, this resulted in a bigger memory footprint.
Lowest possible -Xmx setting to convert a file with 300dpi A4 scans: 76m
With the optimization: 123m
The stack trace suggests that java copies the image to an RGB image:
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
    at java.awt.image.DataBufferInt.<init>(Unknown Source)
    at java.awt.image.Raster.createPackedRaster(Unknown Source)
    at java.awt.image.DirectColorModel.createCompatibleWritableRaster(Unknown Source)
    at java.awt.image.BufferedImage.<init>(Unknown Source)
    at sun.java2d.loops.GraphicsPrimitive.convertFrom(Unknown Source)
    at sun.java2d.loops.GraphicsPrimitive.convertFrom(Unknown Source)
    at sun.java2d.loops.MaskBlit$General.MaskBlit(Unknown Source)
    at sun.java2d.loops.Blit$GeneralMaskBlit.Blit(Unknown Source)
    at sun.java2d.pipe.DrawImage.blitSurfaceData(Unknown Source)
    at sun.java2d.pipe.DrawImage.renderImageCopy(Unknown Source)
    at sun.java2d.pipe.DrawImage.copyImage(Unknown Source)
    at sun.java2d.pipe.DrawImage.copyImage(Unknown Source)
    at sun.java2d.pipe.ValidatePipe.copyImage(Unknown Source)
    at sun.java2d.SunGraphics2D.copyImage(Unknown Source)
    at sun.java2d.pipe.DrawImage.makeBufferedImage(Unknown Source)
    at sun.java2d.pipe.DrawImage.renderImageXform(Unknown Source)
    at sun.java2d.pipe.DrawImage.transformImage(Unknown Source)
    at sun.java2d.pipe.DrawImage.transformImage(Unknown Source)
    at sun.java2d.pipe.DrawImage.transformImage(Unknown Source)
    at sun.java2d.pipe.ValidatePipe.transformImage(Unknown Source)
    at sun.java2d.SunGraphics2D.drawImage(Unknown Source)
    at org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage(PageDrawer.java:1007) 
After I mentioned this on the dev mailing list, Petr Slaby replied:
your message caught my attention, so I could not resist to try and investigate it a little. I did not get too far and do not have the time to do any tests, but maybe at least a small hint. To at least have a chance that the sun java2d machinery draws the image without converting it first, BufferedImage.getType() must return something else than TYPE_CUSTOM. (At least I think so) For IndexColorModel, the raster has to be either BytePackedRaster or ByteComponentRaster. ByteComponentRaster resulting in BufferedImage type TYPE_BYTE_INDEXED is a safer bet.
So I looked at the source of BufferedImage and everything created by a user is TYPE_CUSTOM. Thus I tried using a TYPE_BYTE_BINARY image, but I got the same OOM stack trace suggesting a copying is taking place. I tried getting drawImage in the debugger but couldn't. But a look at the source code
http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b27/sun/java2d/pipe/DrawImage.java
shows at line 381 that java wants a "helper" and if there isn't, then it will convert to RGB / ARGB. And that is what's done according to the stack trace.
What I didn't search in the source code is what "helpers" would be available.
Then, in an act of desperation, I tried TYPE_BYTE_GRAY. This worked! It uses 1 byte per pixel, thus saves 2/3 of the RGB footprint, and the intermediate raster.
Minimal -Xmx setting got down to -Xmx26m.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"26/Apr/17 15:45","15/May/17 20:28","26/Apr/17 16:04"
PDFBOX-3770,PDFBOX,"provide set of page indexes that have page label ranges",Improvement,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",PDModel,None,,"As wished by Olivier Cailloux on the user mailing list
I'd rather suggest providing a set of page indexes on which PDPageLabelRange start.
(...)
Possibly also with a (javadoc) guarantee about the ascending iteration order over the set contents, if that's easy to provide.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/Apr/17 19:16","15/May/17 20:28","29/Apr/17 12:18"
PDFBOX-3775,PDFBOX,"Merge documents fails due to IllegalArgumentException",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",PDModel,None,,"When I tried to merge documents and one of them is a PDF file similar to attached file, I got an IllegalArgumentException. See stacktrace:
java.lang.IllegalArgumentException: Full
 at org.apache.pdfbox.pdmodel.PageMode.fromString(PageMode.java:71) ~[pdfbox-2.0.5.jar:2.0.5]
 at org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPageMode(PDDocumentCatalog.java:440) ~[pdfbox-2.0.5.jar:2.0.5]
 at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:451) ~[pdfbox-2.0.5.jar:2.0.5]
 at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:261) ~[pdfbox-2.0.5.jar:2.0.5]",0,"Tilman Hausherr","Jorge Spinsanti",0,3,"02/May/17 19:41","15/May/17 20:28","02/May/17 20:17"
PDFBOX-3778,PDFBOX,"Create sample code for creating a PDF with type 4 shading",Task,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",PDModel,"shading shadingpatte",,"Add sample code to existing example CreateGradientShadingPDF.java .",0,"Tilman Hausherr","Tilman Hausherr",0,2,"04/May/17 15:25","15/May/17 20:28","04/May/17 18:51"
PDFBOX-3779,PDFBOX,"Add dpi and border parameter to PrintPDF command line utility",Improvement,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",Utilities,printing,,"Add dpi and border parameter to PrintPDF command line utility. The border parameter is just "nice" and "because we can", the dpi parameter is to facilitate tests, as the dpi parameter is a workaround for certain printing flaws.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"04/May/17 15:51","15/May/17 20:28","04/May/17 18:15"
PDFBOX-3781,PDFBOX,"Existing AcroForm default resources is overwritten by signing code",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",Signing,None,,"assignAcroFormDefaultResource overwrites the existing /DR entry. I am applying a slightly modified version of the patch from Marco Monacelli that was attached in PDFBOX-3738. It inserts instead of overwrites when the entry exists.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"06/May/17 14:02","15/May/17 20:28","06/May/17 14:15"
PDFBOX-3783,PDFBOX,"java.io.IOException: Expected root dictionary, but got this: COSNull{}",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.6, 3.0.0 PDFBox",Parsing,regression,,"This file was parsed in 2.0.5 but no longer now:
java.io.IOException: Expected root dictionary, but got this: COSNull{}
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:230)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:276)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1005)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:943)
    org.apache.pdfbox.debugger.PDFDebugger.parseDocument(PDFDebugger.java:1375)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1293)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1276)
    org.apache.pdfbox.debugger.PDFDebugger.main(PDFDebugger.java:262)
    org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:85)",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"09/May/17 12:47","15/May/17 20:28","09/May/17 18:00"
PDFBOX-3784,PDFBOX,"Inline image incorrectly parsed",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.6, 3.0.0 PDFBox",Parsing,regression,,"Worked in 2.0.5. The cause is an unusual operator "S" after "EI".",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/May/17 13:35","15/May/17 20:28","09/May/17 13:49"
PDFBOX-3785,PDFBOX,"File completely different in 2.0.5 and 2.0.6",Bug,CLOSED,Major,Duplicate,2.0.6,None,Parsing,regression,,"The attached file is completely different in display/textextract between the two versions. One has 1 page, the other 11.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"09/May/17 14:33","23/Oct/17 17:41","09/May/17 18:04"
PDFBOX-3786,PDFBOX,"Contents of truncated file lost",Bug,CLOSED,Major,Duplicate,2.0.6,None,Parsing,regression,,"Content was there in 2.0.5, now no longer. The file is truncated.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"09/May/17 14:52","09/May/17 18:05","09/May/17 18:05"
PDFBOX-3787,PDFBOX,"Content stream missing in truncated file",Bug,CLOSED,Major,Duplicate,2.0.6,None,None,regression,,"This truncated file was displaying in 2.0.5 and not the content stream is null.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"09/May/17 17:05","09/May/17 18:08","09/May/17 18:08"
PDFBOX-3788,PDFBOX,"java.lang.RuntimeException: java.io.IOException: Catalog cannot be found",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.6, 3.0.0 PDFBox",Parsing,regression,,"This file was parsed in 2.0.5 but no longer now:
Caused by: java.io.IOException: Catalog cannot be found
    org.apache.pdfbox.cos.COSDocument.getCatalog(COSDocument.java:373)
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:238)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:310)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1000)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:938)
    org.apache.pdfbox.debugger.PDFDebugger.parseDocument(PDFDebugger.java:1288)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1209)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1194)",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"10/May/17 18:29","15/May/17 20:28","11/May/17 20:51"
PDFBOX-3789,PDFBOX,"Some text missing in rendering",Bug,CLOSED,Major,Fixed,None,"2.0.6, 3.0.0 PDFBox",PDModel,regression,,"The text in the table is missing, it was there in 2.0.5. I suspect it is due to the missing width (Adobe mentions it). The file is truncated but is parsed; the error happens also when saving the parsed file and rendering that one.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/May/17 20:29","15/May/17 20:28","10/May/17 21:49"
PDFBOX-3791,PDFBOX,"Long rendering time",Bug,CLOSED,Major,Fixed,2.0.5,"2.0.6, 3.0.0 PDFBox",Rendering,optimization,windows,"Attached pdf file takes too long (more then 9 secs) to render in PDFDebugger (this is a simplified version of a real life pdf that I can not publish for privacy reasons, it takes 57 seconds to render and it contains 56 images and some text).
I have tried with the options provided in https://pdfbox.apache.org/2.0/getting-started.html but performance is the same",0,"Tilman Hausherr","Esteban Nicolas Ruiz",0,3,"11/May/17 20:22","15/May/17 20:28","12/May/17 11:38"
PDFBOX-3794,PDFBOX,"Problem in TextPosition implementation",Bug,CLOSED,Major,Fixed,2.0.6,2.0.7,"Text extraction",easyfix,,"In 2.0.3 there wasn't hashCode implemented in TextPosition, and for me that was fine. Same instance, same hashCode.
In 2.0.6 the hashCode is now checking the fields values, which is reasonable. But, the hashCode in the same instance can have different results.
The problem is in the `direction` field, which is -1.0 and initialised only when getDir is called the first time.
For now as workaround, anytime (or just the first time) I need the textPosition's hashCode I call getDir before that.
Quick example:
Object getObjectFromTextPos(TextPosition textPos) {
    textPos.getDir();
    return someHashMap.get(textPos);
}
I don't know the reason of the late assignment to direction, but if that is necessary, I would say that the hashCode should call getDir() instead of using the field.",0,"Tilman Hausherr","Miro Mannino",0,3,"16/May/17 12:39","21/Jul/17 04:40","18/May/17 19:15"
PDFBOX-3795,PDFBOX,"PDFMergeUtility error invalid stored block lengths",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.6","2.0.7, 3.0.0 PDFBox",Utilities,"metadata xmp",,"PDFMergeUtility fails with a DataFormatException when trying to merge PDF documents.
Caused by: java.util.zip.DataFormatException: invalid stored block lengths
I have attached 3 PDF documents
pdf-01.pdf
pdf-02.pdf
pdf-03.pdf
The first two PDF documents are good. They can be merged. In fact they were used to create the third document (pdf-03.pdf).
When trying to merge another PDF with the third document, the PDF merge utility throws the error.",0,"Tilman Hausherr","Julian Cowan",1,3,"18/May/17 03:14","21/Jul/17 04:40","20/May/17 15:57"
PDFBOX-3798,PDFBOX,"Truncated file has first page empty",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",Parsing,regression,,"The attached file, which is truncated, shows an empty first page in rendering in 2.0.6, but not in 2.0.5.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"20/May/17 15:23","09/Sep/17 01:12","21/May/17 16:24"
PDFBOX-3799,PDFBOX,"Problem in TextPosition's hashCode",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox","Text extraction",None,,"Just another side effect related to TextPosition's hashCode
I am using the hashCode because I want to know the color of each letter. To do this, during the processTextPosition, I save the current graphic state in a map, using the current text position as key. Then, on writeString, I iterate all the text positions and I get the color for each of them though this map.
Of course would be easier if this information could be saved in the text position. But this is just a desired feature.
I am discovering that from processTextPosition to writeString sometimes happens that the same textPosition has just a different unicode. In processTextPosition is just a "x" (char 120), but then on writeString the same textPosition the unicode is the x, followed by '̄' (char 772). Everything about the textPosition remains the same: same coordinates, same System.identityHashCode; the only thing that changes is the unicode, which causes the computation of a different hashCode.
That is giving problem. As workaround I am using now System.identityHashCode instead of the current TextPosition's implementation",0,"Tilman Hausherr","Miro Mannino",0,3,"21/May/17 06:48","21/Jul/17 04:40","21/May/17 17:27"
PDFBOX-3806,PDFBOX,"Nullpointer exception in getLeftSideBearing",Bug,CLOSED,Minor,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",FontBox,None,,"While processing todays batch of data we got a Nullpointer exception in getLeftSideBearing. Sadly I can't give you the PDF.
```
public int getLeftSideBearing(int gid)
{ return gid < this.numHMetrics?this.leftSideBearing[gid]:this.nonHorizontalLeftSideBearing[gid - this.numHMetrics]; }
```
In this function there could be a case where nonHorizontalLeftSideBearing is null and you still ask for a GID in larger or equal to numHMetrics.
First time I see this issue and so far only 4 characters in one PDF has this issue so not critical.",0,"Tilman Hausherr","Daniel Persson",0,3,"24/May/17 06:47","21/Jul/17 04:40","26/May/17 12:40"
PDFBOX-3807,PDFBOX,"CMapParser NullPointerException",Bug,CLOSED,Minor,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",FontBox,None,,"We came accross a document that results in a NPE if opened with the debugger:
Caused by: java.lang.NullPointerException: null    org.apache.fontbox.cmap.CMapParser.parseBeginbfrange(CMapParser.java:370)
org.apache.fontbox.cmap.CMapParser.parse(CMapParser.java:136)  org.apache.pdfbox.pdmodel.font.CMapManager.parseCMap(CMapManager.java:73)
org.apache.pdfbox.pdmodel.font.PDFont.readCMap(PDFont.java:197)
org.apache.pdfbox.pdmodel.font.PDFont.<init>(PDFont.java:137)
org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:119)    org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
 org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)    org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
  org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:838)
  org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:495)
  org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:469)
  org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
  org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:206)
  org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)
  org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:68)",0,"Tilman Hausherr","Andrea Vacondio",0,3,"24/May/17 07:06","21/Jul/17 04:40","25/May/17 07:43"
PDFBOX-3809,PDFBOX,"PDAcroForm.flatten(PDField list, refreshAppearances boolean) flattens all form fields instead of specified ones.",Improvement,CLOSED,Minor,Fixed,"2.0.5, 2.0.6, 2.0.7","2.0.10, 3.0.0 PDFBox",AcroForm,None,,"Thanks for the excellent PDF library. For my use case I need to flatten a subset of the AcroForm fields. I was attempting to use the PDAcroForm.flatten call, passing in my field list. However, after the method is called, all the fields are gone.
The method itself appears to remove all PDFAnnotationWidgets from each page and at the end clears the acroform's field set.
Is the javadoc description (This will flatten the specified form fields.) just misleading? Could a flatten call for a subset of fields be added?
Thanks",0,"Maruan Sahyoun","Cristin Donaher",3,8,"25/May/17 16:18","21/Jun/18 20:27","16/Apr/18 18:58"
PDFBOX-3811,PDFBOX,"Problem with calling "saveIncrementalForExternalSigning" more than once in the same document",Bug,CLOSED,Trivial,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",Signing,"easyfix signature si","java 1.8","I've included the test which will fail.
After digging around a little, I found out that by calling saveIncrementalForExternalSigning, it trimmed the reserved space in the ByteRange (I've included the difference in the screen shot).
I'm not sure if this is a bug for anyone but it's for my use case (distributed digital signing). Changing the content at all is not permitted at all.
If this is an intended feature, please dismiss this. I can workaround by calling it more than once and it'll be stable although I'm not sure about efficiency.",0,"Tilman Hausherr","Le Duc Duy",0,3,"26/May/17 11:44","24/Oct/17 15:48","07/Jun/17 17:21"
PDFBOX-3813,PDFBOX,"PDF Box crash when using PDFToImage or PDFDebug",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.6","1.8.14, 2.0.7, 3.0.0 PDFBox",Rendering,None,,"When we try to do a PDFToImage or PDFDebug the attached PDF makes the jvm crash. See also attached screenshot.
We we hook a profiler to see what happens in our application when we try to load it and convert it to an image we don't see any strange things happening in memory or cpu usage. Only that our application jvm crashes.",0,"Tilman Hausherr","rogier mars",0,4,"30/May/17 08:05","21/Jul/17 04:40","30/May/17 16:35"
PDFBOX-3817,PDFBOX,"Signature form names not standard",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",Signing,None,,"We are not using the correct form names in our signature classes. The n2 layer is named "n1" in 2.0 and "n0" in 1.8. The n0 layer should be empty. The holding form must be named "FRM" and not "FRM1" or "FRM0", see
https://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PPKAppearances.pdf",0,"Tilman Hausherr","Tilman Hausherr",0,4,"06/Jun/17 15:42","21/Jul/17 04:40","07/Jun/17 15:36"
PDFBOX-3818,PDFBOX,"Update Bouncy Castle and Levigo JBig2 in trunk",Improvement,RESOLVED,Major,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox",None,None,,"Update bc to 1.57
Update levigo jbig2 to 2.0",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Jun/17 18:02","07/Jun/17 18:03","07/Jun/17 18:03"
PDFBOX-3819,PDFBOX,"TrueType glyphs not displayed in rendering on Windows 10",Bug,RESOLVED,Minor,Fixed,"2.0.6, 3.0.0 PDFBox","2.0.16, 3.0.0 PDFBox","FontBox, Rendering",None,"windows 10","On windows 10, most glyphs from PDFBOX-1743 are not displayed, only "test" is shown, for the other lines only squares are shown. The embedded fonts are broken so PDFBox uses the OS fonts.
The format type of the postscript table is 3, which means that no postscript information is provided. Apple advises against this.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Jun/17 20:47","6 days ago","6 days ago"
PDFBOX-3820,PDFBOX,"[Patch] Improved signing of existing signature fields II",Improvement,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",Signing,patch,,"In a previous patch (PDFBOX-3547) the handling for existing signature fields was improved. This patch improves it further by reducing the number of (unecessary) parameters for that use case...",0,"Tilman Hausherr",Lonzak,0,3,"08/Jun/17 15:52","21/Jul/17 04:40","26/Jun/17 18:51"
PDFBOX-3821,PDFBOX,"Newly added MDP functionality breaks PDFs <1.5",Bug,CLOSED,Major,Fixed,"2.0.5, 2.0.6","2.0.7, 3.0.0 PDFBox",Signing,None,,"Changes introduced in PDFBOX-3017, PDFBOX-3699 broke the signing functionality.
A perfectly valid PDF (in 2.0.4) doesn't pass the acrobat preflight test now:
"Incorrect value type for this key" and "general file format error"
"The required key /TransformMethod is missing" and "An unexpected value is associated with the key."
More details see the attached screenshot. I executed the "CreateVisibleSignature.java" code. And if the lines are commented the error is gone.",0,"Tilman Hausherr",Lonzak,0,4,"08/Jun/17 16:13","21/Jul/17 04:40","14/Jun/17 14:58"
PDFBOX-3823,PDFBOX,"Question about forming a PDF document, including CMYK images for printing.",Task,CLOSED,Minor,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",PDModel,CMYK,,"It is necessary to form a PDF document, which in the future will be sent to print the company's printers. There are several ICC files provided by companies for printing.
I have RGB images that should be in CMYK after adding to PDF.
My code is now for drawing an image:
ImageObject = LosslessFactory.createFromImage (document, image);
ContentStream.drawImage (imageObject, position.x, position.y, imageSize.width, imageSize.height);
I'm wondering whether it is possible to display images in a document in ColorSpace CMYK? Unfortunately, I'm not find working examples yet.
If so, how can I get PDImageXObject in CMYK ColorSpace from BufferedImage in RGB ColorSpace?
When I try to create PDImageXObject instance from CMYK image file I get exception:
javax.imageio.IIOException: Unsupported Image Type",0,"Tilman Hausherr","Mikhail Semionenko",1,4,"09/Jun/17 04:52","21/Jul/17 04:40","15/Jun/17 18:43"
PDFBOX-3824,PDFBOX,"Optimize TrueType font embedder",Improvement,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",PDModel,optimization,,"From Uwe Möser in the user mailing list:
I made a small project which creates 32 pdfs with PDFBox and iText. The output is:
Time elapsed PDFBox: 2521 msec. (2305msec loading)
Time elapsed iText: 661 msec.
It is possible to improve the load function?
It is possible to create a template document before the loop?
Tested with PDFBox 2.0.6 and iText 2.1.7.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"09/Jun/17 15:55","21/Jul/17 04:40","11/Jun/17 13:45"
PDFBOX-3826,PDFBOX,"NPE if RAFDataStream.getCurrentPosition() when TrueTypeFont created from file is reused",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",FontBox,regression,,"java.lang.NullPointerException: null
 at org.apache.fontbox.ttf.RAFDataStream.getCurrentPosition(RAFDataStream.java:88)
 at org.apache.fontbox.ttf.TrueTypeFont.getTableBytes(TrueTypeFont.java:121)
 at org.apache.fontbox.ttf.TTFSubsetter.writeToStream(TTFSubsetter.java:1012)
 at org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder.subset(TrueTypeEmbedder.java:329)
 at org.apache.pdfbox.pdmodel.font.PDType0Font.subset(PDType0Font.java:162)
 at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1275)
 at org.apache.pdfbox.pdmodel.font.PDFontTest.testMultipleFontFileReuse(PDFontTest.java:160)
    @Test
    public void testMultipleFontFileReuse() throws IOException, URISyntaxException
    {
        URL url = PDFontTest.class.getClassLoader().getResource(
                "org/apache/pdfbox/ttf/LiberationSans-Regular.ttf");
        File file = new File(url.toURI());

        TrueTypeFont ttf = new TTFParser().parse(file);

        for (int i = 0; i < 32; ++i)
        {
            try (PDDocument doc = new PDDocument())
            {
                PDPage page = new PDPage();
                doc.addPage(page);
                PDFont font = PDType0Font.load(doc, ttf, true);
                try (PDPageContentStream cs = new PDPageContentStream(doc, page))
                {
                    cs.beginText();
                    cs.setFont(font, 10);
                    cs.showText("testMultipleFontFileReuse");
                    cs.endText();
                }
                doc.save(new ByteArrayOutputStream());
            }
        }
    }
This happens only if the TrueTypeFont is created from a file, not when it is created from a stream (PDFBOX-3337). It worked in 2.0.0 but no longer since 2.0.1.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"11/Jun/17 13:38","21/Jul/17 04:40","17/Jul/17 10:02"
PDFBOX-3827,PDFBOX,"Setting empty values on listbox keeps marked item",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",AcroForm,None,,"PDListBox multiListBox = (PDListBox) acroForm.getField("multiple_listbox");
multiListBox.setValue(new ArrayList<>());
When looking at the file with Adobe Reader, there is still an element selected.
The cause is that the /I entry isn't removed.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"12/Jun/17 15:30","21/Jul/17 04:40","12/Jun/17 15:36"
PDFBOX-3828,PDFBOX,"Generate appearance stream for multiselect listboxes",Improvement,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",AcroForm,None,,"AppearanceGeneratorHelper.insertGeneratedSelectionHighlight() does not yet support multiselect listboxes. Two other problems are that the positions are incorrect (at least with the attached file), and that it insists on having at least one element selected. IMHO it is allowed to have none element selected in a listbox, see attached "empty" file, which I created by saving a file with Adobe Reader that had "needAppearances" set.
I expanded the existing code for multiselect, and corrected the position problem with some trial-and-error.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"12/Jun/17 15:45","21/Jul/17 04:40","14/Jun/17 21:35"
PDFBOX-3829,PDFBOX,"ExtractImages fails for JPX images",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",Utilities,None,,"ExtractImages fails with JPX images:
2017-06-13 21:20:58 ERROR ImageIOUtil:191 - No ImageWriter found for 'jpx' format
2017-06-13 21:20:58 ERROR ImageIOUtil:199 - Supported formats: JPG jpg JPEG 2000
JPEG2000 tiff bmp BMP gif GIF WBMP png PNG raw RAW JPEG pnm PNM tif TIF TIFF jpeg2000 jpeg wbmp jpeg 2000
This is because "jpx" doesn't exist, only jpeg2000 does. In TestImageIOUtils this is caught, but not in ExtractImages.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"13/Jun/17 19:23","21/Jul/17 04:40","15/Jun/17 18:32"
PDFBOX-3831,PDFBOX,"v2.0.6 still has hardcoded reference to BouncyCastleProvider",Bug,CLOSED,Major,Fixed,2.0.6,2.0.7,Crypto,None,,"It seems that PDFBox v2.0.6 still has a hardcoded reference to BouncyCastleProvider, though release note says it was removed.
PDFBOX-2963 - Remove Bouncy Castle Provider Reference
public final class SecurityHandlerFactory
{
    /** Singleton instance */
    public static final SecurityHandlerFactory INSTANCE = new SecurityHandlerFactory();

    static
    {
        Security.addProvider(new BouncyCastleProvider());
    }
Is it as expected that the following modification was only committed to trunk and not committed to 2.0 branch?
https://svn.apache.org/viewvc?view=revision&revision=1789414
I use PDFBox v2.0.5 to parse a pdf file, but don't want it to add dependency to Bouncy Castle because it globally register a Provider instance.",0,"Andreas Lehmkühler","Naohiro OOHIRA",0,3,"15/Jun/17 08:18","21/Jul/17 04:40","16/Jun/17 09:38"
PDFBOX-3832,PDFBOX,"PDFBox Won't Embed a Font for a Form Field if Field is Empty",Bug,CLOSED,Major,Fixed,"2.0.5, 2.0.6","2.0.7, 3.0.0 PDFBox","AcroForm, FontBox",None,,"When working with AcroForms, attempting to se the font of a form field, the font will only properly embed if the form field contains at least one character. Fonts set on empty fields do not embed. The font is only embedded if it is actually used.
Example code:
        final PDFont formFont = loadFontResourceWithDef(pdf, DEFAULT_FONT_PATH,
                DEF_DOCUMENT_FONT);
        final PDResources resources = acroForm.getDefaultResources();
        final String fontName = resources.add(formFont).getName();
        acroForm.setDefaultResources(resources);
        this.defaultAppearanceString = "/" + fontName + " 0 Tf 0 g";
    }

    public static PDFont loadFontResourceWithDef(PDDocument doc,
            String fontpath, PDFont defFont) {
        PDType0Font resFont = null;
        try {
            final InputStream is = this.getClass().getResourceAsStream(fontpath);
            if (is != null) {
                resFont = PDType0Font.load(doc, is);
            }
        } catch (IOException e) {
            log("Error loading font " + fontpath, e);
        }
        return resFont != null ? resFont : defFont;
    }
Presume that I have verified that the font actually is loaded into the formFont variable.
Some time later, I iterate over the fields in the acroform and, for each field, do this:
            if (field instanceof PDTextField) {
                final PDTextField textfield = (PDTextField) field;
                textfield.setDefaultAppearance(defaultAppearanceString);
            }",0,"Tilman Hausherr","Evan Williams",0,3,"15/Jun/17 22:58","21/Jul/17 04:40","26/Jun/17 20:19"
PDFBOX-3833,PDFBOX,"Characters in wrong order",Bug,CLOSED,Major,Fixed,"2.0.5, 2.0.6","2.0.7, 3.0.0 PDFBox","Text extraction",diacritic,,"The attached pdf file (which is page 3 of https://jp.mathworks.com/tagteam/89688_93050v00_JP_machine_learning_section1_ebook.pdf) shows multiple problems when reading with PDFBox in standard settings. This bug report in particular is about the Katakana ー being misplaced.
In the text block on the left, the second line starts with ターン. PDFTextStripper.getText returns text starting with タ ンー (i.e., adding a space after the first character and swapping the second and third one). This effect also happens at other places in the (complete) file.
The PDF itself at this point has [<03BB>43.9 <0294>156 <03EF>-24.5 ...]TJ, listing the characters in the proper order. Copy&paste using Apple's Preview.App also preserves that order.",0,"Tilman Hausherr","Christopher Creutzig",0,5,"20/Jun/17 11:55","21/Jul/17 04:40","21/Jun/17 16:54"
PDFBOX-3834,PDFBOX,"java.util.MissingResourceException: Glyphlist not found: org/apache/pdfbox/resources/glyphlist.txt",Bug,CLOSED,Major,"Not A Problem",None,None,None,None,,"I get this error at the following line when ran from a Tomcat application.
PDFont fontPlain = PDType1Font.HELVETICA
Version: 1.8.10
Please help.",0,"Andreas Lehmkühler","Afsiya Alavumkudy",0,3,"20/Jun/17 14:09","13/Jul/17 10:23","13/Jul/17 10:23"
PDFBOX-3836,PDFBOX,"PDFToImage: Text missing or background box stacks over",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",Rendering,None,,"When I try to convert this pdf to image, with the PDFToImage example app, then the result image is incorrect.
Some text blocks are missing (or maybe the background color box is stack over the text).
To reproduce:
`java -jar pdfbox-app-3.0.0-SNAPSHOT.jar PDFToImage /tmp/doc_mock.pdf`
Thanks",0,"Tilman Hausherr",ccouturi,1,3,"21/Jun/17 12:48","21/Jul/17 04:40","22/Jun/17 16:53"
PDFBOX-3838,PDFBOX,"NPE in PatchMeshesShadingContext.readPatch()",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",Rendering,None,,"Caused by: java.lang.NullPointerException: null
    org.apache.pdfbox.pdmodel.graphics.shading.PatchMeshesShadingContext.readPatch(PatchMeshesShadingContext.java:223)
    org.apache.pdfbox.pdmodel.graphics.shading.PatchMeshesShadingContext.collectPatches(PatchMeshesShadingContext.java:122)
    org.apache.pdfbox.pdmodel.graphics.shading.PatchMeshesShadingContext.<init>(PatchMeshesShadingContext.java:69)
    org.apache.pdfbox.pdmodel.graphics.shading.Type7ShadingContext.<init>(Type7ShadingContext.java:46)
    org.apache.pdfbox.pdmodel.graphics.shading.Type7ShadingPaint.createContext(Type7ShadingPaint.java:68)
Cause: /Decode array is too short",0,"Tilman Hausherr","Tilman Hausherr",0,2,"22/Jun/17 16:51","21/Jul/17 04:40","22/Jun/17 16:52"
PDFBOX-3839,PDFBOX,"AIOOB in PDResources.getFont()",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox","FontBox, Parsing",None,,"As reported by Lauri Laanti in the users mailing list:
java.lang.ArrayIndexOutOfBoundsException: 4
at org.apache.fontbox.ttf.PostScriptTable.getName(PostScriptTable.java:318)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.readEncodingFromFont(PDTrueTypeFont.java:260)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.readEncoding(PDSimpleFont.java:134)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.<init>(PDTrueTypeFont.java:209)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:75)
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)


Investigating the function in question:

public String getName(int gid)
313            {
314                if (gid < 0 || glyphNames == null || gid > glyphNames.length)
315                {
316                    return null;
317                }
318                return glyphNames[gid];
319            }

I think that the check on line 314 should be :

gid < 0 || glyphNames == null || gid >= glyphNames.length

Otherwise, when gid == glyphNames.length there will be AIOOB.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"22/Jun/17 17:26","21/Jul/17 04:40","10/Jul/17 16:54"
PDFBOX-3843,PDFBOX,"Rect of Annotation contains indirect elements + Patch",Bug,CLOSED,Minor,Fixed,1.8.13,1.8.14,PDModel,"Annotations patch",,"During processing of attached PDF file (081204_gcada.pdf) I've found out that method PDAnnotation.getRectangle() is not able to get elements from Rect of annotation if these elements are indirect cos objects ([10 0 R 11 0 R 12 0 R 13 0 R]) -> returns null.
It works only if elements are direct cos objects.
Affected annotation is present on page with reference number 266 0 R (page 25).
Also I've attached a patch which solves this problems.",0,"Tilman Hausherr","Martin Mancuska",0,3,"29/Jun/17 22:32","19/Apr/18 19:31","30/Jun/17 16:12"
PDFBOX-3845,PDFBOX,"Could not find referenced cmap stream H",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.6","2.0.7, 3.0.0 PDFBox","FontBox, PDModel",None,"windows 7","The PDFTextStripperByArea.extractRegions fails for the first page of the attached document.
java.io.IOException: Error: Could not find referenced cmap stream H
at org.apache.fontbox.cmap.CMapParser.getExternalCMap(CMapParser.java:415)
at org.apache.fontbox.cmap.CMapParser.parsePredefined(CMapParser.java:87)
at org.apache.pdfbox.pdmodel.font.CMapManager.getPredefinedCMap(CMapManager.java:54)
at org.apache.pdfbox.pdmodel.font.PDType0Font.readEncoding(PDType0Font.java:181)
at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:129)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:123)
at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:815)
at com.geensoft.traceability.converters.pdf.strippers.AreaStripper.processOperator(AreaStripper.java:324)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:472)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:446)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:149)
at org.apache.pdfbox.text.PDFTextStreamEngine.processPage(PDFTextStreamEngine.java:136)
at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)
at org.apache.pdfbox.text.PDFTextStripperByArea.extractRegions(PDFTextStripperByArea.java:132)",0,"Andreas Lehmkühler","Johan Delouvée",0,4,"30/Jun/17 08:20","21/Jul/17 04:40","02/Jul/17 15:09"
PDFBOX-3847,PDFBOX,"code has bug",Bug,CLOSED,Major,Fixed,2.0.4,"2.0.7, 3.0.0 PDFBox",None,None,,"in org.apache.pdfbox.rendering.PageDrawer.java
// return border info. BorderStyle must be provided as parameter because
// method is not available in the base class
private AnnotationBorder getAnnotationBorder(PDAnnotation annotation,
PDBorderStyleDictionary borderStyle)
{
AnnotationBorder ab = new AnnotationBorder();
COSArray border = annotation.getBorder();
if (borderStyle == null)
{
// this code may throw NullPointerException
if (border.get(2) instanceof COSNumber)
{ ab.width = ((COSNumber) border.getObject(2)).floatValue(); }
if (border.size() > 3)
{
COSBase base3 = border.getObject(3);
if (base3 instanceof COSArray)
{ ab.dashArray = ((COSArray) base3).toFloatArray(); }
}
}
i can not find the pdf file that has this promble.",0,"Tilman Hausherr",xl19870217,0,3,"30/Jun/17 09:31","21/Jul/17 04:40","04/Jul/17 17:20"
PDFBOX-3850,PDFBOX,"DrawPrintTextLocations should limit bbox paint to font bbox when type 3 font has incorrect large glyph bbox",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",Utilities,type3,,"The cyan rectangle should not be larger than the font bbox. In the attached file, the indidual glyph bboxes are all too large. Also add a comment that calculating glyph bounds for type 3 fonts is futile.
Initial report by Esteban Nicolas Ruiz is here.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"01/Jul/17 03:33","21/Jul/17 04:40","01/Jul/17 09:19"
PDFBOX-3852,PDFBOX,"Overlay a pdf file which is 750 pages ends up in OutOfMemoryError",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",PDModel,Overlay,"ubuntu, jetty","We found an issue and solution to fix it, you guys might would be interested to have a look and see whether it is worth applying the attached patch to benefit more pdfbox users. And a bit more detail this error happens based on jetty running time memory setting, and pdf file size.
Application platform:
Unbuntu, jetty
The test case to produce this issue:
Add simple overlay to all pages (in this case it is 750 pages). The processPages function eats up the JVM memories while applying the overlay to the file.
sample code for using pdfbox overlay:
 PDDocument document = PDDocument.load( pdf );
 HashMap<Integer, String> overlayGuide = new HashMap();
 for (int i = 0; i < pagenunber; i++)
 {
  // "watermarked.pdf" meat to be a file which contains watermarks on the page
   overlayGuide.put(i+1, "watermarked.pdf");
 }
 Overlay overlay = new Overlay();
 overlay.setInputPDF( document );
 overlay.setOverlayPosition( Overlay.Position.FOREGROUND );
 PDDocument overlayResult = overlay.overlay( overlayGuide );
Error log:
INFO   | jvm 1    | main    | 2017/07/03 13:06:23 | java.lang.OutOfMemoryError: Java heap space
STATUS | wrapper  | main    | 2017/07/03 13:06:23 | Filter trigger matched.  Restarting JVM.
INFO   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.io.ScratchFile.<init>(ScratchFile.java:128)
INFO   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance(ScratchFile.java:143)
INFO   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.cos.COSStream.<init>(COSStream.java:55)
INFO   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.multipdf.Overlay.createStream(Overlay.java:***)
INFO   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.multipdf.Overlay.processPages(Overlay.java:364)
INFO   | jvm 1    | main    | 2017/07/03 13:06:23 |  at org.apache.pdfbox.multipdf.Overlay.overlay(Overlay.java:128)
Solution
Apply MemoryUsageSetting to Overlay, allows Overlay to use file as temp output.
Update for the Overlay usage:
 PDDocument document = PDDocument.load( pdf );
 HashMap<Integer, String> overlayGuide = new HashMap();
 for (int i = 0; i < pagenunber; i++)
 {
   overlayGuide.put(i+1, "watermarked.pdf");
 }
 Overlay overlay = new Overlay();
 overlay.setInputPDF( document );
 overlay.setOverlayPosition( Overlay.Position.FOREGROUND );
 // set overlay to use temp file as out rather than memory
 MemoryUsageSetting memoryUsageSetting = MemoryUsageSetting.setupTempFileOnly(  );
 memoryUsageSetting.setTempDir( new File ( "someTempWorkingDir" ) );
 overlay.setMemoryUsageSetting( memoryUsageSetting );
 PDDocument overlayResult = overlay.overlay( overlayGuide );",0,"Tilman Hausherr",ryuukei,1,3,"03/Jul/17 19:38","21/Jul/17 04:40","06/Jul/17 16:35"
PDFBOX-3854,PDFBOX,"PDDeviceRGB.toRGBImage should return a RGB-Typed-Image",Improvement,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox","PDModel, Rendering",optimization,,"While converting a PDPage to a BufferedImage (using the PDFRenderer) Images-Resources located in the PDPage gets loaded in a WriteableRaster and a given Colorspace.
These get converted to a BufferedImage (with PDDeviceRGB.toRGBImage()). But the Type of the returing BufferedImage is with the given Raster and Colorspace always from Type "BufferedImage.TYPE_CUSTOM" instead of the expected "BufferedImage.TYPE_INT_RGB" for example.
Consequences:
Image-Processing-Operations with/on BufferedImages with TYPE_CUSTOM are not optimized in Java (slower) and partialy runs through "Synchronized" Blocks.
==> Converting different Documents in different Threads are blocking each other.
"Quick"-Fix for seeing a Performance-Improvement in a Multithreading Environment:
PDDeviceRGB.java
@Override
public BufferedImage toRGBImage(WritableRaster raster) throws IOException {
 init();
 ColorModel colorModel = new ComponentColorModel(awtColorSpace, false, false, Transparency.OPAQUE,
   raster.getDataBuffer().getDataType());

 BufferedImage image = new BufferedImage(colorModel, raster, false, null);

 BufferedImage dest = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
 ColorConvertOp op = new ColorConvertOp(dest.getColorModel().getColorSpace(), null);
 return op.filter(image, dest);
}",0,"Tilman Hausherr","Yannick Haser",0,4,"04/Jul/17 09:45","21/Jul/17 04:40","08/Jul/17 11:12"
PDFBOX-3855,PDFBOX,"NPE in CFFParser.parse()",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",FontBox,None,,"java.lang.NullPointerException: null
    org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:139)
    org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:68)
    org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:103)
    org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:60)
I can't share the file due to confidentiality. I'll just catch the null.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/Jul/17 16:55","21/Jul/17 04:40","05/Jul/17 16:58"
PDFBOX-3857,PDFBOX,"Can not extract exported values for PDRadioButton",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.6","2.0.7, 3.0.0 PDFBox","AcroForm, Documentation",newbie,"linux, java","It seems that it is not possible to extract exported values for PDRadioButton or PDCheckBox.
The command ((PDRadioButton) field).getExportValues() always returns an empty list.",0,"Tilman Hausherr","Miloslav Konopík",0,3,"07/Jul/17 11:55","21/Jul/17 04:40","07/Jul/17 16:31"
PDFBOX-3858,PDFBOX,"Optimize 1 component DeviceN colorspace",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox","PDModel, Rendering","devicen optimization",,"I received a file (confidential) that has an image with a 1 component DeviceN colorspace that maps (through a long type 4 function) to a CMYK colorspace. Rendering takes over 20 minutes. The reason is that for each pixel, first the type 4 (PostScript) function must be calculated, then the CMYK value must be converted to RGB.
Solution: cache the inputs and the results when the DeviceN colorspace has only 1 component. Rendering time goes down to a few seconds.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Jul/17 16:04","21/Jul/17 04:40","07/Jul/17 16:20"
PDFBOX-3859,PDFBOX,"Output destination page in PrintBookmarks example",Improvement,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox","PDModel, Utilities",None,,"see title",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Jul/17 20:38","21/Jul/17 04:40","08/Jul/17 20:41"
PDFBOX-3860,PDFBOX,"TilingPaint.getImage() should return an ARGB-Typed-Image",Improvement,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",Rendering,optimization,,"TilingPaint.getImage() has this:
        ColorSpace outputCS = ColorSpace.getInstance(ColorSpace.CS_sRGB);
        ColorModel cm = new ComponentColorModel(outputCS, true, false,
                Transparency.TRANSLUCENT, DataBuffer.TYPE_BYTE);

        WritableRaster raster = cm.createCompatibleWritableRaster(rasterWidth, rasterHeight);
        BufferedImage image = new BufferedImage(cm, raster, false, null);
This is the same problem as in PDFBOX-3854. I have a confidential file ("bicycle", p134) with many patterns, and changing the code to return BufferedImage.TYPE_INT_ARGB brings rendering from 70 secs to 26 secs.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Jul/17 16:07","21/Jul/17 04:40","09/Jul/17 16:17"
PDFBOX-3861,PDFBOX,"ClassCastException: org.apache.pdfbox.cos.COSStream cannot be cast to org.apache.pdfbox.cos.COSString",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",PDModel,None,,"I got a ClassCastException throught Tika HTML extraction on PDFBox code:
org.apache.tika.exception.TikaException: Unexpected RuntimeException from org.apache.tika.parser.pdf.PDFParser@60b1fa63
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:282)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
 ... 16 more
Caused by: java.lang.ClassCastException: org.apache.pdfbox.cos.COSStream cannot be cast to org.apache.pdfbox.cos.COSString
 at org.apache.pdfbox.cos.COSDictionary.getDate(COSDictionary.java:787)
 at org.apache.pdfbox.pdmodel.PDDocumentInformation.getCreationDate(PDDocumentInformation.java:212)
 at org.apache.tika.parser.pdf.PDFParser.extractMetadata(PDFParser.java:256)
 at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:146)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)",0,"Tilman Hausherr","Jorge Spinsanti",0,3,"10/Jul/17 13:52","21/Jul/17 04:40","10/Jul/17 16:21"
PDFBOX-3863,PDFBOX,"Support duplex entry in ViewerPreferences",Improvement,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",PDModel,None,,"The attached SO question inspired me to support the duplex entry in ViewerPreferences, even if it isn't what the person asked for. Adobe Reader supports it, i.e. their print dialog changes depending on the entry.
To test this feature, create a PDF with 2 pages and use this code:
PDDocumentCatalog documentCatalog = document.getDocumentCatalog();
PDViewerPreferences viewerPreferences = new PDViewerPreferences(new COSDictionary());
viewerPreferences.setDuplex(PDViewerPreferences.DUPLEX.DuplexFlipShortEdge);
documentCatalog.setViewerPreferences(viewerPreferences);
This will show the calender duplex mode in the print dialog.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/Jul/17 16:55","21/Jul/17 04:40","10/Jul/17 16:59"
PDFBOX-3864,PDFBOX,"UTF16 encoded string to PDFDocEncoding",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",PDModel,None,,"From Andrea Vacondio in the mailing list:
Hi, we came across this case where we are basically cloning outline items
where the original outline title is a UTF16BE encoded text string
containing the value 00A0 (non break space). We later use the string to
assign the title in a new outline item and the A0 is recognised as a € sign.
Here is a simple test:
        COSString victim = COSString
                .parseHex("FEFF004300680061007000740065007200A0");
        PDOutlineItem node = new PDOutlineItem();
        node.setTitle(victim.getString());
If you look at the node dictionary you'll see that the title value is
Chapter€
The cause is that in the initialization of PDFDocEncoding it was forgotten that there are "holes" in the 0..255 sequence. I'll add that and a test.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"11/Jul/17 14:20","21/Jul/17 04:40","11/Jul/17 14:56"
PDFBOX-3865,PDFBOX,"Add OWASP dependency-check to build",Task,CLOSED,Major,Fixed,"1.8.13, 2.0.6, 3.0.0 PDFBox","1.8.14, 2.0.7, 3.0.0 PDFBox",None,"build maven",,"https://github.com/jeremylong/dependency-check-gradle#current-release
checks the build against known security issues. I tried it with a project that linked pdfbox 2.0.0 (has XXE vulnerability) and yes, the build stopped.
Because the database needs 400MB in the repository we'll run it only in "pedantic" mode, i.e. for the jenkins builds.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"11/Jul/17 15:13","21/Jul/17 04:40","11/Jul/17 17:15"
PDFBOX-3867,PDFBOX,"IndexOutOfBoundsException on CMapParser",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox","FontBox, Text extraction",None,,"I got the next stacktrace in PDF->HTML conversion using Tika:
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
 at java.util.ArrayList.rangeCheck(ArrayList.java:635)
 at java.util.ArrayList.get(ArrayList.java:411)
 at org.apache.fontbox.cmap.CMapParser.parseBeginbfrange(CMapParser.java:364)
 at org.apache.fontbox.cmap.CMapParser.parse(CMapParser.java:136)
 at org.apache.pdfbox.pdmodel.font.CMapManager.parseCMap(CMapManager.java:73)
 at org.apache.pdfbox.pdmodel.font.PDFont.readCMap(PDFont.java:197)
 at org.apache.pdfbox.pdmodel.font.PDFont.<init>(PDFont.java:137)
 at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:119)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:838)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:495)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:469)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
 at org.apache.pdfbox.text.LegacyPDFStreamEngine.processPage(LegacyPDFStreamEngine.java:139)
 at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)
 at org.apache.tika.parser.pdf.PDF2XHTML.processPage(PDF2XHTML.java:147)
 at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)
 at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)
 at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:117)
 at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)",0,"Tilman Hausherr","Jorge Spinsanti",0,3,"13/Jul/17 17:00","21/Jul/17 04:40","16/Jul/17 19:47"
PDFBOX-3868,PDFBOX,"Optimize usage of COSStream construction",Improvement,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox","Documentation, PDModel",optimization,,"The COSStream() constructor is evil... discovered in PDFBOX-3852: it creates a new memory scratch file... which is an array with 100000 entries. I'll improve the javadoc and make some changes to avoid the usage when possible.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"13/Jul/17 17:09","21/Jul/17 04:40","15/Jul/17 10:27"
PDFBOX-3869,PDFBOX,"Splitter.createNewDocument() should be able to consider different MemoryUsageSetting configurations",Improvement,CLOSED,Major,Fixed,2.0.6,"2.0.7, 3.0.0 PDFBox",Utilities,optimization,,"As suggested by Daniel Hamann in the user mailing list, see details here.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"13/Jul/17 17:13","21/Jul/17 04:40","16/Jul/17 19:48"
PDFBOX-3870,PDFBOX,"Wrong type of referenced length in COSParser",Bug,CLOSED,Major,"Won't Fix",2.0.6,None,Parsing,None,,"I got an exception to extract text from PDF with Tika (exception thrown on pdfbox code):
org.apache.tika.exception.TikaException: TIKA-198: Illegal IOException from org.apache.tika.parser.pdf.PDFParser@2be78cf6
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:286)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
Caused by: java.io.IOException: Wrong type of referenced length object COSObject{11, 0}: COSNull
 at org.apache.pdfbox.pdfparser.COSParser.getLength(COSParser.java:908)
 at org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:950)
 at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:781)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:742)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:673)
 at org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:633)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:241)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:276)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1132)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1066)
 at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:141)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
 ... 24 more",0,"Andreas Lehmkühler","Jorge Spinsanti",0,4,"14/Jul/17 12:19","30/Sep/17 15:21","30/Sep/17 15:21"
PDFBOX-3873,PDFBOX,"Fix text comparison in PDFontTest",Task,CLOSED,Minor,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox","Text extraction",None,,"The text comparison in PDFontTest worked locally but not on the server so the assert line was disabled. After looking at TestTextStripper, I assume that I need to add stripper.setLineSeparator("\n"); but I'll do it after the 2.0.7 release.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Jul/17 16:25","02/Nov/17 21:01","17/Jul/17 18:17"
PDFBOX-3874,PDFBOX,"/Fontinfo instead of /FontInfo in type 1 font",Bug,CLOSED,Major,Fixed,2.0.6,2.0.8,FontBox,"type1 type1font",,"These incorrect fonts all have "fzbookmaker" in it. This keyword appear only in chinese search results.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Jul/17 16:47","02/Nov/17 21:00","19/Jul/17 16:53"
PDFBOX-3878,PDFBOX,"Improve and refactor RemoveAllText example",Improvement,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Utilities,None,,"Refactor double code and include patterns, not just xobject forms when going through resources. This will be a better template for utilities that work on the content stream tokens, e.g.
https://stackoverflow.com/a/45259160/535646",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Jul/17 19:41","02/Nov/17 21:01","25/Jul/17 15:31"
PDFBOX-3881,PDFBOX,"Handling of Byte Order Mark with Metadata-Fields",Bug,CLOSED,Minor,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Parsing,BOM,windows,"PDDocumentInformation e.g. getAuthor() honors the byte order of the extracted string and removes the byte order mark signs.
But if the extracted string does only contain the byte order mark signs the corresponding string "þÿ" is returned.
Is this the intended solution?
I'd appreciate to remove the byte order mark signs also, if the extracted string does only contain these signs.
Problematic code:
public String getString()
  {
  if (this.bytes.length > 2)
    {
      if (((this.bytes[0] & 0xFF) == 254) && ((this.bytes[1] & 0xFF) == 255))
      {

        return new String(this.bytes, 2, this.bytes.length - 2, Charsets.UTF_16BE);
      }
      if (((this.bytes[0] & 0xFF) == 255) && ((this.bytes[1] & 0xFF) == 254))
      {

        return new String(this.bytes, 2, this.bytes.length - 2, Charsets.UTF_16LE);
      }
    }
    

    return PDFDocEncoding.toString(this.bytes);
  }
Attachment has an example pdf",0,"Tilman Hausherr","Nico Prenzel",1,3,"27/Jul/17 10:59","02/Nov/17 21:00","28/Jul/17 17:47"
PDFBOX-3884,PDFBOX,"GlyphList registers "wrong" Adobe name for "U+02DC SMALL TILDE"",Bug,CLOSED,Minor,Fixed,"2.0.6, 2.0.7","2.0.8, 3.0.0 PDFBox",PDModel,None,,"The Adobe Glyph List contains both "ilde;02DC" (line 2304) and "tilde;02DC" (line 3826), so the Unicode conversion of ExtendedRoman 0x98 (152) "small tilde" fails:
java.lang.IllegalArgumentException: U+02DC ('ilde') is not available in this font Times-Roman encoding: WinAnsiEncoding
at org.apache.pdfbox.pdmodel.font.PDType1Font.encode(PDType1Font.java:425)
at org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:323)
at org.apache.pdfbox.pdmodel.PDPageContentStream.showText(PDPageContentStream.java:414)
at pdftest.PDFEncodingError.main(PDFEncodingError.java:18)",0,"Tilman Hausherr","Matías Giovannini",0,4,"28/Jul/17 19:05","02/Nov/17 21:01","30/Jul/17 14:01"
PDFBOX-3885,PDFBOX,"Get wrong image location",Bug,CLOSED,Major,"Not A Problem",2.0.7,None,Rendering,how-to,"mac os x, java 1.8","I'm using below code to extract images to an XML file.
public class ImageExtractor extends PDFStreamEngine {
    private List<Image> images = new ArrayList<>();

    public ImageExtractor() {
        addOperator(new Concatenate());
        addOperator(new DrawObject());
        addOperator(new SetGraphicsStateParameters());
        addOperator(new Save());
        addOperator(new Restore());
        addOperator(new SetMatrix());
    }

    /**
     * This is used to handle an operation.
     *
     * @param operator The operation to perform.
     * @param operands The list of arguments.
     * @throws IOException If there is an error processing the operation.
     */
    @Override
    protected void processOperator(Operator operator, List<COSBase> operands) throws IOException {
        String operation = operator.getName();
        if ("Do".equals(operation)) {
            COSName objectName = (COSName) operands.get(0);
            PDXObject xobject = getResources().getXObject(objectName);
            if (xobject instanceof PDImageXObject) {
                PDImageXObject image = (PDImageXObject) xobject;
                String name = objectName.getName();
                String format = image.getSuffix();
                Matrix ctmNew = getGraphicsState().getCurrentTransformationMatrix();
                float imageWidth = ctmNew.getScalingFactorX();
                float imageHeight = ctmNew.getScalingFactorY();
                // position in user space units. 1 unit = 1/72 inch at 72 dpi
                float x = ctmNew.getTranslateX();
                float y = ctmNew.getTranslateY();
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                BufferedImage bufferedImage = image.getOpaqueImage();
                ImageIO.write(bufferedImage, format, bos);
                images.add(new Image(x, y, imageWidth, imageHeight, name, format, bos.toByteArray()));
            }
        } else {
            super.processOperator(operator, operands);
        }
    }

    public byte[] toZipFile(PDDocument doc) throws IOException {
        int pageNum = 0;
        StringBuilder builder = new StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<document>\n");
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipOutputStream zipOut = new ZipOutputStream(bos);
        try {
            for (PDPage page : doc.getPages()) {
                builder.append(String.format("<page width=\"%f\" height=\"%f\">\n", page.getBBox().getWidth(), page.getBBox().getHeight()));
                pageNum++;
                this.processPage(page);
                for (Image image : images) {
                    byte[] data = image.getData();
                    ZipEntry zipEntry = new ZipEntry(image.getName() + "." + image.getFormat());
                    zipOut.putNextEntry(zipEntry);
                    zipOut.write(data);

                    builder.append(String.format("<image x=\"%f\" y=\"%f\" width=\"%f\" height=\"%f\" name=\"%s\" format=\"%s\"></image>\n", image.getX(), image.getY(), image.getWidth(), image.getHeight(), image.getName(), image.getFormat()));
                }
                builder.append("</page>\n");
            }
            builder.append("</document>");
            System.out.println(builder);
            ZipEntry xmlFile = new ZipEntry("images.xml");
            zipOut.putNextEntry(xmlFile);
            zipOut.write(builder.toString().getBytes(Charset.defaultCharset()));
        } finally {
            zipOut.close();
        }
        return bos.toByteArray();
    }
}
Output is below. the y location is wrong. it should be 434.
<document>
<page width="595.000000" height="842.000000">
<image x="48.000000" y="108.000000" width="315.000000" height="300.000000" name="Im12" format="jpg"></image>
</page>
</document>
I got the right output with poppler.
<image top="434" left="48" width="315" height="300" src="src-1_1.jpg"/>  ",0,"Andreas Lehmkühler","Sun Peter",0,2,"02/Aug/17 09:42","03/Aug/17 06:06","02/Aug/17 10:25"
PDFBOX-3887,PDFBOX,"Getting a "DataFormatException: invalid distance too far back" exception for the attached file",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox","Text extraction","extraction parsing","windows 10, ubuntu","PdfBox throws the following exception:
Caused by: java.io.IOException: java.util.zip.DataFormatException: invalid distance too far back
 at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:82)
 at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:69)
 at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:162)
 at org.apache.pdfbox.pdfparser.PDFObjectStreamParser.<init>(PDFObjectStreamParser.java:55)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectStream(COSParser.java:847)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:753)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:678)
 at org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:638)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:236)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:271)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:984)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:940)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:888)
 at com.diligen.parser.pdf.PdfBoxHelper.getDocumentWithLineSegments(PdfBoxHelper.java:131)
 ... 7 more
Caused by: java.util.zip.DataFormatException: invalid distance too far back
 at java.util.zip.Inflater.inflateBytes(Native Method)
 at java.util.zip.Inflater.inflate(Inflater.java:259)
 at java.util.zip.Inflater.inflate(Inflater.java:280)
 at org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:107)
 at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:73)
 ... 20 more
If there is no quick solution for this bug, is there a workaround? Can I somehow catch the exception and take some action?",0,"Tilman Hausherr","Harun Reşit Zafer",0,3,"03/Aug/17 19:39","02/Nov/17 21:00","04/Aug/17 15:10"
PDFBOX-3889,PDFBOX,"javax.crypto.BadPaddingException: Given final block not properly padded",Bug,CLOSED,Major,Fixed,1.8.13,1.8.14,"Crypto, Documentation",security,"java 1.8, windows, linux","Using the attached pdf, When running the pdf through org.apache.pdfbox.pdmodel.encryption.SecurityHandler I get
BadPaddingException.
The exception occurs when it is processing
nextObj = COSObject
{3304,0}
I see: nextCOSBase = COSDictionary{(COSName
{Length}
:COSInt
{3504}
) (COSName
{Subtype}
:COSName
{XML}
) (COSName
{Type}
:COSName
{Metadata}
) }
The problem is that SecurityHandler.proceedDecryption() runs decryptObject(nextObj);
and then decrypt(base, objNum, genNum) and then decryptStream()
However for this object decryptStream doesn't actually decrypt anything because the type is xml.
So when decryptStream calls encryptData() encryptData() throws the bad packet exception.
output.write(decryptCipher.doFinal()); throws the exception because the data buffer is all zeros. It has nothing in it. I recommend that encryption be skipped if the data buffer has all zeros.",0,"Tilman Hausherr","Lucille Wilson",0,3,"08/Aug/17 18:16","19/Apr/18 19:31","11/Aug/17 19:38"
PDFBOX-3890,PDFBOX,"The operator Tz is not available when creating new PDF using PDPageContentStream",Improvement,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",PDModel,None,,"When creating new PDF file using the PDPageContentStream there is no option to set horizontal text spacing. The horizontal text spacing operator (Tz) is implemented in org.apache.pdfbox.contentstream.operator.text.SetTextHorizontalScaling but that's not possible to use when creating new PDF.
Minimal working example:
PDDocument document = new PDDocument();
PDPage page = new PDPage();
document.addPage( page );

PDFont font = PDType1Font.HELVETICA_BOLD;
PDPageContentStream contentStream = new PDPageContentStream(document, page);

contentStream.beginText();
contentStream.setFont( font, 12 );
contentStream.moveTextPositionByAmount( 100, 700 );
contentStream.drawString( "Hello World" );
contentStream.endText();
contentStream.close();

document.save( "Hello World.pdf");
document.close();
The workaround at this moment is to use PDPageContentStream.appendRawCommands("50 Tz");
But this method is deprecated.",0,"Tilman Hausherr","Jose Novacho",0,3,"09/Aug/17 15:57","02/Nov/17 21:01","09/Aug/17 17:20"
PDFBOX-3893,PDFBOX,"encryption webpage doesnt compile",Bug,CLOSED,Major,Fixed,None,None,Documentation,None,,"Change:
PDDocument doc = PDDocument.load("filename.pdf");
to:
PDDocument doc = PDDocument.load(new File("filename.pdf"));
https://pdfbox.apache.org/2.0/cookbook/encryption.html",0,"Maruan Sahyoun","simon steiner",1,4,"14/Aug/17 12:25","12/Sep/17 05:34","11/Sep/17 14:45"
PDFBOX-3894,PDFBOX,"NPE on org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.8, 3.0.0 PDFBox",PDModel,None,,"I got a NPE on org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode. Stacktrace:
java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode(PDPageTree.java:307)
 at org.apache.pdfbox.pdmodel.PDPageTree.access$100(PDPageTree.java:38)
 at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.enqueueKids(PDPageTree.java:164)
 at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.enqueueKids(PDPageTree.java:169)
 at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.<init>(PDPageTree.java:159)
 at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.<init>(PDPageTree.java:153)
 at org.apache.pdfbox.pdmodel.PDPageTree.iterator(PDPageTree.java:123)
 at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:314)
 at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)
 at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:117)
 at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
 ...",0,"Tilman Hausherr","Jorge Spinsanti",0,3,"14/Aug/17 14:05","02/Nov/17 21:01","20/Aug/17 11:13"
PDFBOX-3896,PDFBOX,UnsupportedOperationException,Bug,CLOSED,Major,Fixed,2.0.6,"2.0.8, 3.0.0 PDFBox",PDModel,None,,"Stacktrace:
java.lang.UnsupportedOperationException
 at java.util.AbstractList.add(AbstractList.java:148)
 at java.util.AbstractList.add(AbstractList.java:108)
 at org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:611)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:241)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:276)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1132)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1066)
 at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:141)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)",0,"Tilman Hausherr","Jorge Spinsanti",0,3,"14/Aug/17 14:39","02/Nov/17 21:00","15/Aug/17 17:49"
PDFBOX-3897,PDFBOX,"Avoid sRGB self-conversions",Improvement,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Rendering,optimization,,"1)
PDICCBased.java detects if the colorspace is sRGB, but does not use this advantage fully. toRGB() should return its argument when the colorspace is sRGB.
The files from PDF.js issues 8446 and 6737 are much faster now. The speed improvement can be experienced with files that use such pseudo ICC colorspaces for shading, because there a large number of colors have to be converted.
2)
PDDeviceRGB.java also converts colors to itself. awtColorSpace is the sRGB color space and so is /DeviceRGB, yet toRGB() calls awtColorSpace.toRGB() instead of just returning its argument.
This second change does not have much influence on the speed of rendering on my old computer (4 cores). But on the new computer (8 cores, 16 threads) the complete rendering tests are now done in 300 instead of 400 seconds.
Rendering regression tests show a lot of small differences. I assume that differences of 1/255 in a color somehow propagate and worsen, e.g. through transparency layers. I looked at a few, the differences are detected by the rendering tests but are invisible to my eye (in the diff file, the difference can be made visible by setting Gamma to minimum). I've therefore increased the tolerance to 3 units to avoid the work of analyzing hundreds of file differences. Those that remain are still invisible to my eye, except PDFBOX-3693-656282-p1-p8.pdf, which is very different but was different than Adobe before (the whole file is very broken and the first page logs over 3000 errors). I suspect it is an incorrect RGB value that isn't clipped anymore now.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"14/Aug/17 15:55","02/Nov/17 21:01","15/Aug/17 18:12"
PDFBOX-3900,PDFBOX,"Optimize PDSeparation for shadings",Improvement,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Rendering,optimization,,"PDSeparation.toRGB() isn't optimized yet. It is easy to optimize because it is a single item color. However we can't use a float key like in image conversion (which is optimized) because the method is called by shading, so there may be an infinite number of keys and not just 256. Thus we'll multiply with 255, cast to int and use that as key. Due to the different intervals, the map can't be shared with the map from the two other conversions in the class. It isn't needed either because the PDSeparation objects are usually different, even if it is the same indirect object in the PDF.
This optimization speeds up the rendering of PDF.js issue 8500, it renders in 66 seconds instead of 100. When rendering all my test files on my fast PC, overall time (excluding the mentioned file) gets lowered by 10 seconds, so we save up to 160 seconds somewhere.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"18/Aug/17 17:52","02/Nov/17 21:00","18/Aug/17 19:02"
PDFBOX-3906,PDFBOX,"Contributing the JBig2 ImageIO Plugin to PDFBox",Task,CLOSED,Major,Fixed,None,None,None,None,,"Levigo solutions GmbH donates the Java ImageIO-Plugin for the JBIG2 to the PDFBox project. The Plugin is currently hosted at https://github.com/levigo/jbig2-imageio and has already been prepared for integration.
The steps completed so far are:
IP vetting for contributions by non-levigo developers
Merging/application of all pending pull requests
Update of the project structure in anticipation of the new home:
package names
license headers
license files
README.md
release notes
Maven project information
A tgz containing the source code has been attached:
It is based on commit 483aab3eb9bbc02f6995a637155adf6b922ed0c0 (https://github.com/levigo/jbig2-imageio/commit/483aab3eb9bbc02f6995a637155adf6b922ed0c0).
Its SHA1 is 0e07111b4bf7f5a51bf0fdd903f02f082ea3bf65",0,"Andreas Lehmkühler","Jörg Henne",2,4,"23/Aug/17 13:40","07/Dec/17 19:16","07/Dec/17 19:16"
PDFBOX-3907,PDFBOX,"How to identify cell in PDF",Bug,CLOSED,Blocker,"Not A Problem",2.0.5,None,Parsing,None,,"Hi Team,
I need your help.I reading pdf.
while reading there are data in cells.
Problem:
1)How to identify cell
2)how to identify color cell
2)how to identify data in cell if data is available if not i want make seperater | .
3)how to identify space between cells.
Pease find attached doc and pdf.
Please help me on this.",0,"Andreas Lehmkühler",tirumala,0,2,"23/Aug/17 18:36","23/Aug/17 21:46","23/Aug/17 19:33"
PDFBOX-3908,PDFBOX,"How to read date each row and cloumn wise while reading pdf",Bug,CLOSED,Critical,Duplicate,None,None,Parsing,None,,"Hi,
I am reading pdf files.
I am reading file line by line.I looking date to be read column wise in each row wise.
I am getting more space between when compare with pdf
Basically i want write date to xls file.
with my logic i am facing am facing alignment issue.
Can you please help.
I am attaching out put and files as well.",0,"Andreas Lehmkühler",tirumala,0,2,"23/Aug/17 19:55","23/Aug/17 21:46","23/Aug/17 21:46"
PDFBOX-3909,PDFBOX,"End of inline image not detected",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.7","1.8.14, 2.0.8, 3.0.0 PDFBox",Parsing,inline,,"The original file (which the user wants to keep confidential) contains an inline image; after the "EI" there is a space, then a zero, then a "Q". The zero fools the heuristics.
I've created two files that reproduce the effect.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Aug/17 17:42","02/Nov/17 21:01","24/Aug/17 18:19"
PDFBOX-3911,PDFBOX,"Handle new line characters in single line text fields",Improvement,CLOSED,Minor,Fixed,"2.0.7, 3.0.0 PDFBox","2.0.8, 3.0.0 PDFBox",AcroForm,Appearance,,"As discussed on the users mailing list Adobe will generate an appearance stream for text containing new line characters in singe line fields. There are two ways this is currently done
for manual data entry new line characters are ignored
when setting the data via an API and enforcing Adobe Reader to generate the appearance stream multiline output will be achieved
We'd need to decide which mode we'd like to replicate",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"25/Aug/17 06:11","02/Nov/17 21:01","02/Oct/17 10:31"
PDFBOX-3913,PDFBOX,"Japanese URI improperly decoded",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",PDModel,None,,"PDActionURI.getURI() function returns bad result for the first link annotation in the attached document business.pdf (this doc works fine in Acrobat Reader).
We are using PdfBox 2.0.5
//..
//Iterates by all annotations on the first page of doc, searches for first annotation of type PDAnnotationLink
//..
  PDAnnotationLink link = (PDAnnotationLink) annotation;
  PDAction action = link.getAction();

//this would return buggy result: http://çµ„åŒ¶æ›¿ç¶Ž.com/
String badURI = ((PDActionURI) action).getURI();

//although, here fine result is returned: http://経営承継.com/
String goodURI = new String(((COSString)action.getCOSObject().getDictionaryObject("URI")).getBytes());",0,"Tilman Hausherr",Roman,0,5,"29/Aug/17 13:01","02/Nov/17 21:01","17/Sep/17 09:57"
PDFBOX-3914,PDFBOX,"LayerUtility ignores OCProperties on import",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Utilities,None,,"LayerUtility ignores OCProperties on import, this leads to hidden layers (Optional Content Groups) become visible after import.
You could reproduce bug in org.apache.pdfbox.examples.pdmodel.SuperimposePage example with provided PDF.
Attached patch fixes issue.
Other way to approach this is make LayerUtility.cloner available via getter and require dealing with OCProperties in userland code.",0,"Tilman Hausherr","Ivan Khaldeev",1,3,"29/Aug/17 13:57","02/Nov/17 21:01","30/Aug/17 16:27"
PDFBOX-3916,PDFBOX,"NPE on org.apache.pdfbox.pdmodel.font.PDType0Font.readEncoding",Bug,CLOSED,Major,Fixed,2.0.6,"2.0.8, 3.0.0 PDFBox",PDModel,None,ubuntu,"I got a NullPointerException on file attached. The file can see using PDF reader (I tested using Chrome):
java.lang.NullPointerException
 at org.apache.pdfbox.pdmodel.font.PDType0Font.readEncoding(PDType0Font.java:208)
 at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:129)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:838)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:495)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:469)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
 at org.apache.pdfbox.text.LegacyPDFStreamEngine.processPage(LegacyPDFStreamEngine.java:139)
 at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)
 at org.apache.tika.parser.pdf.PDF2XHTML.processPage(PDF2XHTML.java:147)
 at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)
 at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)
 at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:117)
 at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:159)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)",0,"Tilman Hausherr","Jorge Spinsanti",0,3,"30/Aug/17 16:35","02/Nov/17 21:00","30/Aug/17 17:47"
PDFBOX-3919,PDFBOX,"Infinite loop while parsing (2)",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.7","1.8.14, 2.0.8, 3.0.0 PDFBox",Parsing,None,,"See linked article by Hanno Böck - we're affected.",0,"Tilman Hausherr","Tilman Hausherr",0,4,"04/Sep/17 15:01","24/Sep/18 17:17","04/Sep/17 15:56"
PDFBOX-3920,PDFBOX,"CIDSet should be PDF/A-2b compatible",Improvement,CLOSED,Minor,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",PDModel,None,,"From Esteban Nicolas Ruiz in the user mailing list:
I have created PDF/A-2b document with pdfbox and I have found that the font subsetting provided by pdfbox doesn't match the following requirement from the specification:
Specification: ISO 19005-2:2011, Clause: 6.2.11.4, Test number: 4
If the FontDescriptor dictionary of an embedded CID font contains a CIDSet stream, then it shall identify all CIDs which are present in the font program, regardless of whether a CID in the font is referenced or used by the PDF or not.
That is: some CIDs which are in the CIDToGidMap don't appear in the CIDSet.
Maybe it is a bug or you can add an option to generate the CIDSet to be consistent with the CIDToGidMap.
Additional details (including a sample pdf file) here:
https://github.com/veraPDF/veraPDF-library/issues/907",0,"Tilman Hausherr","Tilman Hausherr",0,2,"04/Sep/17 16:50","02/Nov/17 21:01","04/Sep/17 18:04"
PDFBOX-3923,PDFBOX,"Expected a long type at offset 52152, instead got 'xref'",Bug,CLOSED,Major,Fixed,"2.0.0, 2.0.7","2.0.8, 3.0.0 PDFBox",Parsing,None,"java 1.8","This reads as a duplicate of PDFBOX-2441, PDFBOX-3179 and several others marked as resolved in 2.0.0 however this bug is reproducible in PDFBOX 2.0.0 as well as PDFBOX 2.0.7.
The attached PDF file is parsable by Chrome (PDFium), Mozilla (pdf.js), Edge, Windows 10 Reader and Adobe Acrobat but fails using PDFBOX 2.0.0 and PDFBOX 2.0.7 with the following error.
Exception in thread "main" java.io.IOException: Error: Expected a long type at offset 52152, instead got 'xref'
        at org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1358)
        at org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber(BaseParser.java:1286)
        at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:760)
        at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:742)
        at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:673)
        at org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:633)
        at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:241)
        at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:276)
        at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1011)
        at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:949)
        at org.apache.pdfbox.tools.PrintPDF.main(PrintPDF.java:140)
        at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:72)
Caused by: java.lang.NumberFormatException: For input string: "xref"
        at java.lang.NumberFormatException.forInputString(Unknown Source)
        at java.lang.Long.parseLong(Unknown Source)
        at java.lang.Long.parseLong(Unknown Source)
        at org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1353)
        ... 11 more
We do not generate this PDF file so we are unaware of the origin but the creator has given permission to share this file publicly for troubleshooting purposes. We can ask any questions to the creator upon request.",0,"Tilman Hausherr","Tres Finocchiaro",1,4,"06/Sep/17 13:32","02/Nov/17 21:01","30/Sep/17 13:08"
PDFBOX-3925,PDFBOX,"QUADDING constants no longer public",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",AcroForm,None,,"These constants were made non public in a refactoring. I assume this was accidental, as there is no need for this. The constants don't expose anything internal, it's just values mentioned in the PDF specification.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Sep/17 15:16","02/Nov/17 21:01","07/Sep/17 15:26"
PDFBOX-3927,PDFBOX,"Support optional content in annotations",Improvement,CLOSED,Minor,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",PDModel,None,,"Annotations can have an /OC entry to assign itself to a layer, so we should have getter and setter.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"08/Sep/17 17:10","02/Nov/17 21:00","08/Sep/17 17:18"
PDFBOX-3928,PDFBOX,"IllegalArgumentException: root cannot be null with truncated file",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Parsing,regression,,"java.lang.IllegalArgumentException: root cannot be null
    org.apache.pdfbox.pdmodel.PDPageTree.<init>(PDPageTree.java:75)
    org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages(PDDocumentCatalog.java:129)
    org.apache.pdfbox.pdmodel.PDDocument.getPages(PDDocument.java:1388)
    org.apache.pdfbox.debugger.ui.DocumentEntry.getPageCount(DocumentEntry.java:42)
    org.apache.pdfbox.debugger.ui.PDFTreeModel.getChildCount(PDFTreeModel.java:195)
    java.desktop/java.beans.PropertyChangeSupport.fire(Unknown Source)
    java.desktop/java.beans.PropertyChangeSupport.firePropertyChange(Unknown Source)
    java.desktop/java.beans.PropertyChangeSupport.firePropertyChange(Unknown Source)
    org.apache.pdfbox.debugger.PDFDebugger.initTree(PDFDebugger.java:1288)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1235)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1218)
    org.apache.pdfbox.debugger.PDFDebugger.main(PDFDebugger.java:1209)
    org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:85)
This worked in 2.0.6, but no longer in 2.0.7. It happens since [ https://svn.apache.org/r1795705 ] of PDFBOX-3798.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"09/Sep/17 01:12","02/Nov/17 21:00","12/Sep/17 04:31"
PDFBOX-3929,PDFBOX,"Border style dictionary width ignored by Adobe Reader when float",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",AcroForm,None,,"Text of bug report to adobe:
Steps to reproduce bug:
1. Assign border style width 3.0 to each field widget with Apache PDFBox
2. Open PDF with Adobe Reader
Results:
Border is not of width 3
Expected results:
Border should be of width 3. However if the same is done programmatically with 3 as an integer (i.e. 3 instead of 3.0) it works. However the PDF 32000 specification clearly tells that the width in the border style dictionary is a "number". It does not request an integer. See Table 166 – Entries in a border style dictionary.
Sadly I can attach only one file. Both files are also in this bug report:
https://issues.apache.org/jira/browse/PDFBOX-3929
The files are named
BorderWidthTest3.0float.pdf (attach here too)
and
BorderWidthTest3int.pdf (displays correctly)
I have observed this effect only for the attached file (from Garry Grosso in the user mailing list). The effect does not happen with Annotations.
Code used:
        PDDocument doc = PDDocument.load(new File("BorderWeightTest.pdf"));
        PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();
        for (PDField field : acroForm.getFieldTree())
        {
            System.out.println(field);
            if (field instanceof PDTextField)
            {
                PDBorderStyleDictionary bs = new PDBorderStyleDictionary();
                bs.setWidth(3);
                ((PDTextField)field).getWidgets().get(0).setBorderStyle(bs);
            }
        }
                
        doc.save(new File("BorderWeightTest-new.pdf"));
        doc.close();",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Sep/17 12:33","02/Nov/17 21:01","09/Sep/17 12:46"
PDFBOX-3930,PDFBOX,"replace deprecated TBSCertificateStructure",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Crypto,None,,"TBSCertificateStructure is deprecated in bc 1.58; its replacement TBSCertificate is available.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Sep/17 16:17","02/Nov/17 21:01","09/Sep/17 16:27"
PDFBOX-3932,PDFBOX,"Image with predictor 15 not rendered correctly",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.7","2.0.8, 3.0.0 PDFBox",Rendering,Predictor,,"In this file, /DecodeParms has an array with 1 element. The filter is a name object.
The PDF specification has this:
A parameter dictionary or an array of such dictionaries, used by the filters specified by Filter. If there is only one filter and that filter has parameters, DecodeParms shall be set to the filter's parameter dictionary unless all the filter's parameters have their default values, in which case the DecodeParms entry may be omitted. If there are multiple filters and any of the filters has parameters set to nondefault values, DecodeParms shall be an array with one entry for each filter: either the parameter dictionary for that filter, or the null object if that filter has no parameters (or if all of its parameters have their default values). If none of the filters have parameters, or if all their parameters have default values, the DecodeParms entry may be omitted.
Currently PDFBox takes "whatever is there" from the /DecodeParms array / dictionary.
So now I tried to implement this literally in PDFBox ("If there is only one filter and that filter has parameters, DecodeParms shall be set to the filter's parameter dictionary") and that failed, there are files that have a filter array with 1 element and have a /DecodeParms array with 1 elemenent and these render properly with Adobe Reader, but no longer in PDFBox. So that "incorrect" /DecodeParms array element must be used or it will look bad.
Then I tried to implement that a dictionary would be expected when the filter was only a name, and that worked, i.e. no regressions, and the SOLR file renders too.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"15/Sep/17 16:28","02/Nov/17 21:01","15/Sep/17 17:01"
PDFBOX-3933,PDFBOX,"PDFParser swallows a CR at the end of a stream",Bug,CLOSED,Major,Fixed,1.8.13,1.8.14,Parsing,None,,"I have a PDF which I cannot share at the moment, maybe later if I get a permission from the customer.
The PDF is protected by an empty password, all streams are encrypted using AES. The PDF consistently uses the LF character for line endings. One of the streams looks like this:
10 0 obj
<</Length 9 0 R/Filter/FlateDecode/N 3/Range[0 1 0 1 0 1 ]>>
stream
....<0x0D><0x0A>
endstream
i.e. Length field is a reference to an object, in the content, the length object is stored immediately after the stream as
9 0 obj
2624
endobj
The byte <0x0D> belongs to the stream and is not to be treated as line separator in this case. The parser is not able to read the length field so it manually searches for the stream end in the class EndstreamOutputStream. This class searches both for the pair <0x0D><0x0A> and the single <0x0A>, so it strips off the <0x0D> from this particular stream content. Since the stream is encrypted, PDFBox runs into a BadPaddingException later on when trying to decrypt the stream.
The problem is reproducible using org.apache.pdfbox.PDFToImage in current 1.8.14-SNAPSHOT. The same works fine in current PDFBox 2.0.x, presumably because it uses the non-sequential parser by default.
The proposed fix is to analyze the PDF content while reading it and search for the CR character only if it was ever encountered as a line separator prior to the stream being parsed.
Note: I do not exactly know or understand the usage of the other classes inherited from BaseParser, like PDFObjectStreamParser. Maybe the line ending heuristic should be kept "as before" in these classes, by setting the new field BaseParser.hasCR to true already in the constructor.
A patch is attached.",0,"Tilman Hausherr","Petr Slaby",0,3,"18/Sep/17 12:45","19/Apr/18 19:31","20/Sep/17 15:59"
PDFBOX-3934,PDFBOX,"Page missing",Bug,CLOSED,Major,Fixed,"2.0.5, 2.0.6, 2.0.7","2.0.8, 3.0.0 PDFBox",Parsing,regression,,"The first page (with "iéseg") was in 2.0.4 but is no longer there since 2.0.5.",0,"Andreas Lehmkühler","Tilman Hausherr",0,4,"18/Sep/17 17:55","02/Nov/17 21:01","30/Sep/17 14:21"
PDFBOX-3935,PDFBOX,"DataFormatException: invalid stored block lengths",Bug,CLOSED,Major,Fixed,"2.0.8, 3.0.0 PDFBox","2.0.8, 3.0.0 PDFBox",Parsing,regression,,"java.io.IOException: java.util.zip.DataFormatException: invalid stored block lengths
    org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:82)
    org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:69)
    org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:167)
    org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:155)
    org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:505)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:484)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:158)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:220)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:147)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:69)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:290)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:259)
    java.lang.Thread.run(Thread.java:748)
Caused by: java.util.zip.DataFormatException: invalid stored block lengths
    java.util.zip.Inflater.inflateBytes(Native Method)
    java.util.zip.Inflater.inflate(Inflater.java:259)
    java.util.zip.Inflater.inflate(Inflater.java:280)
    org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:107)
    org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:73)
    org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:69)
    org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:167)
    org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:155)
    org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:505)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:484)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:158)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:220)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:147)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:69)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:290)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:259)
    java.lang.Thread.run(Thread.java:748)
This worked in 2.0.7. However splitting the file with 2.0.7 "solved" the problem (i.e. no problem rendering that one with the trunk), thus I assume there's some parsing problem in the trunk.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"18/Sep/17 18:53","02/Nov/17 21:01","30/Sep/17 13:09"
PDFBOX-3936,PDFBOX,"IllegalArgumentException: root cannot be null with truncated file (2)",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Parsing,regression,,"Exception in thread "main" java.lang.IllegalArgumentException: root cannot be null
        at org.apache.pdfbox.pdmodel.PDPageTree.<init>(PDPageTree.java:75)
        at org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages(PDDocumentCatalog.java:129)
This was OK with 2.0.6.
Tim Allison please move that file to the "truncated" subdir.",0,"Andreas Lehmkühler","Tilman Hausherr",0,4,"18/Sep/17 19:17","02/Nov/17 21:01","01/Oct/17 10:59"
PDFBOX-3937,PDFBOX,"NPE in PDCIDFontType2 constructor",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox","Parsing, PDModel",None,,"Exception in thread "main" java.lang.NullPointerException
        at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:98)
        at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:70)
        at org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont(PDFontFactory.java:125)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"18/Sep/17 21:27","02/Nov/17 21:00","18/Sep/17 21:43"
PDFBOX-3938,PDFBOX,"Add test from PDFBOX-2079 to 2.0 and trunk",Task,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Parsing,None,,"That test from PDFBOX-2079 has been added to 1.8 in PDFBOX-3933 because it turned out that a regression was not detected. I am adding it to 2.0 and trunk to prevent any possible future work to produce an undetected regression.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"20/Sep/17 17:01","02/Nov/17 21:00","20/Sep/17 17:45"
PDFBOX-3940,PDFBOX,"Lost metadata in 2.0.8-SNAPSHOT",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.8, 3.0.0 PDFBox",Parsing,regression,,"We noticed some missing metadata values in the recent large scale regression testing. I finally had a chance to look. It looks like a genuine regression.
The diff btwn 2.0.7 and 2.0.8-SNAPSHOT in metadata values is often -2. However, in some files, the problem is more pronounced.
In the attached file, when we call PDDocument.getDocumentInformation(), the returned PDDocumentInformation info is empty in 2.0.8-SNAPSHOT but not in 2.0.7.",0,"Tilman Hausherr","Tim Allison",0,3,"25/Sep/17 21:41","02/Nov/17 21:01","26/Sep/17 15:39"
PDFBOX-3942,PDFBOX,"ClassCastException in getOptionalContentGroups",Bug,CLOSED,Minor,Fixed,"1.8.13, 2.0.6, 2.0.7","1.8.14, 2.0.8, 3.0.0 PDFBox",PDModel,support,,"I noticed this issue when trying to remove a set of layers I previously added on a multi-page PDF. I noticed it in version 2.0.6, but might be present in others.
Here is a stacktrace snippet:
Caused by: java.lang.ClassCastException: org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSObject
at org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties.getOptionalContentGroups(PDOptionalContentProperties.java:180).
I looked at the source and saw the toDictionary method that seemed to be used in every other place so I just put in in place and it seems to have solved the issue.
I've uploaded the updated file, the one that I'm using, which you can review and include in your project if it's a valid fix.",0,"Tilman Hausherr","Vlad-Tudor Marchis",0,3,"26/Sep/17 13:41","02/Nov/17 21:01","29/Sep/17 14:26"
PDFBOX-3943,PDFBOX,"/Helv entry in /DR not created if /DR exists",Bug,CLOSED,Minor,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",AcroForm,None,,"The code in the attached issue shows that PDAcroForm.verifyOrCreateDefaults() doesn't create the /Helv entry if the /DR entry exists but /Helv is missing. I'll do that and the same for /ZaDb.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"27/Sep/17 15:23","03/Dec/18 13:20","27/Sep/17 15:29"
PDFBOX-3944,PDFBOX,"ERROR "Can't read embedded ICC profile" is too scary",Improvement,CLOSED,Minor,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Rendering,None,,"The ERROR alerted our sysadmin and there's no reason for that. Downgrade to WARNING.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"02/Oct/17 09:27","02/Nov/17 21:01","02/Oct/17 09:29"
PDFBOX-3946,PDFBOX,"NPE in PDActionURI.getURI() if URI doesn't exist",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.8, 3.0.0 PDFBox",PDModel,regression,,"This code brings an NPE:
        PDActionURI actionURI = new PDActionURI();
        actionURI.getURI();
This is because of my change in PDFBOX-3913",0,"Tilman Hausherr","Tilman Hausherr",0,2,"02/Oct/17 20:21","02/Nov/17 21:01","02/Oct/17 22:15"
PDFBOX-3947,PDFBOX,"ArrayIndexOutOfBoundsException in bfSearchForObjStreams",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.8, 3.0.0 PDFBox",Parsing,regression,,"java.lang.ArrayIndexOutOfBoundsException: 184
    org.apache.pdfbox.pdfparser.COSParser.bfSearchForObjStreams(COSParser.java:1766)
    org.apache.pdfbox.pdfparser.COSParser.bfSearchForObjects(COSParser.java:1529)
    org.apache.pdfbox.pdfparser.COSParser.getBFCOSObjectOffsets(COSParser.java:1445)
    org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets(COSParser.java:1379)
    org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:368)
    org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:214)
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:189)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:239)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1017)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:955)
    org.apache.pdfbox.debugger.PDFDebugger.parseDocument(PDFDebugger.java:1408)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1326)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1309)
    org.apache.pdfbox.debugger.PDFDebugger.main(PDFDebugger.java:275)
    org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:72)
worked with 2.0.7. It's the only file from the recent test by Tim.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"02/Oct/17 20:38","02/Nov/17 21:00","03/Oct/17 20:28"
PDFBOX-3948,PDFBOX,"NumberFormatException in bfSearchForObjStreams",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.8, 3.0.0 PDFBox",Parsing,regression,,"java.lang.NumberFormatException: For input string: "245
89"
    java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
    java.lang.Long.parseLong(Long.java:589)
    java.lang.Long.parseLong(Long.java:631)
    org.apache.pdfbox.pdfparser.COSParser.bfSearchForObjStreams(COSParser.java:1766)
    org.apache.pdfbox.pdfparser.COSParser.bfSearchForObjects(COSParser.java:1529)
    org.apache.pdfbox.pdfparser.COSParser.getBFCOSObjectOffsets(COSParser.java:1445)
    org.apache.pdfbox.pdfparser.COSParser.rebuildTrailer(COSParser.java:1905)
This worked in 2.0.7. The exception happens with only 2 files from the tests by Tim.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"02/Oct/17 20:47","02/Nov/17 21:01","03/Oct/17 17:48"
PDFBOX-3949,PDFBOX,"NPE in bfSearchForObjStreams",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.8, 3.0.0 PDFBox",Parsing,regression,,"java.lang.NullPointerException: null
    org.apache.pdfbox.pdfparser.COSParser.bfSearchForObjStreams(COSParser.java:1738)
    org.apache.pdfbox.pdfparser.COSParser.bfSearchForObjects(COSParser.java:1529)
    org.apache.pdfbox.pdfparser.COSParser.getBFCOSObjectOffsets(COSParser.java:1445)
    org.apache.pdfbox.pdfparser.COSParser.rebuildTrailer(COSParser.java:1905)
This worked in 2.0.7. The exception happens in 39 files.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"02/Oct/17 20:56","02/Nov/17 21:01","03/Oct/17 12:22"
PDFBOX-3950,PDFBOX,"NPE in PageIterator.enqueueKids",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.8, 3.0.0 PDFBox",Parsing,regression,,"Exception in thread "main" java.lang.NullPointerException
 at java.util.ArrayDeque.addLast(ArrayDeque.java:244)
 at java.util.ArrayDeque.add(ArrayDeque.java:418)
 at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.enqueueKids(PDPageTree.java:178)
 at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.enqueueKids(PDPageTree.java:173)
 at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.<init>(PDPageTree.java:159)
 at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.<init>(PDPageTree.java:153)
 at org.apache.pdfbox.pdmodel.PDPageTree.iterator(PDPageTree.java:123)
 at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:282)
This worked in 2.0.7. There are about 200 occurences of this exception in the tests by Tim.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"02/Oct/17 21:07","02/Nov/17 21:01","08/Oct/17 15:39"
PDFBOX-3951,PDFBOX,"Pages blank in truncated PDF",Bug,CLOSED,Minor,"Won't Fix",2.0.8,None,Parsing,regression,,"Pages are blank that had content in 2.0.7. This starts with page 20.
Same with file NJTRIAYPQAAG3CYVDRVG34PC6R367X7F
CRX4MZIDRTB4C5N5F4DATJX2PBAGW6ES
QSRWIZTTYRM2DV7IP6THTSHS74SFQH3V",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"02/Oct/17 21:28","29/Oct/17 16:44","29/Oct/17 16:44"
PDFBOX-3955,PDFBOX,"new -- very slow processing on truncated PDF",Bug,CLOSED,Major,Fixed,None,"2.0.8, 3.0.0 PDFBox",Parsing,None,,"In the latest regression run with PDFBox's 2.x branch, we're now getting very slow processing on a truncated PDF with PDFBox app's ExtractText:
http://162.242.228.174/docs/truncated_pdfs/commoncrawl2_likely_broken/7K/7KK53NK5PVKOUGDSQ4FK6542BNPC4SWB
Turns out this is not an infinite loop. After 4.5 minutes, ExtractText eventually ended with:
Exception in thread "main" java.io.IOException: Missing root object specification in trailer.
        at org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically(COSParser.java:2508)
        at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:193)
        at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:240)
        at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1012)
        at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:950)
        at org.apache.pdfbox.tools.ExtractText.startExtraction(ExtractText.java:192)
        at org.apache.pdfbox.tools.ExtractText.main(ExtractText.java:82)
        at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:60)
.",0,"Andreas Lehmkühler","Tim Allison",0,3,"09/Oct/17 17:42","02/Nov/17 21:01","09/Oct/17 18:18"
PDFBOX-3956,PDFBOX,"Truncated pdf can't be repaired anymore",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Parsing,regression,,"[~tallison@mitre.org]'s last test run reveals another minor regression. The truncated file attached to the ticket can't be read anymore. The issue is related to the changes made in PDFBOX-3936.
The following exception is thrown
java.io.IOException: Error reading stream, expected='endstream' actual='' at offset 271297
    org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:1078)
    org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:821)
    org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:782)
    org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:713)
    org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:673)
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:205)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:240)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1012)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:950)
    org.apache.pdfbox.debugger.PDFDebugger.parseDocument(PDFDebugger.java:1312)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1233)
    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1218)
    org.apache.pdfbox.debugger.PDFDebugger.main(PDFDebugger.java:1209)",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"09/Oct/17 20:53","24/Mar/18 09:41","05/Nov/17 13:25"
PDFBOX-3957,PDFBOX,"Pages lost",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.8, 3.0.0 PDFBox",Parsing,regression,,"The file from PDFBOX-3785 has only 1 page, but should have 11.
Possibly also
KHVPCI4WW5C5NYXYTG4UFWB53TKQAQVI",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"09/Oct/17 21:28","02/Nov/17 21:00","26/Oct/17 05:37"
PDFBOX-3958,PDFBOX,"UTF-16 (BE) URI improperly decoded",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.8, 3.0.0 PDFBox",PDModel,regression,,"Adobe Reader fails to decode that URL but we did it in 2.0.7. Tests by Tim showed 38 ocurrences of "http://www.nap.edu/catalog/11140.html" lost in file 534948.pdf (attached file is reduced) in the last regression test. This is because of the changes in PDFBOX-3913. I'll fix that and support UTF-16 (LE) as well and add a test.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/Oct/17 15:39","02/Nov/17 21:01","10/Oct/17 15:44"
PDFBOX-3959,PDFBOX,"DataFormatException: invalid code lengths set with truncated file",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.8, 3.0.0 PDFBox",Parsing,regression,,"Displaying a page gets this:
ava.util.zip.DataFormatException: invalid code lengths set
    java.util.zip.Inflater.inflateBytes(Native Method)
    java.util.zip.Inflater.inflate(Inflater.java:259)
    java.util.zip.Inflater.inflate(Inflater.java:280)
    org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:107)
    org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:73)
    org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:69)
    org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:167)
    org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:168)
    org.apache.pdfbox.pdfparser.PDFStreamParser.<init>(PDFStreamParser.java:92)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:505)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:484)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:158)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:220)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:147)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:69)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:290)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:259)
    java.lang.Thread.run(Thread.java:748)
This worked in 2.0.7
Maybe similar:
37APQMODK5B3LT3I3WJLSXWEZZ3P5IZG
242SAVX2KCVP5ZGXMTNBK5DGT7FW67GF
XUFPROXEEJ74A322UCIHD3UOHFQEURDJ",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"10/Oct/17 18:21","02/Nov/17 21:01","26/Oct/17 16:43"
PDFBOX-3963,PDFBOX,"ClassCastException in PDCIDFont.readVerticalDisplacements()",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",PDModel,None,"mac os, java 1.8","pdfbox throws exception when load the attached pdf file.",0,"Tilman Hausherr",sunnyawake,0,3,"13/Oct/17 05:00","02/Nov/17 21:01","13/Oct/17 18:43"
PDFBOX-3965,PDFBOX,"Truetype Font glyphs not rendered",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Rendering,None,,"File submitted by Manfred Pock on the mailing list, I am attaching a reduced version. The font itself seems to be OK, extracting the stream and double click shows glyphs, but with PDFBox nothing appears.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Oct/17 15:53","02/Nov/17 21:01","17/Oct/17 15:21"
PDFBOX-3967,PDFBOX,"IllegalArgumentException: Illegal Capacity: -1",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Parsing,None,,"I got an exception to extract TXT or HTML from PDF file:
org.apache.tika.exception.TikaException: Unexpected RuntimeException from org.apache.tika.parser.pdf.PDFParser@429568e8
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:282)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
 ...
Caused by: java.lang.IllegalArgumentException: Illegal Capacity: -1
 at java.util.ArrayList.<init>(ArrayList.java:142)
 at org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse(PDFObjectStreamParser.java:72)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectStream(COSParser.java:845)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:748)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:673)
 at org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:633)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:241)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:276)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1143)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1077)
 at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:149)
 at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
 ... 25 more",0,"Andreas Lehmkühler","Jorge Spinsanti",0,4,"17/Oct/17 12:09","02/Nov/17 21:01","17/Oct/17 16:58"
PDFBOX-3969,PDFBOX,"Splitting starts counting for cutting out pages wrongly",Bug,CLOSED,Major,Fixed,"2.0.6, 2.0.7","2.0.8, 3.0.0 PDFBox",Utilities,split,,"Right now the usage of 'splitAtPage' is wrong. Let's assume there is a document with 1000pages,
startPage=238, endPage=977, splitAtPage=17 then pdfbox starts splitAtPage at page #0! This leads to the following
groups: 1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 8
I would have expected: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9
This does not allow for example cutting out some parts of a document.",0,"Tilman Hausherr","freddi fred",1,4,"18/Oct/17 12:16","02/Nov/17 21:01","29/Oct/17 23:01"
PDFBOX-3971,PDFBOX,"Add Certificate Dictionary to seed value in signature field",Improvement,CLOSED,Major,Fixed,None,"2.0.8, 3.0.0 PDFBox",Signing,"documentation featur",,"This dictionary is important as it gives the ability to put certificate constraints on a signature field, like if you want signatures that are signed by a specific issuer or authority to only be used in a field.
currently tested Issuer constraint and it worked, acrobat reader ignores other certificates and only allow the issuer given to sign the field. documentation is not complete waiting for the initial acceptance to complete.
new class PDSeedValueCertificate is added which refers to this certificate.
PDSeedValue is modified to add the new dictionary.
COSName is modified to add the new pdf names that are included in the dictionary.
reference for this dictionary can be found in PDF reference 1.7 section 12.7.4.5 table 235 page 457 in here http://www.adobe.com/content/dam/acom/en/devnet/pdf/PDF32000_2008.pdf
or chapter 8 table 8.84 page 700 in here http://archimedespalimpsest.net/Documents/External/pdf_reference_1-7.pdf
and in here
https://www.adobe.com/devnet-docs/acrobatetk/tools/DigSig/Acrobat_DigitalSignatures_in_PDF.pdf
this is my first contribution, hope everything goes well.",0,"Tilman Hausherr","Hossam Hazem",0,4,"21/Oct/17 00:20","02/Nov/17 21:00","29/Oct/17 20:20"
PDFBOX-3972,PDFBOX,"Incorrect page after merge for OpenAction with GoTo page destination",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Utilities,None,,"Merge the attached file with itself. Open the result file with PDFDebugger and look at Root/OpenAction/D/[0]. The page there has the object number 3. However a look at the page tree shows that the pages have the object numbers 6 and 7.
I noticed this while researching a different problem with the file at
https://stackoverflow.com/questions/46850515/",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Oct/17 13:15","10/Jan/18 19:59","22/Oct/17 08:17"
PDFBOX-3973,PDFBOX,"OCG Layers partly lost after merge",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.14, 3.0.0 PDFBox",Utilities,OCGs,,"Merge the attached file with itself and open with Adobe Reader and zoom out so that both pages can be seen. The layer UI has an effect on the first page but not on the second.
I suspect that the cause is that in the resource properties, the names (short and long) are the same, but the object numbers are different.",0,"Tilman Hausherr","Tilman Hausherr",1,4,"21/Oct/17 13:18","02/Apr/19 17:26","22/Jan/19 16:53"
PDFBOX-3974,PDFBOX,"Add more parsing regression tests",Task,CLOSED,Major,Fixed,"2.0.7, 2.0.8, 3.0.0 PDFBox","2.0.8, 3.0.0 PDFBox",Parsing,None,,"I'm adding some parse regression tests on recent issues. I previously kept them to myself because they make the build slower due to loading from JIRA, but now I think it is important that tests fail ASAP.
The test class takes between 11 and 80 seconds extra to run. There is a setting for maven-surefire-plugin to run the methods of one class in parallel and I managed to get this done https://stackoverflow.com/questions/42065544/ , but then I realized that this would put parallel load on the issue tracker so I'm keeping it sequential.
A further improvement would be to load the files into the local repository like it is done for the preflight tests, but I'll do that later.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"21/Oct/17 17:15","02/Nov/17 21:01","26/Oct/17 15:57"
PDFBOX-3976,PDFBOX,"NPE in bfSearchForTrailer",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.8, 3.0.0 PDFBox",Parsing,None,,"java.lang.NullPointerException
 at org.apache.pdfbox.pdfparser.COSParser.bfSearchForTrailer(COSParser.java
 at org.apache.pdfbox.pdfparser.COSParser.rebuildTrailer(COSParser.java:2043)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:246)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:189)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:240)",0,"Tilman Hausherr","Tilman Hausherr",0,3,"23/Oct/17 18:35","02/Nov/17 21:00","23/Oct/17 19:35"
PDFBOX-3977,PDFBOX,"/Info dictionary no longer available",Bug,CLOSED,Major,Fixed,"2.0.8, 3.0.0 PDFBox","2.0.8, 3.0.0 PDFBox",Parsing,regression,,"The /Info dictionary is no longer available, it was there in 2.0.7.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"23/Oct/17 19:38","02/Nov/17 21:00","23/Oct/17 20:05"
PDFBOX-3978,PDFBOX,"IllegalStateException on saveIncrementalForExternalSigning",Bug,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Signing,regression,,"When adding a signature to a PDF document which already contains an invisible signature, the following exception is thrown:
java.lang.IllegalStateException: signature reserve byte range has been changed after addSignature(), please set the byte range that existed after addSignature()
Step to reproduce:
Get a simple PDf document having an empty signature field and signed (using Adobe) with an invisible signature.
Run the org.apache.pdfbox.examples.signature.CreateVisibleSignature setting lateExternalSigning = true
Full Stack trace:
java.lang.IllegalStateException: signature reserve byte range has been changed after addSignature(), please set the byte range that existed after addSignature()
 at org.apache.pdfbox.pdmodel.PDDocument.saveIncrementalForExternalSigning(PDDocument.java:1361)
 at org.apache.pdfbox.examples.signature.CreateVisibleSignature.signPDF(CreateVisibleSignature.java:270)
Use the attached PDF as reference to reproduce
Maybe related to: PDFBOX-3811",0,"Tilman Hausherr","Alessandro Marini",0,3,"24/Oct/17 08:03","02/Nov/17 21:01","25/Oct/17 15:24"
PDFBOX-3979,PDFBOX,"NullPointerException on Type1Parser.readCharStrings(Type1Parser.java:713)",Bug,CLOSED,Major,Fixed,"2.0.6, 2.0.7","2.0.8, 3.0.0 PDFBox","FontBox, Parsing","type1 type1font","java 1.8, ubuntu","When trying to open the attached file with PDFBox, I get a null pointer exception:
java.lang.NullPointerException
at org.apache.fontbox.type1.Type1Parser.readCharStrings(Type1Parser.java:713)
at org.apache.fontbox.type1.Type1Parser.parseBinary(Type1Parser.java:576)
at org.apache.fontbox.type1.Type1Parser.parse(Type1Parser.java:64)
at org.apache.fontbox.type1.Type1Font.createWithSegments(Type1Font.java:85)
at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:262)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:838)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:495)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:469)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
at org.apache.pdfbox.text.LegacyPDFStreamEngine.processPage(LegacyPDFStreamEngine.java:139)
at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)
at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)
at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)",0,"Tilman Hausherr","Jay Askren",0,3,"25/Oct/17 20:17","02/Nov/17 21:00","25/Oct/17 22:10"
PDFBOX-3982,PDFBOX,"[Patch/RFC] Set maximum compression level on FlateFilter",Improvement,CLOSED,Minor,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",Writing,None,,"Currently the flate filter uses the default compression level, which in case auf zlib is 6. When looking around the web for zlib compression level settings, most result suggest that a level higher than 6 does not gain much but take longer to compress.
This is true for most data, but not for lossless compressed images. The savings there can be very measurable (e.g. in a PDF containing some big highres images 66 MB (level 6) to 57 MB (level 9); Nope, I don't have sample data ready, as this were customer images).
The attached patch changes the deflate compression to 9. Most time you want a maximum compressed PDF file, as generating PDFs is usually not time critical. On the other side, when you want to generate a PDF very fast, you usually want a compression level of 2 or 3, as at this levels you have a higher write performance due to less IO (at least in my tests) and very fast compression.
The best would be of course to allow the user to set the compression level them self, e.g. on the document level. But I don't think it's possible to get the compression level from the document to the COSStreams. A global system property (e.g. apache.pdfbox.deflatelevel) could be a solution, but not a nice one.",0,"Tilman Hausherr","Emmeran Seehuber",1,3,"29/Oct/17 09:49","02/Nov/17 21:01","29/Oct/17 20:19"
PDFBOX-3983,PDFBOX,"[Patch] Don't a allow a miter limit <= 0",Improvement,CLOSED,Major,Fixed,2.0.7,"2.0.8, 3.0.0 PDFBox",PDModel,None,,"A miter limit of 0 or less will cause the PDF to not render correctly in Acrobat Reader. Also such a value makes no sense. Throw an exception instead.
Most other renderers will show the PDF correctly fine (e.g. pdfbox-debugger, Mac OS X preview etc.) and make debugging this problem difficult.
See also https://github.com/danfickle/openhtmltopdf/issues/135",0,"Tilman Hausherr","Emmeran Seehuber",1,3,"29/Oct/17 10:00","02/Nov/17 21:01","29/Oct/17 12:11"
PDFBOX-3984,PDFBOX,"Add validation data of signer to document",Improvement,CLOSED,Major,Fixed,2.0.7,"2.0.9, 3.0.0 PDFBox",Signing,None,,"To support Long Term Validation of a signature, we need to add a Valdiation-Dictionary to the document. Inside there is most importantly an OCSP-Response of the signers. (can be multiple).
As Defined in PAdES 4 the following elements will be added to a document: A DSS (Document Security Store) linked to the VRI(s) of the signature(s)
At first I will provide an example.",0,"Tilman Hausherr","Alexis Suter",0,4,"31/Oct/17 09:25","13/Nov/18 20:05","10/Mar/18 16:25"
PDFBOX-3989,PDFBOX,"Update website to reflect 2.0.8 release",Task,CLOSED,Minor,Fixed,None,None,Documentation,None,,"Update website to reflect 2.0.8 release
javadoc
documentation links
redirects",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"03/Nov/17 07:42","03/Nov/17 10:44","03/Nov/17 10:44"
PDFBOX-3990,PDFBOX,"Rendering will never complete",Bug,CLOSED,Critical,Fixed,2.0.8,2.0.9,Rendering,None,"java 1.8","I have a PDF file that I am attempting to render with:
PDFRenderer renderer = new PDFRenderer(document);
for (int i = 0; i < 2; i++ ) { // the document is two pages, code simplified
    BufferedImage image = renderer.renderImageWithDPI(i, dpi, ImageType.RGB); 
}
However, the code never returns. When I pause execution (in Eclipse) I see that execution never leaves the decode() method of org.apache.pdfbox.filter.RunLengthDecodeFilter.
The problem is that the inner loop of while (amountToCopy > 0) in bold below is never executed because the stream has come to EOF! That means that the int compressedRead get a negative value and amountToCopy is _*added *_to instead of being subtracted from.
The loop seems to eventually step out of itself, Probably when the integer warps around when reaching it's max
The problem is easy to catch if setting a conditional breakpoint on compressedRead == -1.
I'll include the PDF. The problem arises on page 2.
    public DecodeResult decode(InputStream encoded, OutputStream decoded,
                                         COSDictionary parameters, int index) throws IOException
    {
        int dupAmount;
        byte[] buffer = new byte[128];
        while ((dupAmount = encoded.read()) != -1 && dupAmount != RUN_LENGTH_EOD)
        {
            if (dupAmount <= 127)
            {
                int amountToCopy = dupAmount + 1;
                int compressedRead;
               * while(amountToCopy > 0)
                {
                    compressedRead = encoded.read(buffer, 0, amountToCopy);
                    decoded.write(buffer, 0, compressedRead);
                    amountToCopy -= compressedRead;
                }*
            }
            else
            {
                int dupByte = encoded.read();
                for (int i = 0; i < 257 - dupAmount; i++)
                {
                    decoded.write(dupByte);
                }
            }
        }
        return new DecodeResult(parameters);
    }",0,"Andreas Lehmkühler","Kristian Jörg",1,4,"03/Nov/17 12:25","24/Mar/18 09:41","03/Nov/17 17:12"
PDFBOX-3991,PDFBOX,"PDPageContentStream has sometimes float, sometimes double parameters",Task,CLOSED,Minor,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",PDModel,None,,"From Dave Patterson in the users mailing list:
I was crawling through this class over the weekend and saw something that
seemed strange. I'm not sure if it is a bug or not.
There is a version of the setStrokingColor (line 1112 in the 2.0.7
codebase) with four parameters, all float: c, m, y, k. The values are used
for calls to writeOperand without any conversion.
There is a version of the setNonStrokingColor (line 1302 in the 2.0.7
codebase) with four parameters, all double: c, m, y, k. The values are used
for calls to writeOperand, but each is coerced to be a float.
Should the parameter signature on the setNonStrokingColor be changed to
require floats?
I am not using these calls, but saw them and they struck me as odd.
I'll change these to float and deprecate the existing.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"04/Nov/17 17:09","24/Mar/18 09:41","04/Nov/17 21:38"
PDFBOX-3992,PDFBOX,"Implement show text with positioning operator (TJ)",Improvement,CLOSED,Major,Fixed,None,"2.0.9, 3.0.0 PDFBox",PDModel,None,,"Why: The TJ operator is required to properly implement text justification in unicode fonts. The word spacing operator (Tw) is not sufficient because of note[1] from the PDF specification.
Github user backslash47 has provided a basic implementation if that is of any help:
https://github.com/backslash47/pdfbox/commit/3c528295b16445e58dc9fe895f78384221452be2
Thanks,
Daniel.
[1] Note: Word spacing is applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It does not apply to occurrences of the byte value 32 in multiple-byte codes.
Example code:
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType0Font;
import org.apache.pdfbox.util.Matrix;

public class TextWithPositioningExample {

 public static void main(String[] args) throws Exception {
  doIt("Hello World, this is a test!", "justify-example.pdf");
 }

 /**
  * This example shows how to justify a string using the showTextWithPositioning method.
  * First only spaces are adjusted, and then every letter.
  */
 public static void doIt(String message, String outfile) throws Exception {

  // the document
  try (PDDocument doc = new PDDocument();
    InputStream is = PDDocument.class.getResourceAsStream("/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf")) {

   final float FONT_SIZE = 20.0f;

   // Page 1
   PDFont font = PDType0Font.load(doc, is, true);
   //PDFont font = PDType1Font.COURIER;
   PDPage page = new PDPage(PDRectangle.A4);
   doc.addPage(page);
   
   // Get the non-justified string width in text space units.
   float stringWidth = font.getStringWidth(message) * FONT_SIZE;
   
   // Get the string height in text space units.
   float stringHeight = font.getFontDescriptor().getFontBoundingBox().getHeight() * FONT_SIZE;
   
   // Get the width we have to justify in.
   PDRectangle pageSize = page.getMediaBox();
   
   PDPageContentStream contentStream = new PDPageContentStream(doc,
     page, AppendMode.OVERWRITE, false);
  
   contentStream.beginText();
   contentStream.setFont(font, FONT_SIZE);
   
   // Start at top of page.
   contentStream.setTextMatrix(Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f));
   
   // First show non-justified.
   contentStream.showText(message);
   
   // Move to next line.
   contentStream.setTextMatrix(Matrix.getTranslateInstance(0, pageSize.getHeight() - ((stringHeight / 1000f) * 2)));
   
   // Now show word justified.
   // The space we have to make up, in text space units.
   float justifyWidth = ((pageSize.getWidth() * 1000f) - (stringWidth));
   
   List<Object> text = new ArrayList<>();
   String[] parts = message.split("\\s");
   
   float spaceWidth = (justifyWidth / (parts.length - 1)) / FONT_SIZE;

   for (int i = 0; i < parts.length; i++) {
    if (i != 0) {
     text.add(" ");
     // Positive values move to the left, negative to the right.
     text.add(Float.valueOf(-spaceWidth));
    }
    text.add(parts[i]);
   }
   contentStream.showTextWithPositioning(text.toArray());
   contentStream.setTextMatrix(Matrix.getTranslateInstance(0, pageSize.getHeight() - ((stringHeight / 1000f) * 3)));
   
   // Now show letter justified.
   text = new ArrayList<>();
   justifyWidth = ((pageSize.getWidth() * 1000f) - stringWidth);
   float extraLetterWidth = (justifyWidth / (message.codePointCount(0, message.length()) - 1)) / FONT_SIZE;
   
   for (int i = 0; i < message.length();) {
    if (i != 0) {
     text.add(Float.valueOf(-extraLetterWidth));
    }
    
    text.add(String.valueOf(Character.toChars(message.codePointAt(i))));
    
    i += Character.charCount(message.codePointAt(i));
   }
   contentStream.showTextWithPositioning(text.toArray());;
   
   // Finish up.
   contentStream.endText();
   contentStream.close();

   doc.save(outfile);
  }
 }
}",0,"Tilman Hausherr","Dan Fickling",1,3,"05/Nov/17 04:05","24/Mar/18 09:41","08/Nov/17 20:47"
PDFBOX-3994,PDFBOX,"ClassCastException in COSParser.bfSearchForTrailer",Bug,CLOSED,Major,Fixed,"2.0.7, 2.0.8","2.0.9, 3.0.0 PDFBox",Parsing,regression,,"java.lang.ClassCastException: org.apache.pdfbox.cos.COSInteger cannot be cast to org.apache.pdfbox.cos.COSObject
    org.apache.pdfbox.pdfparser.COSParser.bfSearchForTrailer(COSParser.java:1668)
    org.apache.pdfbox.pdfparser.COSParser.rebuildTrailer(COSParser.java:2110)
    org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:246)
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:189)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:240)
This worked in 2.0.6.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"06/Nov/17 19:39","24/Mar/18 09:41","07/Nov/17 06:39"
PDFBOX-3997,PDFBOX,"Cannot encode strings with of surrogate pairs",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",FontBox,emoji,,"This code doesn't work:
try (PDDocument doc = new PDDocument())
{
    PDPage page = new PDPage();
    doc.addPage(page);
    try (PDPageContentStream cs = new PDPageContentStream(doc, page))
    {
        PDFont font = PDType0Font.load(doc, new File("NotoEmoji-Regular.ttf"));
        cs.setFont(font, 50);
        cs.beginText();
        cs.newLineAtOffset(100, 700);
        cs.showText("\uD83D\uDE81");
        cs.endText();
    }
    doc.save("heli.pdf");
}
It throws an exception
IllegalArgumentException: No glyph for U+1F681 in font NotoEmoji",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Nov/17 16:42","24/Mar/18 09:41","07/Nov/17 18:40"
PDFBOX-3998,PDFBOX,"Inform the user when not using KCMS with jdk8 or higher + set KCMS in cli",Improvement,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",PDModel,None,,"Since jdk8 PDFBox is slow rendering images when LCMS is used (default) instead of KCMS, and not everybody finds the advice on the web, so I am adding a one-time only message.
Also set KCMS for the command line utilities (debugger, printing and converting to image) when available.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"08/Nov/17 16:41","24/Mar/18 09:41","08/Nov/17 17:23"
PDFBOX-3999,PDFBOX,"Merge failed to clone tags",Bug,CLOSED,Critical,Fixed,2.0.8,"2.0.10, 3.0.0 PDFBox",Utilities,"StructureTree merge",,"After merging two tagged documents, closing the source document causes the destination document to be closed, which prevents it from being saved. The following code demonstrates the bug with the attached flattened government PDF file. The original is available here if you need it.
@Test
public void testMerge() throws Exception {
    PDFMergerUtility pdfMergerUtility = new PDFMergerUtility();
    PDDocument src = PDDocument.load(new File("GovFormPreFlattened.pdf"));
    PDDocument dest = PDDocument.load(new File("GovFormPreFlattened.pdf"));
    pdfMergerUtility.appendDocument(dest, src);
    src.close(); //if we don't close the src then we don't have an error
    dest.save(File.createTempFile("MergeIssue",".PDF"));
    dest.close();
}
The issue is resolved with the attached patch.
Also I removed the "if (mergeStructTree)" is because mergeStructTree is always true here because this code is already inside an "if (mergeStructTree)".",0,"Tilman Hausherr","Dave Hill",1,3,"08/Nov/17 18:38","21/Jun/18 20:27","20/Apr/18 15:38"
PDFBOX-4001,PDFBOX,"Rendering LineFeed (No Unicode mapping for .notdef (10))",Bug,CLOSED,Minor,Fixed,"2.0.7, 2.0.8","2.0.9, 3.0.0 PDFBox",Rendering,None,"windows 7","Printing of on PDF Document does not occurs correctly: linefeed is also printed as a char "without glyph".
org.apache.pdfbox.pdmodel.font.PDSimpleFont toUnicode
WARNUNG: No Unicode mapping for .notdef (10) in font Helvetica
org.apache.pdfbox.rendering.TTFGlyph2D getPathForGID
WARNUNG: No glyph for 10 in font Helvetica
Attachments:
pdf_sourcefile.pdf -> the pdf document to be printed
pdf_linefeed_no_glyph.pdf -> the result of the issued printjob, printed by "PDF CREATOR PRINTER" (looks the same on a real printer)
test_java_prog.txt -> java program to test it",0,"Tilman Hausherr","Adrian-Călin Bunziac",1,4,"09/Nov/17 09:34","24/Mar/18 09:41","08/Dec/17 20:55"
PDFBOX-4002,PDFBOX,"Layer Utility - Text not being displayed when overlaying",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Documentation,None,,"I've had some problems with the layer utility when trying to overlay two PDFs. Normally it works fine, but I've encountered a type of PDF file on which it doesn't work properly.
Text elements are not being displayed (it can be selected, but it looks to be transparent), but images are.
I've stripped down my code to the bare minimum and produced a maven project with a command line and provided some examples for the base, the overlay and the output I get.
I've attached all below.
The usage for the command line is as follows:
java -jar Overlayer-1.0.jar -basePdf base.pdf -overlayPdf overlay.pdf -outPdf out.pdf -layerName overlay
If I try to overlay the other way around, i.e. use the overlay.pdf in the -basePdf parameter and the base.pdf in the -overlayPdf parameter, it does do the overlaying, but obviously, that's not what I'm looking for.
Any hints as to why this might not work, or any particularities about the base PDF that might be causing this to be behaving differently would be helpful.",0,"Tilman Hausherr","Vlad-Tudor Marchis",0,3,"09/Nov/17 14:33","24/Mar/18 09:41","11/Nov/17 12:34"
PDFBOX-4003,PDFBOX,"Can't retrieve number tree from structure tree",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.14, 3.0.0 PDFBox",PDModel,StructureTree,,"PDDocument doc = PDDocument.load(new File("GeneralForbearance.pdf"));
Object value = doc.getDocumentCatalog().getStructureTreeRoot().getParentTree().getValue(0);
The code above always fails when used on a PDF with a structure tree:
Exception in thread "main" java.io.IOException: Error while trying to create value in number tree:org.apache.pdfbox.cos.COSBase.<init>(org.apache.pdfbox.cos.COSArray)
 at org.apache.pdfbox.pdmodel.common.PDNumberTreeNode.convertCOSToPD(PDNumberTreeNode.java:212)
 at org.apache.pdfbox.pdmodel.common.PDNumberTreeNode.getNumbers(PDNumberTreeNode.java:185)
 at org.apache.pdfbox.pdmodel.common.PDNumberTreeNode.getValue(PDNumberTreeNode.java:139)
 at pdfboxpageimageextraction.MergeTest.main(MergeTest.java:29)
Caused by: java.lang.NoSuchMethodException: org.apache.pdfbox.cos.COSBase.<init>(org.apache.pdfbox.cos.COSArray)
 at java.lang.Classj.getConstructor0(Class.java:3082)
 at java.lang.Class.getDeclaredConstructor(Class.java:2178)
 at org.apache.pdfbox.pdmodel.common.PDNumberTreeNode.convertCOSToPD(PDNumberTreeNode.java:206)
 ... 3 more
I suspect that it is related to the PDNumberTreeNode having been called with a COSBase class parameter in getParentTree().
That one doesn't have a constructor with a parameter.
The structure tree numbers tree has mixed contents, these can be arrays or dictionaries.
What we need is some PD wrapper that can have both inside.",0,"Tilman Hausherr","Tilman Hausherr",1,3,"09/Nov/17 16:50","28/Feb/19 17:44","01/Jan/19 07:49"
PDFBOX-4004,PDFBOX,"Elements in the structure tree are not removed or corrected when flattening",Bug,CLOSED,Major,"Won't Fix",2.0.8,None,AcroForm,"StructureTree flatte",,"When flattening, the elements in the structure tree are not removed nor adjusted (to the form xobject). An example can be found at Root/StructTreeRoot/ParentTree/Nums/[31]/K/Obj in the file GovFormPreFlattened.pdf . This links to something that does not really exist anymore.",0,"Maruan Sahyoun","Tilman Hausherr",0,2,"09/Nov/17 16:52","02/Dec/18 17:09","20/Apr/18 19:30"
PDFBOX-4005,PDFBOX,"Incorrect use of PDNumberTreeNode in PDPageLabels",Bug,CLOSED,Minor,Fixed,"1.8.13, 2.0.8","1.8.14, 2.0.9, 3.0.0 PDFBox",PDModel,None,,"PDNumberTreeNode is to be initialized with a PD class, not a COS class. Initializing with a COSDictionary class results in an unneeded shallow copy of every element.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Nov/17 16:58","24/Mar/18 09:41","09/Nov/17 17:00"
PDFBOX-4006,PDFBOX,"PDFBox throws NullPointerException when parsing PDF",Bug,CLOSED,Major,Fixed,2.0.8,2.0.9,Parsing,regression,"linux, java 1.8","I have a file that I can open with GhostScript, but PDFBox dies with a NullPointerException when I try to parse it with PDFBox. The error is as follows:
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:747) at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:718) at org.apache.pdfbox.pdfparser.COSParser.getLength(COSParser.java:961) at org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:1020) at org.apache.pdfbox.pdfparser.COSParser.bfSearchForObjStreams(COSParser.java:1912) at org.apache.pdfbox.pdfparser.COSParser.bfSearchForObjects(COSParser.java:1538) at org.apache.pdfbox.pdfparser.COSParser.rebuildTrailer(COSParser.java:2091) at org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:246) at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:189) at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:240) at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1013) at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:969) at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:917) at ",0,"Andreas Lehmkühler","Jay Askren",1,4,"09/Nov/17 18:50","24/Mar/18 09:41","14/Nov/17 18:23"
PDFBOX-4009,PDFBOX,"Structure tree lost when merging from the command line",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.14, 3.0.0 PDFBox",Utilities,"StructureTree merge",,"When merging with PDFMerger from the command line (e.g. the files from PDFBOX-4007) the structure tree is lost. The cause is that mergeDocuments() merges into an empty PDDocument object, and appendDocument() does not copy the structure tree if it doesn't exist in the destination. It does something only if source and destination have one.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/Nov/17 17:58","28/Feb/19 17:44","01/Jan/19 16:26"
PDFBOX-4011,PDFBOX,"BBox in signature forms has wrong order",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.8","1.8.14, 2.0.9, 3.0.0 PDFBox",Signing,None,,"As pointed out by Gabriel Pessoa in the user mailing list:
As a follow up to this question we created similar signatures with Adobe
Reader and iText (both the latest versions, both able to print the
signature image on Chrome) and inspected the generated PDFs.
Looking at the AP dictionary I noticed that both write the BBox for the
/N, /FRM and /img dictionaries different than PDFBox.
For the /N and /FRM they both write [0, 0, width, height] the values
being those from the rectangle where the image is set. For /img they
calculate the scale factor relative between the image original size and
the rectangle size.
PDFBox uses by default for all three [100, 50, 0, 0] and that can be
changed with PDVisibleSignDesigner.formatterRectangleParams(byte[]).
Using that method (but passing 127 for width, because when i used 128 it
wrote -128 on the PDF), the image was sucessfully printed from Chrome,
although it does not fit the whole space, I believe because of the line
"String imgFormContent    = "q " + 100 + " 0 0 50 0 0 cm /" + imageName.getName() + " Do Q\n";" 
in
PDVisibleSigBuilder.injectAppearanceStreams.
And just to pinpoint the exact BBox, i downloaded PDFBox from 2.0.9
-SNAPSHOT and changed the code so that only the BBox from
PDFTemplateBuilder.createHolderForm receives the value set in
formatterRectangleParams(byte[]) and I was able to print the signature
image.
Our code is wrong, in the specification bbox is defined as minX, minY, maxX, maxY: "An array of four numbers in the form coordinate system, giving the coordinates of the left, bottom, right, and top edges, respectively, of the form XObject's bounding box. These boundaries shall be used to clip the form XObject and to determine its size for caching."
I'll change the code to make it more flexible and also create a method that uses an int array and deprecate the current one.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"14/Nov/17 17:52","24/Mar/18 09:41","15/Nov/17 18:22"
PDFBOX-4012,PDFBOX,"PDF with incremental save is shown blank",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Parsing,None,,"From Manfred Pock. I've renamed the file to .txt because FF claims it is a virus (I don't think so).",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"15/Nov/17 18:56","24/Mar/18 09:41","23/Nov/17 17:08"
PDFBOX-4013,PDFBOX,"Java 9/macOS: Debugger App does not start (NoSuchMethodException)",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.12, 3.0.0 PDFBox",Utilities,"jdk9 mac-os-x",,"It seems the debugger app wants to integrate nicely into macOS and uses some private API for this. This worked fine with all Java versions including 8, but does no longer work with 9.
Java 9 provides new APIs for this, but till PDFBox can depend on Java 9 (or the next LTS Java 11) it should at least catch this and not crash....
The application does not start, and instead displays a dialog with a stack trace.
Console Output + StackTrace:
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.pdfbox.debugger.ui.OSXAdapter (file:/Users/emmy/Downloads/debugger-app-2.0.7.jar) to constructor com.apple.eawt.Application()
WARNING: Please consider reporting this to the maintainers of org.apache.pdfbox.debugger.ui.OSXAdapter
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
Mac OS X Adapter could not talk to EAWT:

java.lang.RuntimeException: java.lang.NoSuchMethodException: com.apple.eawt.Application.addApplicationListener(com.apple.eawt.ApplicationListener)
    org.apache.pdfbox.debugger.ui.OSXAdapter.setHandler(OSXAdapter.java:171)
    org.apache.pdfbox.debugger.ui.OSXAdapter.setFileHandler(OSXAdapter.java:137)
    org.apache.pdfbox.debugger.PDFDebugger.initComponents(PDFDebugger.java:301)
    org.apache.pdfbox.debugger.PDFDebugger.<init>(PDFDebugger.java:182)
    org.apache.pdfbox.debugger.PDFDebugger.main(PDFDebugger.java:1201)
Caused by: java.lang.NoSuchMethodException: com.apple.eawt.Application.addApplicationListener(com.apple.eawt.ApplicationListener)
    java.base/java.lang.Class.getDeclaredMethod(Class.java:2432)
    org.apache.pdfbox.debugger.ui.OSXAdapter.setHandler(OSXAdapter.java:163)
    org.apache.pdfbox.debugger.ui.OSXAdapter.setFileHandler(OSXAdapter.java:137)
    org.apache.pdfbox.debugger.PDFDebugger.initComponents(PDFDebugger.java:301)
    org.apache.pdfbox.debugger.PDFDebugger.<init>(PDFDebugger.java:182)
    org.apache.pdfbox.debugger.PDFDebugger.main(PDFDebugger.java:1201)
To workaround this problem I have to run the debugger app using JDK 8. This is ok for now, but very annoying.",0,"Tilman Hausherr","Emmeran Seehuber",0,3,"16/Nov/17 08:51","05/Oct/18 04:53","18/Jul/18 17:52"
PDFBOX-4014,PDFBOX,"Malformed/pathological/malicious input can lead to infinite looping",Bug,CLOSED,Major,Fixed,"3.0.0 JBIG2","3.0.0 JBIG2",JBIG2,None,,"Tilman Hausherr writes
See this issue:
https://bugs.chromium.org/p/chromium/issues/detail?id=450971
look for "pdfium-loop2.pdf".
I haven't created an issue, because this could be relevant to security.
To reproduce the bug with PDFBox, do this:
PDDocument document = PDDocument.load(new
File("pdfium-loop2.pdf"));
new PDFRenderer(document).renderImage(0);
For maven you need
<dependency>
<groupId>org.apache.pdfbox</groupId>
<artifactId>pdfbox</artifactId>
<version>2.0.8</version>
</dependency>
and of course jbig2.
An analysis shows that two circumstances contribute to the problem:
T.88 section E.2.10 specifies that MQ encoded data can be minimized if trailing data contains "just boring stuff, i.e. 1-bits". Thus, an infinite sequence of MQ encoded decisions can be encoded in a finite number of bytes.
T.88 section 6.4.5 3c specifies that the condition for terminating the decoding of a text region strip is the occurrence of the OOB symbol as a symbol's S coordinate.
If a JBIG2 stream contains a strip that uses #1 yielding a stream of S coordinates that never contain OOB during the decoding phase for #2, an infinite loop results, as text region decoding has no other terminating condition.
The result is "just" a denial of service. No risk of buffer overruns etc. is associated with the issue.
A similar issue exists with symbol dictionary decoding. However in this case decoding will not enter an infinite loop due to an array index out of bounds exception that is thrown once more symbols than expected have been decoded.",0,"Jörg Henne","Jörg Henne",0,4,"16/Nov/17 12:20","06/Feb/18 18:26","06/Feb/18 18:26"
PDFBOX-4015,PDFBOX,"java.awt.color.CMMException: LCMS error 13: Couldn't link the profiles",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Rendering,None,,"Reported by Lauri Laanti in the user mailing list:
java.awt.color.CMMException: LCMS error 13: Couldn't link the profiles
at sun.java2d.cmm.lcms.LCMS.createNativeTransform(Native Method)
at sun.java2d.cmm.lcms.LCMS.createTransform(LCMS.java:156)
at sun.java2d.cmm.lcms.LCMSTransform.doTransform(LCMSTransform.java:155)
at sun.java2d.cmm.lcms.LCMSTransform.colorConvert(LCMSTransform.java:629)
at java.awt.image.ColorModel.getLinearGray16ToOtherGray8LUT(ColorModel.java:1866)
at java.awt.image.ComponentColorModel.setupLUTs(ComponentColorModel.java:449)
at java.awt.image.ComponentColorModel.<init>(ComponentColorModel.java:299)
at java.awt.image.ComponentColorModel.<init>(ComponentColorModel.java:351)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.toRGBImageAWT(PDColorSpace.java:284)
at org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.toRGBImage(PDICCBased.java:213)
at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit(SampledImageReader.java:318)
at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage(SampledImageReader.java:187)
at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage(PDImageXObject.java:403)
at org.apache.pdfbox.rendering.PageDrawer.drawImage(PageDrawer.java:992)
at org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:62)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:838)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:495)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:469)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:206)
at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:145)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Nov/17 16:54","24/Mar/18 09:41","16/Nov/17 17:04"
PDFBOX-4017,PDFBOX,"Symbol font glyphs not found on Windows 10 fall creators update",Bug,RESOLVED,Major,Fixed,2.0.8,"2.0.16, 3.0.0 PDFBox","FontBox, Rendering",None,"windows 10","Since the Windows 10 fall creators update all files with the Symbol standard 14 font are no longer rendered properly. Seems to have something to do with a difference in the cmap subtable (all numbers start with F000) and a missing postscript table.
The font has two cmap subtables. The first one has codes that start with 0, the second one has codes that start with 0xF000. The code names we get from getUniNameOfCodePoint(unicodes.codePointAt(0)) are NOT the low ones, only some match, those that are also in ascii.
For ">", there are two cmap subtables codes: for "Macintosh, Roman" it is 0x3e, for "Microsoft, Symbol" it is 0xf03e. I tried forcing the first table
code
cmap = cmapTable.getSubtable(CmapTable.PLATFORM_MACINTOSH, 0);
code
but many codes are missing, e.g. the greek alphabet.
For "eta" (looks like an "n")
pdf code 0150 = 0x68
unicode 0x3b7
windows code in charmap.exe: 68
code in subtables: 0x68 and 0xf068
lozenge
unicode 0x25ca
pdf code 0340 = 0xe0
code in subtables: 0x0e and 0xf0e0
So it seems one has to bypass this unicode thing and work directly with the symbol encoding...
Websites:
https://www.microsoft.com/typography/otspec/cmap.htm#windowsPlatform
https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6cmap.html",0,"Tilman Hausherr","Tilman Hausherr",1,3,"17/Nov/17 21:01","6 days ago","6 days ago"
PDFBOX-4018,PDFBOX,"NPE in sanitizeType in org.apache.pdfbox.pdmodel.PDPageTree",Bug,CLOSED,Minor,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Parsing,regression,,"Hello PDFBox developers,
the attached file produces the follow NPE opening the pdf file:
[20.11.2017 12:54:41.183] [Thread ID: 74] SEVERE: [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: doInBackground() java.lang.NullPointerException
org.apache.pdfbox.pdmodel.PDPageTree sanitizeType: 219
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: org.apache.pdfbox.pdmodel.PDPageTree get: 211
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: org.apache.pdfbox.pdmodel.PDDocument getPage: 1391
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: org.apache.pdfbox.rendering.PDFRenderer renderImage: 108
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: org.apache.pdfbox.rendering.PDFRenderer renderImageWithDPI: 94
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: vlh.Tools.PDF.PDFBoxUtil generateImage: 789
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: vlh.notes.BSTArchive.File.pdf.PdfFileExtend generatePreviewImage: 164
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker doInBackground: 175
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker doInBackground: 1
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: javax.swing.SwingWorker$1 call: 288
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: java.util.concurrent.FutureTask$Sync innerRun: 314
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: java.util.concurrent.FutureTask run: 149
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: javax.swing.SwingWorker run: 327
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: java.util.concurrent.ThreadPoolExecutor$Worker runTask: 939
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: java.util.concurrent.ThreadPoolExecutor$Worker run: 963
[20.11.2017 12:54:41.183] [Thread ID: 74] [vlh.notes.BSTArchive.File.filedialog.ImageConversionWorker]: java.lang.Thread run: 767
The error started occuring with pdfbox release 2.0.8!
The PDF has been generated by an older samsung scan software. Adobe Reader and Foxit are able to open the file correctly.",0,"Andreas Lehmkühler","Nico Prenzel",0,4,"20/Nov/17 12:12","24/Mar/18 09:41","23/Nov/17 17:00"
PDFBOX-4020,PDFBOX,"Into existing signature embedded signed timestamp for validation",Improvement,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Signing,None,,"I would like to contribute a new example for embedded Timestamping.
The Timestamp is beeing embedded into the existing Signature (which has so be prepared big enough for it). So that the document does not get changed.
This Step is a preparation for the LTV and includes some reorganisation for Validation-Purposes.
exec:java -X -Dexec.mainClass="org.apache.pdfbox.examples.signature.validation.CreateEmbeddedValidation" -Dexec.args="${infile} -tsa ${tsa}"
CreateSignature has been changed to add SignatureOptions, where we can choose the size of the signature.",0,"Tilman Hausherr","Alexis Suter",1,5,"21/Nov/17 11:06","24/Mar/18 09:41","09/Mar/18 16:50"
PDFBOX-4021,PDFBOX,"Font missing when building from source makes build fail",Bug,CLOSED,Minor,Fixed,"2.0.8, 3.0.0 PDFBox","2.0.9, 3.0.0 PDFBox",PDModel,None,,"Downloaded and built trunk from source today and got a failing test due to missing Noto font.
```
2017-11-23 08:19:58 ERROR org.apache.pdfbox.pdmodel.font.FileSystemFontProvider:661 - Could not load font file: /usr/share/fonts/noto/NotoSansCoptic-Regular.ttf
java.io.FileNotFoundException: /usr/share/fonts/noto/NotoSansCoptic-Regular.ttf (No such file or directory)
at java.io.RandomAccessFile.open0(Native Method)
at java.io.RandomAccessFile.open(RandomAccessFile.java:316)
at java.io.RandomAccessFile.<init>(RandomAccessFile.java:243)
at org.apache.fontbox.ttf.BufferedRandomAccessFile.<init>(BufferedRandomAccessFile.java:88)
at org.apache.fontbox.ttf.RAFDataStream.<init>(RAFDataStream.java:63)
at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:84)
at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.readTrueTypeFont(FileSystemFontProvider.java:682)
at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.getTrueTypeFont(FileSystemFontProvider.java:650)
at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.access$200(FileSystemFontProvider.java:55)
at org.apache.pdfbox.pdmodel.font.FileSystemFontProvider$FSFontInfo.getFont(FileSystemFontProvider.java:126)
at org.apache.pdfbox.pdmodel.font.FontMapperImpl.getCIDFont(FontMapperImpl.java:518)
at org.apache.pdfbox.pdmodel.font.PDCIDFontType0.<init>(PDCIDFontType0.java:128)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont(PDFontFactory.java:121)
at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:80)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.getFonts(ResourcesValidationProcess.java:125)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:94)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:77)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:57)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:169)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:84)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:57)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:69)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:57)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:122)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:163)
at org.apache.pdfbox.preflight.TestIsartorBavaria.validate(TestIsartorBavaria.java:190)
```
```
validate[target/pdfs/Isartor testsuite/PDFA-1b/6.3 Fonts/6.3.4 Embedded font programs/isartor-6-3-4-t01-fail-c.pdf](org.apache.pdfbox.preflight.TestIsartorBavaria) Time elapsed: 0.025 sec <<< ERROR!
java.lang.NullPointerException: null
at org.apache.pdfbox.pdmodel.font.PDCIDFontType0.<init>(PDCIDFontType0.java:158)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont(PDFontFactory.java:121)
at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:80)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.getFonts(ResourcesValidationProcess.java:125)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validateFonts(ResourcesValidationProcess.java:94)
at org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess.validate(ResourcesValidationProcess.java:77)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:57)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validateResources(SinglePageValidationProcess.java:169)
at org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess.validate(SinglePageValidationProcess.java:84)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:57)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validatePage(PageTreeValidationProcess.java:69)
at org.apache.pdfbox.preflight.process.PageTreeValidationProcess.validate(PageTreeValidationProcess.java:57)
at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)
at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:122)
at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:163)
at org.apache.pdfbox.preflight.TestIsartorBavaria.validate(TestIsartorBavaria.java:190)
```",0,"Tilman Hausherr","Daniel Persson",0,3,"23/Nov/17 07:21","24/Mar/18 09:41","14/Jan/18 17:28"
PDFBOX-4022,PDFBOX,"Cache ColorSpace instances in PDColorSpace.java",Improvement,CLOSED,Major,Fixed,"2.0.7, 2.0.8","2.0.9, 3.0.0 PDFBox",Rendering,patch,"windows 10","I have a PDF which contains a lot of Images. Each time, pdfbox parse the image it uses the colorspace to parse it and most of the time colorspace is the same object. I tried to cache the colorspace instances in PDColorSpace.java as shown in the attached patch. For this particular PDF, this change improves the performance of parsing and rendering the images from 15 minutes down to 3 minutes. I shared the PDF.",0,"Tilman Hausherr","savan patel",0,3,"23/Nov/17 07:29","24/Mar/18 09:41","23/Nov/17 17:07"
PDFBOX-4024,PDFBOX,"YCbCr JPEGs not implemented",Improvement,CLOSED,Major,Fixed,"2.0.7, 2.0.8","2.0.9, 3.0.0 PDFBox",Rendering,None,"windows 10","I have a pdf in which one particular image has a DeviceCMYK colorspace and DCTDecode filter. When i convert it to image it gets weird background color. i got warning "YCbCr JPEGs not implemented". so i implemented it and it renders right image after that.
i attached the pdf and patch. issue is on first page of pdf.",0,"Tilman Hausherr","savan patel",0,3,"28/Nov/17 08:41","24/Mar/18 09:41","04/Dec/17 17:13"
PDFBOX-4025,PDFBOX,"Other page sizes than US Letter should be selectable in TextToPDF",Improvement,CLOSED,Minor,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Utilities,None,,"Currently TextToPDF always uses US Letter as page size - PDRectangle.LETTER set in constructor of PDPage.
It would be desirable to pass other page sizes as defined in PDRectangle.",0,"Tilman Hausherr","Andreas Pehnack",1,6,"28/Nov/17 17:28","24/Mar/18 09:41","07/Dec/17 17:50"
PDFBOX-4027,PDFBOX,"IndexOutOfBoundsException when XObject form matrix has only 5 elements",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.8","1.8.14, 2.0.9, 3.0.0 PDFBox",PDModel,None,,"java.lang.IndexOutOfBoundsException: Index: 5, Size: 5
    java.util.ArrayList.rangeCheck(Unknown Source)
    java.util.ArrayList.get(Unknown Source)
    org.apache.pdfbox.cos.COSArray.get(COSArray.java:210)
    org.apache.pdfbox.util.Matrix.<init>(Matrix.java:65)
    org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getMatrix(PDFormXObject.java:218)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:466)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:185)
The file has this "matrix": /Matrix[ 0 0 5805.68 0 0]
The XObject form has an empty stream.
The file produced by "Microsoft® Excel® 2010". I cannot share it.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/Dec/17 17:31","24/Mar/18 09:41","08/Dec/17 17:47"
PDFBOX-4029,PDFBOX,"Rendering transparency groups in patterns",Sub-task,CLOSED,Major,Fixed,"2.0.7, 2.0.8","2.0.9, 3.0.0 PDFBox",Rendering,patch,"windows 10","i have gone through the "PDFBOX-3000 Transparency Group issues"...
and there are some issues in pdfs that i have attached...
Every time showTransparencyGroup() method is called the current graphics is translated by (x*xScale and y*yScale) which i assume is wrong.
I think when transparencyGroup comes in pattern stream, then current graphics should not changed. as well as when patterns are nested then no need to change the parent graphics.
i tried to fix it. i have attached the patch...",0,"Tilman Hausherr","savan patel",0,3,"06/Dec/17 15:29","24/Mar/18 09:41","09/Dec/17 16:04"
PDFBOX-4030,PDFBOX,"ClassCastException when matrix array has indirect objects",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.8","1.8.14, 2.0.9, 3.0.0 PDFBox",PDModel,None,,"ClassCastException: org.apache.pdfbox.cos.COSObject cannot be cast to org.apache.pdfbox.cos.COSNumber
    org.apache.pdfbox.util.Matrix.<init>(Matrix.java:60)
    org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern.getMatrix(PDAbstractPattern.java:135)
Solution: replace get() with getObject(). I created the attached file by modifying COSWriter.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Dec/17 15:56","24/Mar/18 09:41","07/Dec/17 16:08"
PDFBOX-4038,PDFBOX,"CFF font Blue values and other delta encoded lists read incorrectly",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",FontBox,None,,"The attached test compares the values retrieved via CFFParser from an OpenType font with the expected values as seen in FontForge (go to Element->Font Info->PS Private).
The font NeoSans Black.otf can be found at https://www.wfonts.com/font/neosans
The CFF font specification explaining the encoding of the entries which are incorrectly parsed by FontBox CFFParser can be found here https://typekit.files.wordpress.com/2013/05/5176.cff.pdf
We use FontBox to read the font when we need to embed it into an PDF which we produce via our Apache FOP based software. Adobe validator complains about incorrect "Blue values" sorting then.",0,"Tilman Hausherr","Petr Slaby",0,3,"15/Dec/17 10:45","24/Mar/18 09:41","16/Dec/17 07:29"
PDFBOX-4040,PDFBOX,"Get/set Viewports in PDPage",Improvement,CLOSED,Minor,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",PDModel,None,,"There's a PDViewportDictionary type but getting/setting them in PDPage is missing.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"15/Dec/17 15:54","24/Mar/18 09:41","15/Dec/17 20:42"
PDFBOX-4043,PDFBOX,"ExtractImages doesn't extract images from PDPatterns",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Utilities,None,,"The ExtractImages tool (or the underlying PDFGraphicsStreamEngine) doesn't extract images from PDPattern objects, even if they are shown on the page. We've found that Win2PDF stores images in such patterns. I have attached a sample file that this tool has generated from the Angular website. The sample clearly shows many images, but ExtractImages finds none of these.",0,"Tilman Hausherr","Arjohn Kampman",1,4,"20/Dec/17 10:07","24/Mar/18 09:41","22/Dec/17 10:42"
PDFBOX-4044,PDFBOX,"Unable to process overlay on Cognos PDF documents",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox","Documentation, (2)",None,,"Since we upgrade from PDFBox 1.7.1 to PDFBox 2.0.8, we cannot overlay PDF documents anymore. These PDF documens are from Cognos Reporting and still works fine with PDFBox 1.7.1.
Attached files:
report_cognos_merged.pdf - a document that contains an intro page that was succesfully merged into a cognos report. Page 2 and 3 are the original cognos report pages.
confidential_overlay.pdf - an overlay pdf document
report_cognos_overlayed.pdf - the resulting document after processing the overlay
To reproduce, use the attached report_cognos_merged.pdf and overlay this with the attached confidential_overlay.pdf. The resulting attached file report_cognos_overlayed.pdf only shows an overlay on the first page. The other two pages are not overlayed.
Code snippet used to overlay, comming from PDFBOX-4002 (I also tried each and every hint mentioned in that issue):
   public void addLayer() throws Exception {
        PDDocument inDocument = PDDocument.load(basePdf);
        PDDocument layoutDocument = PDDocument.load(overlayLayout);        
        LayerUtility layerUtility = new LayerUtility(inDocument);
        PDFormXObject layerObject = layerUtility.importPageAsForm(layoutDocument, 0);        
        AffineTransform transform = new AffineTransform();
        for (int i = 0; i < inDocument.getNumberOfPages(); i++) {
            layerUtility.appendFormAsLayer(inDocument.getPage(i), layerObject, transform, layer + "_" + i);
        }
        layerUtility.getDocument().save(outPdf);
    }
Since we at Infor do have a customer escallation on this particular issue, any hints as to why this might not work in PDF2.0.8 (and only on PDF1.7.1), or any particularities about the base PDF that might be causing this to be behaving differently would be helpful.",0,"Tilman Hausherr","Ad Kooiman",0,3,"21/Dec/17 12:41","24/Mar/18 09:41","21/Dec/17 20:48"
PDFBOX-4049,PDFBOX,"IllegalArgumentException: root cannot be null",Bug,CLOSED,Major,Duplicate,2.0.8,None,Parsing,regression,"windows 10","I got a pdf,,, in which pdfbox gives errors while parsing it.
Exception in thread "main" java.lang.IllegalArgumentException: root cannot be null
        at org.apache.pdfbox.pdmodel.PDPageTree.<init>(PDPageTree.java:75)
        at org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages(PDDocumentCatalog.java:129)
        at org.apache.pdfbox.pdmodel.PDDocument.getNumberOfPages(PDDocument.java:1411)
This did not happen with 2.0.7.",0,"Andreas Lehmkühler","savan patel",0,3,"04/Jan/18 14:42","10/Mar/18 15:18","10/Mar/18 15:18"
PDFBOX-4050,PDFBOX,"Check user password when decrypting with owner password in build test",Task,CLOSED,Minor,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Crypto,None,,"Encryption revision < 5 allows to get the user password when knowing the owner password, so I'm adding that to our test.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"04/Jan/18 17:42","24/Mar/18 09:41","04/Jan/18 18:19"
PDFBOX-4052,PDFBOX,"Number '------------06836305' is getting too long, stop reading at offset 36",Bug,CLOSED,Major,Fixed,2.0.8,2.0.9,Parsing,None,"windows 10","Bug in parsing the pdf.
java.io.IOException: Number '------------06836305' is getting too long, stop reading at offset 36
    org.apache.pdfbox.pdfparser.BaseParser.readStringNumber(BaseParser.java:1388)
    org.apache.pdfbox.pdfparser.BaseParser.readLong(BaseParser.java:1349)
    org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber(BaseParser.java:1286)
    org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:822)
    org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:804)
    org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:743)
    org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically(COSParser.java:2676)
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:193)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:240)",0,"Andreas Lehmkühler","savan patel",0,4,"05/Jan/18 07:13","24/Mar/18 09:41","24/Jan/18 07:34"
PDFBOX-4053,PDFBOX,"build test fails on jdk9",Bug,CLOSED,Major,Fixed,2.0.8,2.0.9,None,jdk9,"java 1.9","As reported by Diego Azevedo in the user mailing list:
testRenderImage(org.apache.pdfbox.tools.imageio.TestImageIOUtils)  Time elapsed: 0.124 sec  <<< ERROR!
java.lang.ExceptionInInitializerError: null
 at java.desktop/javax.imageio.spi.ServiceRegistry.checkClassAllowed(ServiceRegistry.java:745)
 at java.desktop/javax.imageio.spi.ServiceRegistry.lookupProviders(ServiceRegistry.java:230)
 at com.levigo.jbig2.util.ServiceLookup.getServices(ServiceLookup.java:31)
 at com.levigo.jbig2.util.log.LoggerFactory.getLogger(LoggerFactory.java:38)
 at com.levigo.jbig2.util.log.LoggerFactory.getLogger(LoggerFactory.java:50)
 at com.levigo.jbig2.JBIG2ImageReader.<clinit>(JBIG2ImageReader.java:49)
 at com.levigo.jbig2.JBIG2ImageReaderSpi.createReaderInstance(JBIG2ImageReaderSpi.java:118)
 at java.desktop/javax.imageio.spi.ImageReaderSpi.createReaderInstance(ImageReaderSpi.java:320)
 at java.desktop/javax.imageio.ImageIO$ImageReaderIterator.next(ImageIO.java:532)
 at java.desktop/javax.imageio.ImageIO$ImageReaderIterator.next(ImageIO.java:516)
 at org.apache.pdfbox.filter.Filter.findImageReader(Filter.java:133)
 at org.apache.pdfbox.filter.JBIG2Filter.decode(JBIG2Filter.java:54)
 at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:69)
 at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:167)
 at org.apache.pdfbox.pdmodel.common.PDStream.createInputStream(PDStream.java:235)
 at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.<init>(PDImageXObject.java:125)
 at org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject(PDXObject.java:70)
 at org.apache.pdfbox.pdmodel.PDResources.getXObject(PDResources.java:409)
 at org.apache.pdfbox.tools.imageio.TestImageIOUtils.checkSaveResources(TestImageIOUtils.java:77)
 at org.apache.pdfbox.tools.imageio.TestImageIOUtils.doTestFile(TestImageIOUtils.java:123)
 at org.apache.pdfbox.tools.imageio.TestImageIOUtils.testRenderImage(TestImageIOUtils.java:287)
The cause is an outdated jbig2 dependency.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/Jan/18 18:39","24/Mar/18 09:41","05/Jan/18 18:40"
PDFBOX-4055,PDFBOX,"Output info when PDFBox JBIG2 ImageIO is released",Task,CLOSED,Minor,Fixed,"1.8.13, 2.0.8","1.8.14, 2.0.9, 3.0.0 PDFBox",None,"JBIG2 jbig2",,"The next pdfbox that follows after the first release of PDFBox JBIG2 ImageIO should output an INFO text mentioning the change if the "then old" levigo JBIG2 ImageIO is installed, so that users know that future versions have a new home and can adjust their builds.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Jan/18 15:26","24/Mar/18 09:41","27/Feb/18 17:50"
PDFBOX-4057,PDFBOX,"Allow rendering with different X and Y scale",Improvement,CLOSED,Minor,Implemented,2.0.9,"2.0.10, 3.0.0 PDFBox",Rendering,None,,"Hi, We want to render PDF pages with different X and Y scales. But that is currently not supported. Could this be added? I have created a pull request. Please check:
https://github.com/apache/pdfbox/pull/42",0,"Andreas Lehmkühler","Cornelis Hoeflake",0,3,"08/Jan/18 14:46","21/Jun/18 20:27","01/May/18 10:41"
PDFBOX-4058,PDFBOX,"High memory consumption when extracting image from PDF file",Bug,CLOSED,Major,Fixed,"2.0.5, 2.0.6, 2.0.7, 2.0.8","2.0.9, 3.0.0 PDFBox",Rendering,regression,"windows 10, linux","When rendering an image at 300 dpi from the included PDF, my java process uses a huge amount of memory.
The document is only 45 Kb in size and contains 2 pages, my JVM is unable to extract even 1 page with 3G of memory. Setting Xmx to 4G works but is not the solution I want.
The error occurs when calling PDFRenderer.renderImageWithDPI()
I already tried tweaking the memory usage in my application to use a scratch file while loading the document as well as avoiding caching of XObjects as described here: https://pdfbox.apache.org/2.0/faq.html#outofmemoryerror
These didn't work.
The issue can be reproduced using the pdfbox-app utility:
java -Xmx3G -jar pdfbox-app-2.0.8.jar PDFToImage
HighMemoryFootprint.pdf -dpi 300 -color RGB -page 1
What can not be changed?
300 dpi will not be decreased.
Max Java memory will not be increased: 3GB is ridiculous for a 45kb PDF file.",0,"Tilman Hausherr","Bjorn Misseghers",1,4,"08/Jan/18 15:19","24/Mar/18 09:41","10/Jan/18 20:44"
PDFBOX-4060,PDFBOX,"Slow rendering of PDF file with DeviceN jpeg file",Bug,CLOSED,Major,Fixed,"2.0.5, 2.0.8","2.0.9, 3.0.0 PDFBox",Rendering,DeviceN,,"(File submitted by Soon Keong Tan on the user mailing list)
There is a large jpeg file (5349 x 3806) that uses a DeviceN colorspace which in turn is based on CMYK. There's some slowness due to the type0 convert function from DeviceN to CMYK, but this is less than 10%. Most time is from converting the CMYK to RGB, one pixel at a time. (Because of the DeviceN colorspace we can't use bulk conversion, which may or may not be faster)
jdk: 1.7.0_72
benchmarks:
(1) 1.8.13 - 1.5 mins
(2) 2.0.5 - 6.18 mins
(3) 2.0.8 - 6.35 mins",0,"Andreas Lehmkühler","Tilman Hausherr",0,4,"09/Jan/18 18:57","24/Mar/18 09:41","17/Jan/18 17:43"
PDFBOX-4061,PDFBOX,"ClassCastException PDActionJavaScript cannot be cast to PDDestination",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",PDModel,None,,"I got the following stacktrace merging PDFs. PDF files can not be attached because they have confidential information.
java.lang.ClassCastException: org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript cannot be cast to org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination
 at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:359)
 at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:266)",0,"Tilman Hausherr","Jorge Spinsanti",0,3,"10/Jan/18 19:32","24/Mar/18 09:41","10/Jan/18 20:21"
PDFBOX-4064,PDFBOX,"cm operator has 7 numbers",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.8","1.8.14, 2.0.9, 3.0.0 PDFBox",Parsing,None,"windows 10","i got pdf in which one particular page there is an image which is not rendered on the position...
i understood the problem. there is 7 numbers came before cm operator which i think is bug...
Page 9 has an error...",0,"Tilman Hausherr","savan patel",0,3,"12/Jan/18 13:54","24/Mar/18 09:41","13/Jan/18 17:43"
PDFBOX-4065,PDFBOX,"Set JBIG2 plugin to jdk6",Task,CLOSED,Minor,Fixed,None,"3.0.0 JBIG2",JBIG2,None,,"Change the pom.xml so that jdk6 is supported, which would be in line with PDFBox 2.*.
See also PDFBOX-4059 (near the bottom): a newbie had trouble setting up his command line, but for some untold reason he wanted to use 1.6 so he couldn't use the 2.0 version of the plugin. He ended up using 1.6.4.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Jan/18 03:18","27/Feb/18 10:06","16/Jan/18 03:50"
PDFBOX-4066,PDFBOX,"Merging documents with nested fields duplicates child fields",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox","AcroForm, Utilities",None,,"I have a pdf with a lot of acroforms, I do some manipulation on it which results in a new pdf. So I have PDF-1 (which is the original one )and PDF-2 (just a duplication of PDF-1), now I want to merge them. Both PDFs have some acroforms for example: field_a, field_2...
Before I merge them I flatten PDF-1, because I only want to have acrofields from PDF-2. When I check then my new merged PDF I can see that there are no visible fields on on the pages from PDF-1 and there are fields on pages of fields of PDF-2. At the first look it seems ok, but when I inspect the fields I can see that the merger has renamed all the fields for PDF-2 e.g. field_a_dummy123, field_b_dummy232 ...
It seems to me, that flattening does not remove the fields and thats why the PDFMerger from PDFBox will rename the fields for PDF-2 because acrofields need to be unique.Another guess was that there is a bug in mergeAcroForm()
  @Test
public void flattenAndMerge() throws IOException {
    File testForm = new File(classLoader.getResource("./TestForm.pdf").getFile());

    byte[] testFormAsByte = Files.readAllBytes(testForm.toPath());
    byte[] testFormAsByte2 = Files.readAllBytes(testForm.toPath());

    PDDocument pdf1 = PDDocument.load(testFormAsByte);
    PDAcroForm acroform = pdf1.getDocumentCatalog().getAcroForm();
    acroform.flatten();
    Path flattendedPdf = Files.createTempFile("flatten", ".pdf");
    pdf1.save(flattendedPdf.toFile());


    PDFMergerUtility merger = new PDFMergerUtility();
    merger.addSource(new ByteArrayInputStream(Files.readAllBytes(flattendedPdf)));
    merger.addSource(new ByteArrayInputStream(testFormAsByte2));
    merger.setDestinationFileName("./build/flattenAndMerge.pdf");
    merger.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());

}
Here is my SO Article
https://stackoverflow.com/questions/48271924/pdfbox-flatten-pdf-does-not-remove-acroform-elements?noredirect=1#comment83544858_48271924
   ",0,"Maruan Sahyoun","Al Phaba",1,6,"16/Jan/18 12:30","24/Mar/18 09:41","02/Feb/18 17:16"
PDFBOX-4067,PDFBOX,"Split PDAnnotationSquareCircle",Sub-task,RESOLVED,Minor,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox",PDModel,Refactoring,,"PDAnnotationSquareCircle does two things, so split it in two new classes PDAnnotationCircle and PDAnnotationSquare. I'll keep the old one as an abstract class for the common methods.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Jan/18 18:31","17/Jan/18 21:12","16/Jan/18 20:36"
PDFBOX-4070,PDFBOX,"Split Polygon and Polyline annotation classes from Markup annotation",Sub-task,RESOLVED,Major,Fixed,None,"3.0.0 PDFBox",PDModel,None,,"These are currently part of PDAnnotationMarkup. The new classes will have their specific methods, e.g. getVertices.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Jan/18 16:47","17/Jan/18 21:11","17/Jan/18 17:26"
PDFBOX-4072,PDFBOX,"Split Ink annotation class from Markup annotation",Sub-task,RESOLVED,Major,Fixed,None,"3.0.0 PDFBox",PDModel,None,,"This is currently part of PDAnnotationMarkup. The class will have its specific methods.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Jan/18 20:24","18/Jan/18 20:20","18/Jan/18 20:20"
PDFBOX-4074,PDFBOX,"Support quadpoints in link annotations",Sub-task,RESOLVED,Minor,Fixed,None,"3.0.0 PDFBox",PDModel,Annotations,,,0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Jan/18 15:43","29/Jan/18 16:56","29/Jan/18 16:56"
PDFBOX-4075,PDFBOX,"Split highlight, underline, strikeout and squiggly from text markup annotation",Sub-task,RESOLVED,Major,Fixed,None,"3.0.0 PDFBox",PDModel,Annotations,,,0,"Tilman Hausherr","Tilman Hausherr",0,2,"20/Jan/18 14:51","20/Jan/18 16:27","20/Jan/18 16:27"
PDFBOX-4079,PDFBOX,"Split FreeText, Caret and Sound annotation classes from PDAnnotationMarkup",Sub-task,RESOLVED,Major,Fixed,None,"3.0.0 PDFBox",PDModel,Annotations,,,0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Jan/18 17:07","24/Jan/18 17:09","24/Jan/18 17:09"
PDFBOX-4083,PDFBOX,"Line annotation /LL, /LLE and /LLO have wrong default values",Bug,CLOSED,Minor,Fixed,"1.8.13, 2.0.8","1.8.14, 2.0.9, 3.0.0 PDFBox",PDModel,Annotations,,"They currently return -1 when missing, but should return 0. -1 is a value that "does something".",0,"Tilman Hausherr","Tilman Hausherr",0,2,"26/Jan/18 22:18","24/Mar/18 09:41","26/Jan/18 22:19"
PDFBOX-4084,PDFBOX,"Can't draw PDFs while ANNOTS is COSStream instead of COSArray",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",PDModel,None,,"PDFBox would failed to draw the attached document , error logs are below:
java.lang.ClassCastException: org.apache.pdfbox.cos.COSStream cannot be cast to org.apache.pdfbox.cos.COSArray
at org.apache.pdfbox.pdmodel.PDPage.getAnnotations(PDPage.java:661) ~[classes/:?]
at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:202) ~[classes/:?]
This PDF put COSStream as the page's ANNOTS object, and caused the failure.
Simply do type checks in PDPage.getAnnotations might avoid this issue, but the annotations would lost.
  This PDF show correctly (I mean annotation works) in:
Chrome 63.0.3239.132
Adobe Reader 11.0.23
This PDF doesn't work perfectly in:
Microsoft Edge
     ",0,"Andreas Lehmkühler","Cheng Zhong",0,4,"27/Jan/18 04:24","24/Mar/18 09:41","11/Mar/18 08:57"
PDFBOX-4085,PDFBOX,"COSString cannot be cast to COSDictionary error",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox","Parsing, PDModel",None,"windows 10","There is a pdf in which parsing error occurs...",0,"Tilman Hausherr","savan patel",1,3,"29/Jan/18 11:52","24/Mar/18 09:41","29/Jan/18 16:38"
PDFBOX-4088,PDFBOX,"Root/StructTreeRoot/K/S must be name, not string (merge)",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.8","1.8.14, 2.0.9, 3.0.0 PDFBox",Utilities,None,,"This code in PDFMergerUtility looks suspicious:
kDictLevel0.setItem(COSName.S, new COSString(STRUCTURETYPE_DOCUMENT));
It sets a top level type in the K hierarchy... it should be a name, not a string, see "Entries in a structure element dictionary".",0,"Tilman Hausherr","Tilman Hausherr",0,2,"30/Jan/18 19:12","24/Mar/18 09:41","30/Jan/18 19:31"
PDFBOX-4089,PDFBOX,"Adjust box sizing calculation for Square annotation with empty /AP entry",Sub-task,RESOLVED,Major,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox","PDModel, Rendering",Annotations,,"If a square annotation doesn't have an /AP entry Adobe Reader calculates the boxes border so that the outer dimension matches the annotations /Rect entry and also enlarges the /Rect as to add padding to the border.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"30/Jan/18 20:18","03/Feb/18 17:38","03/Feb/18 17:38"
PDFBOX-4091,PDFBOX,"Cannot analyze signatures : Wrong type of referenced length object COSObject",Bug,CLOSED,Critical,Fixed,"2.0.7, 2.0.8","2.0.9, 3.0.0 PDFBox",Parsing,None,,"Dear Colleagues,
From one of our customer, we have got a pdf. According them and the adobe there is a PKCS7 signature but according the DSS 5.2 there is no. I attached this voucher.
What do you think?
One of DSS developer quickly checked their log and we got:
e.e.e.d.p.pdfbox.PdfBoxSignatureService : Cannot analyze signatures : Wrong type of referenced length object COSObject
Unknown macro: {8, 0}
: COSDictionary
java.io.IOException: Wrong type of referenced length object COSObject
: COSDictionary
at org.apache.pdfbox.pdfparser.COSParser.getLength(COSParser.java:908) ~[pdfbox-2.0.7.jar!/:2.0.7]
at org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:950) ~[pdfbox-2.0.7.jar!/:2.0.7]
at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:781) ~[pdfbox-2.0.7.jar!/:2.0.7]
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:742) ~[pdfbox-2.0.7.jar!/:2.0.7]
at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:673) ~[pdfbox-2.0.7.jar!/:2.0.7]
at org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:633) ~[pdfbox-2.0.7.jar!/:2.0.7]
at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:241) ~[pdfbox-2.0.7.jar!/:2.0.7]
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:276) ~[pdfbox-2.0.7.jar!/:2.0.7]
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1224) ~[pdfbox-2.0.7.jar!/:2.0.7]
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1201) ~[pdfbox-2.0.7.jar!/:2.0.7]
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1182) ~[pdfbox-2.0.7.jar!/:2.0.7]
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1165) ~[pdfbox-2.0.7.jar!/:2.0.7]
at eu.europa.esig.dss.pdf.pdfbox.PdfBoxSignatureService.getSignatures(PdfBoxSignatureService.java:321) [dss-pades-5.2.jar!/:na]",0,"Andreas Lehmkühler","Endre Pető",0,3,"01/Feb/18 13:54","24/Mar/18 09:41","04/Feb/18 16:27"
PDFBOX-4092,PDFBOX,"Support margin /RD getter and setter for Square, Circle, FreeText and Caret annotation",Sub-task,RESOLVED,Major,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox",PDModel,Annotations,,"Square, Circle, FreeText and Caret annotations support a margin entry /RD to define the border offset from the outer rectangle /Rect",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"01/Feb/18 17:29","02/Feb/18 19:22","01/Feb/18 17:45"
PDFBOX-4093,PDFBOX,"illegible characters in rendered image",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Rendering,None,,"illegible characters in rendered image",0,"Tilman Hausherr",sunnyawake,1,5,"02/Feb/18 08:53","24/Mar/18 09:41","07/Feb/18 18:54"
PDFBOX-4094,PDFBOX,"Add support for a flag disabling the rendering of PDF annotations in PDFRenderer",Wish,CLOSED,Minor,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Rendering,None,,"Regardless if annotations are supposed to be printed or not on the PDF, would it not be interesting to possess a flag allowing to choose if annotations should be printed on top of the document pages?
  Here is a diff of a very rough implementation of it : 
  diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java
--- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java
@@ -35,6 +35,9 @@ public class PDFRenderer
     protected final PDDocument document;
     // TODO keep rendering state such as caches here
 
+    // parameter used to know if the rendering should include annotations 
+    private boolean renderAnnotations = true;
+
     /**
      * Creates a new PDFRenderer.
      * @param document the document to render
@@ -224,4 +227,14 @@ public class PDFRenderer
     {
         return new PageDrawer(parameters);
     }
+
+    public void setRenderAnnotations(boolean render) 
+    {
+        this.renderAnnotations = render;
+    }
+
+    public boolean renderAnnotations() 
+    {
+        return renderAnnotations;
+    }
 }
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java
--- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java
@@ -195,11 +195,13 @@ public class PageDrawer extends PDFGraphicsStreamEngine
 
         processPage(getPage());
 
-        for (PDAnnotation annotation : getPage().getAnnotations())
-        {
-            showAnnotation(annotation);
+        if (getRenderer().renderAnnotations()) 
+        { 
+            for (PDAnnotation annotation : getPage().getAnnotations())
+            {
+                showAnnotation(annotation);
+            }
         }
-
         graphics = null;
     }
 
And an exemple of a use case: 
PDDocument doc = getPDDocument(); 
PDFRenderer pdfRenderer = new PDFRenderer(doc);
pdfRenderer.setRenderAnnotations(false);
pdfRenderer.renderImage(page);
 
By default, this would be keeping the same behavior as it used to (aka : print the annotations) but possess an opt-out feature.
  Best regards,
M.Veron",0,"Maruan Sahyoun","Maxime Veron",0,5,"02/Feb/18 11:41","24/Mar/18 09:41","16/Feb/18 09:47"
PDFBOX-4095,PDFBOX,"Non Separable Blend Modes implementation(HUE, SATURATION, COLOR, LUMINOSITY)",Improvement,CLOSED,Major,Fixed,2.0.8,"2.0.10, 3.0.0 PDFBox",Rendering,None,,"I have a patch for implementation of non separable blend modes...",0,"Tilman Hausherr","savan patel",0,4,"02/Feb/18 11:50","21/Jun/18 20:27","24/May/18 17:46"
PDFBOX-4096,PDFBOX,"Harmonize method names to set custom appearance handler",Sub-task,RESOLVED,Minor,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox",PDModel,Annotations,,"Currently where there is an appearance handler a specific method name is used to set a custom handler. Simplify to use the same method name.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"03/Feb/18 19:47","03/Feb/18 20:23","03/Feb/18 20:23"
PDFBOX-4097,PDFBOX,"Compressed object will lost when brute force search failed to handle compressed streams",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.10, 3.0.0 PDFBox",Parsing,None,,"Compressed object described in cross-reference streams will lost when brute force search failed to handle such streams.
The attached PDF has an object 1336, but it had a offset that referenced to object 1828. The inconsistency led to a brute force search. (Introduced by COSParser.checkXrefOffsets)
During the search (in bfSearchForObjStreams), Object stream 1828, 1829, 1830 failed to decompress due to "corrupted" stream(yes, the Params field was missing in the dictionary or the Filter was wrong). Thus, 462 compressed objects described in cross-reference streams are lost. Since important objects (the Root, the Pages, etc.) referred to objects in 1828 or something, all resolved to null (because the corrected XRefOffsets doens't have them). Further parsing is impossible.
However, when I tried to bypass checkXrefOffsets, the PDF shows correctly without any (noticeable) error. It seemed that object 1336 is not used in the PDF.
"Corrupted" 1828:
1828 0 obj
<<
/Length 2176
/Type /ObjStm
/N 200
/First 2103
/Filter /FlatDecode
>>
...
It doesn't work well in bfSearchForObjStreams but works in parseObjectStream.
  Would it be nice to have a fallback to preserve compressed stream object key offsets, when we some error in brute force search?",0,"Andreas Lehmkühler","Cheng Zhong",0,4,"06/Feb/18 07:39","21/Jun/18 20:27","05/Apr/18 17:48"
PDFBOX-4098,PDFBOX,"Prepare the JBIG2 repository for the first release",Task,CLOSED,Major,Fixed,"3.0.0 JBIG2","3.0.0 JBIG2",JBIG2,None,,"There are some minor adjustments to do before we can release the plugin
javadoc
formatting
build/release artifacts",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"06/Feb/18 17:56","26/Feb/18 18:39","26/Feb/18 18:39"
PDFBOX-4099,PDFBOX,"Protect PDDocumentCatalog constructors",Improvement,RESOLVED,Minor,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox",PDModel,None,,"A guy on the user mailing list used this code:
PDDocumentCatalog pg = new PDDocumentCatalog(mergedPDF) ;
PageMode pm = PageMode.USE_OUTLINES;
pg.setPageMode(pm);
This destroyed his PDF. The only usages of the constructors are internal to PDFBox, when a document is newly created or opened. My first thought was to make the constructor package local to avoid people using this, but it would prevent subclassing (although I can't imagine why anybody would do that), so I'll make it protected instead.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"06/Feb/18 19:53","06/Feb/18 19:55","06/Feb/18 19:55"
PDFBOX-4103,PDFBOX,"Optional Content Groups with same names can't have different visibility",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",PDModel,OCGs,,"According to PDF specs, it is possible to create OC Groups with the same name. Their visibility should be determined using object references (object number and generation number). The current implementation of PDOptionalContentProperties does not allow to create and check visibility of two different groups with the same name because all checks are done using group name, not group object key.
Provided PDF demonstrates this issue.
The attached patch adds an ability to use PDOptionalContentGroup as key to check and set group visibility.",0,"Tilman Hausherr","Ivan Khaldeev",0,3,"09/Feb/18 13:20","24/Mar/18 09:41","11/Feb/18 09:44"
PDFBOX-4105,PDFBOX,"Copyright 2011 adam",Bug,CLOSED,Minor,Fixed,None,"2.0.9, 3.0.0 PDFBox",None,None,,"PDFontTest.java and DecompressObjectstreams.java
has:
Copyright 2011 adam.",0,"Andreas Lehmkühler","simon steiner",0,5,"12/Feb/18 12:14","24/Mar/18 09:41","20/Feb/18 22:29"
PDFBOX-4106,PDFBOX,"Vertical text creation","New Feature",CLOSED,Major,Fixed,None,"2.0.9, 3.0.0 PDFBox","FontBox, Parsing, Writing","embed gsub parsing v",,"I needed to output vertical Japanese text, but was stymied by several limitations:
No API to load a TTF as Identity-V encoding
No support for 'vert' glyph substitution
No support for vertical metrics ('vhea' and 'vmtx' tables are parsed but not used at all)
I have attached a series of patches that implement the above features. Highlights:
The GSUB glyph substitution table is parsed (limitation: type 1 lookups only; this is sufficient for many features including 'vert'/'vrt2' vertical glyph substitution)
Cmap lookup makes use of GSUB when features are enabled on a TTF
'vhea' and 'vmtx' metrics are applied to PDCIDFont when appropriate, and are embedded/subsetted correctly through the DW2/W2 CIDFont dictionary
An API has been added for loading a TTF as a vertical font, setting Identity-V encoding and enabling 'vert'/'vrt2' substitution
Each patch could approximately be split out into a separate ticket, if desired.
Also attached is some sample code that exercises these patches and illustrates the effect of vertical glyph positioning. The sample output PDF is also attached.",0,"Tilman Hausherr","Aaron Madlon-Kay",1,6,"12/Feb/18 14:23","05/Sep/18 04:40","11/May/18 16:48"
PDFBOX-4107,PDFBOX,"NPE at PDFMergerUtility",Bug,CLOSED,Critical,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox","AcroForm, Utilities",None,,"If I merge several documents at get an:
  java.lang.NullPointerException
at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeAcroForm(PDFMergerUtility.java:743)
at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:390)
at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:266)",0,"Maruan Sahyoun","Gerardo Arroyo",0,4,"12/Feb/18 20:36","24/Mar/18 12:21","15/Feb/18 16:32"
PDFBOX-4112,PDFBOX,"Build and test PDFBox with JDK10",Task,RESOLVED,Major,Fixed,2.0.8,"3.0.0 PDFBox",None,jdk10,,"Issue to collect problems and solutions for building and testing PDFBox with JDK10.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"16/Feb/18 20:18","15/Jun/18 16:43","15/Jun/18 16:43"
PDFBOX-4113,PDFBOX,"Debugger file open dialog has incorrect filter on Mac",Bug,CLOSED,Minor,Fixed,"2.0.8, 3.0.0 PDFBox","2.0.9, 3.0.0 PDFBox","Swing GUI","debugger mac-os-x",,"The file open dialog for Mac in the PDFDebugger tool has the file filter set up incorrectly. Instead of filtering the filename, it is filtering the directory name. Thus you can open any file in a directory that ends with .pdf, but nothing else.
See also: FilenameFilter.accept Javadoc",0,"Tilman Hausherr","Aaron Madlon-Kay",0,3,"17/Feb/18 14:40","24/Mar/18 09:41","17/Feb/18 15:40"
PDFBOX-4114,PDFBOX,"ICCBased color spaces wrong color output",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox","PDModel, Rendering",None,,"When rendering page with embedded ICC_profile (DeviceCMYK) it has a wrong colors, like semitransparent white plane covering the page
See the render output
Tried patches suggested here
https://forums.adobe.com/thread/1914790
https://github.com/haraldk/TwelveMonkeys/blob/master/imageio/imageio-jpeg/src/main/java/com/twelvemonkeys/imageio/plugins/jpeg/JPEGImageReader.java
and trying one by one found that problem is connected to profileClass
Here is the one of proposed patches I've found and which worked for me
Please review proposed patch",0,"Tilman Hausherr","Michael Vakulich",0,3,"17/Feb/18 20:47","03/Dec/18 12:58","19/Feb/18 17:59"
PDFBOX-4115,PDFBOX,"Problem creating PDF with German text using embedded Type1 (PFB) font",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",FontBox,"type1 type1font",,"When creating a PDF and adding text using a PostScript Type1 font (e.g. the attached n019003l.pfb but also others), an error occurs when the text contains German characters.
The error occurs with e.g. the character "ä" (adieresis) and other similar umlaut characters; it does not occur with "ß" (germandbls).
Using an embedded TTF seems to work fine but when I load the PFB like this:
InputStream pfb = new FileInputStream(fontFile);
font = new PDType1Font(document, pfb);
I get an encoding error whenever I try to print an "ä" to the page:
java.lang.IllegalArgumentException: U+00E4 ('adieresis') is not available in this font NimbusSanL-Regu (generic: NimbusSanL-Regu) encoding: built-in (Type 1)
If I specify a different encoding (WinANSI) when loading the font:
InputStream pfb = new FileInputStream(fontFile);
font = new PDType1Font(document, pfb, new WinAnsiEncoding());
then the exception is not thrown, but I just have an empty space in place of the "ä".
I have tried to look into the code, in particular I have played around with the class PDType1FontEmbedder.
When the FontBox object Type1Font is created by the parser in the following line of code:
type1 = Type1Font.createWithPFB(pfbBytes);
I have tried to look into the charstring dictionary:
type1.getCharStringsDict()
and, by iterating through the set keys, can see that "adieresis" is in there.
However, when using the default encoding from the font (i.e. by passing "null" to the PDType1FontEmbedder), the resulting encoding that is obtained by the following line of code:
fontEncoding = Type1Encoding.fromFontBox(type1.getEncoding());
does not contain "adieresis" (or other "compound" characters), but just "dieresis".",0,"Tilman Hausherr","Tamir Hassan",0,3,"18/Feb/18 07:54","24/Mar/18 09:41","18/Feb/18 12:46"
PDFBOX-4117,PDFBOX,"Implement GoToE action-type","New Feature",CLOSED,Major,Fixed,"1.8.13, 2.0.8","2.0.9, 3.0.0 PDFBox",AcroForm,None,,"One of the major Action Types is not implemented in any version of PDFBox, and I believe it should be. I'm referring to "Embedded Go-To Actions" (defined under 12.6.4.4 in PDF 32000-1:2008), which allows a link to open an attached file. Currently, such "GoToE" actions are interpreted as "null" by PDFBox, which is not ideal.",0,"Tilman Hausherr","Gilad Denneboom",0,4,"19/Feb/18 17:07","24/Mar/18 09:41","24/Feb/18 17:01"
PDFBOX-4118,PDFBOX,"Retain Exception in log output",Sub-task,RESOLVED,Major,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox",None,None,,"This task is to track resolving the message.
Either log or rethrow this exception.
I'll do that for trunk only to limit the time needed.",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"20/Feb/18 10:33","09/May/18 07:13","09/May/18 07:13"
PDFBOX-4119,PDFBOX,"KCMS takes too much time",Improvement,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Rendering,CalGray,"windows 10","i have a pdf in which if i set the property (-Dsun.java2d.cmm=sun.java2d.cmm.kcms.KcmsServiceProvider) as mention in the PDFBOX-4022 then it took the pdf to render 6:30 minutes and without setting that property it took 40 seconds around.",0,"Tilman Hausherr","savan patel",0,4,"21/Feb/18 08:29","24/Mar/18 09:41","21/Feb/18 16:41"
PDFBOX-4121,PDFBOX,"(-Dorg.apache.pdfbox.rendering.UsePureJavaCMYKConversion=true) takes much time",Improvement,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Rendering,DeviceCMYK,,"I have a pdf in which page 1 gets around 45 sec to render when i set the property (-Dorg.apache.pdfbox.rendering.UsePureJavaCMYKConversion=true) and without it it takes 20 sec.
and something weird happens to me. when i don't set this property (System.setProperty("sun.java2d.cmm", "sun.java2d.cmm.kcms.KcmsServiceProvider")) then i get this warning "WARNING: Could not read JPEG 2000 (JPX) image" . is it some jar related warning or it happen to u also?",0,"Tilman Hausherr","savan patel",0,4,"22/Feb/18 13:11","24/Mar/18 09:41","25/Feb/18 09:46"
PDFBOX-4122,PDFBOX,"Resolve potential NPEs flagged by Sonar",Sub-task,RESOLVED,Major,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox",None,None,,"We have many potential NPEs resolved by now but there are still some flagged by Sonar
https://builds.apache.org/analysis/component_issues?id=org.apache.pdfbox%3Apdfbox-reactor#resolved=false|types=BUG|severities=BLOCKER.
Although it's very unlikely that we hit them in practice e.g. as this would mean a very corrupt font file I'll try to resolve these debug logging the condition and returning in that case.
Tilman Hausherr Andreas Lehmkühler please comment/revert if you are not happy with the approach.",0,"Maruan Sahyoun","Maruan Sahyoun",0,4,"22/Feb/18 16:26","07/Mar/18 07:25","07/Mar/18 07:25"
PDFBOX-4124,PDFBOX,"Resolve missing checks for reading stream data flagged by Sonar",Sub-task,CLOSED,Major,Fixed,None,None,None,None,,"There are a small number of occasions where the result of skip and read calls is not verified. I'll add LOG.debug level messages if the results differ from the intended amount to help tracking down potential issues caused by that although this is very unlikely as this code is from 2012.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"23/Feb/18 12:25","02/Dec/18 17:10","05/Mar/18 16:46"
PDFBOX-4125,PDFBOX,"FDFField.writeXML KO with String",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",AcroForm,FDF,,"When saving an XFDF into file, all the `<value>` are skiped in the output.
This is due to an incoherence between `writeXML()` which use `value instanceof COSString`
 public void writeXML(Writer output) throws IOException
    {
        output.write("<field name=\"" + getPartialFieldName() + "\">\n");
        Object value = getValue();
        if (value != null)
        {
            if (value instanceof COSString)
            {
                output.write("<value>" + escapeXML(((COSString) value).getString()) + "</value>\n");
            }
            else if (value instanceof COSStream)
            {
                output.write("<value>" + escapeXML(((COSStream) value).toTextString()) + "</value>\n");
            }
        }
and `getValue()` which transform COSString into String :
 public Object getValue() throws IOException
    {
        COSBase value = field.getDictionaryObject(COSName.V);
        if (value instanceof COSName)
        {
            return ((COSName) value).getName();
        }
        else if (value instanceof COSArray)
        {
            return COSArrayList.convertCOSStringCOSArrayToList((COSArray) value);
        }
        else if (value instanceof COSString)
        {
            return ((COSString) value).getString();
        }",0,"Maruan Sahyoun",Loic,0,4,"23/Feb/18 14:46","24/Mar/18 09:41","05/Mar/18 06:29"
PDFBOX-4129,PDFBOX,"Deleted fonts not detected when checking cache",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",None,None,,"FileSystemFontProvider doesn't detect when a font in the cache is removed, which results in an error if such a font "matches".",0,"Tilman Hausherr","Tilman Hausherr",0,2,"26/Feb/18 20:57","24/Mar/18 09:41","26/Feb/18 21:14"
PDFBOX-4130,PDFBOX,"When W entries not included in CIDFont get width from font by code, Improve display of some PDF files.",Improvement,CLOSED,Major,Duplicate,"2.0.8, 3.0.0 PDFBox",None,Rendering,None,,"Some PDF use CJK font without embedded subset displayed incorrectly, the alphabet become wider.
This is before the patch.
    This is after the patch.
The test file DateTest.pdf
This patch only get width from font when these isn't a W entry in CIDFont. If there is an W entry, then any cid not in W entries will return default width.",0,"Tilman Hausherr",chunlinyao,0,2,"27/Feb/18 06:10","04/Mar/18 20:55","04/Mar/18 20:55"
PDFBOX-4133,PDFBOX,"Maven repository points to incorrect snapshot version",Bug,CLOSED,Major,Fixed,None,None,None,None,,"Looking at the maven repository 
  https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-parent/1.8.14-SNAPSHOT/maven-metadata.xml
  Latest version points to 1.8.14-20180226.173300-46
But that version is not available in the repository, a different version is available
https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-parent/1.8.14-SNAPSHOT/pdfbox-parent-1.8.14-20180226.173259-46.pom
Same buildnumber but different timestamp
  This results in failing downloads",0,"Andreas Lehmkühler","Robin Van Praet",0,2,"27/Feb/18 13:13","27/Feb/18 15:34","27/Feb/18 15:25"
PDFBOX-4134,PDFBOX,"Resolve floating point comparisons flagged by Sonar",Sub-task,RESOLVED,Major,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox",None,None,,"Sonar is flagging floating point comparisons which are done using comparison operators. Using Float.compare this can be done in a standards way. In addition some comparisons might be done using a distance between two values.",0,"Maruan Sahyoun","Maruan Sahyoun",0,2,"27/Feb/18 17:22","07/Apr/18 16:08","07/Apr/18 16:08"
PDFBOX-4135,PDFBOX,"Modify PDFBox builds für Apache JBIG2 plugin",Task,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",None,None,,"replace jbig2 in pom.xml
include/integrate jbig2 plugin to app",0,"Tilman Hausherr","Tilman Hausherr",0,2,"27/Feb/18 17:54","24/Mar/18 09:41","28/Feb/18 20:50"
PDFBOX-4137,PDFBOX,"Allow subsampled/downscaled rendering of images, and rendering subimages",Improvement,CLOSED,Minor,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Rendering,None,,"Suggested/contributed change to allow subsampling of images and rendering sub-regions of images.  
The need arises from having very large images which are highly compressed (usually JPEG or JBIG2). The current implementation decodes the entire image into memory at full resolution, even if rendering is done at a much lower resolution. 
Since the change required augmenting the way Filters work (to allow partial/subsampled decoding), it also includes a partial fix for PDFBOX-3340.  
  This change introduces "DecodeOptions" which are currently only applicable for images. They include requesting only metadata (for PDImageXObject's repair method), subsampling and sub-region (similar to javax.imagio.ImageReadParam). 
Since not all filters can or do honor (use) the options, the DecodeOptions class contains a flag. Filters that honor the options (subsample / decode only requested region) set it to true. If the flag is false, the subsampling or cropping should be done after decoding, to ensure consistency. 
PageDrawer was modified so it uses subsampling based on the ratio of the desired output to the original image. 
 ",0,"Tilman Hausherr","Itai Shaked",0,3,"01/Mar/18 21:05","28/Mar/18 16:33","08/Mar/18 19:06"
PDFBOX-4139,PDFBOX,"Optimize memory footprint of CID mappings within CMaps",Improvement,CLOSED,Minor,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",FontBox,None,,"Some of the predefined CMaps define CID-ranges which simply map single values. Other are consecutive ranges which could be merge into one range, e.g.
UniGB-UCS2-H contains a lot of ranges representing single value mappings
Identity-H contains 256 ranges which can be merge into a single range",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"04/Mar/18 12:30","24/Mar/18 09:41","04/Mar/18 16:01"
PDFBOX-4140,PDFBOX,"Crash when repeating flag is outside of range.",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",FontBox,patch,,"Running PDFBox to create images with a PDF with bad data the tool crashes and no image is rendered.",0,"Tilman Hausherr","Daniel Persson",1,3,"05/Mar/18 10:20","24/Mar/18 09:41","05/Mar/18 17:18"
PDFBOX-4142,PDFBOX,"Don't use md5 checksum due to changes to the release distribuition policy",Improvement,CLOSED,Major,Fixed,"2.0.8, 3.0.0 PDFBox, (1)","1.8.14, 2.0.9, (2)",None,None,,"The release distribution policy was changes with regard to the checksums to be used:
Old policy :
MUST provide a MD5-file
SHOULD provide a SHA-file [SHA-512 recommended]
New policy :
MUST provide a SHA- or MD5-file
SHOULD provide a SHA-file
SHOULD NOT provide a MD5-file
see http://www.apache.org/dev/release-distribution for further details",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"05/Mar/18 16:32","16/Apr/18 17:43","16/Apr/18 17:43"
PDFBOX-4143,PDFBOX,"repository-cached download of fontbox test files",Task,CLOSED,Minor,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",FontBox,None,,"Load fontbox testfiles into + from the repository as already done in PDFBOX-3974 and PDFBOX-4038.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"06/Mar/18 17:44","24/Mar/18 09:41","06/Mar/18 17:57"
PDFBOX-4146,PDFBOX,"Patch: Fix for appearance of visible signature",Bug,CLOSED,Minor,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Signing,"Signature patch",,"We're using PDFBox (as backend used by Esig DSS) for digital signing of documents. We've found out  that visible signature has different look on Mac Preview app than other PDF viewers. After some investigation we suspect that BBox-es for appearance of signature is not filled correctly by PDFBox. The values are hard coded as [0, 0, 100, 50]. Also transformation matrix for translating from form XObject coordinate system into default one has value (1, 0, 0, 1, 0, 0) -> no scaling between default user coordinate system and form XObject coordinate system.
Therefore I think that the Mac Preview App draws signature with dimensions 100x50 because no transformation were done.
I've attached patch which solves this issue for us. The signature is shown correctly in all PDF viewers now. Maybe you can take a look on it and integrate it into your code base, or propose better solution.",0,"Tilman Hausherr","Martin Mancuska",1,3,"07/Mar/18 14:51","24/Mar/18 09:41","12/Mar/18 16:58"
PDFBOX-4149,PDFBOX,"PDF consisting on one page with 5 MB renders until the end of time using renderImageWithDPI",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.14, 3.0.0 PDFBox",Rendering,None,,"I am using PDFBOX 2.0.8 on a Java VM 1.8.0_151
The attached and valid pdf should be rendered by calling
BufferedImage bim = pdfRenderer.renderImageWithDPI(i, 50);
But the rendering never ends - the only thing I see is this line repeating very often in the console:
[Finalizer] DEBUG org.apache.pdfbox.io.ScratchFileBuffer - ScratchFileBuffer not closed!
Here is the code that is used to open the document and then start the rendering:
PDDocument document = PDDocument.load(file, MemoryUsageSetting.setupTempFileOnly());
try  {
   PDFRenderer pdfRenderer = new PDFRenderer(document);
   int numberOfPages = document.getPages().getCount();
   for (int i = 0; i < numberOfPages; i++) {
      BufferedImage bim = pdfRenderer.renderImageWithDPI(i, 50);
[...]
The line
BufferedImage bim = pdfRenderer.renderImageWithDPI(i, 50);
is never passed. I ran a test and have wait for 30 minutes to let it pass, but nothing happens.
Please advise what to do and how to solve the issue.",0,"Tilman Hausherr",Christian,0,3,"11/Mar/18 08:00","28/Feb/19 17:44","06/Feb/19 16:44"
PDFBOX-4150,PDFBOX,"Optimize clipping text rendering modes",Improvement,CLOSED,Major,Fixed,2.0.8,"2.0.9, 3.0.0 PDFBox",Rendering,optimization,,"I noticed that the file from PDFBOX-2035 needs 210 seconds on my new PC. The profiler shows that much time is lost in java.awt.geom.AreaOp.pruneEdges. A google search hit the linked SO issue. So I changed PageDrawer. Times on new PC with energy setting to maximum:
PDFBOX-1350: 53 secs before, 12 secs after
PDFBOX-2035: 210 secs before, 9 secs after
all tests: 424 secs before, 247 secs after (the difference is mostly because of PDFBOX-2035 which prevents termnination of the test)
all tests except the two: 246 secs before, 230 secs after",0,"Tilman Hausherr","Tilman Hausherr",0,2,"12/Mar/18 17:02","24/Mar/18 09:41","12/Mar/18 17:16"
PDFBOX-4151,PDFBOX,"FlateFilter, LZWFilter with predictor causes double memory usage",Bug,CLOSED,Major,Fixed,2.0.8,"2.0.10, 3.0.0 PDFBox",None,"Optimization Predict",,"The problem occurred in our production during processing file with size 400kB. The file was generated by the scanner with resolution 5960 x 8430 pixels with 8 bit per pixel (unfortunately we have no control over files which should be processed). Our analysis showed that problem is in FlateFilter.decode where uncompressed data are written into ByteArrayOutputStream. Since the final size of the file is unknown to OutputStream its size is growing by internal call Arrays.copyOf. By the end of processing file, this leads to usage of memory at two times file size.
What we have tried and helped in our case was slightly modification of FlateFilter and LZWFilter decode method implementation. Here is the code snippet of original method body:
@Override
public DecodeResult decode(InputStream encoded, OutputStream decoded,
COSDictionary parameters, int index) throws IOException
{
int predictor = -1;

final COSDictionary decodeParams = getDecodeParams(parameters, index);
if (decodeParams != null)
{
predictor = decodeParams.getInt(COSName.PREDICTOR);
}

try
{
if (predictor > 1)
{
int colors = Math.min(decodeParams.getInt(COSName.COLORS, 1), 32);
int bitsPerPixel = decodeParams.getInt(COSName.BITS_PER_COMPONENT, 8);
int columns = decodeParams.getInt(COSName.COLUMNS, 1);
ByteArrayOutputStream baos = new ByteArrayOutputStream();
decompress(encoded, baos);
ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
Predictor.decodePredictor(predictor, colors, bitsPerPixel, columns, bais, decoded);
decoded.flush();
baos.reset();
bais.reset();
}
else
{
decompress(encoded, decoded);
}
} 
catch (DataFormatException e)
{
// if the stream is corrupt a DataFormatException may occur
LOG.error("FlateFilter: stop reading corrupt stream due to a DataFormatException");

// re-throw the exception
throw new IOException(e);
}
return new DecodeResult(parameters);
}
and here is our implementation:
@Override
    public DecodeResult decode(InputStream encoded, OutputStream decoded,
                                         COSDictionary parameters, int index) throws IOException
    {
        final COSDictionary decodeParams = getDecodeParams(parameters, index);
        int predictor = decodeParams.getInt(COSName.PREDICTOR);

        try
        {
            if (predictor > 1)
            {
             File tempFile = null;
                FileOutputStream fos = null;
                FileInputStream fis = null;
                try {
                 int colors = Math.min(decodeParams.getInt(COSName.COLORS, 1), 32);
                 int bitsPerPixel = decodeParams.getInt(COSName.BITS_PER_COMPONENT, 8);
                 int columns = decodeParams.getInt(COSName.COLUMNS, 1);
                 tempFile = File.createTempFile("tmpPdf", null);
                 fos = new FileOutputStream(tempFile);
                 decompress(encoded, fos);
                 fos.close();
                 fis = new FileInputStream(tempFile);
                 Predictor.decodePredictor(predictor, colors, bitsPerPixel, columns, fis, decoded);
                 decoded.flush();
                } finally {
                 IOUtils.closeQuietly(fos);
                 IOUtils.closeQuietly(fis);
                 try { 
                  // try to delete but don't care if it fails
      tempFile.delete();
     } catch(Exception e) {
      LOG.error("Could not delete temp data file", e);
     }
                }
            }
            else
            {
                decompress(encoded, decoded);
            }
        } 
        catch (DataFormatException e)
        {
            // if the stream is corrupt a DataFormatException may occur
            LOG.error("FlateFilter: stop reading corrupt stream due to a DataFormatException");

            // re-throw the exception
            throw new IOException(e);
        }
        return new DecodeResult(parameters);
    }
The picture OriginalFilters.png shows memory usage during processing this file with unmodified filters and the picture ModifiedFilters.png shows memory usage during processing same file with modified filters.
For testing purposes, we have created two small applications with same Main class and Main method, but different libraries used (one, called TestOriginalFilters uses Filters implementation without any change and the second one called TestModifiedFilters uses Filters with our modification). Since original document contains personal data, we propose given file (TEST.pdf) with an almost same resolution for internal testing. The application waits for 10 seconds before starting file processing to ensure enough time for starting jvisualvm. The application is also prepared for multi-page documents. The application MainTest class:
package test;

import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JLabel;

import org.apache.pdfbox.io.MemoryUsageSetting;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.PDFRenderer;

public class MainTest {

 // This is simple test for amount of memory consumption by PDFBox library
 public static void main(String[] args) {

  if (args.length != 1) {
   throw new IllegalArgumentException("File is needed to continue");
  }

  String fileName = args[0];

  try {
   System.out.println("start sleep for 10 second to start jvisualvm");
   Thread.sleep(10000);
   System.out.println("sleep is over");
  } catch (InterruptedException e) {
   e.printStackTrace();
  }

  try {
   File dataFile = new File(fileName);
   PDDocument document = PDDocument.load(dataFile, MemoryUsageSetting.setupMixed(64 * 1024));
   int pages = document.getNumberOfPages();
   PDFRenderer renderer = new PDFRenderer(document);
   List<BufferedImage> images = new ArrayList<>();
   for (int j = 0; j < pages; j++) {
    System.out.println("Procesing page with index: " + j);
    long startime = System.nanoTime();
    BufferedImage image = renderer.renderImage(j, computeZoomFactor(document, j, 500));
    System.out.println("Page with index: " + j + " done in " + ((System.nanoTime() - startime)) / 1000000);
    JLabel result = new JLabel(new ImageIcon(image));
    result.setPreferredSize(new Dimension(image.getWidth(), image.getHeight()));
    images.add(image);
   }

   System.out.println("Processing finished");
  } catch (IOException ioe) {
   ioe.printStackTrace();
  }

 }

 private static float computeZoomFactor(PDDocument document, int pageIndex, float width) {
  float docWidth = document.getPage(pageIndex).getCropBox().getWidth();
  return width > 0 ? (width / docWidth) : 1.0f;
 }

}",0,"Tilman Hausherr","Marek Pribula",0,4,"13/Mar/18 14:40","21/Jun/18 20:27","24/Mar/18 12:39"
PDFBOX-4153,PDFBOX,"Outlines missing in some versions, not in others",Bug,CLOSED,Major,Fixed,"2.0.8, 2.0.9, 3.0.0 PDFBox","2.0.9, 3.0.0 PDFBox",Parsing,None,,"The outlines are missing in the attached files. There are shown with 2.0.8 and with the trunk and with the first 2.0.9 version tested by Tim and not with the current 2.0.9 version, and not with Adobe Reader. So I can't decide which one is OK. It is likely related to the recent change, e.g. PDFBOX-4084.",0,"Andreas Lehmkühler","Tilman Hausherr",0,3,"13/Mar/18 18:47","24/Mar/18 09:41","15/Mar/18 17:49"
PDFBOX-4156,PDFBOX,"Possible optimization of SampledImageReader.from8bit by using InterleavedRaster",Improvement,CLOSED,Minor,Fixed,2.0.8,"2.0.10, 3.0.0 PDFBox",Rendering,optimization,,"I noticed SampledImageReader.from8Bit assumed the source data to be interleaved, which means if the target raster uses an interleaved sample model, the data can by directly copied. 
This can save 10-15% of total render time in files with large 8-bit images (tested on samples from PDFBOX-2092 , PDFBOX-3791 and the file "gs-bugzilla690022.pdf" from PDFBOX-4151). 
In PDFBOX-2092 there is a discussion about how the sample model must be Banded, but I couldn't find a place in the code that directly relies on this, and the few tests I have run did not reveal problems. Perhaps the constraint is obsolete, or else it means custom sample models cannot be used? ",0,"Tilman Hausherr","Itai Shaked",0,3,"18/Mar/18 08:13","21/Jun/18 20:27","24/Mar/18 13:49"
PDFBOX-4157,PDFBOX,"Flatten ne positonne pas bien le 1er champs si Image avant",Bug,CLOSED,Minor,Fixed,2.0.8,"2.0.10, 3.0.0 PDFBox",AcroForm,flatten,,"Sur formulaire, avec une image et plusieurs champs textes, la méthode flatten ne positionne pas bien le 1er champs de texte, car need translation est faux,  parce que la méthode RevolveNeedsTranslation    trouve un Xobject, mais qui est une Image, et pas un Xform.
Il faut donc modifier cette méthode pour prendre en compte aussi le cas des images
 ",0,"Maruan Sahyoun",Chdeul,0,4,"18/Mar/18 18:06","21/Jul/18 13:23","02/Apr/18 09:26"
PDFBOX-4158,PDFBOX,"COSDocument and PDFMerger may not close all IO resources if closing of one fails",Bug,CLOSED,Minor,Fixed,"2.0.4, 2.0.9, 3.0.0 PDFBox","2.0.10, 3.0.0 PDFBox",PDModel,None,,"As observed on the users mailing list COSDocument.close and PDFMergerUtility.mergeDocuments might not close all IO resources if closing of one of the resources fails",0,"Maruan Sahyoun","Maruan Sahyoun",1,3,"19/Mar/18 16:04","21/Jun/18 20:27","09/Apr/18 13:36"
PDFBOX-4159,PDFBOX,"PDFBox doesn't warn if Special graphics state operators are used in text mode",Improvement,CLOSED,Major,Fixed,2.0.8,"2.0.10, 3.0.0 PDFBox",None,None,,"When i use a large amount of AffineTransformations the resulting document will open in Acrobat Reader, but each time a warning is displayed, that there is a defect in the document. The code I use is like: 
// BROKEN
context.useFont(FontFace.FONT_TEXT);
for (int i = 0; i < 80; i++) {
    context.contentStream.beginText();
    context.contentStream.saveGraphicsState();
    context.contentStream.transform(new Matrix(AffineTransform.getTranslateInstance(0, VIEWPORT_TOP - i * 5)));
    context.contentStream.showText("XXXXXXXXX");
    context.contentStream.restoreGraphicsState();
    context.contentStream.endText();
}

// WORKS
context.useFont(FontFace.FONT_TEXT);
for (int i = 0; i < 80; i++) {
    context.contentStream.saveGraphicsState();
    context.contentStream.beginText();
    context.contentStream.transform(new Matrix(AffineTransform.getTranslateInstance(0, VIEWPORT_TOP - i * 5)));
    context.contentStream.showText("XXXXXXXXX");
    context.contentStream.endText();
    context.contentStream.restoreGraphicsState();
}
When i skip the transformations or reduce the amount to e.g. 30, everything is fine. The size of ty or page breaks do not have an influence on the result, it seems to be the amount of transforms.
I attached a simple PDF sporting the described effect. Please note: The effect only occurs in the standalone Acrobat Reader, not the acrobat browser plugin. So to see the error, download the PDF from this ticket and open it independently from the browser.",0,"Maruan Sahyoun","ulrich gratz",0,4,"19/Mar/18 20:21","21/Jun/18 20:27","21/Mar/18 14:28"
PDFBOX-4161,PDFBOX,"Overlay class should allow user to influence transform",Improvement,CLOSED,Minor,Fixed,"2.0.8, 2.0.9","2.0.10, 3.0.0 PDFBox",Utilities,None,,"As suggested by Michael Klink in a comment of the linked SO issue, offer the user a way to do the calculation of the overlay position.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"20/Mar/18 18:27","21/Jun/18 20:27","24/Mar/18 10:30"
PDFBOX-4162,PDFBOX,"OutOfMemoryError in PDExtendedGraphicsState#getLineDashPattern",Bug,CLOSED,Critical,Fixed,2.0.8,"2.0.10, 3.0.0 PDFBox",None,None,,"I'm getting an OutOfMemoryError from PDFBox when parsing a certain PDF using the Apache Tika App v 1.17 - which uses PDFBox 2.0.8 internally. This is reproducible even with 8GB heap.
The OutOfMemoryError happens in org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState#getLineDashPattern, which contains this piece of suspicious code:
COSArray dp = (COSArray) dict.getDictionaryObject( COSName.D );
if( dp != null )
{
    COSArray array = new COSArray();
    dp.addAll(dp);
The last line is wrong. It appends all elements from 'dp' to 'dp' again, effectively duplicating the elements in the list. Maybe the intention was to add it to the created array instead.
Stacktrace:
[Full GC (Allocation Failure)  4225609K->4224664K(5989888K), 32,9544686 secs]
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
    at java.util.Arrays.copyOf(Arrays.java:3210)
    at java.util.Arrays.copyOf(Arrays.java:3181)
    at java.util.ArrayList.grow(ArrayList.java:261)
    at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)
    at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)
    at java.util.ArrayList.addAll(ArrayList.java:579)
    at org.apache.pdfbox.cos.COSArray.addAll(COSArray.java:124)
    at org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState.getLineDashPattern(PDExtendedGraphicsState.java:280)
    at org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState.copyIntoGraphicsState(PDExtendedGraphicsState.java:89)
    at org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters.process(SetGraphicsStateParameters.java:61)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:838)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:495)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:469)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
    at org.apache.pdfbox.text.LegacyPDFStreamEngine.processPage(LegacyPDFStreamEngine.java:139)
    at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)
    at org.apache.tika.parser.pdf.PDF2XHTML.processPage(PDF2XHTML.java:147)
    at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)
    at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)
    at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:117)
    at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:168)
    at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
    at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)
    at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:143)
    at org.apache.tika.cli.TikaCLI$OutputType.process(TikaCLI.java:205)
    at org.apache.tika.cli.TikaCLI.process(TikaCLI.java:486)
    at org.apache.tika.cli.TikaCLI.main(TikaCLI.java:145)",0,"Andreas Lehmkühler","Andreas Hubold",0,5,"20/Mar/18 21:51","21/Jun/18 20:27","21/Mar/18 14:29"
PDFBOX-4163,PDFBOX,"Java 11 compile error",Bug,CLOSED,Major,Fixed,None,"2.0.13, 3.0.0 PDFBox",XmpBox,jdk11,,"mvn clean install -DskipTests
xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java:[403,34] package javax.xml.bind does not exist",0,"Tilman Hausherr","simon steiner",0,5,"21/Mar/18 10:08","02/Dec/18 17:06","20/Oct/18 11:41"
PDFBOX-4164,PDFBOX,"NPE in PDFDebugger when expanding page subtree",Bug,CLOSED,Major,Fixed,"2.0.8, 2.0.9","2.0.10, 3.0.0 PDFBox",Utilities,None,,"When clicking on "+" to show a page from the file from
https://github.com/mozilla/pdf.js/issues/9597 :
java.lang.NullPointerException: null
    org.apache.pdfbox.debugger.ui.PDFTreeCellRenderer.toTreePostfix(PDFTreeCellRenderer.java:214)
    org.apache.pdfbox.debugger.ui.PDFTreeCellRenderer.toTreeObject(PDFTreeCellRenderer.java:121)
    org.apache.pdfbox.debugger.ui.PDFTreeCellRenderer.getTreeCellRendererComponent(PDFTreeCellRenderer.java:77)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:90)
    java.security.AccessController.doPrivileged(Native Method)
    java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
The cause is a broken PDF with a /Subtype that is not a name. I'll fix that and do the same for /Type.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"23/Mar/18 17:18","21/Jun/18 20:27","23/Mar/18 17:22"
PDFBOX-4165,PDFBOX,"Support IBM OS/400 font locations",Improvement,CLOSED,Minor,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",FontBox,None,,"Support OS/400 font locations, these are on /QIBM/ProdData/OS400/Fonts according to
https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_71/rzalu/rzalufontdirectory.htm
https://www-01.ibm.com/support/docview.wss?uid=nas8N1012175
https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_71/rzalu/rzalucontruetype.htm
see discussion in user mailing list:
https://mail-archives.apache.org/mod_mbox/pdfbox-users/201803.mbox/browser",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Mar/18 20:01","21/Jun/18 20:27","26/Mar/18 17:35"
PDFBOX-4167,PDFBOX,"OutOfMemoryError on FlateFilter - Deflater.end() is missing",Bug,CLOSED,Major,Fixed,"2.0.8, 2.0.9","2.0.10, 3.0.0 PDFBox",Writing,None,"windows 7, java 1.8","While creating some large PDF documents by PDFBox 2.0.8 and 2.0.9, I met an OutOfMemoryError on FlateFilter.encode().
While creating some small PDF documents, there are no problems.
I checked the source code of org.apache.pdfbox.filter.FlateFilter.java, and I found that calling of Deflater.end() method is missing.
When DeflaterOutputStream object is created by the 'new DeflaterOutputStream(encoded,deflater)' constructor method (i.e. 'custom deflater' is given),
DeflaterOutputStream.close() API does not call 'deflater.end()' method automatically.
Deflater.end() method may be called by the finalizer at GC, of cource, but the timing of GC is undecidable by user. So 'deflater.end()' method should be called explicitly. Otherwise it may cause an OutOfMemoryError.",0,"Tilman Hausherr","MINAKAMI Hiroki",1,3,"26/Mar/18 13:47","21/Jun/18 20:27","27/Mar/18 16:14"
PDFBOX-4168,PDFBOX,"Add a setTextRise() method to PDPageContentStream",Improvement,CLOSED,Trivial,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",PDModel,None,,"Seeing that the appendRawCommand() methods are deprecated, it is necessary for PDPageContentStream to implement every PDF operator explicitly. This one is both simple and useful:
public void setTextRise(float rise) throws IOException {
    writeOperand(rise);
    writeOperator("Ts");
}",0,"Tilman Hausherr","Matías Giovannini",1,3,"26/Mar/18 22:21","21/Jun/18 20:27","27/Mar/18 16:38"
PDFBOX-4169,PDFBOX,"PDFPrintable has subsampling but it can not be used",Bug,CLOSED,Minor,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",Rendering,None,,"We are happily using version 2.0.9 with subsampling. During that, I have noticed that memory consumption is unusually high during printing for a particular file. Decompressing and rendering this file was without issues (we have created an instance of PDFRenderer and set subsampling to true). During debugging I notice that in the  PDFPrintable when calling renderer.renderPageToGraphics the renderer has this feature turned off. The reason is very simple. PDFPrintable creates its own PDFRenderer in the constructor and does not set subsampling on / does not allow this feature to be set from outside. I did some test with a modified version of PDFPrintable (setting always subsampling to true in the very same constructor the renderer is instantiated) and it shows significantly better results for memory consumption - in my case it was from OutOfMemory with Xmx1g to no problem with Xmx420m (I did not bother to test with lower Xmx).
  I am not sure if this was the intention but I do not think so since there is at least one if asking about subsampling and with this configuration, it is pointless since it always will be false.",0,"Tilman Hausherr","Marek Pribula",1,3,"28/Mar/18 14:38","21/Jun/18 20:27","28/Mar/18 16:33"
PDFBOX-4170,PDFBOX,"Update CCITTFaxDecoderStream.java from twelvemonkeys (2)",Task,CLOSED,Minor,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",None,None,,"See what was done since the last time (9.3.2017) and update it.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/Mar/18 16:09","21/Jun/18 20:27","28/Mar/18 16:13"
PDFBOX-4171,PDFBOX,"getColorKeyMask() not needed for inline images",Improvement,CLOSED,Minor,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",Rendering,None,,"Inline images don't have a colour key array, see "Table 93 - Entries in an Inline Image Object", so remove that part from our code.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/Mar/18 16:45","21/Jun/18 20:27","28/Mar/18 16:51"
PDFBOX-4172,PDFBOX,"Flatten fails on first form element only",Bug,CLOSED,Major,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",AcroForm,flatten,,"I've create an PDF form using LibreOffice 5. For this document, the first form element refuses to turn up filled when filling + flattening using PDFBox 2.0.9 als well as trunk (512d016ad08a70dfb512f99d54092f8b586e8345).
It turns out that resolveNeedsTranslation does not encounter any PDFormXObject for the first element of this pdf form element but still returns false, although translation is still needed.
I've created a patch in https://github.com/michael-dev/pdfbox/tree/bugfix/flattenCorrectly .
I used evince 3.18.2 on ubuntu xenial as pdf viewer. Please see attached example pdf form and the different results using pdfbox 2.0.9 and with the above patch applied. The code used here is in example.java.",0,"Maruan Sahyoun",michael-dev@fami-braun.de,0,5,"29/Mar/18 06:39","21/Jun/18 20:27","07/Apr/18 16:04"
PDFBOX-4192,PDFBOX,"Support subsampling in PDFToImage command line tool",Improvement,CLOSED,Minor,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",Utilities,None,,"add "-subsampling" option to CLI.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"17/Apr/18 05:29","21/Jun/18 20:27","17/Apr/18 17:27"
PDFBOX-4193,PDFBOX,StackOverflow,Bug,CLOSED,Major,Fixed,2.0.13,"2.0.14, 3.0.0 PDFBox","Parsing, PDModel",None,,"As part of a fuzzing run with the AFL-based Kelinci fuzzer found at https://github.com/isstac/kelinci for a larger software that uses PDFBox I found the following StackOverflowError issues:
Exception in thread "main" java.lang.StackOverflowError
    at java.util.HashMap.hash(HashMap.java:338)
    at java.util.LinkedHashMap.get(LinkedHashMap.java:440)
    at org.apache.pdfbox.cos.COSDictionary.getDictionaryObject(COSDictionary.java:188)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2207)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
    [...]
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2230)
Additionally, a second StackOverflowError was found:
Exception in thread "main" java.lang.StackOverflowError
    at java.util.HashMap.hash(HashMap.java:338)
    at java.util.LinkedHashMap.get(LinkedHashMap.java:440)
    at org.apache.pdfbox.cos.COSDictionary.getDictionaryObject(COSDictionary.java:188)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:102)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)

    [...]
    at org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute(PDPageTree.java:111)
The issues can be reproduced with the attached files.",0,"Tilman Hausherr",floyd,0,6,"17/Apr/18 11:40","28/Feb/19 17:45","06/Feb/19 16:42"
PDFBOX-4195,PDFBOX,"Valid XMP Metadata TimeZone not accepted",Bug,CLOSED,Minor,Fixed,"2.0.8, 2.0.9","2.0.10, 3.0.0 PDFBox","Preflight, XmpBox",None,"windows, java 1.9, miktex","I came across this issue when I compiled a PDF file with miktex LaTeX processor, using the pdfx package with options [a-1b,pdf17] and then validating the generated PDF file using the preflight stand-alone jar files "preflight-app-2.0.8.jar" and "preflight-app-2.0.9.jar". Java version is 9.0.4. The error message is:
7.1 : Error on MetaData, Failed to instanciate DateType property with value 2018-04-17T22:24:06+02:00 in xmp:ModifyDate
However, according to the XMP specification Section 8.2.1.2 at
https://wwwimages2.adobe.com/content/dam/acom/en/devnet/xmp/pdfs/XMP%20SDK%20Release%20cc-2016-08/XMPSpecificationPart1.pdf
this date format should be valid. A given example date is:
2004-10-23T12:00:00-06:00
The problematic class should be DateConverter, which seems to not handle time zone information properly:
https://javalibs.com/artifact/org.apache.pdfbox/xmpbox?className=org.apache.xmpbox.DateConverter&source
in function
public static Calendar toCalendar(String date) throws IOException
I adapted the source code to print a full stack trace:
7.1 : Error on MetaData, Failed to instanciate DateType property with value 2018-04-18T09:37:03+02:00. Error type: InvocationTargetException. Error message: null. StackTrace: java.lang.reflect.InvocationTargetException
{{ at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)}}
{{ at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)}}
{{ at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)}}
{{ at java.base/java.lang.reflect.Constructor.newInstance(Unknown Source)}}
{{ at org.apache.xmpbox.type.TypeMapping.instanciateSimpleProperty(TypeMapping.java:167)}}
{{ at org.apache.xmpbox.xml.DomXmpParser.manageSimpleType(DomXmpParser.java:420)}}
{{ at org.apache.xmpbox.xml.DomXmpParser.createProperty(DomXmpParser.java:344)}}
{{ at org.apache.xmpbox.xml.DomXmpParser.parseChildrenAsProperties(DomXmpParser.java:307)}}
{{ at org.apache.xmpbox.xml.DomXmpParser.parseDescriptionRoot(DomXmpParser.java:236)}}
{{ at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:200)}}
{{ at org.apache.pdfbox.preflight.process.MetadataValidationProcess.validate(MetadataValidationProcess.java:69)}}
{{ at org.apache.pdfbox.preflight.utils.ContextHelper.callValidation(ContextHelper.java:84)}}
{{ at org.apache.pdfbox.preflight.utils.ContextHelper.validateElement(ContextHelper.java:122)}}
{{ at org.apache.pdfbox.preflight.PreflightDocument.validate(PreflightDocument.java:163)}}
{{ at org.apache.pdfbox.preflight.Validator_A1b.runSimple(Validator_A1b.java:174)}}
{{ at org.apache.pdfbox.preflight.Validator_A1b.main(Validator_A1b.java:135)}}
Caused by: java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter
{{ at org.apache.xmpbox.DateConverter.fromISO8601(DateConverter.java:404)}}
{{ at org.apache.xmpbox.DateConverter.toCalendar(DateConverter.java:103)}}
{{ at org.apache.xmpbox.type.DateType.isGoodType(DateType.java:98)}}
{{ at org.apache.xmpbox.type.DateType.setValue(DateType.java:118)}}
{{ at org.apache.xmpbox.type.AbstractSimpleProperty.<init>(AbstractSimpleProperty.java:59)}}
{{ at org.apache.xmpbox.type.DateType.<init>(DateType.java:57)}}
{{ ... 16 more}}
Caused by: java.lang.ClassNotFoundException: javax.xml.bind.DatatypeConverter
{{ at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(Unknown Source)}}
{{ at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Unknown Source)}}
{{ at java.base/java.lang.ClassLoader.loadClass(Unknown Source)}}
{{ ... 22 more}}
{{ in xmp:ModifyDate}}",0,"Tilman Hausherr","Till Kolditz",0,4,"18/Apr/18 07:57","21/Jun/18 20:27","23/Apr/18 06:56"
PDFBOX-4197,PDFBOX,"PDStructureElement.getAttributes() ignores reference objects",Bug,CLOSED,Major,Fixed,"1.8.13, 2.0.9","1.8.15, 2.0.10, 3.0.0 PDFBox",PDModel,StructureTree,,"Attribute dictionaries attached to a structure element may be either direct or references.  getAttributes() handles the direct case but ignores object references without error messages.  This can also lead to invalid revision numbers attached to the attribute dictionaries it does handle properly.
  The fix would be to add another branch to the iteration loop in PDStructureElement.getAttributes(), to handle object references.",0,"Tilman Hausherr","Bill Janssen",0,3,"18/Apr/18 16:31","21/Jun/18 20:27","19/Apr/18 20:46"
PDFBOX-4198,PDFBOX,"Remove one of three LiberationSans-Regular.ttf",Improvement,CLOSED,Minor,Fixed,"2.0.9, 3.0.0 PDFBox","2.0.10, 3.0.0 PDFBox",None,None,,"We have three occurences of LiberationSans-Regular.ttf in the project, one in fontbox test, one in pdfbox src and one in pdfbox test. I'm removing the one in pdfbox test because the one in pdfbox src can be used for the tests.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"18/Apr/18 18:36","21/Jun/18 20:27","18/Apr/18 20:06"
PDFBOX-4200,PDFBOX,"DataFormatException: invalid code lengths set when rendering image",Bug,CLOSED,Major,Fixed,"2.0.7, 2.0.8, 2.0.9","2.0.10, 3.0.0 PDFBox",Rendering,None,,"When rendering image from the attached pdf, an exception was thrown and below is the relevant stack trace:
java.util.zip.DataFormatException: invalid code lengths set
    at java.util.zip.Inflater.inflateBytes(Native Method) ~[?:1.8.0_121]
    at java.util.zip.Inflater.inflate(Inflater.java:259) ~[?:1.8.0_121]
    at java.util.zip.Inflater.inflate(Inflater.java:280) ~[?:1.8.0_121]
    at org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:108) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:74) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.filter.Filter.decode(Filter.java:87) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:77) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:175) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:163) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.pdmodel.common.PDStream.createInputStream(PDStream.java:236) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.loadICCProfile(PDICCBased.java:124) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.<init>(PDICCBased.java:98) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create(PDColorSpace.java:192) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.pdmodel.PDResources.getColorSpace(PDResources.java:199) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.pdmodel.PDResources.getColorSpace(PDResources.java:169) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorSpace.process(SetNonStrokingColorSpace.java:41) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:848) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:503) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:477) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:246) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:225) ~[pdfbox-2.0.9.jar:2.0.9]
    at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:138) ~[pdfbox-2.0.9.jar:2.0.9]",0,"Tilman Hausherr","Xin Lin",1,3,"19/Apr/18 18:10","21/Jun/18 20:27","23/Apr/18 20:52"
PDFBOX-4204,PDFBOX,"Problem when merging PDF 1.4 and PDF 1.1 Documents",Bug,CLOSED,Major,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",Parsing,None,,"Merging PDF 1.1 document with other Version (i.e. PDF 1.4) ends up with following exception: java.io.IOException: Unknown OpenAction COSInt{26}.
Here's the referring stack trace
Alias: PBOX000029: Enter the username:  [guest] java.io.IOException: Unknown OpenAction COSInt{26}
    at org.apache.pdfbox.pdmodel.PDDocumentCatalog.getOpenAction(PDDocumentCatalog.java:279)
    at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:348)
    at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:263)
  To fix this issue COSInteger should be handled in PDDocumentCatalog's getOpenAction method. Our tests showed that returning “null” results in correctly merged document.
Here is our suggestion for the fixed method:
public PDDestinationOrAction getOpenAction() throws IOException {
   COSBase openAction = this.root.getDictionaryObject(COSName.OPEN_ACTION);
   if (openAction == null) {
     return null;
   } else if (openAction instanceof COSBoolean) {
     if (!((COSBoolean) openAction).getValue()) {
       return null;
     } else {
       throw new IOException("Can't create OpenAction from COSBoolean");
     }
  } else if (openAction instanceof COSInteger) {
     return null;      
   } else if (openAction instanceof COSDictionary) {
     return PDActionFactory.createAction((COSDictionary)openAction);
   } else if (openAction instanceof COSArray) {
     return PDDestination.create(openAction);
   } else {
     throw new IOException("Unknown OpenAction " + openAction);
   }
}",0,"Tilman Hausherr","Christian Lauer",0,3,"20/Apr/18 05:56","21/Jun/18 20:27","17/May/18 22:01"
PDFBOX-4207,PDFBOX,"Coordinates shown in PDFDebugger are incorrect on HiDPI displays",Bug,CLOSED,Major,Fixed,"2.0.10, 3.0.0 PDFBox","2.0.10, 3.0.0 PDFBox",Utilities,"jdk10 jdk9",,"On jdk9 and jdk10 the new field identification (see [ https://svn.apache.org/r1830394 ] ) doesn't work properly. This is likely related to the problems described in PDFBOX-3665. The solution is likely a transform like the one explained by Alexander.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/Apr/18 05:43","21/Jun/18 20:27","28/Apr/18 09:04"
PDFBOX-4211,PDFBOX,"Some text is missing in JBIG2 images",Bug,CLOSED,Major,Fixed,"3.0.0 JBIG2","3.0.1 JBIG2",JBIG2,None,,"This PDF has problems.
See pages "iii" (2), "ix" (6), "x" (7) etc. These pages have most of their text missing or in wrong position when rendered in PDFDebugger. Each page is a JBIG2 image that uses Huffman encoding. You may need to use for example -Xmx1000M to avoid OutOfMemoryError because the JBIG2 images are very large.
Apply my patch to file EncodedTable.java in package org.apache.pdfbox.jbig2.decoder.huffman. I have fixed one line of code that does not follow the JBIG2 standard.
The JBIG2 standard is freely available here",0,"Tilman Hausherr","Jani Pehkonen",1,3,"08/May/18 14:09","17/May/18 21:16","08/May/18 21:04"
PDFBOX-4214,PDFBOX,"Javadocs not published for 2.0.9",Bug,CLOSED,Minor,"Won't Fix",None,None,None,maven,,"On maven.org javadocs are publised for 2.0.8 (http://central.maven.org/maven2/org/apache/pdfbox/pdfbox/2.0.8/) but not for 2.0.9 (http://central.maven.org/maven2/org/apache/pdfbox/pdfbox/2.0.9/).",0,"Andreas Lehmkühler",Adam,0,2,"09/May/18 15:25","29/Jun/18 17:09","29/Jun/18 17:09"
PDFBOX-4218,PDFBOX,"image with stencil mask appears interpolated",Bug,CLOSED,Minor,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",Rendering,None,,"File is from
https://storage.googleapis.com/google-code-archive-source/v2/code.google.com/lumi-read/source-archive.zip
and can be found in lumi-read/trunk/PDF_smoketest/pdf/image_via/image_via_1.3_006.pdf
The color edges of the lower image are interpolated but should not be. Solution: respect the image interpolation setting in PDImageXObject.scaleImage().",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/May/18 07:46","21/Jun/18 20:27","10/May/18 07:55"
PDFBOX-4219,PDFBOX,"Multithreading problem when rendering several documents with Standard 14 fonts",Bug,CLOSED,Major,Fixed,"2.0.9, 3.0.0 PDFBox","2.0.12, 3.0.0 PDFBox","FontBox, Rendering","multi-threading mult","windows 7","I get rendering errors and sometimes exceptions in my regression tests. It is somehow related to several threads initializing standard 14 fonts. It happens only about every 25 times in a test program I created. That one renders 2 files in 4 threads and compares the result with the existing result.
My theory is that one thread accesses the naming table and another accesses the glyf table, and both change the stream position. I tried several things in the last months to avoid it, all were unsuccessful and I lost my notes about it last winter due to a static discharge on a usb stick. (Thank you KINGSTON!)
Here's the output when it doesn't go well:
11.05.2018 10:54:26.322 WARN  [pool-1-thread-4] org.apache.pdfbox.pdmodel.font.PDType1Font:296 - Using fallback font TimesNewRomanPS-BoldMT for Galliard-Bold
11.05.2018 10:54:26.323 WARN  [pool-1-thread-2] org.apache.pdfbox.pdmodel.font.PDType1Font:296 - Using fallback font TimesNewRomanPS-BoldMT for Galliard-Bold
11.05.2018 10:54:26.386 WARN  [pool-1-thread-2] org.apache.pdfbox.pdmodel.font.PDType1Font:296 - Using fallback font TimesNewRomanPSMT for Galliard-Roman
11.05.2018 10:54:26.421 WARN  [pool-1-thread-4] org.apache.pdfbox.pdmodel.font.PDType1Font:296 - Using fallback font TimesNewRomanPSMT for Galliard-Roman
11.05.2018 10:54:26.697 WARN  [pool-1-thread-2] org.apache.pdfbox.pdmodel.font.PDType1Font:296 - Using fallback font TimesNewRomanPS-ItalicMT for Galliard-Italic
11.05.2018 10:54:26.818 WARN  [pool-1-thread-4] org.apache.pdfbox.pdmodel.font.PDType1Font:296 - Using fallback font TimesNewRomanPS-ItalicMT for Galliard-Italic
C:\Users\XXX\Documents\Java\PDFBox reactor\pdfbox\src\test\resources\input\rendering\166292-fi-ligature.pdf
oh oh
C:\Users\XXX\Documents\Java\PDFBox reactor\pdfbox\src\test\resources\input\rendering\166292-fi-ligature.pdf
oh oh
C:\Users\XXX\Documents\Java\PDFBox reactor\pdfbox\src\test\resources\input\rendering\014261-p3-ccitt.pdf
oh oh
C:\Users\XXX\Documents\Java\PDFBox reactor\pdfbox\src\test\resources\input\rendering\014261-p3-ccitt.pdf
oh oh
done
Sometimes in the past I got exceptions:
Exception in thread "Thread-2" java.lang.RuntimeException: java.io.IOException: Unexpected end of TTF stream reached
 at pdfboxpageimageextraction.MulithreadTest.run(MulithreadTest.java:87)
Caused by: java.io.IOException: Unexpected end of TTF stream reached
 at org.apache.fontbox.ttf.TTFDataStream.read(TTFDataStream.java:274)
 at org.apache.fontbox.ttf.TTFDataStream.readString(TTFDataStream.java:91)
 at org.apache.fontbox.ttf.NamingTable.read(NamingTable.java:113)
 at org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:373)
 at org.apache.fontbox.ttf.TrueTypeFont.getTable(TrueTypeFont.java:163)
 at org.apache.fontbox.ttf.TrueTypeFont.getNaming(TrueTypeFont.java:179)
 at org.apache.fontbox.ttf.TrueTypeFont.getName(TrueTypeFont.java:471)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:296)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:506)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:478)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:156)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:258)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:225)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:164)
Sometimes I get an AIOOBE:
Exception in thread "Thread-1" java.lang.ArrayIndexOutOfBoundsException
 at org.apache.fontbox.ttf.BufferedRandomAccessFile.read(BufferedRandomAccessFile.java:158)
 at org.apache.fontbox.ttf.RAFDataStream.read(RAFDataStream.java:167)
 at org.apache.fontbox.ttf.TTFDataStream.read(TTFDataStream.java:264)
 at org.apache.fontbox.ttf.TTFDataStream.readString(TTFDataStream.java:91)
 at org.apache.fontbox.ttf.NamingTable.read(NamingTable.java:113)
 at org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:373)
 at org.apache.fontbox.ttf.TrueTypeFont.getTable(TrueTypeFont.java:163)
 at org.apache.fontbox.ttf.TrueTypeFont.getNaming(TrueTypeFont.java:179)
 at org.apache.fontbox.ttf.TrueTypeFont.getName(TrueTypeFont.java:471)
 at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:296)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:506)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:478)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:156)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:258)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:225)
 at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:164)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"11/May/18 09:06","05/Oct/18 04:53","26/Aug/18 09:17"
PDFBOX-4222,PDFBOX,"PDFMergerUtility: java.lang.ClassCastException: org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSNumber",Bug,CLOSED,Major,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",Utilities,None,"ubuntu, windows 7","Given a problematic PDF, there can be ClassCastException when merging two PDFs, causing the merge to fail.
  Problematic example PDF: https://bibliothek.wzb.eu/pdf/2001/ii01-303.pdf
  Provoking command line:
 java -jar pdfbox-app-2.0.9.jar PDFMerger ii01-303.pdf ii01-303.pdf out.pdf
  Stacktrace:
Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSNumber
 at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:504)
 at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:263)
 at org.apache.pdfbox.tools.PDFMerger.merge(PDFMerger.java:70)
 at org.apache.pdfbox.tools.PDFMerger.main(PDFMerger.java:49)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:81)",0,"Tilman Hausherr","Eduard von Feek",0,3,"16/May/18 13:39","21/Jun/18 20:27","17/May/18 20:32"
PDFBOX-4223,PDFBOX,"PDFMergerUtility: java.io.IOException: Error: can't convert to Destination COSArray{[COSName{XYZ}]}",Bug,CLOSED,Major,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",Utilities,None,"ubuntu, windows 7","Given a problematic PDF, there can be an IOException when merging two PDFs, causing the merge to fail.
Problematic example PDF: http://www.ecpol.econ.uni-muenchen.de/downloads/wipo2/wise09_10/uebung/dusonmevenroeller.pdf
  Provoking command line:
java -jar pdfbox-app-2.0.9.jar PDFMerger dusonmevenroeller.pdf dusonmevenroeller.pdf out.pdf
  Stacktrace:
Exception in thread "main" java.io.IOException: Error: can't convert to Destination COSArray{[COSName{XYZ}]}
 at org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDDestination.create(PDDestination.java:98)
 at org.apache.pdfbox.pdmodel.PDDocumentCatalog.getOpenAction(PDDocumentCatalog.java:275)
 at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:348)
 at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:263)
 at org.apache.pdfbox.tools.PDFMerger.merge(PDFMerger.java:70)
 at org.apache.pdfbox.tools.PDFMerger.main(PDFMerger.java:49)
 at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:81)",0,"Tilman Hausherr","Eduard von Feek",0,3,"16/May/18 13:50","21/Jun/18 20:27","17/May/18 21:51"
PDFBOX-4224,PDFBOX,"Update jbig2 plugin usage to 3.0.1",Task,CLOSED,Minor,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",None,None,,,0,"Tilman Hausherr","Tilman Hausherr",0,2,"18/May/18 15:10","21/Jun/18 20:27","18/May/18 15:13"
PDFBOX-4227,PDFBOX,"java.util.zip.DataFormatException: invalid distance too far back",Bug,CLOSED,Major,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",Utilities,None,,"I get a zip exception with the attached PDF file, which renders successfully in a couple of PDF viewers I tried.
ByteArrayInputStream pdfInputStream = new ByteArrayInputStream(pdfByteArray);
PDFMergerUtility merger = new PDFMergerUtility();
merger.addSource(pdfInputStream);
ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
merger.setDestinationStream(outputStream);
merger.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());
  PDF file attached.
Stack Trace:
java.io.IOException: java.util.zip.DataFormatException: invalid distance too far back
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:83)
at org.apache.pdfbox.filter.Filter.decode(Filter.java:87)
at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:77)
at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:175)
at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:163)
at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:516)
at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:263)
...
Caused by: java.util.zip.DataFormatException: invalid distance too far back
at java.util.zip.Inflater.inflateBytes(Native Method)
at java.util.zip.Inflater.inflate(Inflater.java:259)
at java.util.zip.Inflater.inflate(Inflater.java:280)
at org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:108)
at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:74)
... 35 more",0,"Tilman Hausherr","Michael Miller",0,3,"22/May/18 01:19","21/Jun/18 20:27","26/May/18 12:33"
PDFBOX-4228,PDFBOX,"PDFBox crashes when a Type3 font don't have an embedded encoding.",Bug,CLOSED,Critical,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",PDModel,"patch type3",,"When running PDFBox on a pdf with WinAnsiEncoding for a Type3 font it crashes without any output.
Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSName cannot be cast to org.apache.pdfbox.cos.COSDictionary
at org.apache.pdfbox.pdmodel.font.PDType3Font.readEncoding(PDType3Font.java:82)
at org.apache.pdfbox.pdmodel.font.PDType3Font.<init>(PDType3Font.java:66)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:79)
at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:143)
at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:841)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:498)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:472)
at org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:181)
at org.apache.pdfbox.contentstream.operator.DrawObject.process(DrawObject.java:65)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:841)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:498)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:472)
at org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:181)
at org.apache.pdfbox.contentstream.operator.DrawObject.process(DrawObject.java:65)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:841)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:498)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:472)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
at org.apache.pdfbox.text.LegacyPDFStreamEngine.processPage(LegacyPDFStreamEngine.java:141)
at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:360)
at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:288)
at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:235)
at org.apache.pdfbox.tools.ExtractText.startExtraction(ExtractText.java:237)
at org.apache.pdfbox.tools.ExtractText.main(ExtractText.java:82)
at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:59)
edit by Tilman Hausherr
font is here:
Root/Pages/Kids/[0]/Resources/XObject/X1/Resources/XObject/X3/Resources/Font/F10/Encoding",0,"Tilman Hausherr","Daniel Persson",1,3,"23/May/18 08:32","21/Jun/18 20:27","23/May/18 17:16"
PDFBOX-4230,PDFBOX,"NullpointerException in CmapSubtable",Bug,CLOSED,Major,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",FontBox,None,,"I'm seeing a NullpointerException in CmapSubtable.java at line 601
java.lang.NullPointerException at org.apache.fontbox.ttf.CmapSubtable.getGlyphId(CmapSubtable.java:601)
  The cause seems to be that the characterCodeToGlyphId is not initialised by all code paths.
  The suggested fix would be to simply initialise the variable on declaration (line 48)
private Map<Integer, Integer> characterCodeToGlyphId = new HashMap<Integer, Integer>();
  Successfully tested this above suggested solution with a local build.
Sorry, cannot share the PDF doc causing this.",0,"Tilman Hausherr","Edi Weissmann",0,3,"24/May/18 09:31","21/Jun/18 20:27","24/May/18 17:54"
PDFBOX-4231,PDFBOX,"cache file fallback if not writable",Improvement,CLOSED,Major,Fixed,2.0.13,"2.0.14, 3.0.0 PDFBox",None,None,,"Fallback to the next file location if the current location for .pdfbox.cache is not writable.
Currently there is a fallback from pdfbox.fontcache to user.home to java.io.tmpdir as directory to write .pdfbox.cache, but this is only on the level of if the system property is defined.
It would be nice to fallback to the next directory if the file is not writable in a directory.
Without config and on a system where user.home is not writable pdfbox is quite slow, as the caching is tried each time.
Usually java.io.tmpdir is writable, so this would provide better performance out of the box.
The workaound is to configure the pdfbox.fontcache system property.",0,"Tilman Hausherr","Michael Brackx",0,3,"24/May/18 09:46","28/Feb/19 17:44","20/Feb/19 20:05"
PDFBOX-4233,PDFBOX,"Flatten does not work properly on field with type 0 font",Bug,CLOSED,Major,Fixed,2.0.10,"2.0.14, 3.0.0 PDFBox",AcroForm,None,"windows 10, java 1.8","Pdf form sampleform_filled.pdf contains one field called "txtField" with this content: "ěščřžýáíéúůóďťĚŠČŘŽÝÁÍÉÚŮÓĎŤ".  The font used in this field is "/F5"
when you run this code:
  try {
 PDDocument sourcePdfForm = PDDocument.load(new File("sampleform_filled.pdf"));
 PDAcroForm acroForm = sourcePdfForm.getDocumentCatalog()
 .getAcroForm();

 acroForm.flatten();
 sourcePdfForm.save("sampleform_filled_flattened.pdf");
} catch (IOException e) {
 e.printStackTrace();
}
    You will get sampleform_filled_flattened.pdf with empty or not visible content of the field.
   ",0,"Tilman Hausherr",rumburak,0,3,"29/May/18 16:39","28/Feb/19 17:45","08/Feb/19 13:25"
PDFBOX-4235,PDFBOX,"NPE when setting the DA of a PDTextField",Bug,CLOSED,Major,Fixed,2.0.9,"2.0.10, 3.0.0 PDFBox",AcroForm,None,,"The following Kotlin Code results in a NullPointerException:
when(pdField) {
is PDTextField -> {
{{     try {}}
{{         pdField.value = value?.toString() ?: ""}}
{{     } catch (ioException: IOException) {}}
{{         pdField.cosObject.setString(COSName.DA, "/Helv 0 tf 0 g")}}
{{         pdField.value = value?.toString() ?: ""}}
{{    }}}
}}",0,"Tilman Hausherr","Christoph Grimmer-Dietrich",0,4,"31/May/18 11:55","21/Jun/18 20:27","31/May/18 19:05"
PDFBOX-4237,PDFBOX,"Don't use PD-level classes in COS-level classes",Improvement,RESOLVED,Major,Fixed,"3.0.0 PDFBox","3.0.0 PDFBox",Parsing,None,,"The constructor of PDFStreamParser uses PDContentStream as parameter.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,3,"04/Jun/18 17:59","06/Jun/18 16:33","04/Jun/18 18:05"
PDFBOX-4241,PDFBOX,"PDDocument.save double-closes stream causing exceptions with well-behaving streams",Bug,CLOSED,Major,Fixed,"2.0.4, 2.0.9","2.0.11, 3.0.0 PDFBox",Writing,None,,"This might be a duplicate of PDFBOX-273, although closed, it is clearly not fixed.
PDDocument save (through COSWriter) closes the output, and to make things worse, it closes it twice. Also, it is generally not good practice to close streams, unless you opened them yourself, so I think the streams should just be left alone, and instead the references should be cleared.
The critical code in PDDocument.save(OutputStream output) is:
COSWriter writer = new COSWriter(output);
try
{
    writer.write(this);
}
finally
{
    writer.close();
}
With COSWriter.close() being:
public void close() throws IOException
{
    if (getStandardOutput() != null)
    {
      getStandardOutput().close();
    }
    if (getOutput() != null)
    {
        getOutput().close();
    }
    if (incrementalOutput != null)
    {
        incrementalOutput.close();
    }
}
The problem here is that standardOutput in this case wraps  output, thus causing a double close() on output (as FilterOutputStream already closes the stream it wraps).
Double closing itself might not have been a problem, but again FilterOutputStream.close() invokes flush() in its standard implementation,  and you cannot flush a closed stream...
Example stack trace:
Exception in thread "main" java.io.IOException: stream already closed
at com.twelvemonkeys.imageio.util.IIOOutputStreamAdapter.assertOpen(IIOOutputStreamAdapter.java:80)
at com.twelvemonkeys.imageio.util.IIOOutputStreamAdapter.flush(IIOOutputStreamAdapter.java:75)
at java.io.BufferedOutputStream.flush(Unknown Source)
at java.io.FilterOutputStream.close(Unknown Source)
at org.apache.pdfbox.pdfwriter.COSWriter.close(COSWriter.java:315)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1236)
at com.twelvemonkeys.imageio.plugins.pdf.PDFImageWriter.endWriteSequence(PDFImageWriter.java:83)
at com.twelvemonkeys.imageio.plugins.pdf.PDFImageWriter.main(PDFImageWriter.java:183)
I tagged the issue with 2.0.4 and 2.0.9 as those are the versions I tested, but I assume the problem is there even before 2.0.4.",0,"Tilman Hausherr","Harald Kuhr",1,4,"06/Jun/18 20:22","23/Sep/18 16:33","23/Sep/18 16:20"
PDFBOX-4242,PDFBOX,"Fontbox does not close file descriptor when loading fonts.",Bug,CLOSED,Minor,Fixed,2.0.9,"2.0.12, 3.0.0 PDFBox",FontBox,file_leak,,"My app has been getting "java.io.FileNotFoundException (No file descriptors available)" and I've confirmed that it's because fontbox isn't closing it's file descriptors.
In org.apache.fontbox.ttf.TTFParser there's this method:
public TrueTypeFont parse(File ttfFile) throws IOException {
  RAFDataStream raf = new RAFDataStream(ttfFile, "r");
  try {
    return this.parse((TTFDataStream)raf);
  } catch (IOException var4) {
    // close only on error (file is still being accessed later)
    raf.close();
    throw var4;
}
}
I would have expected to see the close() in a finally block so that the file is always closed, not just on exceptions. Presumably, you can keep it in memory without leaving the file descriptor open?
public TrueTypeFont parse(File ttfFile) throws IOException {
  RAFDataStream raf = new RAFDataStream(ttfFile, "r");
  try {
    return this.parse((TTFDataStream)raf);
  } catch (IOException var4) {    raf.close();
    throw var4;
  } finally {
    raf.close();
}
}
I tried performing this in a lazy initialization, but it blew up:
java.lang.RuntimeException: java.io.IOException: The TrueType font null does not contain a 'cmap' tableCaused by: java.io.IOException: The TrueType font null does not contain a 'cmap' table
at org.apache.fontbox.ttf.TrueTypeFont.getUnicodeCmapImpl(TrueTypeFont.java:548)
at org.apache.fontbox.ttf.TrueTypeFont.getUnicodeCmapLookup(TrueTypeFont.java:528)
at org.apache.fontbox.ttf.TrueTypeFont.getUnicodeCmapLookup(TrueTypeFont.java:514)
at org.apache.fontbox.ttf.TTFSubsetter.<init>(TTFSubsetter.java:91)
at org.apache.pdfbox.pdmodel.font.TrueTypeEmbedder.subset(TrueTypeEmbedder.java:321)
at org.apache.pdfbox.pdmodel.font.PDType0Font.subset(PDType0Font.java:239)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1271)
Thoughts?
Thanks for PDFBox - it's been really helpful!",0,"Tilman Hausherr","Glen Peterson",0,5,"07/Jun/18 17:28","05/Oct/18 04:53","05/Jul/18 17:37"
PDFBOX-4245,PDFBOX,"wrong rendering of the transparency group at the specific position on a page",Bug,CLOSED,Major,Fixed,2.0.10,"2.0.12, 3.0.0 PDFBox",Rendering,patch,,"The rendering of the transparency groups works only if the whole page is rendered. If you try to render only a part of the page where is a transparency group placed, you will get only the white image or an image with shifted pixels representing applied soft mask. The simple fix is attached in the patch, including the test and the resources used for testing.",0,"Tilman Hausherr","Jiri Kunhart",1,4,"13/Jun/18 08:46","05/Oct/18 04:53","11/Aug/18 10:26"
PDFBOX-4248,PDFBOX,"NPE when rendering a PDF with annotations using a g2d from Batik",Bug,CLOSED,Major,Fixed,"2.0.9, 2.0.10","2.0.11, 3.0.0 PDFBox",Rendering,None,,"When using PDFBox to draw a PDF into a Batik SVG g2d, there is an NPE in PageDrawer.java at this line
int deviceType = graphics.getDeviceConfiguration().getDevice().getType();
Apache Batik has this code in SVGGraphics2D:
    /**
     * Returns the device configuration associated with this
     * <code>Graphics2D</code>.
     */
    public GraphicsConfiguration getDeviceConfiguration(){
        // TO BE DONE.
        return null;
    }",0,"Tilman Hausherr","Tilman Hausherr",0,2,"20/Jun/18 17:17","29/Jun/18 06:19","20/Jun/18 20:05"
PDFBOX-4251,PDFBOX,"Optimize AFMParser",Improvement,CLOSED,Major,Fixed,"1.8.14, 2.0.10, 3.0.0 PDFBox","1.8.15, 2.0.11, 3.0.0 PDFBox",FontBox,CVE-2018-8036,,"From our private mailinglist reported by Tim Allison:
Tobias Ospelt has been working with fuzzing to identify oom/infinite loops. Tobias' attached file triggers a really long running loop which eventually leads to an OOM. It looks like this loop is the problem in AFMParser's readLine():
while(!this.isEOL(nextByte = this.input.read())) {
      buf.append((char)nextByte);
}
CVE-2018-8036
Description: A carefully crafted (or fuzzed) file can trigger an infinite loop which leads to an out of memory exception in Apache PDFBox's AFMParser.
Affected versions:
<= 1.8.14
<= 2.0.10
Mitigation: update to a more recent version",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"25/Jun/18 17:27","29/Jun/18 06:19","29/Jun/18 06:16"
PDFBOX-4253,PDFBOX,"Optimize PDFunctionType3.eval()",Improvement,CLOSED,Major,Fixed,"2.0.10, 2.0.11","2.0.12, 3.0.0 PDFBox",Rendering,optimization,,"I ran the profiler on PDFJS-9770-slow.pdf and it turned out that a few seconds were lost in COSArray.toFloatArray(). Caching it saves about 30%.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"26/Jun/18 17:39","05/Oct/18 04:53","26/Jun/18 17:50"
PDFBOX-4254,PDFBOX,"PDDocument.close() might ignore throwing an Exception",Bug,CLOSED,Major,Fixed,"2.0.10, 2.0.11, 3.0.0 PDFBox","2.0.12, 3.0.0 PDFBox",PDModel,None,,"As discussed on the mailing list:
I had a look at IOUtils.closeAndLogException() and PDDocument.close() and if initialException is not null, then null is returned if a new exception is thrown, or if everything goes well. This means that at the end of PDDocument.close(), no exception would be thrown, right? Was this intended?",0,"Maruan Sahyoun","Maruan Sahyoun",0,3,"26/Jun/18 20:33","05/Oct/18 04:53","28/Jun/18 16:17"
PDFBOX-4255,PDFBOX,"Confusing download page",Bug,CLOSED,Minor,Fixed,None,None,None,None,,"The download page refers to both PGP signatures as well as .asc files.
Links to the ,asc files use PGP as the visible link text.
It's not immediately obvious that these are the same thing.
It might be better to refer to the as ASC/.asc throughout (the files themselves must have the .asc suffix).",0,"Andreas Lehmkühler",Sebb,0,1,"29/Jun/18 08:10","22/Oct/18 16:38","22/Oct/18 16:38"
PDFBOX-4256,PDFBOX,"Return default value for CheckBox / RadioButton if /V entry is missing (widget /AS entries are present)",Improvement,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",AcroForm,None,,"The /V entry is missing for the radio and checkbox fields in the attached file. getValue() returns nothing. A look at the widget shows that /AS is set. Shouldn't this be used as fallback? The value is the one that isn't COSName.Off.
For the attached file, I looked at the radiobutton "Marital Status" and the checkbox "AS".",0,"Maruan Sahyoun","Tilman Hausherr",0,3,"29/Jun/18 18:26","05/Oct/18 04:53","10/Jul/18 05:46"
PDFBOX-4259,PDFBOX,"Add polygon annotation to AddAnnotations.java example",Improvement,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",None,None,,,0,"Tilman Hausherr","Tilman Hausherr",0,2,"03/Jul/18 16:21","05/Oct/18 04:53","03/Jul/18 16:56"
PDFBOX-4260,PDFBOX,"Reduce RAM requirement of COSOutputStream",Improvement,CLOSED,Minor,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Writing,None,,"COSOutputStream uses a byte array to buffer data prior to filtering. This is bad. As commented in COSOutputStream, it should be updated to use a scratch file buffer instead.
This patch does that.",0,"Tilman Hausherr","Jesse Long",0,3,"05/Jul/18 08:26","05/Oct/18 04:53","11/Jul/18 19:26"
PDFBOX-4261,PDFBOX,"Invalidated signature signing pdf twice",Bug,CLOSED,Major,Fixed,1.8.15,1.8.16,Signing,None,,"A customer sent us a pdf that has this problem: when it is signed twice by pdfbox 1.8.x the second signature invalidates the first one.
If we apply the same procedure using pdfbox 2.0.x the problem doesn't occur, but the customer required java 1.5 so we can't switch to the new version in this case.
For privacy purposes we had anonymized the original PDF file by editing 3 stream inside the pdf, without altering the original structure. So the file "92752146_noSign_anonymous.pdf" you can find in attachement has not the original text/image streams, but reproduces the problem as the original one.
Thank you in advance
 ",0,"Tilman Hausherr","Claudio Tortorelli",2,6,"05/Jul/18 11:11","05/Oct/18 04:54","11/Jul/18 17:51"
PDFBOX-4263,PDFBOX,"Check object key when signing",Improvement,CLOSED,Minor,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Signing,None,,"Prevent a future regression of the PDFBOX-4261 bug by checking that one object number remains identical before and after signing.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"09/Jul/18 18:21","05/Oct/18 04:53","09/Jul/18 18:24"
PDFBOX-4266,PDFBOX,"Java 6 error",Bug,CLOSED,Major,Fixed,2.0.12,2.0.12,None,None,,"2.0 branch doesnt build on java 6 anymore
Unsupported major.minor version 51.0",0,"Tilman Hausherr","simon steiner",0,3,"13/Jul/18 11:36","05/Oct/18 04:53","13/Jul/18 16:30"
PDFBOX-4267,PDFBOX,"Incorrect rendering when /Matte entry",Bug,CLOSED,Major,Fixed,"2.0.11, 3.0.0 PDFBox","2.0.12, 3.0.0 PDFBox",Rendering,None,,"The image softmask in the attached file has a /Matte 0 0 0 entry. PDFBox displays the PDF differently than Adobe Reader, the reflection shown by PDFBox is barely visible. When the /Matte entry is deleted, then it is barely visible in Adobe Reader too. So the /Matte entry does make some difference, although I don't understand how.
In the PDF specification, the formula shown is c' = m + α x (c - m). So 0 should have no effect?!
I looked at the code of PDF.js, they have a special handling when alpha is 0, don't know why.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"17/Jul/18 17:04","05/Oct/18 04:53","18/Aug/18 16:51"
PDFBOX-4268,PDFBOX,"Japanese text displayed as barcode",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Rendering,None,,"WARN  PDCIDFontType0:160 - Using fallback Barcode3of9-Italic for CID-keyed font STSongStd-Light
The reason is that the fonts "match" in FontMapperImpl.getFontMatches(). My barcode fonts have "0" as panose font family which means "any", and the PDF also has "any".",0,"Tilman Hausherr","Tilman Hausherr",0,2,"19/Jul/18 17:48","05/Oct/18 04:53","19/Jul/18 18:08"
PDFBOX-4271,PDFBOX,"Consistently using the same version of the download-maven-plugin",Improvement,CLOSED,Critical,Fixed,"2.0.11, 3.0.0 PDFBox","2.0.12, 3.0.0 PDFBox",None,None,,"Created a patch to use the same version of the plugin consistently during the build.
The mentioned issues in preflight (<!-- can't use download-maven-plugin for JDK6, see PDFBOX-3532 -->) related to JDK 6 are not valid anymore cause you already required Maven 3.3.9 which itself already required JDK 7 to run...",0,"Tilman Hausherr","Karl Heinz Marbaise",0,4,"22/Jul/18 12:29","05/Oct/18 04:53","24/Jul/18 20:23"
PDFBOX-4272,PDFBOX,"Building page requirements are wrong",Improvement,CLOSED,Minor,Fixed,None,None,Documentation,None,,"https://pdfbox.apache.org/building.html this pages says about the requirements...
JDK 6+
Java Cryptography Extension (JCE)
Maven 3
in the current trunk which is references you need at least JDK 7 and Maven 3.3.9 ...",0,"Andreas Lehmkühler","Karl Heinz Marbaise",0,3,"22/Jul/18 12:34","23/Sep/18 16:37","23/Sep/18 16:37"
PDFBOX-4273,PDFBOX,"Build Configuration in Jenkins",Improvement,CLOSED,Minor,Fixed,None,None,None,None,,"The MAVEN_OPTS are currently configured like this (https://builds.apache.org/job/PDFBox-trunk/configure)
-Xmx1g -XX:MaxPermSize=300m
The issue is that starting with JDK 8 MaxPermSize does not exist anymore..
See also the messages in the build:
Currently the jenkins build of the trunk is currently configured to use
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=300m; support was removed in 8.0",0,"Tilman Hausherr","Karl Heinz Marbaise",0,2,"22/Jul/18 12:59","02/Dec/18 17:10","22/Jul/18 13:47"
PDFBOX-4274,PDFBOX,"Get rid of warning about prerequisites",Improvement,CLOSED,Minor,Fixed,"1.8.15, 2.0.11, 3.0.0 PDFBox","1.8.16, 2.0.12, 3.0.0 PDFBox",None,None,,"Currently the build shows a warning:
[INFO] Scanning for projects...
[WARNING] The project org.apache.pdfbox:pdfbox-parent:pom:3.0.0-SNAPSHOT uses prerequisites which is only intended for maven-plugin projects but not for non maven-plugin projects. For such purposes you should use the maven-enforcer-plugin. See https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html
This can be solve with the attached patch.",0,"Tilman Hausherr","Karl Heinz Marbaise",0,3,"22/Jul/18 13:07","05/Oct/18 04:53","22/Jul/18 14:05"
PDFBOX-4276,PDFBOX,"Multiply blend mode not detected",Bug,CLOSED,Major,Fixed,"1.8.15, 2.0.11, 3.0.0 PDFBox","1.8.16, 2.0.12, 3.0.0 PDFBox",Preflight,None,,"The attached file should fail the PDF/A-1b check but doesn't. VeraPDF detects the incorrect blendmode at Root/Pages/Kids/[0]/Resources/ExtGState/R9/BM: "The following keys, if present in an ExtGState object, shall have the values shown: BM - Normal or Compatible".
The cause is that in ExtGStateValidationProcess.extractExtGStateDictionaries() there is a check that the name of the ExtGState matches "(GS|gs)([0-9])+". This has been since the beginning as an Apache project (PDFBOX-1056) and even since the first commit on github (https://github.com/gbm-bailleul/padaf) in 2010.
I could ask but I don't think that they would know why that decision was made over 8 years ago. My guess is that some code from elsewhere was reused.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Jul/18 16:53","05/Oct/18 04:53","24/Jul/18 17:03"
PDFBOX-4278,PDFBOX,"Type 3 font .notdef-named glyph missing in rendering",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox","PDModel, Rendering",None,,".notdef can lead to a valid glyph. The change in PDFBOX-2462 went too far, it is enough to check whether we can get a stream for the name. The file from PDFBOX-2462 is part of the Bavaria test set and passes after the upcoming change.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"25/Jul/18 16:18","05/Oct/18 04:53","25/Jul/18 16:27"
PDFBOX-4279,PDFBOX,"ArrayIndexOutOfBoundsException in PDDeviceGray.toRGB",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Rendering,None,,"java.lang.ArrayIndexOutOfBoundsException: 0
    org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGB(PDDeviceGray.java:69)
    org.apache.pdfbox.rendering.PageDrawer.getPaint(PageDrawer.java:308)
    org.apache.pdfbox.rendering.PageDrawer.getStrokingPaint(PageDrawer.java:617)
    org.apache.pdfbox.rendering.PageDrawer.strokePath(PageDrawer.java:682)
    org.apache.pdfbox.contentstream.operator.graphics.StrokePath.process(StrokePath.java:36)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:506)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processTilingPattern(PDFStreamEngine.java:403)
    org.apache.pdfbox.rendering.PageDrawer.drawTilingPattern(PageDrawer.java:283)
The cause is
  /CS2 CS
  /P2 SCN
The first line sets a pattern colorspace (its entry is [Pattern DeviceGray]), the second line sets an "uncolored tiling pattern" but no color parameter so an empty array is created. Solution: enlarge the returned array.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"26/Jul/18 16:17","05/Oct/18 04:53","26/Jul/18 16:20"
PDFBOX-4281,PDFBOX,"Replace Apache Wink dependency",Task,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Signing,None,,"I tried this new plugin
https://sonatype.github.io/ossindex-maven/maven-plugin/
and found that our dependency Apache Wink depends on a Spring version with a vulnerability. We use Apache Wink to create a mock http server. Apache Wink has been retired. However we need only a single class so I'll add that one. (I also tried to find other mock http servers, one had issues, another needed a com.sun.* class, another was too complex).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/Jul/18 12:14","05/Oct/18 04:53","28/Jul/18 13:31"
PDFBOX-4283,PDFBOX,"Allowing Rectangles with additional elements",Bug,CLOSED,Minor,Fixed,"1.8.15, 2.0.11","1.8.16, 2.0.12, 3.0.0 PDFBox",PDModel,None,,"I've come across some pages in a large PDF that have some additional, non-numerical elements at the end of the MediaBox rectangle array, e.g. 
/MediaBox [0 0 612 792 5 0 R 6 0 R]
Trying to read such a structure with PDPage.getMediaBox() throws an exception trying to construct the PDRectangle at [this line|https://github.com/apache/pdfbox/blob/6f18d7c4bef4d23a22dcf14c804d737d43908deb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDRectangle.java#L131.]
I'm not sure if this strange case should be treated as a file issue, or if should be supported by slicing / shortening the COSArray prior to trying to convert to floats. Acrobat Reader shows the pages without complaint.
The original PDF was produced by Foxit PhantomPDF Printer Version 7.3.9.0803.",0,"Tilman Hausherr","Ross Johnson",0,3,"01/Aug/18 18:59","05/Oct/18 04:53","04/Aug/18 17:31"
PDFBOX-4285,PDFBOX,"Expose the tiff compression type to the user.",Improvement,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Writing,TIFF,,"Allow the user to set the compression type of Tiff files externally.
In the current version, the class ImageIOUtil uses TIFFUtil.setCompressionType and this sets the compression only to "CCITT T.6" or "LZW".
Other choice could be allow the jpeg compression that is more efficient.
It already has a TODO in code (// TODO expose this choice to the user?)
Thank you.",0,"Tilman Hausherr","Alexandre Moraes do Nasciment",0,3,"02/Aug/18 14:06","05/Oct/18 04:53","07/Aug/18 17:06"
PDFBOX-4288,PDFBOX,"needless adding while parsing dictionary objects",Bug,CLOSED,Minor,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Parsing,optimization,,"Hi, It seems like unnecessary objects(COSNull, COSFloat..) are also added to 'toBeParsedList' while parsing dictionary objects and this can impact on performance.
You can download a file causing out of memory exception while parsing dictionary objects below,
https://turnernbahangtime.files.wordpress.com/2017/10/2017-18-official-nba-guide_v2.pdf
and please check the attached patch that avoids unnecessary adding operations.",0,"Tilman Hausherr","Hee Jeong Kim",1,4,"07/Aug/18 05:50","05/Oct/18 04:53","07/Aug/18 16:10"
PDFBOX-4289,PDFBOX,"Double negative number",Improvement,CLOSED,Minor,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Parsing,None,,"We have an issue similar to the PDFBOX-3589. The PDF contains /ItalicAngle --16.33, and the exception we are getting is:
Exception in thread "main" java.io.IOException: Error expected floating point number actual='--16.33'
 at org.apache.pdfbox.cos.COSFloat.<init>(COSFloat.java:82)
 at org.apache.pdfbox.cos.COSNumber.get(COSNumber.java:115)
 at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:947)
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:152)
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair(BaseParser.java:279)
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:212)
 at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:862)
 at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:899)
 ...
Such "numbers" probably violate the specification, but the behaviour of PDFBox should be consistent, so the second minus sign should be ignored here as well.",0,"Tilman Hausherr","Giedrius Noreikis",1,3,"08/Aug/18 22:15","05/Oct/18 04:53","09/Aug/18 18:31"
PDFBOX-4290,PDFBOX,"Memory Leak in SoftReferenceCache",Bug,CLOSED,Major,Fixed,"3.0.0 JBIG2","3.0.2 JBIG2",JBIG2,None,,"Keys in a HashMap are not garbage-collected because they are not wrapped in weak references.
For details please see https://github.com/levigo/jbig2-imageio/issues/53",0,"Tilman Hausherr","Grigoriy Alekseev",1,5,"13/Aug/18 10:46","21/Oct/18 08:49","19/Aug/18 11:22"
PDFBOX-4291,PDFBOX,"JavaDoc on website is marked as being in German",Bug,CLOSED,Trivial,Fixed,2.0.8,"2.0.12, 3.0.0 PDFBox",Documentation,None,,"All Javadoc files on pdfbox.apache.org start with <html lang="de"> which makes some browsers wrongly assume the text is in German, and offer to translate it.  
Presumably this may cause some issues with search engine results when requesting only English results, though I have not personally experienced this. 
This is probably a minor/trivial issue. Could possibly be fixed explicitly setting the locale option in maven-javadoc-plugin, though I have not tested whether this does fix the issue. ",0,"Maruan Sahyoun","Itai Shaked",0,3,"14/Aug/18 06:31","05/Oct/18 04:53","14/Aug/18 08:23"
PDFBOX-4292,PDFBOX,"Validation fails if ModifyDate and ModDate are specified using different time zones",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Preflight,None,,"I have a test PDF with this metadata:
/ModDate (D:20180817115837+02'00')
<xmp:ModifyDate>2018-08-17T09:58:37Z</xmp:ModifyDate>
  According to the specification this is valid and should be considered as equivalent:
For properties that map between the PDF date type, defined by PDF
Reference, 3.8.2, and the XMP Date type, defined by Date and Time Formats, value equivalence shall be on a
component-by-component basis, relative to Coordinated Universal Time (UTC), i.e., correcting for local time
zone offset.
EXAMPLE The document information dictionary entries:
/CreationDate (D:20040402)
/ModDate (D:200404080+91132-05'00')
are equivalent to the XMP properties:
<xmp:CreateDate>2004-04-02</xmp:CreateDate>
<xmp:ModifyDate>2004-04-08T14:11:32Z</xmp:ModifyDate>
  In org.apache.pdfbox.preflight.metadata.SynchronizedMetaDataValidation#analyzeModifyDateProperty the calendar objects are formatted as strings and then compared:
else if(!DateConverter.toISO8601(xmpModifyDate).equals(DateConverter.toISO8601(modifyDate))) {
  ve.add(this.unsynchronizedMetaDataError("ModificationDate"));
}
In my testcase DateConverter.toISO8601(modifyDate) yields "2018-08-17T11:58:37+02:00" while DateConverter.toISO8601(xmpModifyDate) yields "2018-08-17T09:58:37+00:00". These timestamps are semantically equal (xmpModifyDate.compareTo(modifyDate) yields 0) and therefore the PDF should be considered as valid PDF-A1b.",0,"Tilman Hausherr","Alonso Gonzalez",1,3,"20/Aug/18 08:47","05/Oct/18 04:53","22/Aug/18 20:29"
PDFBOX-4295,PDFBOX,"Don't create intermediate streams when merging files",Improvement,CLOSED,Major,Fixed,"2.0.11, 3.0.0 PDFBox","2.0.12, 3.0.0 PDFBox",Utilities,None,,"from dev@pdfbox posted by Tilman Hausherr
While looking at
https://stackoverflow.com/questions/51564781/error-merging-large-pdf-files-with-pdfbox-missing-end-of-file-marker-eof/
I noticed that the merge utility makes streams from files... which means that whole files are getting cached to allow random access. IMHO it would be better to keep files as files and streams as streams, i.e. have an array of objects and then "do the right thing".
It doesn't makes sense to create intermediate streams, PDDocument.load should handle different ways of input",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,2,"20/Aug/18 16:54","21/Nov/18 17:33","20/Aug/18 17:21"
PDFBOX-4298,PDFBOX,"NullPointerException when doing overlay",Bug,CLOSED,Major,Fixed,"1.8.15, 2.0.11","1.8.16, 2.0.12, 3.0.0 PDFBox",Utilities,None,,"When input pdf file for overlay contains empty page (with contents == null) like NPE.pdf file we get NullPointerException in Overlay.addOriginalContent method. It occurres even if we overlay over other than this empty page.
Here's some sample code to reproduce the problem:
Overlay overlayObj = new Overlay();
File file1 = new File("NPE.pdf");
PDDocument originalDoc = PDDocument.load(file1);
overlayObj.setOverlayPosition(Overlay.Position.FOREGROUND);
overlayObj.setInputPDF(originalDoc);
Map<Integer, String> ovmap = new HashMap<>();
File file2 = new File("pdf2.pdf");
ovmap.put(2, file2.getPath());
overlayObj.overlay(ovmap);
originalDoc.save("test__result.pdf");",0,"Tilman Hausherr","Mikita Geer",0,3,"22/Aug/18 12:35","05/Oct/18 04:53","10/Sep/18 17:40"
PDFBOX-4299,PDFBOX,"ArrayIndexOutOfBoundsException in CmapSubtable.processSubtype2",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox","FontBox, Rendering",None,,"I'm getting this exception when trying to render the first page of a pdf document:
Exception in thread "JavaFX Application Thread" java.lang.ArrayIndexOutOfBoundsException: -31593
 at org.apache.fontbox.ttf.CmapSubtable.processSubtype2(CmapSubtable.java:524)
 at org.apache.fontbox.ttf.CmapSubtable.initSubtable(CmapSubtable.java:96)
 at org.apache.fontbox.ttf.CmapTable.read(CmapTable.java:84)
 at org.apache.fontbox.ttf.TrueTypeFont.readTable(TrueTypeFont.java:349)
 at org.apache.fontbox.ttf.TTFParser.parseTables(TTFParser.java:173)
 at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:150)
 at org.apache.fontbox.ttf.OTFParser.parse(OTFParser.java:79)
 at org.apache.fontbox.ttf.OTFParser.parse(OTFParser.java:27)
 at org.apache.fontbox.ttf.TTFParser.parse(TTFParser.java:106)
 at org.apache.fontbox.ttf.OTFParser.parse(OTFParser.java:73)
 at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:109)
 at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.<init>(PDCIDFontType2.java:62)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont(PDFontFactory.java:125)
 at org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:192)
 at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
 at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:146)
 at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:848)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:503)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:477)
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
 at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:246)
 at org.apache.pdfbox.rendering.PDFRenderer.renderPageToGraphics(PDFRenderer.java:292)
 at org.apache.pdfbox.rendering.PDFRenderer.renderPageToGraphics(PDFRenderer.java:266)
 at [my code]
You can get the pdf file from https://www.alliedworldinsurance.com/files/files/Motor%20Insurance%20claim%20form.pdf",0,"Tilman Hausherr","Adrian Sándor",0,3,"27/Aug/18 00:38","05/Oct/18 04:53","27/Aug/18 20:18"
PDFBOX-4301,PDFBOX,"ClassCastException in PDExtendedGraphicsState",Bug,CLOSED,Minor,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Parsing,None,,"The method PDExtendedGraphicsState.getFloatItem contains a non checked cast to COSNumber for a dictionary object. In a specific journal PDF document I get the following exception:
at org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState.getFloatItem(PDExtendedGraphicsState.java:591)
        at org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState.getStrokingAlphaConstant(PDExtendedGraphicsState.java:482)
        at org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState.copyIntoGraphicsState(PDExtendedGraphicsState.java:130)
        at org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters.process(SetGraphicsStateParameters.java:61)
        at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:848)
because the PDF contains
/A4 <<
/CA (1.0)
/Type /ExtGState
/ca (1.0)
>>
where "(1.0)" is clearly wrong and should be "1.0".
As this seems to be a more seldom error I would suggest to check dictionary object type before casting and returning "null" for wrong type (as it is done e.g. in PDExtendedGraphicsState.getFontSetting.",0,"Timo Boehme","Timo Boehme",0,2,"27/Aug/18 12:12","05/Oct/18 04:53","27/Aug/18 15:41"
PDFBOX-4302,PDFBOX,"ToUnicode CMap is not written correctly when the entry count is just 100.",Bug,CLOSED,Minor,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",PDModel,None,"windows 10","The following warning log is output when I execute attached PDFSample.java.
org.apache.pdfbox.pdmodel.font.PDFont <init>
WARN: Invalid ToUnicode CMap in font AAKCFF+IPAMincho
org.apache.pdfbox.pdmodel.font.PDType0Font toUnicode
WARN: No Unicode mapping for CID+598 (598) in font AAKCFF+IPAMincho
:
This program creates a simple japanese pdf and read the image.
This program reads a font file. You can download the file from the following URL.
https://ipafont.ipa.go.jp/old/ipafont/download.html#en
I investigated the problem and found a bug in ToUnicodeWriter class.
In writeTo method, a loop count in a operator is calculated by the following line. But the count will be 0 if the srcFrom size is just 100.
int count = batch == batchCount - 1 ? srcFrom.size() % 100 : 100;
I changed this line to below and I confirmed that the problem was resolved.
int count = batch == batchCount - 1 ? srcFrom.size() - 100 * batch : 100;",0,"Tilman Hausherr","Atsushi Doita",1,3,"28/Aug/18 09:50","05/Oct/18 04:53","30/Aug/18 17:02"
PDFBOX-4303,PDFBOX,"Helv and ZaDb overridden",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.14, 3.0.0 PDFBox",AcroForm,Appearance,,"Due to change:
PDFBOX-3943: create /Helv and /ZaDb entries if they don't exist, regardless if /DR existed or not
  was working ok in 2.0.7, in 2.0 branch
PDAcroForm
verifyOrCreateDefaults():
is:
if (!defaultResources.getCOSObject().containsKey("Helv"))
should be checking key in the font dictionary before calling defaultResources.put",0,"Tilman Hausherr","simon steiner",0,5,"29/Aug/18 13:24","28/Feb/19 17:45","06/Dec/18 12:54"
PDFBOX-4305,PDFBOX,"Log message not in english",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",None,None,,"See:
LOG.info("To get higher rendering speed on java 8 oder 9,");",0,"Tilman Hausherr","simon steiner",0,3,"30/Aug/18 11:59","05/Oct/18 04:53","30/Aug/18 18:25"
PDFBOX-4306,PDFBOX,"Image clipping area rounding error",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Rendering,None,,"Creating images with PDFBox and merging them together when you have two pages that connect will create a white line between the images.
We have looked into the issue and tried to fix it and found that the clipping area is a bit to tight so the images will not be rendered correctly. My guess is that this is due to a rounding error when using floats. 
Most of the graphics functions in java use double precision and PDFBox uses floats so when using layer upon layer of bounding boxes intersecting the clipping area it might get skewed to a bad bounding box.
I've added a patch to this issue with the code we use as a workaround today. It's by no means the final solution to the problem but it resolves the white line issue.
To be sure that you get the error when generating the images use the following command
```
java -jar pdfbox-app-3.0.0-SNAPSHOT.jar PDFToImage -dpi 150 -quality 0.95 -format jpg page-1.pdf
```
We run java 8 on our machines.",0,"Tilman Hausherr","Daniel Persson",0,3,"31/Aug/18 09:42","05/Oct/18 04:53","19/Sep/18 06:08"
PDFBOX-4307,PDFBOX,"ClassCastException in PDDocumentCatalog.getDocumentOutline if 'outlines' is not a dictionary",Bug,CLOSED,Minor,Fixed,"2.0.11, 3.0.0 PDFBox","2.0.12, 3.0.0 PDFBox",Parsing,None,,"In PDDocumentOutline.getDocumentOutline() the 'outline' is read as dictionary object and directly cast to COSDictionary. Normally this is ok as it should be a dictionary. However in a bad PDF as I have it in my collection (unfortunately I'm not allowed to disclose it) the object is an array (COSArray) which leads to the ClassCastException.
Since the outline is an optional information the best we can do here is to ignore the 'outline' data if its not a COSDIctionary and return 'null'.",0,"Timo Boehme","Timo Boehme",0,2,"31/Aug/18 14:47","05/Oct/18 04:53","31/Aug/18 14:59"
PDFBOX-4308,PDFBOX,"PDDocument protect changes color palette",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Writing,None,,"When applying protection to a PDF the resulting PDF shows weird background colors.
The following minimal sample program produces the observed behaviour in attached PDF "Zieldatei-mit-Schutz.pdf"
package protecttest;

// $ java -version
// openjdk version "1.8.0_181"
// OpenJDK Runtime Environment (build 1.8.0_181-8u181-b13-0ubuntu0.18.04.1-b13)
// OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode)

// compile with
// javac -cp pdfbox-2.0.11.jar protecttest/PdfProtector.java

// execute with
// java -cp pdfbox-2.0.11.jar:commons-logging-1.1.3.jar:. protecttest.PdfProtector


import java.io.File;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;

public class PdfProtector {
    public static void main(String[] args) throws Exception {
    // load and save with no protection
    PDDocument d1 = PDDocument.load(new File("Quelldatei.pdf"));
    d1.save(new File("Zieldatei-ohne-Schutz.pdf"));
    d1.close();
    // everything seems fine with the resulting PDF

    // load and save with protection
        PDDocument d2 = PDDocument.load(new File("Quelldatei.pdf"));
    AccessPermission ap = new AccessPermission();
    ap.setCanAssembleDocument(false);
    ap.setCanModify(false);
    d2.protect(new StandardProtectionPolicy("foobar","",ap));
    d2.save(new File("Zieldatei-mit-Schutz.pdf"));
    d2.close();
    // resulting file is rendered with odd colors
    }
}",0,"Tilman Hausherr","Falko Riemenschneider",1,3,"03/Sep/18 06:40","05/Oct/18 04:53","03/Sep/18 19:17"
PDFBOX-4312,PDFBOX,"Signature is not getting inserted into 00000 area",Bug,RESOLVED,Major,Fixed,"1.8.9, 1.8.15",1.8.17,".NET, PDModel, Signing",None,,"Hi ,
I want to sign pdf using signature in pkcs 7 format . I am converting pkcs 7 signature to byte array using Convert.FromBase64String method in .net . I am passing this byte array to sign method in signature interface which gets called after calling saveincremental. My byte array is inserting proper but the name of which signature is not shown when i open pdf. May be my byte conversion may not proper or something else i am doing wrong. please let me know.",0,"Tilman Hausherr",bal,0,3,"06/Sep/18 07:37","02/Nov/18 15:56","01/Nov/18 08:11"
PDFBOX-4315,PDFBOX,"PDFBox info message when not using it",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.12, 3.0.0 PDFBox",Rendering,None,,"If I check to see if pdfbox is in the classpath, the user will see info messages printed, even though I am not using it to do something to a pdf. Didnt use to happen.
  public class TestPDFBox {
public static void main(String[] args) throws ClassNotFoundException {
Class.forName("org.apache.pdfbox.pdmodel.PDDocument");
}
}
Sep 07, 2018 9:31:10 AM org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB suggestKCMS
INFO: To get higher rendering speed on java 8 or 9,
Sep 07, 2018 9:31:10 AM org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB suggestKCMS
INFO:   use the option -Dsun.java2d.cmm=sun.java2d.cmm.kcms.KcmsServiceProvider
Sep 07, 2018 9:31:10 AM org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB suggestKCMS
INFO:   or call System.setProperty("sun.java2d.cmm", "sun.java2d.cmm.kcms.KcmsServiceProvider")",0,"Tilman Hausherr","simon steiner",0,2,"07/Sep/18 08:34","05/Oct/18 04:53","07/Sep/18 17:06"
PDFBOX-4316,PDFBOX,"RemoveAllText does not delete all parameters with " operator",Bug,CLOSED,Major,Fixed,"1.8.15, 2.0.11","1.8.16, 2.0.12, 3.0.0 PDFBox",Utilities,None,,"As mentioned by Michael Klink in the linked SO response:
While the text showing operators Tj, ', and TJ indeed only have a single parameter, " has three",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/Sep/18 17:31","05/Oct/18 04:53","10/Sep/18 17:36"
PDFBOX-4318,PDFBOX,"PDFont.encode results change on identical input",Bug,CLOSED,Major,Fixed,"2.0.11, 3.0.0 PDFBox","2.0.12, 3.0.0 PDFBox",PDModel,"cache caching type1f",,"As reported Daniel Wildschut in the user mailing list:
Hello, we use PDFBox to fill in PDF Forms and stumbled on a potential bug while sanitizing the input.
We call PDFont.encode to check beforehand if a given character can be inserted using the given font.
However we noticed that the results of the method call can change depending on what other strings have been checked before.
Apparently PDType1Font stores previous results in a codeToBytesMap, which then causes the unexpected behavior.
I'd say that the key used in "codeToBytesMap.put(code, bytes);" is wrong; you probably want to use the method parameter "unicode" instead.
I tested 2.0.11, the current 2.0.x branch and the 3.0.x branch and was able to reproduce the problem with all of them.
Code to reproduce:
public class PDFBoxEncodeTest
{
    public static void main( final String[] args )
    {
        final PDType1Font font = PDType1Font.HELVETICA_BOLD;
        tryEncode(font, "\u0080");
        tryEncode(font, "€");
        tryEncode(font, "\u0080");
    }

    private static void tryEncode(final PDFont font, final String str) {
        try {
            font.encode(str);
            System.out.println("Character " + str.codePointAt(0) + " can be encoded in Font " + font);
        } catch (final IOException | IllegalArgumentException e) {
            System.out.println("Character " + str.codePointAt(0) + " cannot be encoded in Font " + font + ": " + e.getMessage());
        }
    }
}
Expected output:
Character 128 cannot be encoded in Font PDType1Font Helvetica-Bold: U+0080 ('.notdef') is not available in this font Helvetica-Bold encoding: WinAnsiEncoding
Character 8364 can be encoded in Font PDType1Font Helvetica-Bold
Character 128 cannot be encoded in Font PDType1Font Helvetica-Bold: U+0080 ('.notdef') is not available in this font Helvetica-Bold encoding: WinAnsiEncoding
Actual output:
Character 128 cannot be encoded in Font PDType1Font Helvetica-Bold: U+0080 ('.notdef') is not available in this font Helvetica-Bold encoding: WinAnsiEncoding
Character 8364 can be encoded in Font PDType1Font Helvetica-Bold
Character 128 can be encoded in Font PDType1Font Helvetica-Bold",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Sep/18 11:30","05/Oct/18 04:53","17/Sep/18 16:25"
PDFBOX-4319,PDFBOX,"Parsing 100000 page pdf is slow",Bug,CLOSED,Major,Fixed,"2.0.11, 3.0.0 PDFBox","2.0.12, 3.0.0 PDFBox","Documentation, Parsing",None,,"Parsing 100000 page pdf is slow, how do i speed it up?
import org.apache.pdfbox.contentstream.operator.Operator;
import org.apache.pdfbox.cos.COSBase;
import org.apache.pdfbox.cos.COSName;
import org.apache.pdfbox.pdfparser.PDFStreamParser;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
public class CheckPDF {
    public static void main(String[] args) throws IOException {
        PDDocument doc = PDDocument.load(new File("out.pdf"));
        for (int i=0; i<doc.getNumberOfPages(); i++) {
            System.out.println(i);
            PDPage page = doc.getPage(i);
            PDFStreamParser parser = new PDFStreamParser(page.getContents());
            parser.parse();
            List<Object> it = parser.getTokens();
            List<COSBase> arguments = new ArrayList<COSBase>();
            for (Object o : it) {
                if (o instanceof Operator) {
                    Operator op = (Operator)o;
                    if (op.getName().equals("Do")) {
                        COSName name = (COSName) arguments.get(0);
                        if (page.getResources().getXObject(name) == null) {
                            throw new RuntimeException(name + " not found");
                        }
                    }
                    arguments.clear();
                } else {
                    arguments.add((COSBase)o);
                }
            }
        }
        doc.close();
    }
}",0,"Tilman Hausherr","simon steiner",0,3,"20/Sep/18 09:17","05/Oct/18 04:53","20/Sep/18 18:33"
PDFBOX-4322,PDFBOX,"Extract Text feature is not working for some part of PDF",Bug,CLOSED,Major,Fixed,"2.0.2, 2.0.11","2.0.12, 3.0.0 PDFBox","Text extraction",None,,"Text Extraction feature cannot extract text from attached pdf properly.
  Text inside of rectangle box (e.g value of Lending Specialist and others) is not getting extracted.",0,"Tilman Hausherr","Amit Maheshwari",0,4,"24/Sep/18 10:25","05/Oct/18 04:53","28/Sep/18 16:03"
PDFBOX-4326,PDFBOX,"PDF with JPEG2000 image can't be rendered",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.13, 3.0.0 PDFBox",Rendering,"JPEG2000 JPXDecode J",,"There is an EOF exception:
    java.io.EOFException
    at javax.imageio.stream.ImageInputStreamImpl.readBits(ImageInputStreamImpl.java:687)
    at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.fromAny(SampledImageReader.java:523)
    at org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage(SampledImageReader.java:217)
    at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage(PDImageXObject.java:418)
    at org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage(PDImageXObject.java:400)
    at org.apache.pdfbox.rendering.PageDrawer.drawImage(PageDrawer.java:1021) 
The EOF exception is because SampledImageReader expects a stream that is 3x longer than actually appears, because the colorspace is said to have 3 colors instead of 1. This is because the JPEG2000 plugin returns an image with IndexColorModel which references three colors.
There are two ways to solve this and both worked: the slower is to convert to RGB which requires another change when reading the raster (because the raster is now made of integers), the faster is to force a gray colorspace. I use the later but keep the change I made in passing the integer RGB raster, we may need it some day.
I'm making the change only for the trunk for now, and to the 2.0 branch after release of 2.0.12.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"29/Sep/18 11:43","02/Dec/18 17:06","05/Oct/18 17:09"
PDFBOX-4327,PDFBOX,"NullPointerException in PDFStreamEngine.processSoftMask() when running ExtractImages",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.13, 3.0.0 PDFBox",Utilities,None,,"Exception in thread "main" java.lang.NullPointerException
        at org.apache.pdfbox.contentstream.PDFStreamEngine.processSoftMask(PDFStreamEngine.java:201)
        at org.apache.pdfbox.tools.ExtractImages$ImageGraphicsEngine.run(ExtractImages.java:207)
        at org.apache.pdfbox.tools.ExtractImages.extract(ExtractImages.java:182)
        at org.apache.pdfbox.tools.ExtractImages.run(ExtractImages.java:145)
        at org.apache.pdfbox.tools.ExtractImages.main(ExtractImages.java:90)
        at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:62)
The cause is that the ExtGState containing the softmask isn't assigned to the graphics state. Just assigning the softmask isn't enough (another NPE occurs) because the initial CTM (needed by a clone()) is only set when using copyIntoGraphicsState.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"30/Sep/18 09:16","02/Dec/18 17:06","05/Oct/18 17:03"
PDFBOX-4328,PDFBOX,"PDF with JPEG2000 image incorrectly rendered",Bug,CLOSED,Major,Duplicate,2.0.11,None,Rendering,"JPEG2000 JPXDecode J",,"Yet another case of JPEG2000 image being returned as indexed by the jpeg2000 plugin. The image in 000208-p1 is at Root/Pages/Kids/[0]/Resources/XObject/Im0.",0,"Tilman Hausherr","Tilman Hausherr",0,1,"30/Sep/18 09:26","30/Sep/18 11:10","30/Sep/18 11:10"
PDFBOX-4330,PDFBOX,"NumberFormatException in CFFParser.readRealNumber()",Bug,CLOSED,Major,Fixed,"1.8.15, 2.0.11","1.8.17, 2.0.13, 3.0.0 PDFBox",FontBox,CFF,,"Exception in thread "main" java.lang.NumberFormatException: For input string: "-1.5258789E-E-55"
        at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043)
        at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)
        at java.lang.Double.parseDouble(Double.java:538)
        at java.lang.Double.valueOf(Double.java:502)
        at org.apache.fontbox.cff.CFFParser.readRealNumber(CFFParser.java:405)
        at org.apache.fontbox.cff.CFFParser.readEntry(CFFParser.java:281)
        at org.apache.fontbox.cff.CFFParser.readDictData(CFFParser.java:258)
        at org.apache.fontbox.cff.CFFParser.parseType1Dicts(CFFParser.java:736)
        at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:569)
        at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:125)
        at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:76)
This happens on pages 2 and 3. The cause is an invalid sequence that has "E-" twice. We just skip one of the E's and it works.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"03/Oct/18 10:16","02/Dec/18 17:06","03/Oct/18 12:41"
PDFBOX-4331,PDFBOX,"Make jdk9 profile activation automatic",Bug,CLOSED,Major,Fixed,2.0.11,"2.0.13, 3.0.0 PDFBox",None,jdk9,,"I stumbled upon the <activation> segment in a profile segment in a pom.xml, it allows to activate a profile automatically based on certain things, e.g. the jdk.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"03/Oct/18 16:25","02/Dec/18 17:06","03/Oct/18 16:38"
PDFBOX-4332,PDFBOX,"XMP dates contain time zone, while document info dates do not, and this isn't detected by preflight (2)",Bug,RESOLVED,Major,Fixed,1.8.16,1.8.17,XmpBox,None,,"The two last commits ([ https://svn.apache.org/r1660004 ] and [ https://svn.apache.org/r1660034 ]) of PDFBOX-2619 were not made in the 1.8 branch and that resulted in test failures on the machine of Tim Allison.
org.apache.pdfbox.preflight.metadata.TestSynchronizedMetadataValidation.testAllInfoSynhcronized
org.apache.pdfbox.preflight.metadata.TestSynchronizedMetadataValidation.testBadPrefixSchemas
 ",0,"Tilman Hausherr","Tilman Hausherr",0,3,"06/Oct/18 18:50","09/Oct/18 17:25","09/Oct/18 17:25"
PDFBOX-4333,PDFBOX,"ClassCastException when loading PDF",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",Parsing,None,,"Fuzzing PDF loading with JQF triggered a ClassCastException. All attached files trigger the exception for a different class but are basically the same.
org.apache.pdfbox.cos.COSArray cannot be cast to org.apache.pdfbox.cos.COSObject
java.lang.ClassCastException: org.apache.pdfbox.cos.COSArray cannot be cast to org.apache.pdfbox.cos.COSObject
    at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2337)
    at org.apache.pdfbox.pdfparser.COSParser.checkPages(COSParser.java:2321)
    at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:193)
    at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
    at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
    at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)
Throwing an Exception is ok since no other PDF reader I tried is able to load the files. But it should not be an ClassCastException.",0,"Tilman Hausherr","Robin Schimpf",0,3,"07/Oct/18 16:11","02/Dec/18 17:06","08/Oct/18 18:44"
PDFBOX-4335,PDFBOX,"Overlay should implement Closeable",Improvement,CLOSED,Major,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",Utilities,Overlay,,"`org.apache.pdfbox.multipdf.Overlay` class has `close` method but it doesn't implement Closeable interface. Other classes, such as PDDocument, do implement it.
Attached patch.",0,"Tilman Hausherr","Wiktor Kwapisiewicz",0,3,"08/Oct/18 11:28","02/Dec/18 17:06","08/Oct/18 19:16"
PDFBOX-4338,PDFBOX,"ArrayIndexOutOfBoundsException in COSParser",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",Parsing,None,,"Fuzzing PDF loading with JQF triggered an ArrayIndexOutOfBoundsException.
java.lang.ArrayIndexOutOfBoundsException: -1
    java.util.ArrayList.elementData(ArrayList.java:422)
    java.util.ArrayList.get(ArrayList.java:435)
    org.apache.pdfbox.cos.COSArray.get(COSArray.java:210)
    org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray(BaseParser.java:638)
    org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:874)
    org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:152)
    org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair(BaseParser.java:279)
    org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:212)
    org.apache.pdfbox.pdfparser.COSParser.retrieveCOSDictionary(COSParser.java:2297)
    org.apache.pdfbox.pdfparser.COSParser.searchForTrailerItems(COSParser.java:2235)
    org.apache.pdfbox.pdfparser.COSParser.rebuildTrailer(COSParser.java:2210)
    org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:279)
    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:171)
    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1028)
    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:966)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Tilman Hausherr","Robin Schimpf",0,3,"11/Oct/18 18:20","02/Dec/18 17:06","11/Oct/18 18:54"
PDFBOX-4339,PDFBOX,"NullPointerException in COSParser",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",Parsing,None,,"Fuzzing PDF loading with JQF triggered a NullPointerException.
java.lang.NullPointerException
 at org.apache.pdfbox.pdfparser.COSParser.checkPagesDictionary(COSParser.java:2345)
 at org.apache.pdfbox.pdfparser.COSParser.checkPages(COSParser.java:2321)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:193)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Tilman Hausherr","Robin Schimpf",0,3,"11/Oct/18 18:23","02/Dec/18 17:06","11/Oct/18 19:05"
PDFBOX-4343,PDFBOX,"Prevent calling addSignature twice",Bug,CLOSED,Major,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",Signing,None,,"See linked SO question, we need to prevent addSignature from being called twice because we can only one do signing in COSWriter; and addSignatureField should be deprecated in 2.0 and deleted in 3.0.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"16/Oct/18 16:29","02/Dec/18 17:06","19/Oct/18 17:27"
PDFBOX-4345,PDFBOX,"FDFAnnotation.richContentsToString does not evaluate text nodes which have siblings in the XML",Bug,CLOSED,Major,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",PDModel,xfdf,,"The method FDFAnnotation.richContentsToString does not evaluate text nodes which have siblings in the XML which can lead to missing text when you parse XFDF data and add the annotations to a PDF.
Example : parsing a XFDF string containing
<p>Text A <span style="text-decoration:word;">Text B</span> Text C</p>
and adding the annotation will display only "Text B".
I've included a code sample (MergeTest.java) which generates two PDFs.
For one PDF, the paragraph contains only spans with text nodes as their only children and all the text is included, for the other PDF, the paragraph has mixed text nodes and elements as children and here, the content from the text siblings of the "span" is missing.
I propose the following fix:
Instead of traversing the children of an element with the XPath "*" expression, simply iterate the children obtained from Node.getChildNodes(), process Text and CDATASection nodes directly and call richContentsToString for any elements.
(source : FDFAnnotation_new.java, diff to 2.0.12 : FDFAnnotation_diff.txt)
Furthermore, this method needs to escape "<" and "&" in the text values read from the node values, because if these characters are added to the markup, it'll cause corruption of annotations as described in PDFBOX-3646.
Additionally, I added quoting " as " to the attribute values to avoid possible corruption there.
  Note : my first attempt of a fix was to replace the XPath "*" expression with "node()", but for some reason, when I used this on a test case of
<p><![CDATA[A]]> B <span>C</span> D</p>
I would only obtain a NodeList containing the CDATASection, the "span" element and the final text node, but not the text node containing "B".",0,"Tilman Hausherr","Kai Keggenhoff",1,3,"17/Oct/18 08:16","02/Dec/18 17:06","20/Oct/18 13:08"
PDFBOX-4347,PDFBOX,"ArrayIndexOutOfBoundsException in PDFXrefStreamParser",Bug,CLOSED,Minor,Fixed,None,"2.0.13, 3.0.0 PDFBox",Parsing,None,,"Fuzzing PDF loading with JQF triggered an ArrayIndexOutOfBoundsException.
java.lang.ArrayIndexOutOfBoundsException: 1
 at org.apache.pdfbox.pdfparser.PDFXrefStreamParser.parse(PDFXrefStreamParser.java:150)
 at org.apache.pdfbox.pdfparser.COSParser.parseXrefStream(COSParser.java:2767)
 at org.apache.pdfbox.pdfparser.COSParser.parseXrefObjStream(COSParser.java:442)
 at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:392)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:254)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:171)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Tilman Hausherr","Robin Schimpf",0,3,"17/Oct/18 18:59","02/Dec/18 17:06","21/Oct/18 17:45"
PDFBOX-4348,PDFBOX,"ClassCastException in COSParser",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",Parsing,None,,"Fuzzing PDF loading with JQF triggered an ClassCastException.
java.lang.ClassCastException: org.apache.pdfbox.cos.COSString cannot be cast to org.apache.pdfbox.cos.COSDictionary
 at org.apache.pdfbox.pdfparser.COSParser.parseDictionaryRecursive(COSParser.java:2919)
 at org.apache.pdfbox.pdfparser.COSParser.parseDictionaryRecursive(COSParser.java:2927)
 at org.apache.pdfbox.pdfparser.COSParser.parseDictionaryRecursive(COSParser.java:2927)
 at org.apache.pdfbox.pdfparser.COSParser.parseDictionaryRecursive(COSParser.java:2927)
 at org.apache.pdfbox.pdfparser.COSParser.parseDictionaryRecursive(COSParser.java:2927)
 at org.apache.pdfbox.pdfparser.COSParser.prepareDecryption(COSParser.java:2865)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:284)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:171)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Tilman Hausherr","Robin Schimpf",0,3,"17/Oct/18 19:01","02/Dec/18 17:06","17/Oct/18 20:06"
PDFBOX-4349,PDFBOX,"ClassCastException in COSParser",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",None,None,,"Fuzzing PDF loading with JQF triggered an ClassCastException.
java.lang.ClassCastException: org.apache.pdfbox.cos.COSInteger cannot be cast to org.apache.pdfbox.cos.COSObject
 at org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically(COSParser.java:2841)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:173)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Andreas Lehmkühler","Robin Schimpf",0,3,"17/Oct/18 19:03","02/Dec/18 17:06","21/Oct/18 20:20"
PDFBOX-4350,PDFBOX,"IllegalArgumentException in PDFObjectStreamParser",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",Parsing,None,,"Fuzzing PDF loading with JQF triggered an IllegalArgumentException.
java.lang.IllegalArgumentException: Illegal Capacity: -1
 at java.util.ArrayList.<init>(ArrayList.java:157)
 at org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse(PDFObjectStreamParser.java:72)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectStream(COSParser.java:994)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:880)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:794)
 at org.apache.pdfbox.pdfparser.COSParser.parseDictObjects(COSParser.java:754)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:185)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Tilman Hausherr","Robin Schimpf",0,3,"17/Oct/18 19:05","02/Dec/18 17:06","20/Oct/18 18:00"
PDFBOX-4351,PDFBOX,"IndexOutOfBoundsException when reading from InputStreamSource",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",None,None,,"Fuzzing PDF loading with JQF triggered an IndexOutOfBoundsException.
java.lang.IndexOutOfBoundsException
 at java.io.PushbackInputStream.read(PushbackInputStream.java:170)
 at org.apache.pdfbox.pdfparser.InputStreamSource.read(InputStreamSource.java:62)
 at org.apache.pdfbox.pdfparser.InputStreamSource.readFully(InputStreamSource.java:113)
 at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:907)
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray(BaseParser.java:631)
 at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:874)
 at org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse(PDFObjectStreamParser.java:84)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectStream(COSParser.java:994)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveCOSDictionary(COSParser.java:2277)
 at org.apache.pdfbox.pdfparser.COSParser.searchForTrailerItems(COSParser.java:2235)
 at org.apache.pdfbox.pdfparser.COSParser.rebuildTrailer(COSParser.java:2216)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:279)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:171)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Andreas Lehmkühler","Robin Schimpf",0,3,"17/Oct/18 19:07","02/Dec/18 17:06","21/Oct/18 11:03"
PDFBOX-4352,PDFBOX,"NullPointerException in COSParser",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",Parsing,None,,"Fuzzing PDF loading with JQF triggered an NullPointerException.
java.lang.NullPointerException
 at org.apache.pdfbox.pdfparser.COSParser.parseDictionaryRecursive(COSParser.java:2920)
 at org.apache.pdfbox.pdfparser.COSParser.prepareDecryption(COSParser.java:2865)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:284)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:171)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Tilman Hausherr","Robin Schimpf",0,3,"17/Oct/18 19:08","02/Dec/18 17:06","17/Oct/18 19:57"
PDFBOX-4353,PDFBOX,"NullPointerException in PDFXrefStreamParser",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",Parsing,None,,"Fuzzing PDF loading with JQF triggered an NullPointerException.
java.lang.NullPointerException
 at org.apache.pdfbox.pdfparser.PDFXrefStreamParser.parse(PDFXrefStreamParser.java:95)
 at org.apache.pdfbox.pdfparser.COSParser.parseXrefStream(COSParser.java:2767)
 at org.apache.pdfbox.pdfparser.COSParser.parseXrefObjStream(COSParser.java:442)
 at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:392)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:254)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:171)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Tilman Hausherr","Robin Schimpf",0,4,"17/Oct/18 19:10","02/Dec/18 17:06","21/Oct/18 06:18"
PDFBOX-4354,PDFBOX,"NumberFormatException in COSParser",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",None,None,,"Fuzzing PDF loading with JQF triggered two NumberFormatExceptions in different places.
First exception:
java.lang.NumberFormatException: For input string: "1f"
 at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
 at java.lang.Long.parseLong(Long.java:589)
 at java.lang.Long.parseLong(Long.java:631)
 at org.apache.pdfbox.pdfparser.COSParser.bfSearchForObjStreams(COSParser.java:2052)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:287)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:171)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
Second exception:
java.lang.NumberFormatException: For input string: "am"
 at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
 at java.lang.Integer.parseInt(Integer.java:580)
 at java.lang.Integer.parseInt(Integer.java:615)
 at org.apache.pdfbox.pdfparser.COSParser.parseXrefTable(COSParser.java:2696)
 at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:326)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:254)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:171)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Andreas Lehmkühler","Robin Schimpf",0,3,"17/Oct/18 19:13","02/Dec/18 17:06","22/Oct/18 16:34"
PDFBOX-4355,PDFBOX,"PDFTextStripperByArea dies on Chinese/Japanese files",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",PDModel,type3,,"I'm using PDFTextStripperByArea, this code makes it die:
stripper.extractRegions(page);
Assuming, the language is Chinese or Japanese, that's the error:
===========
Oct 19, 2018 1:24:50 AM org.apache.pdfbox.pdmodel.font.PDFont getSpaceWidth
SEVERE: Can't determine the width of the space character, assuming 250
java.io.IOException: Unexpected end of stream
at org.apache.pdfbox.pdmodel.font.PDType3CharProc.getWidth(PDType3CharProc.java:170)
at org.apache.pdfbox.pdmodel.font.PDType3Font.getWidthFromFont(PDType3Font.java:165)
at org.apache.pdfbox.pdmodel.font.PDFont.getSpaceWidth(PDFont.java:547)
at org.apache.pdfbox.text.LegacyPDFStreamEngine.showGlyph(LegacyPDFStreamEngine.java:265)
at org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:734)
at org.apache.pdfbox.contentstream.PDFStreamEngine.showTextString(PDFStreamEngine.java:595)
=========
Should I use something else instead of PDFTextStripperByArea?
Let me know if more information needed. I attached the PDF file.output.pdf
====
To reproduce use the attached  above output.pdf and the standard PDFBox app:
 java -jar pdfbox-app-2.0.12.jar ExtractText output.pdf 
 ",0,"Tilman Hausherr","Ilya Kantor",0,3,"18/Oct/18 22:34","02/Dec/18 17:06","19/Oct/18 17:49"
PDFBOX-4356,PDFBOX,"Broken download link",Bug,CLOSED,Minor,Fixed,None,None,None,None,,"Here https://pdfbox.apache.org/download.html#20x
The link to source code [https://pdfbox.apache.org/[preferred]pdfbox/2.0.12/pdfbox-2.0.12-src.zip] is 404.",0,"Andreas Lehmkühler","Ilya Kantor",0,3,"19/Oct/18 05:46","19/Oct/18 15:32","19/Oct/18 15:32"
PDFBOX-4357,PDFBOX,"IllegalArgumentException "root cannot be null"",Bug,CLOSED,Major,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",PDModel,None,,"The above exception comes up when /Pages is null or resolves to COSNull, e.g. with the file from PDFBOX-4350. This needs to be checked after parsing to avoid it coming up later.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"20/Oct/18 16:28","02/Dec/18 17:06","20/Oct/18 17:13"
PDFBOX-4358,PDFBOX,"Prevent stack overflow in COSDictionary.toString()",Task,CLOSED,Minor,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",None,None,,"Do the same code in ioString for COSDictionary containing a COSArray as in PDFBOX-3514 to avoid an endless recursion.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"23/Oct/18 16:55","02/Dec/18 17:06","23/Oct/18 16:56"
PDFBOX-4359,PDFBOX,"Bad sizing of signature field inside rotated page",Bug,CLOSED,Major,Fixed,2.0.12,"2.0.13, 3.0.0 PDFBox",Signing,None,,"From Patrick Herber in the user mailing list:
I have some problems with the sizing of a signature field inside a rotated document page (90
degrees).
If instead of specifying the zoom factor (as in the CreateVisibleSignature example) I specify
the desired height and width of the signature, the resulting image has completely wrong dimensions:
visibleSignDesigner.xAxis(x).yAxis(y).height(height).width(width).adjustForRotation();
If the page is not rotated or if I remove the call to adjustForRotation() then the image is
correctly displayed (in case of rotated document of course rotated but with the correct proportions).
The problem is that adjustForRotation() is hard-coded for 200 x 100 size (zoomed at 50%).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"24/Oct/18 19:17","02/Dec/18 17:06","24/Oct/18 19:33"
PDFBOX-4360,PDFBOX,"ArrayIndexOutOfBoundsException in ASCIIHexFilter",Bug,CLOSED,Minor,Fixed,"1.8.16, 2.0.12","1.8.17, 2.0.13, 3.0.0 PDFBox",Parsing,None,,"Fuzzing PDF loading with JQF triggered an ArrayIndexOutOfBoundsException.
java.lang.ArrayIndexOutOfBoundsException: 172
 at org.apache.pdfbox.filter.ASCIIHexFilter.decode(ASCIIHexFilter.java:83)
 at org.apache.pdfbox.filter.Filter.decode(Filter.java:87)
 at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:77)
 at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:175)
 at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:163)
 at org.apache.pdfbox.pdfparser.PDFObjectStreamParser.<init>(PDFObjectStreamParser.java:55)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectStream(COSParser.java:977)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveCOSDictionary(COSParser.java:2277)
 at org.apache.pdfbox.pdfparser.COSParser.searchForTrailerItems(COSParser.java:2235)
 at org.apache.pdfbox.pdfparser.COSParser.rebuildTrailer(COSParser.java:2216)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:279)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:171)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Tilman Hausherr","Robin Schimpf",0,3,"25/Oct/18 16:54","02/Dec/18 17:06","26/Oct/18 16:20"
PDFBOX-4361,PDFBOX,"ArrayIndexOutOfBoundsException in COSParser",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, (1)",Parsing,None,,"Fuzzing PDF loading with JQF triggered an ArrayIndexOutOfBoundsException.
java.lang.ArrayIndexOutOfBoundsException: 4
 at org.apache.pdfbox.pdfparser.COSParser.bfSearchForObjStreams(COSParser.java:2035)
 at org.apache.pdfbox.pdfparser.COSParser.rebuildTrailer(COSParser.java:2213)
 at org.apache.pdfbox.pdfparser.COSParser.retrieveTrailer(COSParser.java:279)
 at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:171)
 at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:220)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1160)
 at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1057)
    ...
The Code used for fuzzing is
PDDocument.load(inputStream)",0,"Tilman Hausherr","Robin Schimpf",0,3,"25/Oct/18 16:56","02/Dec/18 17:06","25/Oct/18 17:36"
PDFBOX-4362,PDFBOX,"Create simple text extraction example",Task,CLOSED,Minor,Fixed,None,"2.0.13, (1)",Utilities,"beginner newbie",,"I always tell people who ask for a manual to "look in the examples in the source code download" but... ooops.... there is no simple text extraction example, only advanced ones, so I created a simple one. (The ExtractText source code is in another subproject, so it would be harder to find, and it is not simple enough for a newbie)",0,"Tilman Hausherr","Tilman Hausherr",0,2,"25/Oct/18 17:45","02/Dec/18 17:06","25/Oct/18 18:00"
PDFBOX-4363,PDFBOX,"[Patch] Add a common interface PDShadingPaint for all shading paints",Improvement,CLOSED,Minor,Fixed,2.0.12,"2.0.13, (1)",Rendering,None,,"The attached patch adds an common interface PDShadingPaint to all PDShading-based Paint's. It allows to access the underlying PDShading object and the matrix of the paint.
At the moment it is not possible to access this fields without using dirty accessibility hacks, see also this commit.
Why would you need that? I need that for my PdfBoxGraphics2D adapter. I draw PDF pages using PDFRenderer/PageDrawer back into a PDF. While doing so I derive from both classes and change / filter certain aspects of the PDF. One use case is to extract a specific seperation color into its own PDF page, remap it to another color and also draw some overfill (i.e. a additional border of 0.5pt around all shapes drawn with this color). This so prepared page is then used with a machine which glues foil (gold, silver or copper) on the places marked with that color.
You can look at an example here, it does not use a seperation color, but you should get the idea. 
My long term goal is to be able to use PDFBox for all possible pre-press PDF manipulations. E.g. changing/remapping colorspaces, resampling images to the target resolution, ...
At the moment I know of this "special cases" which will need a special treatment, as they are normally handled through rendering them first into a BufferedImage:
Transparency groups
Softmasks
Are there other places which resort to rendering to a BufferedImage first?",0,"Tilman Hausherr","Emmeran Seehuber",0,4,"28/Oct/18 16:00","21/Dec/18 12:26","04/Nov/18 07:57"
PDFBOX-4364,PDFBOX,"example AddValidationInformation fails with scratchfile error",Bug,CLOSED,Major,Fixed,"2.0.11, 2.0.12",2.0.13,Signing,None,,"The example signature.validation.AddValidationInformation fails with exception "Scratch file already closed" when we try to add the info to our certified file (enclosed).
The error occurs in AddValidationInformation.writeDataToStream(), line 421:
    OutputStream os = stream.createOutputStream(filters);
Reading discussion in PDFBOX-3984, we tried to use a new COSStream() instead of scratch file, ie changed line 417 to
     COSStream stream = new COSStream(); //document.getDocument().createCOSStream();
Then the example gets much further, but fails with same error in the final document.saveIncremental() call in AddValidationInformation.doValidation  (line 141).
  The same error occurs if we try the file multiSignatureBase.pdf from the PDFBOX-3984 issue ([^multi-Signature_Base.pdf)] 
so it doesn't seem to be a problem with our specific file.
Our calling code:
String rootFolder = "/home/papasmurf/Documents/pdf-examples/";
File inFile = new File(rootFolder + "ebox_certified_eutl.pdf");
File outFile = new File(rootFolder + "ebox_validationinfo_test.pdf");
AddValidationInformation validator = new AddValidationInformation();
validator.validateSignature(inFile, outFile);
  Eclipse output running the example:
Get Certificate from: http://q.ica.cz/2qca16_rsa.cer
Get Certificate from: http://r.ica.cz/rca15_rsa.cer
Get Certificate from: http://r.ica.cz/rca15_rsa.cer
Nonce: 04120410DD140ECDE05357A0A2F6E5001EDD9A7D
Exception in thread "main" java.io.IOException: java.io.IOException: Scratch file already closed
at org.apache.pdfbox.examples.signature.validation.AddValidationInformation.fetchCrlData(AddValidationInformation.java:330)
at org.apache.pdfbox.examples.signature.validation.AddValidationInformation.addRevocationDataRecursive(AddValidationInformation.java:248)
at org.apache.pdfbox.examples.signature.validation.AddValidationInformation.addRevocationData(AddValidationInformation.java:205)
at org.apache.pdfbox.examples.signature.validation.AddValidationInformation.doValidation(AddValidationInformation.java:136)
at org.apache.pdfbox.examples.signature.validation.AddValidationInformation.validateSignature(AddValidationInformation.java:88)
at com.tellustalk.javaworker.dss.SignPDF.main(SignPDF.java:233)
Caused by: java.io.IOException: Scratch file already closed
at org.apache.pdfbox.io.ScratchFile.checkClosed(ScratchFile.java:390)
at org.apache.pdfbox.io.ScratchFileBuffer.<init>(ScratchFileBuffer.java:78)
at org.apache.pdfbox.io.ScratchFile.createBuffer(ScratchFile.java:403)
at org.apache.pdfbox.cos.COSStream.createOutputStream(COSStream.java:221)
at org.apache.pdfbox.examples.signature.validation.AddValidationInformation.writeDataToStream(AddValidationInformation.java:421)
at org.apache.pdfbox.examples.signature.validation.AddValidationInformation.addCrlRevocationInfo(AddValidationInformation.java:377)
at org.apache.pdfbox.examples.signature.validation.AddValidationInformation.fetchCrlData(AddValidationInformation.java:315)
... 5 more
  Grateful for any insights,
    /rasmus ekman
 ",0,"Tilman Hausherr",rasmus,0,3,"29/Oct/18 18:11","02/Dec/18 17:06","30/Oct/18 18:29"
PDFBOX-4365,PDFBOX,"PDFDebugger: JComboBox does not take generic parameters in Java 1.6",Bug,CLOSED,Major,Fixed,"2.0.12, 2.0.13",2.0.13,"Swing GUI",generics,,"In the pdfbox-debugger/StreamPane.java:168 you are using generics with a JComboBox.
This causes a compile error when targeting JDK 1.6, as JComboBox does only take a generic parameter since 1.7 AFAIR. I assume that this code will not run on JDK 1.6, you may get it to compile with a JDK 1.7+ - but at least JDK 10 complains about this when compiling.",0,"Tilman Hausherr","Emmeran Seehuber",1,3,"30/Oct/18 09:49","02/Dec/18 17:06","30/Oct/18 18:28"
PDFBOX-4366,PDFBOX,"NullPointerException in PDButton.updateByValue() when appearance missing",Bug,CLOSED,Major,Fixed,2.0.12,"2.0.13, (1)",AcroForm,None,,"The file from the linked issue has no appearances, but Adobe Reader can work with it.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"02/Nov/18 16:13","02/Dec/18 17:06","02/Nov/18 19:32"
PDFBOX-4367,PDFBOX,"Error expected floating point number actual='18-5'",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, (1)","Text extraction",None,"mac os x","Able to repeat with command line.  Unfortunately, the only files that repeat this are from a customer, and contain sensitive information.  The file opens without error in Acrobat Reader and Mac Preview.  The desired result is that any corrupt portions of the PDF are skipped, so that we can use what text is extractable.
Unfortunately, I still get an error when using the -force option.
We get the following stack trace:
C02V390UHTD6:Downloads pjohnson$ java -jar pdfbox-app-2.0.12.jar ExtractText 16cccd9af5032a303774f7b87fb95076.pdf
Nov 02, 2018 10:04:54 AM org.apache.pdfbox.pdfparser.BaseParser parseCOSArray
WARNING: Corrupt object reference at offset 19727
Exception in thread "main" java.io.IOException: Error expected floating point number actual='18-5'
at org.apache.pdfbox.cos.COSFloat.<init>(COSFloat.java:78)
at org.apache.pdfbox.cos.COSNumber.get(COSNumber.java:110)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:947)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray(BaseParser.java:631)
at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:174)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:510)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:477)
at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
at org.apache.pdfbox.text.LegacyPDFStreamEngine.processPage(LegacyPDFStreamEngine.java:139)
at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:391)
at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:319)
at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:266)
at org.apache.pdfbox.tools.ExtractText.startExtraction(ExtractText.java:237)
at org.apache.pdfbox.tools.ExtractText.main(ExtractText.java:82)
at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:60)
Caused by: java.lang.NumberFormatException
at java.math.BigDecimal.<init>(BigDecimal.java:494)
at java.math.BigDecimal.<init>(BigDecimal.java:383)
at java.math.BigDecimal.<init>(BigDecimal.java:806)
at org.apache.pdfbox.cos.COSFloat.<init>(COSFloat.java:59)
... 14 more",0,"Tilman Hausherr","Peter Johnson",0,4,"02/Nov/18 17:11","02/Dec/18 17:06","08/Nov/18 18:49"
PDFBOX-4369,PDFBOX,"unsupported ExtractText -force option still appears in online 2.0 docs",Bug,CLOSED,Minor,Fixed,2.0.12,2.0.13,Documentation,None,,"The PDFBox 2.0 command line documentation still lists the -force option for the ExtractText command; however, that option doesn't appear to be supported anymore (see, e.g., PDFBOX-1151)",0,"Maruan Sahyoun","Lev E. Givon",0,3,"05/Nov/18 21:04","02/Dec/18 17:06","24/Nov/18 09:41"
PDFBOX-4371,PDFBOX,"Improve ExtractText utility so that it can extract rotated text automatically",Improvement,CLOSED,Major,Fixed,"2.0.12, (1)","2.0.13, (1)","Text extraction, (1)",None,,"In a first step, detect all rotations by analyzing the effective text rendering matrix. In a second step, do a text extraction for each rotation by prepending an appropriate transform to the page content stream (so that our text has angle == 0) and then filtering any rotated text. Test file: the file from PDFBOX-4368.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"08/Nov/18 07:48","02/Dec/18 17:06","09/Nov/18 18:58"
PDFBOX-4372,PDFBOX,"Stack overflow around PDFStreamEngine.processStream",Bug,CLOSED,Major,Fixed,"1.8.16, 2.0.12","1.8.17, (2)",PDModel,None,,"java.lang.StackOverflowError: null
    java.lang.ref.Finalizer.<init>(Unknown Source)
    java.lang.ref.Finalizer.register(Unknown Source)
    java.lang.Object.<init>(Unknown Source)
    java.util.zip.Inflater.<init>(Unknown Source)
    org.apache.pdfbox.filter.FlateFilter.decompress(FlateFilter.java:74)
    org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:50)
    org.apache.pdfbox.filter.Filter.decode(Filter.java:87)
    org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:77)
    org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:178)
    org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:166)
    org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getContents(PDFormXObject.java:144)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:495)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:478)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:187)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:70)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:506)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:478)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:187)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:70)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:506)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:478)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:187)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:70)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:506)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:478)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:187)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:70)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:506)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:478)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:187)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:70)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:506)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:478)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:187)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:70)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:506)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:478)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:187)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:70)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:506)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:478)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:187)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:70)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:506)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:478)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:187)
...
The cause is that one of the form XObjects has a resource entry but that is null. So in PDFStreamEngine the parent resources is used. This results that form Fm0, which has "/Fm0 Do", references itself.
The solution for now is to return an empty resouces instead of null when the key exists.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"08/Nov/18 17:18","02/Dec/18 17:06","08/Nov/18 17:29"
PDFBOX-4373,PDFBOX,"Add additional unit tests",Test,CLOSED,Minor,Fixed,2.0.12,"2.0.13, (1)","PDModel, (2)",None,,"I've ran JaCoCo over the pdfbox module, and found some functions that were missing unit test coverage.
I've written some unit tests for these functions and I would like to submit them.
The functions I've written tests for are:
org.apache.pdfbox.cos.COSObjectKey.compareToInput
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareToInput
org.apache.pdfbox.pdmodel.PageLayout.fromString
org.apache.pdfbox.pdmodel.PageMode.fromString
org.apache.pdfbox.pdmodel.PageMode.stringValue
org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent.fromString
org.apache.pdfbox.pdmodel.graphics.state.RenderingIntent.stringValue",0,"Tilman Hausherr","John Bergqvist",0,4,"09/Nov/18 12:31","02/Dec/18 17:06","13/Nov/18 20:31"
PDFBOX-4374,PDFBOX,"Switch from log4j to slf4j",Bug,CLOSED,Minor,Fixed,"2.0.12, (1)","2.0.13, (1)",Utilities,None,,"Hello,
I would be nice to use slf4j instead of relying explicitly on log4j. (slf4j.org)
There are adapters from slf4j to many logger implementations, one of them is log4j.
The decision of which log engine does not belong in a library, it belongs to the user of that library.
This was apparently done already by several Apache projects. Searching for slf4j in Jira shows Zookeeper, HBase, HDFS, Parquet, Cloudstack, Nemo, EmpireDB, Oozie, Hadoop, and many others.
 
I can offer a patch, I have done such migration before.
Thank you very much,
Mihai
 ",0,"Tilman Hausherr","Mihai Nita",0,3,"09/Nov/18 17:12","02/Dec/18 17:06","10/Nov/18 06:46"
PDFBOX-4375,PDFBOX,"Change visibility of Overlay#loadPDF to protected",Improvement,CLOSED,Minor,Fixed,2.0.12,"2.0.13, (1)",Utilities,Overlay,,"Overriding loadPDF allows subclasses to load overlays from sources different than File objects, for example from InputStreams or byte arrays (mostly through PDDocument.load overloads).
For example:
Overlay overlay = new Overlay() {
    @Override
    protected PDDocument loadPDF(String pdfName) throws IOException {
        return PDDocument.load(overlayStreams.get(pdfName));
    }
};",0,"Tilman Hausherr","Wiktor Kwapisiewicz",0,3,"09/Nov/18 20:19","02/Dec/18 17:06","12/Nov/18 07:22"
PDFBOX-4377,PDFBOX,"Verify CRL in AddValidation example",Bug,CLOSED,Minor,Fixed,2.0.12,"2.0.13, (1)",Signing,None,,"CRLs are signed and must be verified by the certificate issuer public key. This already done in my modification of the "cert" package from Apache CXF but not yet in the AddValidation example in CrlHelper.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"13/Nov/18 19:31","02/Dec/18 17:06","13/Nov/18 20:30"
PDFBOX-438,PDFBOX,"FlateFilter: endless loop because of missing length check (for encrypted pdfs)",Bug,CLOSED,Major,Fixed,0.8.0-incubator,0.8.0-incubator,PDModel,None,,"if mayRead is set to zero than following statement is executed endlessly:
while ((amountRead = decompressor.read(buffer, 0, Math.min(mayRead,BUFFER_SIZE))) != -1)
{ result.write(buffer, 0, amountRead); }
we just have to check that mayRead > 0 zero.",0,"Philipp Koch","Philipp Koch",0,0,"17/Mar/09 09:04","05/Mar/10 17:03","24/Mar/09 09:12"
PDFBOX-4381,PDFBOX,"Revocation CRL check should be done at signing time in AddValidation example",Bug,CLOSED,Major,Fixed,2.0.12,"2.0.13, (1)",Signing,None,,"crl.isRevoked(cert) in CRLHelper.java is not correct, a certificate could have been valid at signing time and be invalidated later, e.g. when an employee signs, but loses his card at the after-signing-party. The correct way to do it is in CRLVerifier.verifyCertificateCRLs().",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Nov/18 17:47","02/Dec/18 17:06","16/Nov/18 18:51"
PDFBOX-4383,PDFBOX,"PDFMergerUtility seems to leave source file open",Bug,CLOSED,Major,Fixed,2.0.12,"2.0.13, (1)",Utilities,None,,"Hi,
  Having migrated from 2.0.11 to 2.0.12. I am facing the following issue:
  When merging multiple pdf files into one, I can no longer delete the source files.
  Here is a sample code (worked in 2.0.11):
  public void mergePDFFiles(List<File> inFiles, File outFile)
    throws InvalidPasswordException, IOException
    {
        try (OutputStream out = new BufferedOutputStream(new FileOutputStream(outFile))) {
            PDFMergerUtility merger = new PDFMergerUtility();
            merger.setDestinationStream(out);
            for(File toMerge : inFiles) {
                merger.addSource(toMerge);
            }
            merger.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());
        }
    
        for(File f : inFiles) {
            // IOException thrown
            FileUtils.forceDelete(f);
        }
    }
Has something changed or do I do something wrong ?
  Br,
  David Schreck
 ",0,"Tilman Hausherr","David Schreck",1,3,"21/Nov/18 08:26","02/Dec/18 17:06","21/Nov/18 18:25"
PDFBOX-4384,PDFBOX,"PDF/A Document Validation out of memory",Bug,CLOSED,Major,Fixed,"2.0.8, 2.0.12","2.0.13, (1)",Preflight,None,,"Hi everyone,
validating a customer PDF file, using
document.validate()
we recognise that if the file itself has an enormous numbers of validation errors, the process goes to OutOfMemory and at the end the we get the GC error.
In our case the file has more than 550.000 errors. So we cannot go head with the conversion to PDF/A. 
To avoid this kind of error it could be useful to configure a max number of validation errors to stop the process if this value has been reached.
We cannot attach the original document, because it is a customer's file.",0,"Tilman Hausherr","Vincenzo Mangiapanel",1,4,"22/Nov/18 10:55","02/Dec/18 17:06","28/Nov/18 11:31"
PDFBOX-4390,PDFBOX,"ExtractText loses spaces when rotationMagic option is used",Bug,RESOLVED,Major,Fixed,"2.0.12, 2.0.13",2.0.14,"Text extraction",None,,"This was detected by looking at the result of a regression test thankfully done by Tim Allison (see at the end of PDFBOX-4371) for his work in TIKA-2779, there were many new words but some didn't have the spaces. This is the result of a bad angle (180 instead of 0), because the font matrix hasn't been considered, for type 3 fonts this is often a rotation or a flip.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"29/Nov/18 16:34","29/Nov/18 18:08","29/Nov/18 16:38"
PDFBOX-4391,PDFBOX,"Page to image rendering in pdfbox 2.0: Poor quality compared to 1.8",Bug,RESOLVED,Major,Fixed,2.0.13,2.0.14,Rendering,"antialias barcode im","windows 10","I have a process that needs to convert pages of pdf files to images to be able to detect barcodes.
Since I've upgrade to pdfbox 2.0 my barcodes are not correctly detected anymore.
I noticed the cause was the result of the page to image rendering implemented in pdfbox 2.0.
The quality of the image is really poor compared to pdfbox 1.8.
See the attached image (comparison.png):
On the left you have the image generated with pdfbox 2.0.13
On the right you have the image generated with pdfbox 1.8.16
We can clearly see the difference.
Both images were generated using the same resolution (200 dpi here):
For 2.0.13:
BufferedImage image = pdfRenderer.renderImageWithDPI(0, 200, ImageType.BINARY);
For 1.8.16:
PDPage page = (PDPage) pdfDocument.getDocumentCatalog().getAllPages().get(0);
BufferedImage image = page.convertToImage(BufferedImage.TYPE_BYTE_BINARY, 200);
Buffered images were both written to files using:
ImageIO.write(image, "png", file);    
I've attached the pdf file (barcode-128.pdf) and the generated images (barcode-image-2.0.13.png and barcode-image.1.8.16.png)
       ",0,"Tilman Hausherr","Olivier Masseau",0,3,"03/Dec/18 10:46","03/Dec/18 17:48","03/Dec/18 17:48"
PDFBOX-4392,PDFBOX,"PDF completely blow up the RAM on amazon instances",Bug,RESOLVED,Major,Fixed,2.0.12,"2.0.14, (1)",Rendering,None,,"Hi all
The issue is pretty straightforward. I receive a lot of pdfs every day and render them. In most of the cases everything is OK, but PDFs which produces 
WARN org.apache.pdfbox.pdmodel.graphics.color.PDICCBased - ICC profile is Perceptual, ignoring, treating as Display class
working super long, and are super memory consumable. 
It takes from 5 to 15 min on m5.large amazon instance. But attached PDF completely killed the instance. The java process is just killed by linux during processing with no exception in logs. 
So could you please provide explanations what is going on with files with WARN message above, and how can I improve the rendering. 
  Here is my VM options 
-Dorg.apache.pdfbox.rendering.UsePureJavaCMYKConversion=true -Xmx3G -Xms2G -Dsun.java2d.cmm=sun.java2d.cmm.kcms.KcmsServiceProvider"
Also don't hesitate to ask me about more PDF, I have tones of them
  And also a question, does GPU have influence on rendering?",0,"Tilman Hausherr","Oleksandr Skoryi",0,4,"03/Dec/18 11:16","09/Dec/18 13:37","09/Dec/18 13:37"
PDFBOX-4393,PDFBOX,"PDF signature invalid after second interactive field signed",Bug,RESOLVED,Major,Fixed,"2.0.12, 2.0.13","2.0.14, (1)",Signing,None,windows,"Hi guys,
I stumped on the problem with PDFBox and interactive field signing. I have PDF generated with OpenText StreamServe with two interactive fields for signing. See example 1 (streamserve_test_sig0.pdf) in attachement.
When I use Adobe Reader I can sign both of the visual fields just fine but when I use PDFBox to sign one of this field the following signature is marked as invalid. Doesn't matter if I use PDFbox or sign it manually with Adobe Reader See example 3: 
 streamserve_test_sig3.pdf (signed by PDFBox) - valid
 streamserve_test_sig3.signed.pdf (signed 2nd by Adobe Reader) - invalid
  Also last example - when it´s signed first by Adobe Reader and then with PDFBox the signature seems valid but it says the document was "certified". See example 2 (streamserve_test_sig2.pdf)
  What could be wrong? When is signed whole document with PDFBox it works just fine.
Thanks for response,
Martin
                   ",0,"Tilman Hausherr","Martin Klíma",0,3,"04/Dec/18 10:15","12/Dec/18 09:12","12/Dec/18 09:12"
PDFBOX-4394,PDFBOX,"Encrypt CLI default key length should be strong",Improvement,RESOLVED,Minor,Fixed,2.0.13,"2.0.14, (1)",Crypto,None,,"The default key length should be 256 and not 40.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"04/Dec/18 16:04","04/Dec/18 16:07","04/Dec/18 16:05"
PDFBOX-4395,PDFBOX,"Accent positioning in Type1 fonts",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",FontBox,"type1 type1font",,"When viewed in PDFBox Debugger, the accents in the attached PDFs are in wrong position.
I have a patch to fix this. The asb argument specifies the left side bearing of the accent glyph. It must be subtracted from the x coordinate.",0,"Tilman Hausherr","Jani Pehkonen",1,3,"04/Dec/18 19:32","04/Dec/18 21:19","04/Dec/18 21:19"
PDFBOX-4397,PDFBOX,"made enum fromString() less error-prone",Improvement,RESOLVED,Minor,Fixed,2.0.13,"2.0.14, (1)",None,enum,,"Patch proposed by TorstenF76: 
This is no major issue, but when I saw it, i could not leave it as it was. So many hard coded duplicate strings. Error-prone on new enum values.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/Dec/18 16:22","05/Dec/18 18:49","05/Dec/18 18:49"
PDFBOX-4399,PDFBOX,"Disabled optional content groups are rendered",Bug,RESOLVED,Major,Fixed,"2.0.6, 2.0.13","2.0.14, (1)",Rendering,OCGs,,"Printing a Documents with hidden optional content groups original.pdf renders hidden content printed.png. Code used to print
InputStream sourceStream = new FileInputStream(pFile);
try {
  PDDocument source = PDDocument.load(sourceStream);
  job.setPageable(new PDFPageable(source));
  job.print(atts);
} finally {
  sourceStream.close();
}
This is not only a problem of PDFBox but can be done right ... ghostscript does it gs.png.",0,"Tilman Hausherr","Stefan Ziel",1,4,"06/Dec/18 13:43","6 days ago","6 days ago"
PDFBOX-4400,PDFBOX,"jlink loading police.afm files",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",PDModel,jdk9,"java 1.11, jlink, windows, moditect","hello everybody,
  I've got a problem with this trace on jlink on java11 (it works without jlink)
  // Exception in thread "JavaFX Application Thread" java.lang.ExceptionInInitializerError
        at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.PDFont.<init>(PDFont.java:112)
        at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.PDType0Font.<init>(PDType0Font.java:176)
        at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:83)
        at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:146)
        at pdfbox@2.0.13/org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:60)
        at pdfbox@2.0.13/org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:848)
        at pdfbox@2.0.13/org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:503)
        at pdfbox@2.0.13/org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:477)
        at pdfbox@2.0.13/org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:150)
        at pdfbox@2.0.13/org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:254)
        at pdfbox@2.0.13/org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:245)
        at pdfbox@2.0.13/org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:179)
      
Caused by: java.lang.RuntimeException: java.io.IOException: org/apache/pdfbox/resources/afm/Courier-Bold.afm not found
        at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.Standard14Fonts.<clinit>(Standard14Fonts.java:97)
        ... 36 more
Caused by: java.io.IOException: org/apache/pdfbox/resources/afm/Courier-Bold.afm not found
        at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM(Standard14Fonts.java:134)
        at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM(Standard14Fonts.java:103)
        at pdfbox@2.0.13/org.apache.pdfbox.pdmodel.font.Standard14Fonts.<clinit>(Standard14Fonts.java:50)
        ... 36 more
  I think the problem comes from the fact that while using jlink the classpath does not exist and it need to be loaded by an another way that the classpath one.
  the path should look like something like :
// Path path = Paths.get(URI.create("jrt:/pdfbox/org/apache/resources/afm/police.afm"));
modules here is managed by moditect (maven plugin to help creating module-info descriptor) and contain all dependancies of the project",0,"Tilman Hausherr","kevin guerin",1,4,"07/Dec/18 16:26","12/Dec/18 16:47","12/Dec/18 08:32"
PDFBOX-4401,PDFBOX,"Fine-tune KCMS warning message + update documentation",Task,RESOLVED,Minor,Fixed,2.0.13,"2.0.14, (1)","Documentation, (1)",None,,"As shown in PDFBOX-4392 and in another issue I can't find, LCMS is no longer always as slow as if was before. My own regression tests now take about the same time regardless whether KCMS or LCMS is used. So the warning message is to be fine-tuned according to the java version-version, and the utilities no longer set KCMS - let the users decide and set their own or update.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"07/Dec/18 17:54","08/Dec/18 18:39","08/Dec/18 11:53"
PDFBOX-4404,PDFBOX,"Input streams passed to Font.createFont() are not always closed",Bug,RESOLVED,Major,Fixed,1.8.16,1.8.17,PDModel,None,,"streams passed to Font.createFont() should be closed unless they are ByteArrayInputStream. (Sadly, fixing this does not fix the problem mentioned in the linked SO issue).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"13/Dec/18 12:45","13/Dec/18 12:56","13/Dec/18 12:56"
PDFBOX-4406,PDFBOX,"PrintBookmarks does not support named destinations",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",Utilities,None,,"As shown by the linked post in the users mailing list and my response, named destinations are not supported in the above mentioned example, thus confusing users.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"16/Dec/18 07:16","16/Dec/18 08:49","16/Dec/18 08:49"
PDFBOX-4407,PDFBOX,"ParentTree Objects do not match KArray objects after merge",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",Utilities,StructureTree,,"After merging tagged documents together, the second page of the resulting document is no longer valid.  When the field objects are cloned in PDFMergerUtility, the new and old objects are stored in a map named objMapping.  This is used to replace the old references with the new references for the acroform, k array, and annotation list.  However the ParentTree is not updated to this new object reference.  This results in the K Array and the Parent Tree having different references to the same object.  This causes issues when using an a11y reader like Jaws, and also causes problems displaying the tags in Adobe DC.
Here is a failing unit test that was created in PDFMergerUtilityTest to demonstrate the issue.  It was created using an example from W3: https://www.w3.org/WAI/WCAG20/Techniques/working-examples/PDF3/reading-order.pdf
public void testStructureTreeMerge3() throws IOException
{
    PDFMergerUtility pdfMergerUtility = new PDFMergerUtility();
    PDDocument src = PDDocument.load(new File(SRCDIR, "reading-order.pdf"));
    PDDocument dst = PDDocument.load(new File(SRCDIR, "reading-order.pdf"));
    pdfMergerUtility.appendDocument(dst, src);
    src.close();
    dst.save(new File(TARGETTESTDIR, "reading-order-merged.pdf"));
    dst.close();

    PDDocument doc = PDDocument.load(new File(TARGETTESTDIR, "reading-order-merged.pdf"));
    assertTrue(checkAnnotationMatches(doc.getDocumentCatalog().getStructureTreeRoot().getKArray(), doc.getDocumentCatalog().getAcroForm().getFields(), (COSArray)doc.getDocumentCatalog().getStructureTreeRoot().getParentTree().getCOSObject().getDictionaryObject(COSName.NUMS)));
}
private boolean checkAnnotationMatches(COSArray kArray, List<PDField> acroformFields, COSArray numbersArray) {
    for (int i = 0; i < kArray.size(); i++) {
        COSBase entry = kArray.get(i);
        if (entry instanceof COSArray){
            COSArray entryAsArray = (COSArray) entry;
            if (!checkAnnotationMatches(entryAsArray, acroformFields, numbersArray)) {
                return false;
            }
        } else if (entry instanceof COSInteger) {
            //do nothing, just need to screen these out so next line doesn't blow up
        } else if (((COSObject) entry).getObject() instanceof COSDictionary){
            COSDictionary entryDictionary = (COSDictionary)((COSObject) entry).getObject();
            if (entryDictionary.getItem(COSName.K) != null) {
                COSBase kids = entryDictionary.getItem(COSName.K);
                if (kids != null) {
                    if (kids instanceof COSInteger) {
                        //do nothing, don't care about marked content tags
                    } else if (kids instanceof COSDictionary) {
                        COSDictionary kidsAsDictionary = (COSDictionary) kids;
                        if (!checkForMatches(kidsAsDictionary.getDictionaryObject(COSName.OBJ), acroformFields, numbersArray)) {
                            return false;
                        }
                    } else if (kids instanceof COSArray) {
                        COSArray kidsAsArray = (COSArray) kids;
                        if (!checkAnnotationMatches(kidsAsArray, acroformFields, numbersArray)) {
                            return false;
                        }
                    }
                }
            } else if (entryDictionary.getDictionaryObject(COSName.OBJ) != null) {
                if (!checkForMatches(entryDictionary.getDictionaryObject(COSName.OBJ), acroformFields, numbersArray)) {
                    return false;
                }
            }
        }
    }
    return true;
}
private boolean checkForMatches(COSBase objectReference, List<PDField> acroformFields, COSArray numbersArray) {
    boolean result = false;
    for (PDField field : acroformFields) {
        if (field.getCOSObject() == objectReference && numbersArray.indexOfObject(objectReference.getCOSObject()) > 0) {
            result = true;
        }
    }
    return result;
}",0,"Tilman Hausherr","Dan Anderson",0,3,"17/Dec/18 21:02","01/Jan/19 16:34","21/Dec/18 13:28"
PDFBOX-4408,PDFBOX,"Object StructParent property does not match entry in parent tree",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",Utilities,StructureTree,,"After merging 2 documents together, the parent tree entries for the second page do not match their expected key.  For the attached document you can look at the "Date you are available" field after the merge.  In the parent tree the second page field is located with key of 15.  However the object expects its key to be 21.  The /StructParent value is 21 but it should be 15.  This mismatch causes issues with a11y readers and the reading order in Adobe DC.
  The fields brought from the destination document are correct, but fields from the source document do not match.  They continue with the pattern, so the next field is located at key 16 but the /StructParent value is 22, 17 for 23, etc.",0,"Tilman Hausherr","Dan Anderson",0,3,"17/Dec/18 21:53","14/Jan/19 20:01","19/Dec/18 08:31"
PDFBOX-4413,PDFBOX,"Add support for AES256 encryption for public key",Improvement,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",Crypto,AES256,,"Adobe 9 added support for AES 256 encryption. This should also be implemented for public key encryption, currently it is only implemented for symmetric key encryption.
Further information is available at http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/adobe_supplement_iso32000.pdf.
I suspect that much of it is already available in the base class, but PublicKeySecurityHandler.prepareDocumentForEncryption() is definitively old stuff.",0,"Tilman Hausherr","Tilman Hausherr",0,3,"21/Dec/18 13:22","03/Jan/19 16:55","03/Jan/19 16:55"
PDFBOX-4415,PDFBOX,"Structure tree RoleMap isn't merged",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",Utilities,StructureTree,,"The RoleMap is a simple dictionary of names, so it is rather easy to do.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"27/Dec/18 19:31","27/Dec/18 19:45","27/Dec/18 19:45"
PDFBOX-4416,PDFBOX,"Structure tree IDTree isn't merged",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",Utilities,StructureTree,,"The IDTree is a name tree, which works (unlike the number tree). However the elements have kids (/K entry).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/Dec/18 13:16","12/Jan/19 18:42","30/Dec/18 09:42"
PDFBOX-4417,PDFBOX,"Merged file has several structure trees",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",Utilities,StructureTree,,"Something goes wrong with all the cloning. The result file has a StructTreeRoot at objects 8, 697 and 730. And there is also the "COSStream has been closed and cannot be read" exception (PDFBOX-3999) if one closes the source before saving.
If the close is removed the current tests pass, so the tests are not yet complete.
Merging 001031.pdf (file from FDA) with itself also brings an orphan check error.
Merging 054080.pdf (file also at https://pubs.usgs.gov/wdr/wdr-sc-04/wy04/pdfs/02148000.2004.sw.pdf ) with itself also shows two StructTreeRoot dictionaries (and no other failing test, despite the commits related to 001031.pdf ).",0,"Tilman Hausherr","Tilman Hausherr",0,2,"28/Dec/18 14:38","08/Jan/19 18:13","30/Dec/18 09:07"
PDFBOX-4418,PDFBOX,"ParentTree can't be merged if it has several levels",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",Utilities,StructureTree,,"Related to fixing PDFBOX-4003 - a number tree can have several levels. Currently the merge code expects a NUMS array, but it can also have KIDS. So the code must be changed so that it uses the new convenience class to handle a number tree in full. See also code comment
//TODO this code only works with flat number trees.
// It should be a PDNumberTreeNode, but that class is broken because
// COSBase can't be instanciated and because the tree elements can
// be an array or a dictionary
// example of file with /Kids: 000153.pdf 000208.pdf 000314.pdf 000359.pdf 000671.pdf
// from digitalcorpora site",0,"Tilman Hausherr","Tilman Hausherr",0,2,"01/Jan/19 07:45","01/Jan/19 09:46","01/Jan/19 09:46"
PDFBOX-4419,PDFBOX,"Merging doesn't consider MarkInfo properly",Bug,RESOLVED,Minor,Fixed,2.0.13,"2.0.14, (1)",Utilities,"MarkInfo StructureTr",,"See "Entries in the mark information dictionary". There are three boolean entries; if we merge, we should set each entry to true if one of the sources is true.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"01/Jan/19 09:45","01/Jan/19 10:08","01/Jan/19 10:08"
PDFBOX-4420,PDFBOX,"Correct javadoc comment",Improvement,RESOLVED,Trivial,Fixed,"1.8.16, (6)","1.8.17, (2)","Documentation, (1)",None,,"Found a strange class referenced in the
https://pdfbox.apache.org/docs/2.0.13/javadocs/org/apache/pdfbox/preflight/Validator_A1b.html
  >This class is a simple main class used to check the validity of a pdf file. Usage : java >net.awl.edoc.pdfa.Validator <file path>
  Should be:
This class is a simple main class used to check the validity of a pdf file.
Usage : java org.apache.pdfbox.preflight.Validator_A1b  <file path>
       ",0,"Tilman Hausherr",Lonzak,0,3,"02/Jan/19 16:03","02/Jan/19 19:23","02/Jan/19 19:23"
PDFBOX-4422,PDFBOX,"PDF with OutputIntent with alternative colorspace with incorrect component count validates",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",Preflight,None,,"as reported by "a20god", copied from linked VeraPDF issue:
==
The Alternate entry of the output intent's DestOutputProfile (which is not to be ignored in PDF/A-1, in contrast to PDF/A-2)
is a device color space which violates 6.2.3.3 (DeviceCMYK vs. RGB output intent)
does not have the same number of components as the ICC profile (4 vs. 3), see PDF Reference 1.4 Table 4.16.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"03/Jan/19 20:27","04/Jan/19 19:10","04/Jan/19 18:38"
PDFBOX-4423,PDFBOX,"Merge test checkWithNumberTree() fails when widget has no StructParent",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",Utilities,"StructureTree merge",,"I tried merging a large amount of digitalcorpora files and it failed immediately in checkWithNumberTree(). I narrowed it down to a single file - that one has fields with widgets with no StructParent. PDFBox returns these as "0" which would be a valid number. These getters should return -1 instead and callers should check the result.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"05/Jan/19 11:08","05/Jan/19 14:16","05/Jan/19 14:16"
PDFBOX-4429,PDFBOX,"Bogus /StructParent(s) entries are kept when merging with file that has a structure tree",Bug,RESOLVED,Major,Fixed,2.0.13,"2.0.14, (1)",Utilities,StructureTree,,"Some files have /StructParent(s) entries but no structure tree. When these are merged with a file that has a structure tree, a subsequent checkWithNumberTree() test will fail. So there should be a cleanup. This is important mostly for testing of merging random files.",0,"Tilman Hausherr","Tilman Hausherr",0,2,"10/Jan/19 07:05","10/Jan/19 21:03","10/Jan/19 21:03"
PDFBOX-443,PDFBOX,"Wrong length in stream decoding after exception (results in endless loop)",Bug,CLOSED,Major,Fixed,0.8.0-incubator,1.0.0,Parsing,None,,"When reading streams from PDF files PDFBox may get stuck and don't return. This happens for instance if a stream with FlateDecode filter is read but flate decoder is unable to read encoded data.
The reason is that in COSStream in method doDecode(COSName, int) the filter is first applied using length specified by PDF and in case of an error the filter is applied with length parameter set to 'writtenLength'. However 'writtenLength' is read from unfilteredStream which was newly created in first try - so written length is 0 which results in some endless loop in flate decoder.
The solution: read written length before first try and (in case we have several filter) make sure that writtenLength is not 0.
The fixed method:
private void doDecode( COSName filterName, int filterIndex ) throws IOException
{
FilterManager manager = getFilterManager();
Filter filter = manager.getFilter( filterName );
InputStream input;
boolean done = false;
IOException exception = null;
long position = unFilteredStream.getPosition();
long length = unFilteredStream.getLength();
long writtenLength = unFilteredStream.getLengthWritten(); // TB: in case we need it later
if( length == 0 )
{ //if the length is zero then don't bother trying to decode //some filters don't work when attempting to decode //with a zero length stream. See zlib_error_01.pdf unFilteredStream = new RandomAccessFileOutputStream( file ); done = true; }
else
{
//ok this is a simple hack, sometimes we read a couple extra
//bytes that shouldn't be there, so we encounter an error we will just
//try again with one less byte.
for( int tryCount=0; !done && tryCount<5; tryCount++ )
{
try
{ input = new BufferedInputStream( new RandomAccessFileInputStream( file, position, length ), BUFFER_SIZE ); unFilteredStream = new RandomAccessFileOutputStream( file ); filter.decode( input, unFilteredStream, this, filterIndex ); done = true; }
catch( IOException io )
{ length--; exception = io; }
}
if( !done )
{
//if no good stream was found then lets try again but with the
//length of data that was actually read and not length
//defined in the dictionary
length = writtenLength;
if( length != 0 )
{
for( int tryCount=0; !done && tryCount<5; tryCount++ )
{
try
{ input = new BufferedInputStream( new RandomAccessFileInputStream( file, position, length ), BUFFER_SIZE ); unFilteredStream = new RandomAccessFileOutputStream( file ); filter.decode( input, unFilteredStream, this, filterIndex ); done = true; }
catch( IOException io )
{ length--; exception = io; }
}
}
}
}
if( !done )
{ throw exception; }
}",0,"Andreas Lehmkühler","Timo Boehme",0,0,"19/Mar/09 09:49","18/May/12 16:52","18/May/12 16:51"
PDFBOX-4434,PDFBOX,"Create flexible CheckBox and RadioButtons example",Improvement,RESOLVED,Major,Fixed,None,"2.0.14, (1)",AcroForm,None,,"Create an example with a checkbox and an example with radio buttons including an appearance stream. Some time in the future, the AP creation logic could be reused to be integrated / called by PDButton.updateByValue().",0,"Tilman Hausherr","Tilman Hausherr",0,2,"5 days ago","5 days ago","5 days ago"
PDFBOX-447,PDFBOX,"Image Convert Issue",Bug,CLOSED,Major,Fixed,0.8.0-incubator,2.0.0,Utilities,None,"ubuntu, java 1.6","The converted image is far from perfect, may be some one can explain what is source of this problem ?",0,"Andreas Lehmkühler","Wildan Maulana",0,3,"31/Mar/09 11:08","17/Mar/16 19:08","04/Aug/13 09:57"
PDFBOX-451,PDFBOX,"PDFImageWriter does not convert chinese PDF correctly",Bug,CLOSED,Major,Fixed,0.8.0-incubator,2.0.0,Utilities,None,"windows xp, java 1.5","i am using PDFImageWriter to write a Chinese PDF to jpeg file. The jpeg files do not contain the Chinese characters, instead it contains series of boxes. The Chinese PDF used is present in PDFBox\test\pdfparser\genko_oc_shiryo1.pdf",0,"Andreas Lehmkühler","rahul patil",0,2,"02/Apr/09 13:44","02/Oct/13 18:19","02/Oct/13 18:19"
PDFBOX-46,PDFBOX,"Support XFA form submitting","New Feature",CLOSED,,Fixed,None,1.8.0,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1166672
Originally submitted by benlitchfield on 2005-03-19 14:02.
PDFBox currently support FDF and XFDF to populate an
AcroForm, the 7.0 version of designer does not support
either of these as a submission type. The possiblities
are
XDP/XFA/Full PDF/url encoded params
There is alreadu an open RFE for XDP, this is for the
XFA format.
See this thread for a discussion of this topic
https://sourceforge.net/forum/message.php?
msg_id=3043621
Ben",0,"Andreas Lehmkühler",Anonymous,0,1,"19/Mar/05 22:02","02/May/13 02:30","02/Feb/13 18:30"
PDFBOX-461,PDFBOX,"Disable javadoc creation timestamp",Improvement,CLOSED,Trivial,Fixed,None,0.8.0-incubator,None,None,,"I'm optimizing the automatic generation and deployment of the PDFBox web site, and there is a "Generated by javadoc on ..." comment in all the generated javadoc files that makes them appear as modified even if no other content is the file is changed. I'd like to set up a regexp replace rule that drops this comment from the generated javadoc files.",0,"Jukka Zitting","Jukka Zitting",0,0,"04/May/09 09:41","21/Oct/09 09:52","04/May/09 09:57"
PDFBOX-463,PDFBOX,"Not able to list fields",Bug,CLOSED,Critical,"Cannot Reproduce",0.7.3,None,AcroForm,None,"windows xp, java 1.6","I am trying to list form fields using the following code. There is no issue for a few PDF documents but for some I am getting the error - java.lang.NullPointerException.
String pdfSource = "SIMPLE IRA App 1.828247.101 & Ret Acct Customer Agmt 1.830486.102 – as of 6-6-08.pdf";
try {
FileOutputStream outputObj;
PrintStream outputFile;
String fileName = pdfSource.replace(".","_") + ".txt";
outputObj = new FileOutputStream(fileName);
outputFile = new PrintStream(outputObj);
PDDocument document = PDDocument.load(pdfSource);
try {
if (document.isEncrypted())
{ document.decrypt(""); }
} catch (Exception e)
{ System.out.println("Failed to decrypt document #"); }
List list = document.getDocumentCatalog().getAcroForm().getFields();
PDField pdfield;
for (int i = 0; i < list.size(); i++)
{ pdfield = (PDField) list.get(i); String fldName = pdfield.getPartialName(); outputFile.println(fldName); }
document.close();
outputFile.close();
} catch (Exception e)
{ System.out.println("Error!" + e); }
Please let me know what the issue is.",0,"Andreas Lehmkühler","Venkatesh Prasad",0,1,"07/May/09 11:08","07/Feb/11 07:23","07/Feb/11 07:23"
PDFBOX-464,PDFBOX,"Prepare PDFBox for release",Improvement,CLOSED,Blocker,Fixed,0.8.0-incubator,0.8.0-incubator,None,None,,"To prepare PDFBox for release we have to check on the build-process (directory structure, targets etc.) and to check that everything is according to the Apache policies.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"11/May/09 05:22","21/Oct/09 10:28","08/Sep/09 06:48"
PDFBOX-465,PDFBOX,"invalid date formats",Bug,CLOSED,Major,Fixed,0.8.0-incubator,"1.8.3, 2.0.0",Parsing,None,,"This is with the latest from svn, Revision: 773978
From a sample of 13304 pdf documents generated in a very wide variety of ways, I got 94 invalid date formats,
It seems that all of these have the stack trace of,
Caused by: java.io.IOException: Error converting date:Friday, July 11, 2008
at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:240)
at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:120)
at org.apache.pdfbox.cos.COSDictionary.getDate(COSDictionary.java:783)
at org.apache.pdfbox.pdmodel.PDDocumentInformation.getCreationDate(PDDocumentInformation.java:218)
at message_analyzer.extractor.PDFExtractor.getContent(PDFExtractor.java:50)
Some examples of invalid dates are,
20070430193647+713'00'
Tue Aug 21 10:35:22 2007
Tuesday, November 04, 2008
200712172:2:3
Unknown
20090319 200122
9:47 5/12/2008
i don't think there is any hope of parsing all these date formats. If would be nice if this was not a fatal error, and the parser could continue without a creation date.
Is the policy of pdfbox to be as forgiving as possible when reading pdf documents? Maybe toCalendar should return a new Calendar() if parsing fails, rather than throwing.",0,"Andreas Lehmkühler","Sean Bridges",0,1,"12/May/09 18:06","30/Nov/13 17:02","11/Nov/13 18:52"
PDFBOX-469,PDFBOX,"q command not supported",Bug,CLOSED,Major,"Won't Fix",0.8.0-incubator,None,None,None,,"This is with svn version 773978
I have several files which fail with sections like,
endobj
187 0 obj
<</ProcSet[/PDF/Text]
/Font<</F0 7 0 R
/F1 12 0 R
>>
/XObject<<>>
>>
endobj
q
3 0 obj
<</CreationDate (D:20050222175042)
/Producer (PDFlib 3.02 (ActiveX/Win32))
>>
endobj
They fail due to the "q" line. I think this is a directive to save the current graphics state, as described in 4.3.1 of the PDF Reference, V 1.7
The exception stack trace is,
Caused by: java.io.IOException: Error: Expected an integer type, actual='q'
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1197)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:459)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:169)
at message_analyzer.extractor.PDFExtractor.getContent(PDFExtractor.java:32)
Adding the code,
else if(peekedChar == 'q' || peekedChar == 'Q')
{ pdfSource.read(); skipSpaces(); }
around line 434 in the parseObject() method of PDFParser seems to fix it.",0,"Andreas Lehmkühler","Sean Bridges",0,1,"13/May/09 00:05","18/May/12 16:50","18/May/12 16:50"
PDFBOX-479,PDFBOX,"loading a CUPS-generated PDF results in RasterExceptions",Bug,CLOSED,Major,Fixed,0.8.0-incubator,1.7.0,"Parsing, (2)",None,"java 1.6, java 1.5","I've generated a PDF with cups (a testpage) and when I try to load this PDF with the recently checked out version of PDFBox,
I get RasterExceptions because there are filters active on the inline images.
I've removed the filters in the pdf and then I can open it without errors but I also get an empty page.
Note: the pdf works with the pdf-renderer on dev.java.net and the reader of Adobe.",0,"Andreas Lehmkühler","Tim Boven",0,0,"24/May/09 18:34","29/May/12 16:21","04/Jul/11 17:50"
PDFBOX-481,PDFBOX,"renaming a field and not able to set value to the saved PDF document ...",Bug,CLOSED,Major,"Not A Problem",0.7.3,None,AcroForm,None,"windows xp, java 1.6","I will explain what I want to do.
1. I have a PDF Document with Fields and let us call this 'Source_Original.PDF'. The field names in this PDF document have to be renamed and stored as 'Source_Target.PDF'. I then have to set/change the values of form-fields in 'Source_Target.PDF'.
The issue I am facing is given below:
1. I renamed the form fields in 'Source_Original.PDF" using the code given in my earlier mail (below) and saved it as 'Source_Target.PDF'.
2. I checked the form fields in 'Source_Target.PDF" and form-fields were renamed correctly.
3. However when I tried to set/change values of form-fields in 'Source_Target.PDF' using PDFBox code, I was not able to do so.
I used iText to set/change values of form-fields in 'Source_Target.PDF' and was successful. But we want to use only PDFBox.
To summarize - We are not able to set/change values of form fields of a PDF Document whose form-fields have been renamed. There is no issue if the form-fields are renamed manually using Adobe Acrobat 9. The issue is only
when the form-fields are renamed using PDFBox option - setPartialName(newFieldName);
> Only to be sure, changing values in 'Source_Original.PDF' works with the same code you use to
> manipulate 'Source_Target.PDF'??
Yes
I have attached the 2 files - "Source_Original.PDF' and 'Source_Target.PDF',
----- Code
try
{
PDDocument pdfDocument = PDDocument.load(pdfSource);
try
{
if (pdfDocument.isEncrypted())
{ pdfDocument.decrypt(""); }
PDDocumentCatalog docCatalog = pdfDocument.getDocumentCatalog();
PDAcroForm acroForm = docCatalog.getAcroForm();
if (acroForm != null)
{
List pdfFields = acroForm.getFields();
if (pdfFields != null)
{
PDField pdfField;
for (int i = 0; i < pdfFields.size(); i++)
{
pdfField = (PDField) pdfFields.get;
String fieldName = pdfField.getPartialName();
if( pdfFieldNames.containsKey(fieldName) )
{ String newFieldName = (String) pdfFieldNames.get(fieldName); pdfField.setPartialName(newFieldName); }
}
pdfDocument.save(pdfOutput);
} else
{ return "No Acro Form Fields found in PDF Document " + pdfSource + "!"; }
} else
{ return "PDF document " + pdfSource + " not able to access!"; }
} catch (Exception e)
{ return "PDF Document " + pdfSource + " is encrypted! Cannot process."; }
pdfDocument.close();
} catch (Exception e)
{ return "PDF Document " + pdfSource + " cannot be found!"; }",0,"Andreas Lehmkühler","Venkatesh Prasad.B.K",0,1,"05/Jun/09 13:23","15/Oct/14 10:27","15/Oct/14 10:27"
PDFBOX-484,PDFBOX,"Spaces, numbers and some letters not display correctly",Bug,CLOSED,Major,Fixed,0.8.0-incubator,2.0.0,"Swing GUI",None,"java 1.5, mac os x","Hello,
Many characters in the attached PDF are displayed wrong as you can see in the result.png.
Especially numbers and spaces are not displayed correctly. Sometimes I can see
the numbers, sometimes not. I could not find out the reason yet.
Perhaps someone already had this problem and can help me with that?!
To display the PDF I use the following code:
PDDocument document = parseDocument(file);
List pages = document.getDocumentCatalog().getAllPages();
PDPage page = (PDPage)pages.get(0);
Image pageImage = page.convertToImage();
ImageIcon imageicon = new ImageIcon(pageImage);
documentPanel.add(new JLabel(imageicon));
The problem occurs when I convert the PDF to an image but also when I show
it in a PDPagePanel.
Thank you very much
Marco Siefert",0,"Andreas Lehmkühler","Marco Siefert",0,1,"17/Jun/09 15:17","17/Mar/16 19:08","11/Aug/13 17:38"
PDFBOX-488,PDFBOX,"Invalid memory access of location 00000000 eip=968f5aa7 (MAC OS X)",Bug,CLOSED,Critical,Fixed,0.8.0-incubator,2.0.0,Rendering,None,"mac os x, java 1.5, java 1.6","Hi,
when I open the document test.pdf (attached to this issue) the application crashes and throws errors.
In the Debugger I can see the following message at the end:
Invalid memory access of location 00000000 eip=968f5aa7
In the logfile there are some errors like:
22.06.2009 16:17:26 org.apache.pdfbox.util.operator.SetNonStrokingColor process
WARNUNG: Not supported colorspace Pattern within operator scn
22.06.2009 16:17:26 org.apache.pdfbox.pdmodel.graphics.color.PDColorSpaceInstance createColor
SCHWERWIEGEND: java.io.IOException: Not implemented
or
22.06.2009 16:17:26 org.apache.pdfbox.util.operator.pagedrawer.FillNonZeroRule process
WARNUNG: Not implemented
I get the error with Java 5 and 6.
On a Windows machine the error doesn't occur.
Other PDFs are working expect the one that I mentioned in issue PDFBox-484 where I have some display problems.
Does someone know a workaround for this "Invalid memory access" error?
Regards
Marco",0,"John Hewson","Marco Siefert",0,3,"22/Jun/09 14:29","17/Mar/16 19:08","27/May/14 07:23"
PDFBOX-489,PDFBOX,"Show single pages instead of all","New Feature",CLOSED,Minor,Fixed,0.8.0-incubator,0.8.0-incubator,"Swing GUI",None,,"The PDFReader always shows all pages of a document. It would be better if it shows one after the other.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"05/Jul/09 11:17","21/Oct/09 10:28","05/Jul/09 11:26"
PDFBOX-49,PDFBOX,"Setting a value on a PDRadioCollection fails",Bug,CLOSED,,Duplicate,None,None,PDModel,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1178663
Originally submitted by mystikspiral on 2005-04-07 09:15.
If a PDRadioCollection is instantiated for a group of radio
buttons that have no default value selected, the setValue
call fails when the PDCheckbox.getOnValue() method is
invoked. If the same group of Radio Buttons is modified
so that one of them is the default selection, the code
executes without error and the value is set successfully.
Simplified Example (See attached file):
Field: Applicant.Gender
Export Value 1: Male
Export Value 2: Female
PDRadioCollection Gender
theForm.getField(Applicant.Gender);
Gender.setValue("Male"); <--Exception Thrown
Thanks.
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
The fix that you describe uses a try catch NPE block, I would
like to try to come up with a better solution. I don't see that
file on the FTP site, can you try to upload it again.
Ben
[comment on SourceForge]
Originally sent by mystikspiral.
Logged In: YES
user_id=1245859
This issue is resolved as well, with no additional code
change. After I implemented a resolution to Bug 1178668,
this issue went away. So it would seem that the lack of a
default value was not the true cause of the error, more it was
the processing of the kids as that default value was searched
for.
[comment on SourceForge]
Originally sent by mystikspiral.
Logged In: YES
user_id=1245859
Uploading file to ftp.pdfbox.org
called "RadioButtons_NoDefault.pdf" because the upload as
an attachment to this report failed beacause the size
restrictions were exceeded.
Sorry for any confusion.",0,"Andreas Lehmkühler",Anonymous,0,0,"07/Apr/05 16:15","08/Feb/11 19:18","02/Dec/10 22:33"
PDFBOX-490,PDFBOX,"Pdf Printing of text from embedded fonts",Bug,CLOSED,Major,Fixed,0.8.0-incubator,2.0.0,FontBox,None,"windows xp, java 1.6","When printing from utility PrintPdf, text is rendered in the wrong typeface. The correct typeface is embedded within the PDF (Embedded Subset) as a TrueType font with an ANSI encoding. It may be noted that the AcroFields in a Courier typeface render correctly.",0,"Andreas Lehmkühler","Steve Poling",22,16,"07/Jul/09 04:27","17/Mar/16 19:08","24/Jul/13 19:30"
PDFBOX-491,PDFBOX,"Problem with printing pdf document having chinese characters",Bug,CLOSED,Major,Fixed,0.7.3,None,Rendering,None,"windows xp, java 1.4, java 1.5","We are getting the following exception.
java.awt.print.PrinterIOException
at org.pdfbox.pdmodel.PDPage.print(PDPage.java:745)
at sun.print.RasterPrinterJob.printPage(Unknown Source)
at sun.print.RasterPrinterJob.print(Unknown Source)
at sun.print.RasterPrinterJob.print(Unknown Source)
at com.foursoft.PDF_PrinterJob.main(PDF_PrinterJob.java:42)
Caused by: java.io.IOException: Unknown encoding for 'UniGB-UCS2-H'
at org.pdfbox.encoding.EncodingManager.getEncoding(EncodingManager.java:82)
at org.pdfbox.pdmodel.font.PDFont.getEncoding(PDFont.java:612)
at org.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:466)
at org.pdfbox.util.PDFStreamEngine.showString(PDFStreamEngine.java:325)
at org.pdfbox.util.operator.ShowText.process(ShowText.java:64)
at org.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:452)
at org.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:215)
at org.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:174)
at org.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:104)
at org.pdfbox.pdmodel.PDPage.print(PDPage.java:741)
... 4 more",0,"Andreas Lehmkühler",varaprasad,0,3,"07/Jul/09 07:30","15/Oct/14 10:31","15/Oct/14 10:31"
PDFBOX-494,PDFBOX,"Addtional CMap files from adobe",Improvement,CLOSED,Major,Fixed,None,1.3.1,None,None,,"Due some restrictions in the license of the cmap files from adobe (see LEGAL-36) we have to remove them from svn. A standard package is already available by download [1]. But there are still some additional cmap files left in svn which have to be removed. Most of them are included in the packages I found on [2] and [3].
[1] http://repo2.maven.org/maven2/com/adobe/pdf/pcfi/2009.06.14/pcfi-2009.06.14.jar
[2] ftp://ftp.oreilly.com/pub/examples/nutshell/cjkv/adobe/
[3] http://www.adobe.com/devnet/opentype/archives/glyphlist.txt",0,"Jukka Zitting","Andreas Lehmkühler",0,0,"16/Jul/09 05:38","26/Oct/10 09:33","03/Sep/10 10:33"
PDFBOX-497,PDFBOX,"COSVisitorException: The handle is invalid",Bug,CLOSED,Major,Invalid,0.8.0-incubator,None,PDModel,None,windows,"If I save a PDF document in a method of an application class, I get a COSVisitorException: The handle is invalid.
--------------------------------------------------------------------------------------------------
I found that I no longer get this exception if I do not close the
PDDocument "DrawingDoc" in the method "addDrawing".
However, I do get a warning:
java.lang.Throwable: Warning: You did not close the PDF Document
at org.apache.pdfbox.cos.COSDocument.finalize(COSDocument.java:391)
at java.lang.ref.Finalizer.invokeFinalizeMethod(Native Method)
at java.lang.ref.Finalizer.runFinalizer(Finalizer.java:83)
at java.lang.ref.Finalizer.access$100(Finalizer.java:14)
at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:160)
Alan
--------------------------------------------------
From: "Alan Thomas" <jalanthomas@verizon.net>
Sent: Monday, July 27, 2009 6:13 AM
To: <pdfbox-users@incubator.apache.org>
Subject: Re: COSVisitorException: The handle is invalid
> It was created by adding pages from other PDF documents, like below.
>
> Is there anything wrong with returning a PDDocument from the method
> addDrawing like I am doing?
>
>
> Alan
>
> PDDocument OutputDoc = null;
> . . .
>
> OutputDoc = new PDDocument();
> . . .
> copyPage(OutputDoc, page);
> . . .
> OutputDoc = addDrawing(OutputDoc,
> DrawingsDir.getName(), Barcode);
> . . .
> finally
> {
> try
> {
> // Save and close the output file
> if (OutputDoc != null)
>
{ > System.out.println("OutPath = " + OutPath); > OutputDoc.save(OutPath); > }
> OutputDoc.close();
> . . .
>
> using these methods I created:
>
> private void copyPage( PDDocument doc, PDPage page) throws Exception
>
{ > PDPage imported = doc.importPage(page); > imported.setCropBox(page.findCropBox()); > imported.setMediaBox(page.findMediaBox()); > imported.setResources(page.findResources()); > imported.setRotation(page.findRotation()); > }
>
> private PDDocument addDrawing( PDDocument OutDoc, String
> DrawingsDirName,
> String barcode)
> {
> PDDocument DrawingDoc = null;
>
> try
> {
> . . .
> List pages = DrawingDoc.getDocumentCatalog().getAllPages();
>
> for (Object obj : pages)
>
{ > PDPage page = (PDPage)obj; > copyPage(OutDoc, page); > }
> }
> catch (Exception e)
>
{ > e.printStackTrace(); > }
> finally
> {
> try
>
{ > DrawingDoc.close(); > return OutDoc; > }
> catch (Exception e)
>
{ > return OutDoc; > }
> }
> }
>
>
> --------------------------------------------------
> From: "Andreas Lehmkühler" <andreas@lehmi.de>
> Sent: Monday, July 27, 2009 5:15 AM
> To: <pdfbox-users@incubator.apache.org>
> Subject: Re: COSVisitorException: The handle is invalid
>
>> Hi Alan,
>>
>> how did you create your pdf?
>>
>> BR
>> Andreas Lehmkühler
>>
>> ----- original Nachricht --------
>>
>> Betreff: COSVisitorException: The handle is invalid
>> Gesendet: Mo, 27. Jul 2009
>> Von: Alan Thomas<jalanthomas@verizon.net>
>>
>>> Hi. When I save a PDF document in my application, I get a
>>> COSVisitorException: "The handle is invalid".
>>>
>>> However, I do not see anything wrong with it. I show the error,
>>> the
>>> string I am giving the PDDocument.save() method, and the code that
>>> attempts
>>> to save the file.
>>>
>>> Any idea what I am doing wrong? Thanks, Alan
>>>
>>> OutPath = C:\Users\Alan\Documents\My Stuff\X Y Z Stuff\Application\Java
>>> App
>>> Test\New Folder\InsertedPages 2.pdf
>>>
>>> org.apache.pdfbox.exceptions.COSVisitorException: The handle is invalid
>>> at
>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:939)
>>> at org.apache.pdfbox.cos.COSStream.accept(COSStream.java:201)
>>> at org.apache.pdfbox.cos.COSObject.accept(COSObject.java:206)
>>> at
>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:430)
>>> at
>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:361)
>>> at
>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:768)
>>> at
>>> org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:361)
>>> at
>>> org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1070)
>>> at
>>> org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:787)
>>> at
>>> org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:768)
>>>
>>>
>>> // Save and close the output file
>>> if (OutputDoc != null)
>>>
{ >>> System.out.println("OutPath = " + OutPath); >>> OutputDoc.save(OutPath); >>> }
>>> OutputDoc.close();
>>>
>>
>> — original Nachricht Ende ----
>>
>>
>",0,"Andreas Lehmkühler","James A. Thomas",0,1,"28/Jul/09 19:38","15/Oct/14 10:34","15/Oct/14 10:34"
PDFBOX-499,PDFBOX,"Maven pom.xml & directory structure incorrect for the FontBox 0.8-incubating release",Task,CLOSED,Critical,Fixed,0.8.0-incubator,1.0.0,FontBox,None,,"The version number in the pom.xml for the FontBox 0.8-incubating release is incorrectly set to "0.8.0-incubator" rather than "0.8.0-incubating"
Also the directory structure in the maveb2 repo is also incorrect:
http://repo1.maven.org/maven2/org/apache/pdfbox/fontbox/0.8.0-incubator/
..it should be
http://repo1.maven.org/maven2/org/apache/pdfbox/fontbox/0.8.0-incubating/
I believe this needs a new releass to fix this.",0,"Jukka Zitting","Niall Pemberton",0,0,"02/Aug/09 16:02","22/Feb/10 18:27","25/Sep/09 09:54"
PDFBOX-5,PDFBOX,"CJK decoding","New Feature",CLOSED,,Fixed,None,1.7.0,"Text extraction",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=765686
Originally submitted by bguan on 2003-07-03 17:57.
Another feature I need a lot is the correct interpretation
of CJK encoding.
Yes, I know PDF can be a pain when it comes to
correctly interpreting CJK charsets, as many factors are
involved, including whether a font (or its subset) is
embeded or not.
Attached is a simple Korean PDF that so far has not
been correctly interpreted by any java based
opensource libraries. Though it could be rendered
correctly by XPDF on linux and also Windows.
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552835&aid=765686&file_id=80181
CJK.zip (), 142061 bytes
CJK PDF, output and test program
[comment on SourceForge]
Originally sent by bguan.
Logged In: YES
user_id=815589
Hello Ben,
Thanks for the response. I just downloaded PDFBox 0.6.5 and
wrote a little sample program to test it against 3 CJK PDF files
I have, and the output is still no good. I have attached my
sample program, the 3 PDFs and the output in the attached
zip file.
Can you tell me what I am foing wrong?
The PDF files were generated by using Adobe Acrobat 5.0
using embeded fonts I believe.
Thank you.
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
There was no attachment with this. I have done some CJK
work in the 0.6.5 release. Please attach the document and I
can take a look at it.(Make sure you check the 'attach file'
checkbox)
Ben",0,"Andreas Lehmkühler",Anonymous,0,0,"04/Jul/03 00:57","29/May/12 16:21","06/Nov/11 16:42"
PDFBOX-500,PDFBOX,"Maven pom.xml & directory structure incorrect for the JempBox 0.8-incubating release",Task,CLOSED,Major,Fixed,0.8.0-incubator,1.0.0,JempBox,None,,"The version number in the pom.xml for the JempBox 0.8-incubating release is incorrectly set to "0.8.0-incubator" rather than "0.8.0-incubating"
Also the directory structure in the maveb2 repo is also incorrect:
http://repo1.maven.org/maven2/org/apache/pdfbox/jempbox/0.8.0-incubator/
..it should be
http://repo1.maven.org/maven2/org/apache/pdfbox/jempbox/0.8.0-incubating/
I believe this needs a new releass to fix this.",0,"Jukka Zitting","Niall Pemberton",0,0,"02/Aug/09 16:05","22/Feb/10 18:27","21/Oct/09 09:45"
PDFBOX-501,PDFBOX,"Open a trueType Font PDF, content become square box",Bug,CLOSED,Major,Fixed,0.7.3,2.0.0,"Swing GUI",None,"windows xp","Dear all,
I tried to open a PDF file generated by crystal report XI 3.1. The font is using Courier New. All the content becomes a square. What can I do ?
Regards,
Gabriel.",0,"Andreas Lehmkühler","Gabriel Luk",1,2,"03/Aug/09 07:09","17/Mar/16 19:07","04/Aug/13 10:03"
PDFBOX-506,PDFBOX,"PDFBox can't parse PDF documents from jstor.org",Bug,CLOSED,Major,Fixed,None,1.3.1,None,None,,"The academic repository JStor makes papers available via PDF format. The PDFs give this origin information:
Content creator: JstorPdfGenerator v1.0
PDF producer: iText 2.0.6 (by lowagie.com)
These PDFs open fine in Acrobat, Preview, FoxIt, etc., but they throw an exception in PDFBox:
Exception in thread "main" java.io.IOException: Error: Expected to read '%%EOF' instead started reading '1'
at org.apache.pdfbox.pdfparser.BaseParser.readExpectedString(BaseParser.java:1005)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:456)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:172)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:739)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:706)
at org.apache.pdfbox.PDFDebugger.parseDocument(PDFDebugger.java:393)
at org.apache.pdfbox.PDFDebugger.readPDFFile(PDFDebugger.java:369)
at org.apache.pdfbox.PDFDebugger.main(PDFDebugger.java:355)
I traced through the code, and it appears that PDFBox rejects these because they contain a 'startxref' that is not followed by a %%EOF two lines later:
...
startxref
613364
1 0 obj
...
Here's a small patch that will accept files that are missing the EOF after the startxref:
Index: src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java
===================================================================
— src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java (revision 802578)
+++ src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java (working copy)
@@ -453,11 +453,9 @@
{
parseStartXref();
//verify that EOF exists
String eof = readExpectedString( "%%EOF" );
if( eof.indexOf( "%%EOF" )== -1 && !pdfSource.isEOF() )
{
throw new IOException( "expected='%%EOF' actual='" + eof + "' next=" + readString() +
" next=" +readString() );
+ int c = pdfSource.peek();
+ if (c == '%') { + readExpectedString("%%EOF"); }
isEndOfFile = true;
}",0,"Adam Nichols","Dave Engberg",1,1,"19/Aug/09 19:29","26/Oct/10 09:33","27/Aug/10 16:34"
PDFBOX-507,PDFBOX,"[PATCH] Option to disable close warning in finalizer of COSDocument.",Improvement,CLOSED,Major,Fixed,0.8.0-incubator,0.8.0-incubator,None,None,,"I'm using PDFBox in a FOP plug-in to embed PDF documents. The PDF images are cached in memory through soft references. Therefore I do not know exactly when the COSDocument needs to be closed. I do close it in the holder's finalize() method but the garbage collector sometimes calls the COSDocument's finalizer before I have a chance to close it myself. With this patch I'd like to introduce an option that lets me disable the warning and do a close() in the finalizer in any case. I do think that the warning can be helpful for newbies (closing early is a good idea when that's possible) but the warning to System.err is a problem in my case.
If noone objects within 72 hours, I'm happy to apply the patch myself.",0,"Jeremias Maerki","Jeremias Maerki",0,0,"20/Aug/09 08:15","21/Oct/09 09:52","28/Aug/09 13:08"
PDFBOX-51,PDFBOX,"PDFToImage fails to render correctly",Bug,CLOSED,,Fixed,None,0.8.0-incubator,Parsing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1180840
Originally submitted by the_limper on 2005-04-11 08:56.
PDPage.convertToImage() fails to work correctly.
Attached are two documents that illustrate failures.
1) mtxfidelity.pdf is a file that has the text appear
but the layout is incorrect.
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1180840&file_id=129420
mtxFidelity.pdf (application/pdf), 4585 bytes
simple PDF file
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1180840&file_id=129421
test.pdf (application/pdf), 70518 bytes
another file with rendering issues
[comment on SourceForge]
Originally sent by abruegl.
Logged In: YES
user_id=1229585
I would love to use this library for this use only. If this
class and method worked (seems to work ok on 1/3 of many
pdfs I have tested) I would be very happy, and would most
likey be filling out a donation form.
[comment on SourceForge]
Originally sent by the_limper.
Logged In: YES
user_id=1252642
2) test.pdf is a file where the layout is correct but the
text is displayed as empty squares",0,"Andreas Lehmkühler",Anonymous,0,0,"11/Apr/05 15:56","21/Oct/09 09:52","01/Feb/09 11:13"
PDFBOX-510,PDFBOX,"Should be able to extract text from "Owner password" protected pdf file without specifing "owner password"?",Wish,CLOSED,Major,Invalid,0.8.0-incubator,None,"Text extraction",None,,"Hi team,
Technically, we can do extract text from "Owner" password protected pdf file
without specifing "owner" password. Right?
Do we should be able to do that ? or not.
The reason why I'm asking is I am using the PDFBox for audting the content
of the pdf file.
So, whether the user want to make "text extract" permission disabled or not,
I need to look into the content of the "owner password" protected pdf file.
Old PDFbox could do this.
What do you think?
Takashi",0,"Andreas Lehmkühler","Takashi Komatsubara",0,1,"31/Aug/09 11:09","13/Oct/14 10:37","13/Oct/14 10:37"
PDFBOX-511,PDFBOX,"JVM crash in PDColorSpaceInstance.createColor()",Bug,CLOSED,Critical,Fixed,0.7.3,0.8.0-incubator,PDModel,None,java,"Similar to PDFBOX-488, the JVM (here JDK 1.6 on Windows XP) crashes when PDFBox tries to create a java.awt.Color instance with some specific ICC profile. The root cause of the problem is a low-level bug in the JVM (most likely http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6645513), but it would be really good if PDFBox could work around that issue or at least throw a normal exception in troublesome cases instead of crashing the entire JVM.
See below for the relevant parts of the crash report.
#
An unexpected error has been detected by Java Runtime Environment:
#
EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x6d17205d, pid=1512, tid=1324
#
Java VM: Java HotSpot(TM) Client VM (11.3-b02 mixed mode windows-x86)
Problematic frame:
C [cmm.dll+0x205d]
#
If you would like to submit a bug report, please visit:
http://java.sun.com/webapps/bugreport/crash.jsp
The crash happened outside the Java Virtual Machine in native code.
See problematic frame for where to report the bug.
#
--------------- T H R E A D ---------------
Current thread (0x492f6800): JavaThread "pool-3-thread-11" [_thread_in_native,
id=1324, stack(0x4aa40000,0x4aa90000)]
siginfo: ExceptionCode=0xc0000005, writing address 0x00000008
Registers:
EAX=0x001cc20b, EBX=0x4aa8eda0, ECX=0x00000000, EDX=0x6d19c88c
ESP=0x4aa8ed34, EBP=0x4aa8edc0, ESI=0x4aa8ed6c, EDI=0x00000003
EIP=0x6d17205d, EFLAGS=0x00010246
Top of Stack: (sp=0x4aa8ed34)
0x4aa8ed34: 00000008 000000ff 4aa8ee34 73a6ef68
0x4aa8ed44: 790739f0 5577e7e0 00000000 00000000
0x4aa8ed54: 00000000 00000000 00000000 7dff9f58
0x4aa8ed64: 5d29bb60 7e87fca0 00000000 00000000
0x4aa8ed74: 00000000 00000000 00000000 565bff20
0x4aa8ed84: 618b6ca0 618b6d50 581b1ed8 00000000
0x4aa8ed94: 00000000 00000000 00000000 00000003
0x4aa8eda4: 6d173f79 00000000 3ff00000 0000000f
Instructions: (pc=0x6d17205d)
0x6d17204d: 83 c4 14 89 06 e8 e8 34 02 00 83 7d 1c 00 8b 0e
0x6d17205d: 89 41 08 74 0e 8b 45 f8 8b 34 30 85 f6 74 04 8b
Stack: [0x4aa40000,0x4aa90000], sp=0x4aa8ed34, free space=315k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C [cmm.dll+0x205d]
C [cmm.dll+0x40f1]
C [cmm.dll+0x435e]
C [cmm.dll+0x1ff75]
C [cmm.dll+0x20413]
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J sun.awt.color.CMM.cmmCombineTransforms([Lsun/awt/color/ICC_Transform;Lsun/awt/color/ICC_Transform;)I
J java.awt.color.ICC_ColorSpace.toRGB([F)[F
J java.awt.Color.<init>(Ljava/awt/color/ColorSpace;[FF)V
J org.apache.pdfbox.pdmodel.graphics.color.PDColorSpaceInstance.createColor()Ljava/awt/Color;
J org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(I)V
J org.apache.pdfbox.util.operator.pagedrawer.FillNonZeroRule.process(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V
J org.apache.pdfbox.util.PDFStreamEngine.processOperator(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V
J org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V
j org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V+419
J org.apache.pdfbox.util.PDFStreamEngine.processOperator(Lorg/apache/pdfbox/util/PDFOperator;Ljava/util/List;)V
J org.apache.pdfbox.util.PDFStreamEngine.processSubStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V
j org.apache.pdfbox.util.PDFStreamEngine.processStream(Lorg/apache/pdfbox/pdmodel/PDPage;Lorg/apache/pdfbox/pdmodel/PDResources;Lorg/apache/pdfbox/cos/COSStream;)V+39
j org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(Ljava/awt/Graphics;Lorg/apache/pdfbox/pdmodel/PDPage;Ljava/awt/Dimension;)V+57
j org.apache.pdfbox.pdmodel.PDPage.convertToImage()Ljava/awt/image/BufferedImage;+107",0,"Jukka Zitting","Jukka Zitting",0,0,"31/Aug/09 17:37","21/Oct/09 09:52","14/Sep/09 11:46"
PDFBOX-514,PDFBOX,"maven pom's do not include source artifacts",Improvement,CLOSED,Major,Fixed,0.8.0-incubator,1.0.0,"FontBox, (1)",None,,"For pdfbox, fontbox, and jempbox I have added the following lines to my POM's. This way when eclipse adds them to my classpath it also picks up the source.
Essentially the following lines tell maven that when running a maven:install to also jar up the source files and include those in the distribution.
<plugins>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-source-plugin</artifactId>
<executions>
<execution>
<id>attach-sources</id>
<goals>
<goal>jar</goal>
</goals>
</execution>
</executions>
</plugin>
</plugins>",0,"Jukka Zitting","Yonas Jongkind",0,1,"06/Sep/09 07:50","22/Feb/10 18:27","21/Oct/09 09:48"
PDFBOX-518,PDFBOX,"ArrayIndexOutOfBoundsException in PDInlinedImage.java",Bug,CLOSED,Minor,Fixed,0.8.0-incubator,0.8.0-incubator,PDModel,None,,"I can't post a sample PDF, but the trace is:
java.lang.ArrayIndexOutOfBoundsException
at java.lang.System.arraycopy(Native Method)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDInlinedImage.createImage(PDInlinedImage.java:171)
at org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage.process(BeginInlineImage.java:57)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:510)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:223)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:182)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:92)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:686)",0,"Daniel Wilson","Andrew Duffy",0,0,"08/Sep/09 13:09","21/Oct/09 09:52","12/Sep/09 18:04"
PDFBOX-521,PDFBOX,"Improved PDF Text Extraction that notes paragraph boundaries",Improvement,CLOSED,Major,Fixed,0.8.0-incubator,1.4.0,Parsing,None,,"The current behavior of the org.apache.pdfbox.util.PDFTextStripper class is to ignore paragraph demarcation in the text. It basically just renders each line of text as it discovers it, separating each line equally with the same line separator.
This makes it difficult to identify paragraph (or even page) starts and stops in the extracted text. This is often necessary for text processing that needs to work with logical 'chunks' of text. Further, rendering into other formats (such as HTML or XML) is facilitated by resolving the document into more discrete logical text chunks.
The request here is for improved text extraction that provides more discrete instrumentation of the parsing, allowing one to identify / tag paragraph starts and stops.",0,"Andreas Lehmkühler","Mel Martinez",2,5,"08/Sep/09 17:45","20/Dec/10 09:38","16/Dec/10 16:35"
PDFBOX-523,PDFBOX,"IndexOutOfBoundsException in SetNonStrokingICCBasedColor",Bug,CLOSED,Major,Fixed,0.8.0-incubator,0.8.0-incubator,PDModel,None,,"java.lang.IndexOutOfBoundsException: Index: 3, Size: 3
at java.util.ArrayList.RangeCheck(ArrayList.java:547)
at java.util.ArrayList.get(ArrayList.java:322)
at org.apache.pdfbox.util.operator.SetNonStrokingICCBasedColor.process(SetNonStrokingICCBasedColor.java:50)
at org.apache.pdfbox.util.operator.SetNonStrokingSeparation.process(SetNonStrokingSeparation.java:95)
at org.apache.pdfbox.util.operator.SetNonStrokingColor.process(SetNonStrokingColor.java:84)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:510)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:223)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:182)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:92)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:686)",0,"Daniel Wilson","Andrew Duffy",0,0,"08/Sep/09 22:44","21/Oct/09 09:52","10/Sep/09 19:20"
PDFBOX-524,PDFBOX,"Drop LoggingObject",Improvement,CLOSED,Minor,Fixed,None,0.8.0-incubator,None,None,,"The current LoggingObject base class breaks the "composition over inheritance" principle. A more standard logging pattern is to use a separate logger instance:
private static final Log log = LogFactory.getLog(ThisClass.class);",0,"Jukka Zitting","Jukka Zitting",2,0,"11/Sep/09 13:10","21/Oct/09 09:52","14/Sep/09 13:03"
PDFBOX-526,PDFBOX,"Add ability to read encrypted file & write unencrypted flie","New Feature",CLOSED,Major,Fixed,1.0.0,1.0.0,"PDModel, Writing",None,,"Currently, the COSWriter determines whether or not to use encryption, which makes sense, however there's no way to tell it you don't want to use encryption. So if you open an encrypted document, there's no way to write out an unencrypted document (you can write out a document without a password, but it'll still be encrypted). This means that encrypted documents can't be merged even if the password is known.
I have a patch which will allow writing out unencrypted documents. By default it'll work as it did before, but there's a new function which can be called to mark the document to be written out with no protection. I'll upload the patch soon.",0,"Jukka Zitting","Adam Nichols",0,0,"11/Sep/09 19:21","22/Feb/10 18:27","10/Feb/10 18:21"
PDFBOX-530,PDFBOX,"Forward test logs to a log file",Improvement,CLOSED,Minor,Fixed,None,0.8.0-incubator,None,None,,"As discussed on the mailing list, it would be nice to have the log output of the PDFBox test cases written to a file instead of printed to the console.",0,"Jukka Zitting","Jukka Zitting",0,0,"14/Sep/09 14:55","21/Oct/09 09:52","14/Sep/09 15:06"
PDFBOX-532,PDFBOX,"getPageLabels method for PDocumentCatalog class.",Improvement,CLOSED,Minor,Fixed,None,1.0.0,PDModel,None,,"I had a requirement for adding page labels (See PDF Reference
(http://www.adobe.com/devnet/acrobat/pdfs/PDF32000_2008.pdf, page 374
(12.4.2 Page Labels). Since PDFBox does not have this functionality
currently. I ended up implementing it.
The code contains on public method getPageLabels(), which should become a part of the PDDocumentCatalog API. This method returns an array of page labels. The array size corresponds to the number of pages in the document.",0,"Jukka Zitting","Navendu Garg",0,1,"16/Sep/09 15:31","22/Feb/10 18:28","10/Feb/10 19:00"
PDFBOX-535,PDFBOX,".Net Binaries required for PDFBox 0.8.0 incubator","New Feature",CLOSED,Minor,Fixed,0.8.0-incubator,0.8.0-incubator,None,None,"windows xp, windows","I need the .net version of PDFBox 0.8.0 incubator as it is available for previous version and we were using it but version 7.3 does handles pdf version 1.5 and now I have seen that it has been resolved (PDFBOX-361) for V0.8.0. so kindly provide .Net Binaries for the release PDFBox 0.8.0 incubator, so that I could be able to get rid of this error for my solution.",0,"Andreas Lehmkühler","Rana Zubair",0,0,"01/Oct/09 15:18","18/May/12 15:36","18/May/12 15:36"
PDFBOX-54,PDFBOX,"please correct the SetField example",Bug,CLOSED,,Fixed,"1.8.5, 1.8.6, 2.0.0","1.8.6, 2.0.0",Writing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1182270
Originally submitted by nobody on 2005-04-13 07:51.
Hi, at last I understand what is wrong with
org.pdfbox.examples.fdf.setField example - my file is
encripted but there wasn't code for decryption please
add it there for the other developers.
Ilya
private void setField( String[] args ) throws
IOException, COSVisitorException
{
PDDocument pdf = null;
try
{
if( args.length != 3 )
{ usage(); }
else
{
SetField example = new SetField();
pdf = PDDocument.load( args[0] );
PrintFields exporter = new PrintFields();
if( pdf.isEncrypted() )
{
try
{ pdf.decrypt( "" ); }
catch ( CryptographyException e )
{ System.err.println( "Error: The document is encrypted." ); usage(); }
catch( InvalidPasswordException e )
{ System.err.println( "Error: The document is encrypted." ); usage(); }
}
example.setField( pdf, args[1], args[2] );
pdf.save( args[0] );
}
}
finally
{
if( pdf != null )
{ pdf.close(); }
}
}",0,"Tilman Hausherr",Anonymous,0,1,"13/Apr/05 14:51","22/Jun/14 14:34","09/Jun/14 19:37"
PDFBOX-542,PDFBOX,"Support for Adobe CFF/Type2 fonts","New Feature",CLOSED,Major,Fixed,0.8.0-incubator,1.0.0,"FontBox, (1)",None,,"PDFBox should support embedded font types, most prominently the Adobe CFF/Type2 (aka Type1C) font type. The desired functionality includes both glyph metrics (for PDF text extraction using org.apache.pdfbox.util.PDFTextStripper) and glyph painting (for PDF rendering using org.apache.pdfbox.pdfviewer.PageDrawer).
I have implemented the basics of Adobe CFF/Type2 font specification. If the other project members find my work substantial, I would like to see it incorporated into FontBox/PDFBox projects. Please see the attached patch files.
Design considerations. A PDF FontFile3 stream can be parsed into CFFFont objects by class CFFParser. CFFFont contains a map of glyph names to Type2 charstrings, which can be converted to Type1 charstrings by class CharStringConverter and rendered by class CharStringRenderer. Glyph metrics is attained by formatting the result as AFM by class AFMFormatter, which plugs nicely with existing PDFBox infrastructure. Glyph painting is attained by formatting the result as PostScript Type1 font by class Type1FontFormatter, which can be loaded via java.awt.Font#createFont(int, InputStream).
The current implementation does not support synthetic CFF fonts nor CID-keyed CFF fonts. Also, the conversion of certain Type2 features (stemming, hinting, flex) is missing.",0,"Andreas Lehmkühler","Villu Ruusmann",1,1,"17/Oct/09 06:44","02/May/13 02:29","09/Feb/10 07:04"
PDFBOX-543,PDFBOX,"Document the dependencies of PDFBox",Task,CLOSED,Minor,Fixed,0.8.0-incubator,1.8.8,Documentation,None,,"Please document the jar dependencies of PDFBox by differencing between compile time, test and runtime dependencies.
e.g. http://commons.apache.org/beanutils/dependencies.html",0,"Maruan Sahyoun","Lars Torunski",1,6,"17/Oct/09 09:07","13/Dec/14 14:14","14/Oct/14 17:12"
PDFBOX-544,PDFBOX,"Improved module structure",Improvement,CLOSED,Major,"Not A Problem",0.8.0-incubator,None,FontBox,None,,"The development and maintenance of font formats would be easier if the FontBox project would be modularized so that every font format is contained in a separate sub-module. Consider different requirements for build- and/or run-time dependencies, Java language features, release schedule etc.
Since FontBox uses Maven2 as its software project management and comprehension tool, the modularization activity itself is pretty straightforward:
*) Change the current /pom.xml to proper parent POM.
*) For every subdirectory under /src/main/java/org/apache/fontbox create a separate subdirectory, create a child POM file into it and copy over all the relevant files.
*) Establish module interdependencies. For example, the 'ttf' sub-module would depend on 'cmap' and 'encoding' sub-modules, the 'cff' sub-module would depend on 'afm' sub-module and so on. There doesn't seem to be any blocking cyclic interdependencies.",0,"Andreas Lehmkühler","Villu Ruusmann",0,0,"17/Oct/09 21:13","02/May/13 02:29","04/Dec/11 14:16"
PDFBOX-545,PDFBOX,"Switch PDFBox build to Maven",Improvement,CLOSED,Major,Fixed,None,1.0.0,None,None,,"As discussed on the mailing list, I'm planning to switch the PDFBox build to use Maven instead of Ant.",0,"Jukka Zitting","Jukka Zitting",0,0,"21/Oct/09 11:08","22/Feb/10 18:28","09/Feb/10 01:21"
PDFBOX-556,PDFBOX,"Performance regression from 0.7.3 to 0.8.0",Improvement,CLOSED,Major,"Won't Fix",0.8.0-incubator,None,Parsing,None,,"After upgrading from version 0.7.3 to 0.8.0 our pdf indexing for lucene takes a lot longer than expected.
E.g. a single pdf needs 1150ms to be indexed compared to 750ms with version 0.7.3 ==> +50%
My first thought was that more pdfs are indexed or even indexed correctly with 0.8.0. But that shouldn't be an impact more than 50%.
Profiling with YourKit shows that a lot of time is spent in the method BaseParser.readUntilEndStream and it's invocation of cmpCircularBuffer. Maybe somebody find out how to improve the performance here.
The method readUntilEndStream handles endobj tags in the stream also which impacts of course the performance, but this is OK.",0,"Andreas Lehmkühler","Lars Torunski",0,2,"08/Nov/09 09:02","18/May/12 15:35","18/May/12 15:35"
PDFBOX-558,PDFBOX,"PDPageDestination getPageNumber only returns page number when underlying COSArray has a page number",Improvement,CLOSED,Minor,Fixed,0.8.0-incubator,1.0.0,PDModel,None,,"When a PDPagesDestinatin has a page referenced, getPageNumber returns (as specified) -1.
In contrast other PD-Objects like PDOutlineItem are more "user-friendly" findDestinationPage resloves thze stored reference. In my attached patch I added code to getPageNumber to return the page number for referenced PDPages too.
PDFBox Developers: Submit it to the code base if this fits the idea of the PD-classes.",0,"Jukka Zitting","Wulf Berschin",1,0,"11/Nov/09 11:07","22/Feb/10 18:28","09/Feb/10 00:15"
PDFBOX-559,PDFBOX,"PDChoiceField.setValue() does not always work when the choices are not pairs",Bug,CLOSED,Major,"Cannot Reproduce",1.0.0,None,AcroForm,None,,"I have a PDF that appears to work in Adobe Reader, but for some reason the choices include both strings and pairs. The following code change allows this mixed case to be supported, and also seems to clean up the code a bit.
If you could apply this as a patch in the trunk I would be grateful.
$ svn diff src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDChoiceField.java
Index: src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDChoiceField.java
===================================================================
--- src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDChoiceField.java (revision 832877)
+++ src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDChoiceField.java (working copy)
@@ -63,37 +63,34 @@
         }
         else
         {
-            COSBase option = options.getObject( 0 );
-            if( option instanceof COSArray )
-            {
-                for( int i=0; i<options.size() && indexSelected == -1; i++ )
-                {
-                    COSArray keyValuePair = (COSArray)options.get( i );
-                    COSString key = (COSString)keyValuePair.getObject( 0 );
-                    COSString value = (COSString)keyValuePair.getObject( 1 );
-                    if( optionValue.equals( key.getString() ) || optionValue.equals( value.getString() ) )
-                    {
-                        //have the parent draw the appearance stream with the value
-                        super.setValue( value.getString() );
-                        //but then use the key as the V entry
-                        getDictionary().setItem( COSName.getPDFName( "V" ), key );
-                        indexSelected = i;
-                    }
-                }
-            }
-            else
-            {
-                for( int i=0; i<options.size() && indexSelected == -1; i++ )
-                {
-                    COSString value = (COSString)options.get( i );
-                    if( optionValue.equals( value.getString() ) )
-                    {
-                        super.setValue( optionValue );
-                        indexSelected = i;
-                    }
-                }
-            }
+               for( int i=0; i<options.size() && indexSelected == -1; i++ ) {
+                       COSBase option = options.getObject( i );
+                       if( option instanceof COSArray )
+                       {
+                               COSArray keyValuePair = (COSArray)option;
+                               COSString key = (COSString)keyValuePair.getObject( 0 );
+                               COSString value = (COSString)keyValuePair.getObject( 1 );
+                               if( optionValue.equals( key.getString() ) || optionValue.equals( value.getString() ) )
+                               {
+                                       //have the parent draw the appearance stream with the value
+                                       super.setValue( value.getString() );
+                                       //but then use the key as the V entry
+                                       getDictionary().setItem( COSName.getPDFName( "V" ), key );
+                                       indexSelected = i;
+                               }
+                       }
+                       else
+                       {
+                               COSString value = (COSString)option;
+                               if( optionValue.equals( value.getString() ) )
+                               {
+                                       super.setValue( optionValue );
+                                       indexSelected = i;
+                               }
+                       }
+               }
         }
+
         if( indexSelected == -1 )
         {
             throw new IOException( "Error: '" + optionValue + "' was not an available option.");",0,"Andreas Lehmkühler","Yonas Jongkind",0,1,"11/Nov/09 22:58","15/Oct/14 10:35","15/Oct/14 10:35"
PDFBOX-561,PDFBOX,"Text extraction with PDFTextStripper is system file.encoding dependent. Override does not work.",Bug,CLOSED,Major,Fixed,"0.7.3, (1)",None,"Text extraction",None,,"The text extraction depends on the jvm file.encoding setting. The "override" new PDFTextStripper("utf-8") (since version 0.8.0) has no effect.
If there are critical characters in a pdf file, the extracted string differs dependent of the jvm system encoding.
It has to be possible to set the encoding for the extraction to ensure same results independent of the default system encoding.
Sample file: see attachment "blindtext_mit_bullets.pdf"
Bullets #3 to #8 differ using utf-8 vs cp1252
Be aware that the file.encoding setting only works if passed while starting the jvm (-Dfile.encoding=utf-8). System.setProperty(..) does not work.",0,"Andreas Lehmkühler","d ferbas",0,3,"18/Nov/09 13:38","13/Oct/14 17:26","13/Oct/14 17:26"
PDFBOX-564,PDFBOX,"Change the wrapped exception to extend Exception and pass the wrapped exception for more standard/better printout of wrapped exceptions",Improvement,CLOSED,Major,Fixed,1.0.0,1.7.1,Utilities,None,,"Wrapped exceptions are now handled by Java. So wrapped exception can be replaced with the following code for better exception reporting/handling. Including better integrations with logging utilities such as slf4j which "understand" java wrapped exceptions.
/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements. See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License. You may obtain a copy of the License at
*
http://www.apache.org/licenses/LICENSE-2.0
*
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package org.apache.pdfbox.exceptions;
/**
An exception that that holds a sub exception.
*
Actually, this class is no longer required as this is now better suppored by java.lang.Exception.
@author <a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>
@version $Revision: 1.2 $
*/
public class WrappedException extends Exception
{
/**
constructor comment.
*
@param e The root exception that caused this exception.
*/
public WrappedException( Exception e ) { super(e); }
}",0,"Timo Boehme","Yonas Jongkind",1,3,"23/Nov/09 18:32","25/Jul/12 06:01","06/Jun/12 09:54"
PDFBOX-569,PDFBOX,"Text-Extraction of PDF fails",Bug,CLOSED,Blocker,Fixed,0.8.0-incubator,1.7.0,"Text extraction",None,,"Using trunk this Exception occurs when extracting text of attached PDF.
[WARN] PDFParser - invalid xref line: 0
java.io.IOException: Cannot create font if /Type is not /Font. Actual=COSName
{FontDescriptor}
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:95)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:68)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:117)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:206)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:188)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)",0,"Andreas Lehmkühler","Stephan Götter",0,3,"25/Nov/09 16:34","29/May/12 16:21","18/Dec/11 16:33"
PDFBOX-570,PDFBOX,"Wingdings font recognition + spacing issue",Wish,CLOSED,Major,Fixed,0.7.3,None,"Text extraction",wingdings,"windows xp, java 1.6, tika","Windings characters issue
-------------------------
If filed this question first in Tika's wish list (tika-331) but Ken Krugler suggest it was a PDFBox issue.
I have PDF files that include some characters in Windings font.
Tika parser replaces them with some Unicode characters that have nothing to do with the original, and, in some cases, replaces them with alphabetic characters. That is normal regarding these characters codes inside Windings font, but when hands pictures are replaced by alphabetic characters like A, B, etc. that disturbs further lexical analysis.
Would it be possible to improve the parsing and remplace these characters with more accurate Unicode characters ?
(see http://www.alanwood.net/demos/wingdings.html for possible correspondences).
Attached files :
test1.pdf is a PDF file including Windings characters. Some are commonly used by people, others less fequently.
Parsing_result1.txt is the text file produced by Tika.
test2.pdf is another example with the same WORD source file converted into PDF with another tool, and Parsing_result2.txt is the Tika parsing result. Windings characters are translated into different Unicode characters than with the previous version.
Spacing issue
-------------
Look at lines 10 and 11 in test2.pdf.
Look at lines 11 and 12 in Tika parsing result (Parsing_result2.txt) :
ðLocalisation des zones de livraison et de stockage
ðLocalisation des zones dangereuses
There is no space between ð and Localisation (ð is the translation of Winding's "Rightwards white arrow" by Tika).
If you copy and paste lines 10 and 11 in test2.pdf into a Notepad Window, you get :
ð Localisation des zones de livraison et de stockage
ð Localisation des zones dangereuses
...with a space between ð and Localisation.
In my case, the missing space after Tika parsing result in considering "ðLocalisation" as a single word in following analysis.
Regards",0,"Andreas Lehmkühler",MRIT64,0,1,"26/Nov/09 09:06","13/Oct/14 17:33","13/Oct/14 17:33"
PDFBOX-573,PDFBOX,"Maven build does not download files not inclued in the distribution",Bug,CLOSED,Major,Fixed,1.0.0,1.0.0,None,None,,"The following plug-in call seems to be the best thing. Just run ant directly. There does not seem to be a maven equivalent for getting files from a server.
<build>
<plugins>
<plugin>
<artifactId>maven-antrun-plugin</artifactId>
<executions>
<execution>
<phase>generate-sources</phase>
<configuration>
<tasks>
<ant antfile="build.xml" target="get.adobefiles"/>
</tasks>
</configuration>
<goals>
<goal>run</goal>
</goals>
</execution>
</executions>
<dependencies>
<dependency>
<groupId>org.apache.ant</groupId>
<artifactId>ant-nodeps</artifactId>
<version>1.7.1</version>
</dependency>
</dependencies>
</plugin>
</plugins>
And the build.xml need to be modified from:
<target name="find.adobefiles">
<available property="adobefiles.found" file="${dest.dir}/Resources"/>
</target>
to:
<target name="find.adobefiles">
<available property="adobefiles.found" file="${dest.dir}/Resources/cmap"/>
</target>",0,"Jukka Zitting","Yonas Jongkind",0,0,"01/Dec/09 04:10","22/Feb/10 18:28","11/Dec/09 12:36"
PDFBOX-574,PDFBOX,"PDFBox image extraction fails with an ArrayOutOfBoundsException in PDPixelMap.getRGBImage()",Bug,CLOSED,Major,Fixed,0.8.0-incubator,1.2.0,Utilities,None,java,"The project that I'm working on has been using PDFBox for both text extraction and image extraction from PDF documents. We wrote a class, PDFImageStripper, which extends PDFStreamEngine:
public class PDFImageStripper extends PDFStreamEngine
public List<ExtractedImage> getImages(PDDocument document, String documentFilename, File targetDirectory) throws IOException
{ resetEngine(); this.document = document; this.documentFilename = documentFilename; this.targetDirectory = targetDirectory; currentImageNumber = 1; images.clear(); writeImages(); return images; }
private void writeImages() throws IOException {
List<PDPage> pages = (List<PDPage>) document.getDocumentCatalog().getAllPages();
for (PDPage page : pages) {
if (page != null)
{ processStream(page, page.findResources(), page.getContents().getStream()); }
}
}
The call chain is shown below:
None.decode(byte[], byte[]) line: 57
PDPixelMap.getRGBImage() line: 182
PDPixelMap.write2OutputStream(OutputStream) line: 209
PDPixelMap(PDXObjectImage).write2file(File) line: 142
PDFImageStripper.saveImage(PDXObjectImage, String, File) line: 208
PDFImageStripper.processOperator(PDFOperator, List) line: 155
PDFImageStripper(PDFStreamEngine).processSubStream(PDPage, PDResources, COSStream) line: 229
PDFImageStripper(PDFStreamEngine).processStream(PDPage, PDResources, COSStream) line: 188
PDFImageStripper.writeImages() line: 113
There is an ArrayOutOfBoundsException in the decode method. The decode method is nothing more than a wrapper for a call to System.arraycopy():
public void decode(byte[] src, byte[] dest)
{ System.arraycopy(src,0,dest,0,src.length); }
The problem is, the source array is larger than the destination array. This is show (from the Eclipse debugger) below:
src byte[455112] (id=171)
dest byte[435456] (id=175)
The code that seems to be causing the problem is shown below. The branch that this bug shows up on is the LZW_DECODE branch. Note that in the other code branch, the code makes sure that there is no size problem.
if( predictor < 10 ||
filters == null || !(filters.contains( COSName.LZW_DECODE.getName()) ||
filters.contains( COSName.FLATE_DECODE.getName()) ) )
{ PredictorAlgorithm filter = PredictorAlgorithm.getFilter(predictor); filter.setWidth(width); filter.setHeight(height); filter.setBpp((bpc * 3) / 8); filter.decode(array, bufferData); }
else
{ System.arraycopy( array, 0,bufferData, 0, (array.length<bufferData.length?array.length: bufferData.length) ); }
One fix may be to simply change the code as follows (again, recall that the "decode" method is nothing but a wrapper for System.arraycopy()):
if( predictor < 10 ||
filters == null || !(filters.contains( COSName.LZW_DECODE.getName()) ||
filters.contains( COSName.FLATE_DECODE.getName()) ) )
{ PredictorAlgorithm filter = PredictorAlgorithm.getFilter(predictor); filter.setWidth(width); filter.setHeight(height); filter.setBpp((bpc * 3) / 8); }
System.arraycopy( array, 0,bufferData, 0,
(array.length<bufferData.length?array.length: bufferData.length) );
If Jira allows me to attach a file that causes this problem I will do so.",0,"Andreas Lehmkühler","Ian Kaplan",0,1,"02/Dec/09 23:22","01/Jul/10 07:26","28/Mar/10 14:19"
PDFBOX-578,PDFBOX,"NPE NullPointerException in PDPageNode.getCount",Bug,CLOSED,Major,Fixed,0.8.0-incubator,1.5.0,None,None,,"java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.PDPageNode.getCount(PDPageNode.java:102)
at org.apache.pdfbox.pdmodel.PDDocument.getNumberOfPages(PDDocument.java:925)
at us.fed.nmcourt.common.pdfbox.NmdLucenePDFDocument.addContent(NmdLucenePDFDocument.java:558)
at us.fed.nmcourt.common.pdfbox.NmdLucenePDFDocument.convertDocument(NmdLucenePDFDocument.java:346)
at us.fed.nmcourt.common.pdfbox.NmdLucenePDFDocument.getDocument(NmdLucenePDFDocument.java:444)
at us.fed.nmcourt.common.pdfbox.NmdLucenePDFDocument.main(NmdLucenePDFDocument.java:758)
Attached is an example of pdf that causes this exception.",0,"Adam Nichols","James Wilson",1,1,"04/Dec/09 21:11","04/Mar/11 10:29","27/Dec/10 21:16"
PDFBOX-579,PDFBOX,"WrappedIOException Version 1.5 PDF NET compile",Bug,CLOSED,Minor,Duplicate,0.8.0-incubator,None,Parsing,None,"windows xp","I am trying to extract text from newer versions of PDF files using C# code. With version 0.7.3 I can successfully extract PDF version 1.4 but it will not work on 1.5. I downloaded 0.8.0 incubating and ran ExtractText. It gives warnings on the 1.4 version but still works. With the 1.5 PDF version it gives
Exception in thread "main" org.apache.pdfbox.exceptions.WrappedIOException
At org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:237)
At org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:861)
At org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:825)
At org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:750)
Caused by: java.util.NoSuchElementException
At java.util.ArrayList$Itr.next(ArrayList.java:757)
At org.apache.pdfbox.pdfparser.PDFXrefStreamParser.parse(PDFXrefStreamParser.java:115)
At org.apache.pdfbox..cos.COSDocument.parseXRefStreams(COSDocument.java:538)
At org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:205)
... 4 more
Am I missing something in my setup or do I need to download/create a new NET DLL file. I have not found explicit instructions on using IKVM to create the NET library so I am a bit leery of attempting that at the moment.",0,"Andreas Lehmkühler","Steve Link",0,0,"07/Dec/09 14:27","09/Jul/11 17:41","09/Jul/11 17:41"
PDFBOX-580,PDFBOX,"Use a dummy color instead of failing with unsupported color spaces",Improvement,CLOSED,Major,Fixed,None,1.0.0,PDModel,None,,"At work we encounter some PDF files with color spaces that PDFBox does not support. Currently an IOException gets thrown whenever such color spaces are being accessed, which is not ideal especially (as often is the case) when the troublesome color space is only used for some small part of the document. It would be nicer if PDFBox just logged a warning about the problem and used some dummy color for the entire troublesome color space.
For the record, the IOException trace we're seeing is:
org.apache.pdfbox.pdmodel.graphics.color.PDColorState java.io.IOException: Not implemented java.io.IOException: Not implemented
at org.apache.pdfbox.pdmodel.graphics.color.PDPattern.createColorSpace(PDPattern.java:92)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.getJavaColorSpace(PDColorSpace.java:85)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.createColor(PDColorState.java:138)
at org.apache.pdfbox.pdmodel.graphics.color.PDColorState.getJavaColor(PDColorState.java:112)
at org.apache.pdfbox.pdfviewer.PageDrawer.fillPath(PageDrawer.java:260)
at org.apache.pdfbox.util.operator.pagedrawer.FillEvenOddRule.process(FillEvenOddRule.java:56)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:516)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:229)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:188)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:99)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:692)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:663)",0,"Jukka Zitting","Jukka Zitting",0,0,"07/Dec/09 14:53","22/Feb/10 18:28","08/Dec/09 14:15"
PDFBOX-581,PDFBOX,"Avoid warnings for graphics operations when extracting text",Improvement,CLOSED,Minor,Fixed,None,1.0.0,"Text extraction",None,,"PDFStreamEngine logs warnings of all encountered PDF operators for which an OperatorProcessor has not explicitly been configured. This is a bit annoying for things like text extraction where many graphics operators can simply be ignored.
To solve this we can either disable the warnings entirely or add an explicit "Ignore" operator processor that simply ignores the selected operators. I'm inclined to implement the latter solution as I think it's a good idea to log warnings for truly unexpected operators.",0,"Jukka Zitting","Jukka Zitting",0,0,"09/Dec/09 09:42","22/Feb/10 18:28","10/Dec/09 23:44"
PDFBOX-584,PDFBOX,"convertToImage seems to invert colors",Bug,CLOSED,Major,Fixed,0.8.0-incubator,1.2.0,Parsing,None,,"The pdfbox support team asked me to post this message on this forum so attachments could be seen
I have a pdf document that has a white background with black text. It
appears after I make the call to convertToImage the colors are reversed. A
black background with white text
pdDocument = PDDocument.load(new ByteArrayInputStream(aContent));
List<PDPage> documentPageList = pdDocument.getDocumentCatalog().getAllPages();
for(int i=0; i<documentPageList.size(); ++i) {
PDPage aPage = documentPageList.get;
for (int x=1; x < 14; x++) {
BufferedImage tempImage = convertToImage(x, (2 * 72),aPage);
ImageIO.write(tempImage,"jpeg", new File("c:
tmp
page-" + x + ".jpeg"));
}
}",0,"Andreas Lehmkühler","Scott Tyriver",0,0,"16/Dec/09 15:44","28/Jul/10 10:51","28/Mar/10 14:33"
PDFBOX-585,PDFBOX,"PrintImageLocations example calculates wrong image width/height",Bug,CLOSED,Major,Fixed,0.8.0-incubator,1.7.0,"Parsing, (2)",PrintImageLocations,,"As described in [1] the code for calculating the image position and width/height should be updated similar to the code in [2].
[1] http://markmail.org/thread/hzti74yt45vz326r
[2] http://svn.apache.org/repos/asf/pdfbox/trunk/src/main/java/org/apache/pdfbox/util/operator/pagedrawer/Invoke.java",0,"Andreas Lehmkühler","Andreas Lehmkühler",1,0,"17/Dec/09 14:27","29/May/12 16:21","26/Dec/11 16:13"
PDFBOX-588,PDFBOX,"Problem extracting text in newline characters",Bug,CLOSED,Major,Fixed,"0.8.0-incubator, (2)",1.5.0,"Text extraction",None,"windows xp","Hello ,
I have a PDF file with 1 page only, when I try to extract its text using :
String pageData = stripper.getText( pdfFile );
It ignores some Enter characters between lines, so the last word in the line and the first word in the next line appear as 1 word without spaces between them !!
While if I copy the PDF text manually from the PDF and paste it in a text editor, Enter characters appear after the same lines that caused the problem in PDFBox.
Please check the attached file as a sample.
Is there a way to fix this ?
Best regards ,",0,"Andreas Lehmkühler",Hesham,0,2,"04/Jan/10 07:20","17/Jun/13 09:01","17/Jun/13 09:01"
PDFBOX-589,PDFBOX,"Arg list is optional for some color seperations. However, code expects it to be set and causes a null pointer exception when drawing the pdf.",Bug,CLOSED,Major,"Won't Fix",1.0.0,1.0.0,Writing,None,"mac os, java 1.6","Here is a patch that includes the required additional check for null. And a PDF to test it with as well.
Eclipse Workspace Patch 1.0
#P pdfbox
Index: src/main/java/org/apache/pdfbox/util/operator/SetNonStrokingSeparation.java
===================================================================
src/main/java/org/apache/pdfbox/util/operator/SetNonStrokingSeparation.java (revision 1818)
+++ src/main/java/org/apache/pdfbox/util/operator/SetNonStrokingSeparation.java (working copy)
@@ -61,7 +61,9 @@
{
PDSeparation sep = (PDSeparation) colorSpace;
colorSpace = sep.getAlternateColorSpace();
argList = sep.getColorValues().toList();
+ if (sep.getColorValues() != null) { + argList = sep.getColorValues().toList(); + }
}
if (colorSpace != null)",0,"Andreas Lehmkühler","Yonas Jongkind",0,0,"04/Jan/10 09:11","07/Feb/10 16:04","07/Feb/10 16:04"
PDFBOX-591,PDFBOX,"PDFBox performance issue: BaseParser.readUntilEndStream() rewrite",Improvement,CLOSED,Major,Fixed,0.8.0-incubator,1.0.0,Parsing,None,,"The load time for loading documents into PDFBox (PDDocument) is too slow.
One culprit is the method: org.apach.pdfbox.pdfparser.BaseParser.readUntilEndStream(OutputStream out)
The current implementation of this method uses a very slow test for end of stream conditions. A profile of the readUntilEndStream() method shows that a huge chunk of the method's processing time is being consumed in the cmpCircularBuffer() call - which is purely part of the test for for the end of stream marker. In other words, the readUntilEndOfStream() is spending twice as much time testing for the end of stream marker as it is reading bytes from the stream.
A better solution is to use a simpler, direct fail-fast test conditional structure that uses byte primitives. I strongly recommend that the current method be removed and replaced with the following code below. This results in a relative speed up of readUntilEndStream() method of a little over a factor of 3 (a ratio of 113/37 = 3.05 if you want to be more precise). This in turn helps the overall performance of PDDocument.parse() by about a factor of 2.7.
Note the addition of some byte constants used to make the code readable.
-----------------------------------------------------------------
private static final int E = 101;
private static final int N = 110;
private static final int D = 100;
private static final int S = 115;
private static final int T = 116;
private static final int R = 114;
private static final int A = 97;
private static final int M = 109;
private static final int O = 111;
private static final int B = 98;
private static final int J = 106;
/**
This method will read through the current stream object until
we find the keyword "endstream" meaning we're at the end of this
object. Some pdf files, however, forget to write some endstream tags
and just close off objects with an "endobj" tag so we have to handle
this case as well.
@param out The stream we write out to.
@throws IOException
*/
private void readUntilEndStream( OutputStream out ) throws IOException{
int byteRead;
do{ //use a fail fast test for end of stream markers
byteRead = pdfSource.read();
if(byteRead==E){//only branch if "e"
byteRead = pdfSource.read();
if(byteRead==N){ //only continue branch if "en"
byteRead = pdfSource.read();
if(byteRead==D){//up to "end" now
byteRead = pdfSource.read();
if(byteRead==S){
byteRead = pdfSource.read();
if(byteRead==T){
byteRead = pdfSource.read();
if(byteRead==R){
byteRead = pdfSource.read();
if(byteRead==E){
byteRead = pdfSource.read();
if(byteRead==A)
Unknown macro: { byteRead = pdfSource.read(); if(byteRead==M){ //found the whole marker pdfSource.unread( ENDSTREAM ); return; } }
else
{ out.write(ENDSTREAM, 0, 7); }
}else
{ out.write(ENDSTREAM, 0, 6); }
}else
{ out.write(ENDSTREAM, 0, 5); }
}else
{ out.write(ENDSTREAM, 0, 4); }
}else if(byteRead==O){
byteRead = pdfSource.read();
if(byteRead==B)
Unknown macro: { byteRead = pdfSource.read(); if(byteRead==J){ //found whole marker pdfSource.unread( ENDOBJ ); return; } }
else
{ out.write(ENDOBJ, 0, 4); }
}else
{ out.write(E); out.write(N); out.write(D); }
}else
{ out.write(E); out.write(N); }
}else
{ out.write(E); }
}
if(byteRead!=-1)out.write(byteRead);
}while(byteRead!=-1);
}",0,"Jukka Zitting","Mel Martinez",0,1,"06/Jan/10 23:01","22/Feb/10 18:28","15/Jan/10 00:01"
PDFBOX-592,PDFBOX,"please accommodate '-' where a number is expected",Improvement,CLOSED,Major,Fixed,0.8.0-incubator,1.3.1,Parsing,None,,"PDF's created by ScanSoft's PDF driver have '-' where a number is needed, as in 1 0 0 1 - 783 Tm. See http://markmail.org/message/r63jfd5wybejzbkr for details.
Proposal: interpret - as 0. Patch:
— /tmp/x/pdfbox-0.8.0-incubating/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java 2009-09-14 19:39:44.000000000 -0400
+++ src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java 2010-01-07 00:14:45.000000000 -0500
@@ -252,7 +252,12 @@
dotNotRead = false;
}
}
retval = COSNumber.get( buf.toString() );
+ String number = buf.toString();
+ /* accommodate PDF files (such as ScanSoft-created ones that output '-'
+ * where a number is expected. Substitute a 0 */
+ if ("-".equals(number))
+ number = "0";
+ retval = COSNumber.get( number );
break;
}
case 'B':",0,"Jukka Zitting","Godmar Back",0,1,"07/Jan/10 05:54","26/Oct/10 09:33","24/Aug/10 12:31"
PDFBOX-593,PDFBOX,"ClassCastException in PDAppearanceDictionary",Bug,CLOSED,Major,Fixed,None,1.0.0,PDModel,None,,"org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary: In both getRolloverAppearance() and getDownAppearance() the COSDictionary ap is added to itself, so causing a ClassCastException in the following while loop when it is casted to COSStream. I'll post a patch for this based on the getNormalAppearance() method.",0,"Andreas Lehmkühler","Johannes Koch",0,0,"07/Jan/10 13:02","06/Feb/10 19:23","06/Feb/10 18:50"
PDFBOX-597,PDFBOX,"PDAcnnotation has methods not defined for all annotations",Bug,CLOSED,Minor,Fixed,None,1.0.0,PDModel,None,,"PDAnnotation has methods for getting/setting entries not defined for all annotations (A, AA, BS). The patch, I'll provide later, moves the methods to the classes for specific annotations for which these entries are defined.",0,"Andreas Lehmkühler","Johannes Koch",0,0,"13/Jan/10 15:18","08/Feb/10 09:39","07/Feb/10 12:23"
PDFBOX-598,PDFBOX,"DateConverter.toCalendar doesn't clear milliseconds field",Bug,CLOSED,Minor,Fixed,0.8.0-incubator,1.0.0,Utilities,None,,"I've just discovered that DateConverter.toCalendar(String date) doesn't clear the milliseconds field from the calendar entries it returns. This means that if you turn the calendar object into a String, the return isn't stable, so your unit tests break
It looks to me that as the pdf format doesn't store to that level of detail, it should always be zero'd out, rather than being left to hold the milliseconds of the time you make the call.
This snippet is a failing unit test that shows the issue:
public void testDateConversion() throws Exception
{ Calendar c = DateConverter.toCalendar("D:20050526205258+01'00'"); assertEquals(2005, c.get(Calendar.YEAR)); assertEquals(05-1, c.get(Calendar.MONTH)); assertEquals(26, c.get(Calendar.DAY_OF_MONTH)); assertEquals(20, c.get(Calendar.HOUR_OF_DAY)); assertEquals(52, c.get(Calendar.MINUTE)); assertEquals(58, c.get(Calendar.SECOND)); assertEquals(0, c.get(Calendar.MILLISECOND)); }
Adding "retval.set(Calendar.MILLISECOND, 0)" to the bottom of the method ought to fix it I'd think.",0,"Jukka Zitting","Nick Burch",0,0,"13/Jan/10 17:28","22/Feb/10 18:28","15/Jan/10 00:19"
PDFBOX-599,PDFBOX,"PDFBox performance issue: TextPosition performance tweak",Improvement,CLOSED,Major,Fixed,"0.8.0-incubator, (1)",1.0.0,"Text extraction",None,,"During text extraction, the TextPosition.getX() and TextPosition.getY() methods are invoked multiple times on each TextPosition object.
The current code recalculate these values each time the accessor is invoked, even thought the underlying state from which the values are derived has not changed.
This is slow.
The getters (getX() and getY()) should be changed to retain the X and Y attributes in instance fields and only calculate their values once.
Specificaly the following two fields should be added:
private float x = Float.NEGATIVE_INFINITY;
private float y = Float.NEGATIVE_INFINITY;
And the two methods changed to look like so:
public float getX()
{
if(x==Float.NEGATIVE_INFINITY)
{ x = getXRot(rot); }
return x;
}
public float getY()
{
if(y==Float.NEGATIVE_INFINITY){
if ((rot == 0) || (rot == 180))
{ y = pageHeight - getYLowerLeftRot(rot); }
else
{ y = pageWidth - getYLowerLeftRot(rot); }
}
return y;
}
This provides a very noticeable speedup in the text extraction.
I'll attach a version of the TextPosition.java class that includes this mod.",0,"Jukka Zitting","Mel Martinez",0,0,"14/Jan/10 20:27","22/Feb/10 18:28","14/Jan/10 23:40"
PDFBOX-600,PDFBOX,"PDFBox performance issue: PDFTextStripper performance tweak",Improvement,CLOSED,Major,Fixed,0.8.0-incubator,1.0.0,"Text extraction",None,,"During text extraction, the PDFTextStripper needs to calculate textposition proximities in order to determine if text elements are overlapping either vertically or horizontally.
As part of this, the PDFTextStripper.within(float first, float second, float variance) method is used.
The current (0.8.0) version of this method uses the following test: second > first - variance && second < first + variance
This is accurate, but slower in my test documents than if you flip the test order: second < first + variance && second > first - variance
This is because the second test fails out faster on left-to-right text. I believe that should be the default case.
Please change the PDFTextStripper.within() method to use the second form of the test. I.E. to:
private boolean within( float first, float second, float variance )
{ return second < first + variance && second > first - variance; }
Thanks!",0,"Jukka Zitting","Mel Martinez",0,0,"14/Jan/10 20:38","22/Feb/10 18:28","14/Jan/10 23:37"
PDFBOX-601,PDFBOX,"PDFBox performance issue: PDSimpleFont, PDFont performance tweaks",Improvement,CLOSED,Major,Fixed,0.8.0-incubator,1.0.0,PDModel,None,,"During text extraction, font size / descriptor / encoding attributes are accessed repeatedly in order to do positional calculations and byte-character conversions.
The current code has several accessors for these things that redo rather slow calculations each time - even thought the font object state is not changed.
The results of these calculations should be persisted in instance fields once calculated. This greatly improves performance.
I'll attach new versions of PDFont, PDFontDescriptorDictionary and PDSimpleFont that have these tweaks.",0,"Jukka Zitting","Mel Martinez",0,0,"14/Jan/10 21:31","22/Feb/10 18:28","14/Jan/10 23:33"
PDFBOX-602,PDFBOX,"PDFBox performance issue: PDPage tweaks",Improvement,CLOSED,Major,Fixed,0.8.0-incubator,1.0.0,PDModel,None,,"During parsing / text extraction the PDPage class' getMediaBox() and getParent() methods are accessed many times. They are currently slow because the code recalculates the results each time.
These should instead be persisted in instance fields so that they are only calculated once unless the underlying object state has changed.
I will attach a version of the file that includes the fix.",0,"Jukka Zitting","Mel Martinez",0,0,"14/Jan/10 21:37","22/Feb/10 18:28","14/Jan/10 23:15"
PDFBOX-603,PDFBOX,"PDFBox performance issue: Encoding.java getCharacter() method tweak",Improvement,CLOSED,Major,Fixed,0.8.0-incubator,1.0.0,"Text extraction",None,,"During parsing / text extraction the Encoding.getCharacter(COSName) method is invoked repeatedly.
It includes a string test that is performed up front but should only occur rarely. The code should be restructured slightly to only perform that test later. I.E. it should succeed fast and fail slow.
I'll post an attachment that rewrites the method slightly. The performance gains is fairly significant.",0,"Jukka Zitting","Mel Martinez",0,0,"14/Jan/10 21:44","22/Feb/10 18:28","14/Jan/10 22:58"
PDFBOX-604,PDFBOX,"Various text extraction performance improvements",Improvement,CLOSED,Major,Fixed,None,1.0.0,"Text extraction",None,,"Even after Mel's recent patches I've found a number of small performance bottlenecks that we could get rid of.",0,"Jukka Zitting","Jukka Zitting",0,0,"15/Jan/10 20:27","22/Feb/10 18:28","18/Jan/10 10:43"
PDFBOX-610,PDFBOX,"Fonts should not be cached by PDFStreamEngine",Bug,CLOSED,Major,Fixed,0.8.0-incubator,1.7.0,"Text extraction","PDFStreamEngine font","windows, linux","org.apache.pdfbox.util.PDFStreamEngine
Fonts are cached using variable 'private Map documentFontCache = new HashMap();'
which is used in method 'processSubStream()' and the call 'sr.fonts = resources.getFonts(documentFontCache);
The problem is that PDF documents can store a limited range of 'firstChar' and 'lastChar' (maybe just a space char), and then expand that range at a later point within the same page. When the font is cached, those updates are ignored.
In particular, test 'http://www.encana.com/investor/financial/shareholder/pdfs/info-circular-french.pdf, pg 1'.
Using font caching, the widths of the characters in the upper right corner of the page are reported as zero, and the text extraction and text merging is compromised.
Without font caching, the widths are correct. There are other examples that cause the same problem.
To fix the problem change the call in method 'processSubStream()' to:
sr.fonts = resources.getFonts(null);
There was some effort put into font caching. Unfortunately, it should not be used on unknown documents.",0,"Andreas Lehmkühler","Peter Costello",0,0,"07/Feb/10 06:06","11/Feb/16 16:56","22/Jan/12 13:25"
PDFBOX-611,PDFBOX,"PDSimpleFont. Font height reported as zero.",Bug,CLOSED,Major,Fixed,0.8.0-incubator,1.7.0,PDModel,"PDSimpleFont textExt","windows, linux","The logic for PDSimpleFont.getFontHeight() can return a value of zero.
This will corrupt or compromise text extraction and layout.
In particular, test with 'http://www.encana.com/investor/financial/shareholder/pdfs/info-circular-french.pdf', pg 12
When a PDFontDescriptor is used, the current logic uses:
1) an average of xHeight and capHeight.
xHeight is the height from the baseline to the top of a lower case letter like 'x'.
CapHeight is the height from the baseline to the top of an upper case latin char.
2) xHeight
3) capHeight
4) ascent
5) zero
This is really bizarre. 'xHeight' is an optional parameter, and 'capHeight' is often missing.
The font bounding box is a required parameter and is the height that is used by Acrobat Reader when you select a line of text.
The bounding box is not perfect, because it often overlaps the line above, but it is a consistent value. The problem with the
current logic is that the reported height varies way too much, and a zero value can be reported.
I have modified the logic as follows. The goal was to make the nominal values the same as the current logic,
but return a very similar number when parameters go missing.
PDFontDescriptor desc = getFontDescriptor();
if( desc != null ) {
float height = desc.getCapHeight(); // Top of Cap to baseline (eg 715)
if (height==0) {
height=desc.getAscent(); // Max height from baseline (eg 715);
if (height==0) {
PDRectangle bbox = desc.getFontBoundingBox();
height = bbox.getHeight()/2; // Max height less max depth (eg (1006-(-325))=1331/2=665)
if (height==0)
{ height=desc.getXHeight(); // Top of lower-case to baseline (eg 518) height-=desc.getDescent(); // Depth below baseline (eg 209, to get total of 727) }
}
}
retval=height;
}",0,"Andreas Lehmkühler","Peter Costello",0,0,"07/Feb/10 06:23","29/May/12 16:21","08/Feb/12 19:00"
PDFBOX-612,PDFBOX,"Unknown encoding for 'GBK-EUC-H'",Bug,CLOSED,Major,Fixed,0.8.0-incubator,1.5.0,PDModel,encoding,windows,"Unknown encoding for 'GBK-EUC-H' for chinese pdf document. To fix it.
1.add method to org.apache.pdfbox.pdmodel.font.PDFont.java
public String getEncodingName() {
COSBase encoding = font.getDictionaryObject(COSName.ENCODING);
if (encoding != null) {
if (encoding instanceof COSName)
{ return ((COSName) encoding).getName(); }
}
return null;
}
2.modify encode method.
from
if( retval == null && cmap != null )
{ retval = cmap.lookup( c, offset, length ); }
//if we havn't found a value yet and
//we are still on the first byte and
//there is no cmap or the cmap does not have 2 byte mappings then try to encode
//using fallback methods.
to
if( retval == null && cmap != null )
{
String encodingStr = getEncodingName();
if (encodingStr != null) {
EncodingConverter converter = EncodingConversionManager.getConverter(encodingStr);
if (converter != null)
{ if (length == 1) return null; retval = converter.convertBytes(c, offset, length, cmap); }
else
{ retval = cmap.lookup( c, offset, length ); }
} else
{ retval = cmap.lookup( c, offset, length ); }
}
//if we havn't found a value yet and
//we are still on the first byte and
//there is no cmap or the cmap does not have 2 byte mappings then try to encode
//using fallback methods.",0,"Andreas Lehmkühler","Gang Luo",0,0,"08/Feb/10 00:34","18/May/12 15:31","18/May/12 15:31"
PDFBOX-614,PDFBOX,"Rendering image results in java.lang.NoSuchMethodError: java.awt.geom.GeneralPath.moveTo(DD)V",Bug,CLOSED,Major,Fixed,1.0.0,1.0.0,None,None,,"This is using survey.pdf which is in our test set:
http://svn.eu.apache.org/viewvc/pdfbox/trunk/test/input/rendering/survey.pdf
The full dump is:
[junit] Testcase: testRenderImage took 22.108 sec
[junit] Caused an ERROR
[junit] java.awt.geom.GeneralPath.moveTo(DD)V
[junit] java.lang.NoSuchMethodError: java.awt.geom.GeneralPath.moveTo(DD)V
[junit] at org.apache.fontbox.cff.CharStringRenderer.rmoveTo(CharStringRenderer.java:122)
[junit] at org.apache.fontbox.cff.CharStringRenderer.handleCommand(CharStringRenderer.java:9
6)
[junit] at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:46
)
[junit] at org.apache.fontbox.cff.CharStringRenderer.render(CharStringRenderer.java:48)
[junit] at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:134)
[junit] at org.apache.fontbox.cff.AFMFormatter.printCharMetrics(AFMFormatter.java:99)
[junit] at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:78)
[junit] at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
[junit] at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)
[junit] at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:4
96)
[junit] at org.apache.pdfbox.pdmodel.font.PDType1CFont.ensureLoaded(PDType1CFont.java:373)
[junit] at org.apache.pdfbox.pdmodel.font.PDType1CFont.getFontWidth(PDType1CFont.java:138)
[junit] at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:32
2)
[junit] at org.apache.pdfbox.util.operator.ShowTextGlyph.process(ShowTextGlyph.java:61)
[junit] at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:546)
[junit] at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:248)
[junit] at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
[junit] at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:99)
[junit] at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:699)
[junit] at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:137)
[junit] at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:107)
[junit] at org.apache.pdfbox.util.TestPDFToImage.doTestFile(TestPDFToImage.java:111)
[junit] at org.apache.pdfbox.util.TestPDFToImage.testRenderImage(TestPDFToImage.java:180)
[junit]
[junit] Test org.apache.pdfbox.util.TestPDFToImage FAILED
I will attempt to correct this later in the week ... but if anyone else sees the correction first, I've no objection",0,"Daniel Wilson","Daniel Wilson",0,0,"10/Feb/10 03:02","22/Feb/10 18:28","10/Feb/10 22:28"
PDFBOX-615,PDFBOX,"shfill operator needs implementation","New Feature",CLOSED,Major,Fixed,None,"1.8.5, 2.0.0",PDModel,"shading shadingpatte",,"I have a PDF file (for which I do not yet have release permission) that uses the "sh" operator, equivalent to PostScript's shfill (per PDF spec 1.7 page 987).
Adobe provides implementation guidance in a 78-page document at http://www.adobe.com/devnet/postscript/pdfs/TN5600.SmoothShading.pdf#17
I will be trying to add this functionality this week, but if anyone has hints, suggestions, etc. they are most certainly welcome!",0,"Andreas Lehmkühler","Daniel Wilson",0,4,"11/Feb/10 01:16","02/May/14 06:12","02/Feb/14 15:40"
PDFBOX-616,PDFBOX,"Invalid Images Returned",Bug,CLOSED,Major,"Won't Fix",0.8.0-incubator,None,PDModel,"PDXObjectImage image",windows,"When getting images from a PDF document using PDXObjectImage (code fragment below), it returns an image with invalid characteristics. The PDXObjectImage is not null, but attributes like .getColorSpace() return null. The image has a height and width, but the getRGBImage() method returns null.
This happens on EVERY image of the attached file. Code fragment and output is shown below.
If I use the write2file() method of PDXObjectImage to write out the image to a fil, then I get a valid image. (At least, it displays fine.)
Code Fragment:
// Get a list of pages from the input PDF document
List pages = InputDoc.getDocumentCatalog().getAllPages();
// Process each page
int i = 0;
for (Object obj : pages)
{
String Barcode = null;
i++;
PDPage page = (PDPage)obj;
// Get the image on the page and process it
PDResources resources = page.getResources();
Map images = resources.getImages();
System.out.println("Found " + images.size() + " images on Page " + i);
if( images != null )
{
Iterator imageIter = images.keySet().iterator();
while ( imageIter.hasNext() )
{
String key = (String)imageIter.next();
System.out.println("key = " + key);
PDXObjectImage image = (PDXObjectImage)images.get( key );
if (image != null)
{ System.out.println("Image subtype = " + image.SUB_TYPE.toString()); System.out.println("Image suffix = " + image.getSuffix()); System.out.println("PDX image has height = " + image.getHeight() + " and width " + image.getWidth()); // Convert image to a Buffered Image, so we can // look for a barcode and decode it BufferedImage RGBimage = image.getRGBImage(); if (RGBimage == null) System.out.println("RGBimage is null"); }
}
}
Output:
Found 1 images on Page 1
key = Obj3
Image subtype = Image
Image suffix = tiff
PDX image has height = 2335 and width 1651
RGBimage is null
Found 1 images on Page 2
key = Obj8
Image subtype = Image
Image suffix = tiff
PDX image has height = 2335 and width 1651
RGBimage is null
Found 1 images on Page 3
key = Obj13
Image subtype = Image
Image suffix = tiff
PDX image has height = 2335 and width 1651
RGBimage is null
Found 1 images on Page 4
key = Obj18
Image subtype = Image
Image suffix = tiff
PDX image has height = 2335 and width 1651
RGBimage is null
Found 1 images on Page 5
key = Obj23
Image subtype = Image
Image suffix = tiff
PDX image has height = 2335 and width 1651
RGBimage is null
Found 1 images on Page 6
key = Obj28
Image subtype = Image
Image suffix = tiff
PDX image has height = 2335 and width 1651
RGBimage is null
Found 1 images on Page 7
key = Obj33
Image subtype = Image
Image suffix = tiff
PDX image has height = 2335 and width 1651
RGBimage is null
Found 1 images on Page 8
key = Obj38
Image subtype = Image
Image suffix = tiff
PDX image has height = 2335 and width 1651
RGBimage is null
Found 1 images on Page 9
key = Obj43
Image subtype = Image
Image suffix = tiff
PDX image has height = 2335 and width 1651
RGBimage is null
Found 1 images on Page 10
key = Obj48
Image subtype = Image
Image suffix = tiff
PDX image has height = 2335 and width 1651
RGBimage is null",0,"Andreas Lehmkühler","James A. Thomas",0,0,"11/Feb/10 02:55","29/May/11 17:50","29/May/11 17:50"
PDFBOX-62,PDFBOX,"Incorrect (zero) character widths returned in some docs",Bug,CLOSED,,Fixed,"1.8.5, 2.0.0","1.8.6, 2.0.0","Rendering, (1)",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1216674
Originally submitted by tamirhassan on 2005-06-07 13:42.
For certain PDF documents (such as the one attached)
the character/string widths (as obtained e.g. by the
PDFont.getStringWidth method) are not returned
correctly, i.e. they appear to be correct for punctuation
characters but are zero for alphanumeric characters.
It seems as if these alphanumeric characters are NOT
within PDFont.firstChar and PDFont.lastChar in the
Type 1 font. The method therefore attempts to obtain
the font widths from the AFM (font metric) file, but fails
(silently) with a 'resource is null' logline message.
(Note that this problem doesn't seem to occur with Type
1 fonts in other documents.)
A more detailed discussion regarding this issue can be
found in this link:
http://sourceforge.net/forum/forum.php?
thread_id=1260349&forum_id=267205
Thanks in advance for any help that can be obtained,
Tam",0,"Andreas Lehmkühler",Anonymous,1,5,"07/Jun/05 20:42","22/Jun/14 14:34","05/Jun/14 21:35"
PDFBOX-622,PDFBOX,"Bad required namespace prefix for XMPSchemaPDFAId",Improvement,CLOSED,Minor,Fixed,1.0.0,1.2.0,JempBox,None,,"In the ISO 19005 standard, the namespace prefix is "pdfaid" for the namespace "http://www.aiim.org/pdfa/ns/id/". In this case, this prefix is required, and not preferred (as it is for dublin core for instance).
The constructor of XMPSchemaPDFAId should be changed from "pdfaType" to "pdfaid"",0,"Andreas Lehmkühler","Guillaume Bailleul",0,0,"15/Feb/10 15:42","01/Jul/10 07:26","03/Jun/10 11:09"
PDFBOX-623,PDFBOX,"Separate the PDFBox web site from trunk",Improvement,CLOSED,Major,Fixed,None,None,None,None,,"As discussed on dev@, it would be useful to move the PDFBox web site sources from .../asf/pdfbox/trunk to .../asf/pdfbox/site and to use the svnpubsub mechanism for instant deployment of site changes.",0,"Jukka Zitting","Jukka Zitting",0,0,"16/Feb/10 14:21","26/Oct/10 09:42","21/Jun/10 09:48"
PDFBOX-625,PDFBOX,"faulty jempbox checksum file in maven central",Bug,CLOSED,Major,"Won't Fix",1.0.0,1.1.0,JempBox,None,,"maven is giving me "CHECKSUM FAILED" warnings for jempbox-1.0.0.jar . The checksum file
http://repo1.maven.org/maven2/org/apache/pdfbox/jempbox/1.0.0/jempbox-1.0.0.jar.md5
contains the following:
jempbox-1.0.0.jar: C1 83 87 F9 1F A8 66 DA 2D E4 2C A6 61 FE D3 D5
That's the right checksum, but the format of the file is wrong. The checksum files of other packages, e.g.
http://repo1.maven.org/maven2/org/apache/pdfbox/pdfbox/1.0.0/pdfbox-1.0.0.jar.md5
contain only the checksum, not the filename, and use lowercase letters and no spaces.",0,"Andreas Lehmkühler","Aaron Kaplan",0,1,"19/Feb/10 17:12","18/May/12 15:26","18/May/12 15:26"
PDFBOX-631,PDFBOX,"Unable to find resource 'org.apache.pdfbox:jempbox:pom:1.0.0' in repository maven central (http://repo1.maven.org/maven2/)",Bug,CLOSED,Major,Fixed,1.0.0,1.1.0,JempBox,maven,,"The pom.xml file of jempbox is missing in the central repository. It is named "pom.xml" there but it should have been named "jempbox-1.0.0.pom"",0,"Jukka Zitting","Thomas Scheffler",0,1,"23/Feb/10 09:34","11/Jul/10 14:54","18/Mar/10 14:46"
PDFBOX-636,PDFBOX,"Add decoded stream length to PDStream","New Feature",CLOSED,Minor,Fixed,None,1.1.0,PDModel,None,,"Add getter/setter for decoded stream length (DL) in PDStream. See PDF 32000-1:2008 section 7.3.8.2 Table 5, Page 21.",0,"Jukka Zitting","Johannes Koch",0,0,"24/Feb/10 08:45","01/Mar/10 11:01","01/Mar/10 10:41"
PDFBOX-637,PDFBOX,"problem with static code in COSInteger/COSNumber",Bug,CLOSED,Major,Fixed,None,1.1.0,None,None,,"There is a serious problem with the static blocks in COSInteger and the static final variables ZERO, ONE, TWO, THREE in COSNumber. See test case coming soon.",0,"Jukka Zitting","Johannes Koch",1,1,"25/Feb/10 14:51","01/Mar/10 11:04","01/Mar/10 10:26"
PDFBOX-641,PDFBOX,"PDNameTreeNode: Keys in Names shall be sorted",Bug,CLOSED,Minor,Fixed,1.1.0,1.2.0,PDModel,None,,"According to PDF 32000-1:2008 page 89, paragraph following table 36, the keys in Names shall be sorted. So the parameter for setNames(Map) and the return value for getNames() should better be a SortedMap.",0,"Jukka Zitting","Johannes Koch",0,0,"26/Feb/10 09:33","01/Jul/10 07:26","21/Jun/10 14:51"
PDFBOX-644,PDFBOX,"Move FontBox and JempBox under the same trunk with PDFBox",Improvement,CLOSED,Major,Fixed,None,1.1.0,"FontBox, (1)",None,,"As discussed on dev@, I'd like to move all our component under the same trunk. The proposed project structure is:
trunk/pdfbox
trunk/fontbox
trunk/jempbox",0,"Jukka Zitting","Jukka Zitting",0,0,"01/Mar/10 19:59","30/Mar/10 08:23","17/Mar/10 23:05"
PDFBOX-646,PDFBOX,"Map the form space to user space if the optional form matrix of a XObjectForm is present",Improvement,CLOSED,Major,Fixed,"0.8.0-incubator, (1)",1.1.0,"Parsing, (2)",None,,"An XObjectForm has an optional form matrix to map the form space to user space. If that matrix is present it has to be multiplied with the current transformation matrix to calculate the correct coordinates for every following operation.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"02/Mar/10 18:43","30/Mar/10 08:23","02/Mar/10 19:00"
PDFBOX-647,PDFBOX,"Invalid dictionary causes infinate loop",Bug,CLOSED,Critical,Duplicate,1.0.0,None,Parsing,None,,"Parsing a pdf document seemed to cause pdfbox to go into an infinate loop logging the following:
2010-03-03 23:25:33,923 WARN Timer-2 org.apache.pdfbox.pdfparser.BaseParser - Invalid dictionary, found:� but expected:''
2010-03-03 23:25:33,923 WARN Timer-2 org.apache.pdfbox.pdfparser.BaseParser - Invalid dictionary, found:� but expected:''
2010-03-03 23:25:33,923 WARN Timer-2 org.apache.pdfbox.pdfparser.BaseParser - Invalid dictionary, found:� but expected:''
2010-03-03 23:25:33,923 WARN Timer-2 org.apache.pdfbox.pdfparser.BaseParser - Invalid dictionary, found:� but expected:''
2010-03-03 23:25:33,923 WARN Timer-2 org.apache.pdfbox.pdfparser.BaseParser - Invalid dictionary, found:� but expected:''
This caused the app servers log to fill up all available space ....",0,"Jukka Zitting","David Horwitz",0,0,"04/Mar/10 09:23","11/Jul/10 14:46","09/Apr/10 10:08"
PDFBOX-648,PDFBOX,"PdfBox can't be buit from behind a firewall/proxy",Bug,CLOSED,Major,Fixed,1.0.0,2.0.0,None,None,,"The pdfBox maven build uses ant to fetch resources remotely rather than use maven methods for this. The ant script doesn't respect the maven proxy settings so the script can't be used behind a firewall. This requires explicit proxy settings in the MAVEN_OPTS:
export MAVEN_OPTS="-Dhttp.proxyHost=my.proxyhost -Dhttp.proxyPort=8080"
as this is not the maven way it may confuse many who try to build the source",0,"Andreas Lehmkühler","David Horwitz",0,1,"04/Mar/10 09:42","17/Mar/16 19:08","06/Feb/14 11:30"
PDFBOX-649,PDFBOX,"loading an fdf containing a file attachment throws IOException",Bug,CLOSED,Major,Fixed,"1.8.7, 2.0.0","1.8.8, 2.0.0",Parsing,FDF,"linux, java 1.5","loading of an fdf file generates the following exception:
java.io.IOException: Unknown dir object c=')' cInt=41 peek=')' peekInt=41 org.apache.pdfbox.io.PushBackInputStream@28d08633
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:993)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray(BaseParser.java:704)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:906)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:157)
at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:234)
at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:895)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:521)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:179)
at org.apache.pdfbox.pdmodel.fdf.FDFDocument.load(FDFDocument.java:206)
at org.apache.pdfbox.pdmodel.fdf.FDFLoaderTestCase.testLoadFailingAttachment(FDFLoaderTestCase.java:36)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:592)
at junit.framework.TestCase.runTest(TestCase.java:154)
at junit.framework.TestCase.runBare(TestCase.java:127)
at junit.framework.TestResult$1.protect(TestResult.java:106)
at junit.framework.TestResult.runProtected(TestResult.java:124)
at junit.framework.TestResult.run(TestResult.java:109)
at junit.framework.TestCase.run(TestCase.java:118)
at junit.framework.TestSuite.runTest(TestSuite.java:208)
at junit.framework.TestSuite.run(TestSuite.java:203)
at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
this is (still) related the detection of the end of stream.
in the stream data, there is the endstream token: the stream reading then stops, expecting to find cosobjects from then on: that is the reason of the failure.",0,"Andreas Lehmkühler","the blue mountain",1,3,"04/Mar/10 18:55","13/Dec/14 14:15","01/Nov/14 10:20"
PDFBOX-650,PDFBOX,"Remove dependency on lucene",Improvement,CLOSED,Major,"Won't Fix",1.0.0,None,"Text extraction, (1)",None,,"The current pdfbox version extracts all needed data from a pdf document and uses lucene to create an index for the lucene search engine.
To avoid the dependency on lucene pdfbox should only extract the data which can be used to create a lucene index outside from pdfbox. That would decrase the number of external jars and woukld eliminate an other potential issue because of changing apis like those coming with lucene 3.0.
I've created 2 new classes (one for the extraction and one as example how to use that feature) based on existing code and attached it as patch.
WDYT?
If that patch will be added to the trunk the existing code will be removed including both lucene jars.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"07/Mar/10 14:17","08/Oct/13 17:21","21/Jun/10 15:47"
PDFBOX-651,PDFBOX,"Team list should be filled out or deleted ... it confuses users now",Improvement,CLOSED,Major,Fixed,1.0.0,1.2.0,None,None,,"http://pdfbox.apache.org/team-list.html says that the project has no developers nor committers. This is very not true and should be fixed.",0,"Andreas Lehmkühler","Ted Dunning",0,0,"09/Mar/10 06:43","01/Jul/10 07:26","09/Jun/10 18:19"
PDFBOX-656,PDFBOX,"Typo: there is no DecodeParams value. The correct name is DecodeParms",Bug,CLOSED,Critical,Fixed,1.0.0,1.1.0,PDModel,None,,,0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"10/Mar/10 18:50","30/Mar/10 08:23","10/Mar/10 18:57"
PDFBOX-657,PDFBOX,"PDFToImage does not work with certain fonts (for eg. PDF documents created by MS Office and OpenOffice)",Bug,CLOSED,Major,Fixed,1.0.0,2.0.0,Utilities,"PDFToImage font micr",ubuntu,"I created a PDF document using Open Office which contains following fonts:
1. Times New Roman
2. TlwgTypeWriter
3. Courier New
4. Comic MS
None of these fonts get converted to Image file.
I have posted a question on mailing list, and was advised to create this issue. I have uploaded the input PDF and output jpg file to this issue",0,"Andreas Lehmkühler","Saurabh Raval",1,2,"10/Mar/10 20:54","17/Mar/16 19:08","04/Aug/13 10:04"
PDFBOX-662,PDFBOX,"PDFTextStripper character suppression",Bug,CLOSED,Major,Fixed,1.0.0,1.4.0,"Text extraction",None,,"When parsing the file posted as an example for PDFBox-659, I noticed that numerous characters were missing from the extracted text.
They are getting 'suppressed' in the PDFTextStripper.processTextPosition(TextPosition) method in a section that is meant to try to filter duplicate chars found in some MS Word - generated documents.
The problem is that the filter is over-zealous (in the case of this document) and matches real characters against other real characters in the text. Example
This is some text that has the letter 'e' in it multiple times.
The filter might match one of the later 'e's to an earlier 'e' incorrectly (for example, the one at the end of 'some'), resulting in the extracted text:
This is some text that has the letter 'e' in it multiple tims.
.
From what I can tell this is because it is using the raw, padded coordinates rather than resolved coordinates.
The example PDF document (see PDFBOX-659) has pages that use both positive and negative raw coordinates that upon my cursory inspection don't always resolve on the same offset point.
The suppression test logic compares textposition elements that seem to have different offsets, possibly due to different amounts of padding. Thus the 'overlap' that it detects is wrong. Its not comparing apples to apples.
The document renders perfectly in Acrobat, so I believe we are not handling the coordinates correctly.
A workaround is possible through suppressing the filtering by setting the
PDFTextStripper.setSuppressDuplicateOverlappingText(boolean)
attribute to false. But that is just hiding the fact that the logic is wrong.",0,"Andreas Lehmkühler","Mel Martinez",0,2,"15/Mar/10 22:27","13/Oct/14 17:42","13/Oct/14 17:42"
PDFBOX-666,PDFBOX,"Ensure the correct path direction when drawing a rectangle",Bug,CLOSED,Major,Fixed,1.0.0,1.1.0,"Swing GUI",None,,"It is important to create the path for a rectangle in the correct direction to ensure that the right region will be filled or used for clipping.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"22/Mar/10 17:32","30/Mar/10 08:23","22/Mar/10 17:44"
PDFBOX-670,PDFBOX,"TrueType - Management of CMap format 2",Improvement,CLOSED,Trivial,Fixed,1.0.0,1.2.0,FontBox,None,,"Hi,
I have found a better documentation about the format 2 for CMap of a TrueType font.
Here is the link : http://developer.apple.com/fonts/TTRefMan/RM06/Chap6cmap.html
In attachment you can find my implementation, however I didn't find font to test my code...
The patch include the patch of the PDFBOX-668 task and a suggestion to send IOException instead of NullPointer during the parsing of TrueType Font if some tables are missing.
Regards,
Eric",0,"Andreas Lehmkühler","Eric Leleu",0,0,"26/Mar/10 14:11","01/Jul/10 07:26","14/Jun/10 17:23"
PDFBOX-671,PDFBOX,"Cannot use PDFToImage to convert Chinese PDF pages into images.",Bug,CLOSED,Major,Fixed,1.0.0,1.4.0,Utilities,"Chinese PDFBox PDFTo","windows xp","When I use PDFToImage to convert a Chinese PDF into JPEG file, those Chinese in the PDF pages cannot show correctly.",0,"Andreas Lehmkühler","Eric Chow",0,0,"29/Mar/10 04:32","20/Dec/10 09:38","14/Dec/10 20:02"
PDFBOX-673,PDFBOX,"Ant build problems in PDFBox",Bug,CLOSED,Major,Fixed,1.1.0,1.2.0,None,None,,"As reported in the 1.1.0 VOTE thread, the recent switch to Maven for the default build and the reorganization of the PDFBox trunk has caused some issues for the Ant build that we should still support.",0,"Jukka Zitting","Jukka Zitting",0,0,"30/Mar/10 08:25","01/Jul/10 07:26","30/Mar/10 09:19"
PDFBOX-675,PDFBOX,"Upgrade .Net build to use IKVM version 0.42",Improvement,CLOSED,Minor,Fixed,None,1.2.0,None,None,,"The current .Net build script (ant build.NET) is for IKVM 0.38, released 15 months ago.
Since that time, IKVM has grown to support a larger portion of the Java object model. I am currently investigating the possibility of improved font support, as our IKVM-compiled version crashes if PDType1CFont.prepareAWTFont is called.
The downside of the upgrade will be loss of support for the .Net 1.1 Framework. In my opinion, that is not a big deal as very few projects still rely on it.
I welcome opinions before committing any changes.",0,"Daniel Wilson","Daniel Wilson",0,0,"31/Mar/10 01:09","01/Jul/10 07:26","08/Apr/10 23:39"
PDFBOX-677,PDFBOX,"Lines not showing in PrintPDF print-out (Table borders and SVG figures)",Bug,CLOSED,Major,Fixed,1.1.0,"1.8.7, 2.0.0",Rendering,"PDFToImage PrintPDF ","java 1.5, windows xp","I am generating a single-page PDF file via XSLT/FOP, consisting of multiple
tables of varying complexity and consisting of several figures created via SVG
primitives (rect, path, text) in the used stylesheet.
After generating and exporting the document to the file system, I want to print
it programmatically via PDFBox's PrintPDF class. This succeeds apparently, but
the resulting print-out lacks all of the lines in the document: all table
borders (of various sizes) are missing, and all figures are missing too (a large
diagram and several small symbols within the text). All texts are printed
correctly, except for the heading of the document, which is written in a bold
and bigger font.
This problem occurs on every printer at my disposal (two physical laser printers
and one virtual pdf printer). The problem does not occur when opening and/or
printing the originally exported document via Adobe Reader - the document shows
and prints perfectly. The problem is always reproducible. I am using the (as of now) latest PDFBox
version 1.1.0 on a JDK 1.5.0u18 on Windows XP Professional SP3.
When converting the pdf with PDFBox's PDFToImage class, the problem becomes
smaller, but persists nonetheless: the resulting JPG lacks a good third of the
table borders, but shows all of the SVG-based lines correctly.
I searched the bug tracker and the mailinglist archives but could not find a
recent matching discussion or tracker item. PDFBox seems to have had problems
with table borders already (I remember reading about line styles and weights not
being rendered correctly), but all of those seem to date back to version numbers
around version 0.8.
I posted this problem to the user list ( http://pdfbox.markmail.org/message/a75wdvtk52xbxvjk?page=1 ) after searching the archives and this tracker and was told to open an issue on this tracker. I'll follow up with the mentioned samples in a minute.
Any help would be appreciated!
Many thanks in advance and have a good day,
--Christoph Schmidt",0,"Andreas Lehmkühler","Christoph Schmidt",0,2,"01/Apr/10 07:42","11/Oct/14 01:10","11/Oct/14 01:10"
PDFBOX-678,PDFBOX,"Support missing Text Rendering Modes when rendering a PDF",Improvement,CLOSED,Major,Fixed,None,2.0.0,Rendering,None,,"Of the 7 different Text Rendering Modes only mode 0 (Fill Text) is correctly implemented. Mode 1 (Stroke Text) falls back to Mode 0 and the others are not implemented. I'm looking to implement the missing modes (at least some of them).
Before doing so I'm proposing a structural change to when rendering really occurs. Currently it's done within the PDxxxFont classes. I'd rather implement the (AWT) text output in PageDrawer (or helper classes within the same package) and use the font classes to return an AWT font by adding a getAwtFont method. Doing so we get a better separation between the PDF related stuff (PDxxx) and applications like PageDrawer. The current rendering specific code within the PDxxxFont classes can be retained for compatibility and marked deprecated at a later stage.
WDYT?",0,"John Hewson","Maruan Sahyoun",4,6,"01/Apr/10 07:59","17/Mar/16 19:08","07/Aug/14 18:32"
PDFBOX-68,PDFBOX,"Extracting Text in/between Bookmarks",Bug,CLOSED,,Duplicate,None,None,"Text extraction",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1230940
Originally submitted by hasan_mushtaq on 2005-07-01 06:35.
The Text is not properly extracted between the
bookmarks. Description is as follows
I used the setStartBookmark and the setEndBookmark
functions of the PDFTextStripper class to set the
begining and end of the part of text which i wanted to
extract. The first bookmark (Introduction) was present
in the second page and the second bokmark (Results) was
also present in the second page. let me explain
<page>
some text before intro blah blah blah ...
Introduction. – BOOKMARK
The real aim of
intro text is to give a simple intro..
Results. – BOOKMARK
the result is here
</page>
The text that i got was
<textExtracted>
intro text is to give a simple intro..
Results. – BOOKMARK
the result is here
</textExtracted>
but the exact result should be
<correctResult>
The real aim of
intro text is to give a simple intro..
</correctResult>
In the <textExtracted> we see that it has skipped some
text in the intro and has gone untill the end of the page.
It might be a problem with how the bookmarks were
created for this pdf. But I have tried with other pdf
files as well and they don't give the exact text
between bookmarks. If the first bookmark is on the
first page and the second on the second then I would
get all the text of the two pages irrespective of the
location of the bookmarks. I think I need to understand
how this information is present in the structure of a
PDF File and how pdfbox accesses it, is it a problem in
the creation of the bookmarks when the pdf is made or
we are missing something? I will be looking at the
PDFReference Guide to understand. Meanwhile any help
regarding the solution of this issue and the info on
how bookmarks are represented in a pdf structure would
be highly appreciated..
Best Regards
Hasan",0,"Adam Nichols",Anonymous,0,0,"01/Jul/05 13:35","12/Aug/10 20:10","12/Aug/10 20:10"
PDFBOX-680,PDFBOX,"Adding XMP data to a PDF causes different kinds of mutilations of the original pdf.",Bug,CLOSED,Blocker,Invalid,0.7.3,None,Writing,"pdfbox save xmp","windows xp","We are using PdfBox for a Material Workflow application for one of the major Newspaper publishers in the Netherland.
One of the things we use PdfBox for is adding MMP data to the XML file.
Doing this causes different kinds of mutilation of the original pdf.
The way in which this occurs varies. Sometimes a character is altered, sometimes an element or complete ad is mutilated, sometimes the color of/in an ad is changed.
These files also tend crash Adobe Acrobat (Professional 9, with Pitstop Professional) (not all files);
The files also may create a "Failed to open PDF file" when trying to place it InDesign (not all files).
We use the following source in out application:
InputStream pdfStream = Core.getFileDocumentContent(pdfFileDocument.getMendixObject());
PDDocument pdfDoc = PDDocument.load(pdfStream);
PDDocumentInformation pdfInfo = pdfDoc.getDocumentInformation();
IMendixObject materiaalMetaMendixObject = xmpDocument.getMendixObject();
Set<String> memberKeys = materiaalMetaMendixObject.getMembers().keySet();
for (String memberKey : memberKeys) {
Object member = materiaalMetaMendixObject.getMember(memberKey).getValue();
if (member!= null)
{ String memberString = member.toString(); if (memberKey.startsWith("XMP")) pdfInfo.setCustomMetadataValue(memberKey, memberString); }
}
pdfDoc.setDocumentInformation(pdfInfo);
pdfDoc.save(pdfOutputPath + File.separator + fileName);
pdfDoc.close();
pdfStream.close();
Please HELP",0,"Andreas Lehmkühler","Rene Smit",0,0,"06/Apr/10 12:30","22/Dec/10 15:22","22/Dec/10 15:22"
PDFBOX-684,PDFBOX,"Incorrect ordering of compound Arabic glyphs",Bug,CLOSED,Minor,Fixed,"1.0.0, 1.1.0",1.2.0,"Text extraction","arabic bidirectional",,"Some Arabic PDFs contain compound glyphs for stylistic reasons.
Such glyphs encode two letters: FI, SI, LI, LJ, LM, etc.
Before a line gets sent to the bidirectional algorithm, all characters have been sorted into a visual order, except for these pairs. This is because they are handled as one unit and maintain their original (logical) order. The bidi algorithm straightens out most characters, but reverses the glyph pairs.
To fix this, the output of font.encode() should be examined and reversed on the spot if it contains pairs of Arabic characters. Possibly you need to add a stub method to PDFStreamEngine (in method processEncodedText) that PDFTextStripper can override (in sort mode only).",0,"Jukka Zitting","Yigal Dayan",0,0,"08/Apr/10 08:04","01/Jul/10 07:26","21/Jun/10 15:38"
PDFBOX-687,PDFBOX,"Standalone PDFBox jar","New Feature",CLOSED,Major,Fixed,None,1.2.0,None,None,,"It would be nice to have a standalone jar package that contains all the dependencies needed to run PDFBox. Then you wouldn't need to explicitly collect all the required dependencies and set up the classpath in order to run the command line utilities, as a simple "java -jar pdfbox-app-1.2.0.jar" would be enough.",0,"Jukka Zitting","Jukka Zitting",0,0,"09/Apr/10 10:27","01/Jul/10 07:26","31/May/10 11:14"
PDFBOX-688,PDFBOX,"Refactoring rendering-related classes/methods for extensibility",Improvement,CLOSED,Minor,Fixed,None,1.2.0,None,"dot_net refactoring",,"Some of the classes/methods in the rendering area assume they have access to a Graphics2D object.
This assumption breaks when using the .Net version of PDFBox. Some judicious refactoring permits PageDrawer to be extended in .Net and key methods to be overriden.
I am continuing this refactoring for better rendering support in .Net.
Andreas recently asked that code committed to SVN also be tied to a Jira issue – a good idea really – so I'm putting this in as an issue.",0,"Daniel Wilson","Daniel Wilson",0,0,"09/Apr/10 16:12","01/Jul/10 07:27","13/Apr/10 15:51"
PDFBOX-689,PDFBOX,"Documentation of dependencies is incorrect",Improvement,CLOSED,Minor,Fixed,1.1.0,1.2.0,None,None,,"Taken from a discussion on the Users mailing list ...
http://pdfbox.apache.org/dependencies.html says that there are no dependencies at all.
Based on the IKVM build,
PDFBox depends on:
Apache FontBox (a related project, possibly seen as a subproject of PDFBox).
Apache JempBox(a related project, possibly seen as a subproject of PDFBox).
Lucene
BCProv
BCMail
JUnit
Apache Commons Logging.
Unless there's a good reason to do otherwise, I believe we should update the dependencies page with this list & download links. If no one objects, I'll plan to do so in the next couple days.",0,"Daniel Wilson","Daniel Wilson",0,0,"13/Apr/10 15:44","01/Jul/10 07:27","16/Jun/10 07:21"
PDFBOX-692,PDFBOX,"Contents are unknown type:org.apache.pdfbox.cos.COSDictionary",Bug,CLOSED,Major,Fixed,1.1.0,1.7.0,Parsing,None,jboss,"java.io.IOException: Contents are unknown type:org.apache.pdfbox.cos.COSDictionary
at org.apache.pdfbox.pdmodel.common.PDStream.createFromCOS(PDStream.java:173)
at org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:577)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:286)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
on pdf file at:
http://www.advantagewm.co.uk/Images/Delivering%20Advantage%20Progress%20Report%2006_07_tcm9-13558.pdf",0,"Andreas Lehmkühler","Admir S",0,1,"16/Apr/10 16:13","29/May/12 16:21","18/May/12 15:23"
PDFBOX-694,PDFBOX,"When extract text, the title showing in incorrectness position.",Bug,CLOSED,Major,"Not A Problem",None,None,"Text extraction",None,"java 1.6","1. When I call PDFTextStripper to extract text from the PDF file (000001_2005_1_9.pdf). I get the title at the end of the text document. The result is 'beforetrim.txt'.
2. The bug are:
2.1 The title text is at the end of the text. It is in the begin of the document (Snapshot.png).
2.2 There is white space between the number, but in the adobe read show (Snapshot.png), there is no any space.
2.3 The page footer is at the start of the text (beforetim.txt).",0,"Andreas Lehmkühler",Engle,0,1,"19/Apr/10 06:46","05/Nov/12 17:04","05/Nov/12 17:04"
PDFBOX-696,PDFBOX,"PDTrueTypeFont limits number of glyph widths to 256. This can easily be removed.",Improvement,CLOSED,Major,Fixed,1.1.0,1.2.0,Parsing,utf-8,ubuntu,"Currently the support for fonts with exotic glyphs are limited at best. Making PDFBox render chinese characters has proved to be a bit of a pain ...
One blocker we ran into was the limitation of glyph widths to 256 individual widths. In PDTrueTypeFont.java, we find this in loadDescriptorDictionary():
int firstChar = 0;
int maxWidths=256;
HorizontalMetricsTable hMet = ttf.getHorizontalMetrics();
int[] widthValues = hMet.getAdvanceWidth();
List widths = new ArrayList(maxWidths);
The "int maxWidths=256" affects the remaining code so glyph widths for codepoints larger than 256 are ignored. We found that there is no need to impose such a limitation, and that having it makes it impossible to generate a proper /W dictionary when generating a cidfonttype2. Simply replacing the hard coded value 256 with the following seems to be a perfectly usable solution:
int firstChar = 0;
//int maxWidths=256; <---- No hard coded value
int maxWidths = glyphToCCode.length; // <---- rather use the counted number of codepoints
HorizontalMetricsTable hMet = ttf.getHorizontalMetrics();
int[] widthValues = hMet.getAdvanceWidth();
List widths = new ArrayList(maxWidths);
Integer zero = new Integer( 250 );
Is it possible to have this change added to 1.2.0?
Also we would be more than happy to contribute some code that shows how you can use PDFBox to produce PDF's containing special characters (asian, chinese etc) by using codepoint-to-glyph mapping and copy-paste working (/tounicode). The code allows API users to simply use UTF-8 strings and not worry about any of the tricky font handling details.",0,"Andreas Lehmkühler","Michael Berg",0,1,"20/Apr/10 08:38","01/Jul/10 07:27","01/May/10 15:25"
PDFBOX-697,PDFBOX,"Error: Expected an integer type, actual='' -",Bug,CLOSED,Major,Fixed,1.1.0,1.7.0,Parsing,pdfbox,"windows xp","Hello,
The following exception is being thrown when attempting to parse a pdf document password protected using Adobe Acrobat 9 Pro:
Apr 7, 2010 2:53:22 PM org.apache.pdfbox.filter.FlateFilter decode
SEVERE: Stop reading corrupt stream
07-Apr-2010 14:53:22.829: WARNING: java.io.IOException: Error: Expected an integer type, actual=''
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1275)
at org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse(PDFObjectStreamParser.java:81)
at org.apache.pdfbox.cos.COSDocument.dereferenceObjectStreams(COSDocument.java:449)
at org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1100)
at org.apache.pdfbox.pdmodel.PDDocument.decrypt(PDDocument.java:579)
I have the following libraries:
fontbox-1.1.0.jar
pdfbox-1.1.0.jar
Sample password protected file is attached.
Would appreciate if someone can help.
Thank you
iglop",0,"Andreas Lehmkühler","ik Glop",0,3,"20/Apr/10 18:25","29/May/12 16:21","18/May/12 15:17"
PDFBOX-702,PDFBOX,"Adding method to manipulate the current transformation matrix",Improvement,CLOSED,Minor,Fixed,1.1.0,1.2.0,"Utilities, Writing",None,,"Similar to the setTextMatrix and other we need a method to manipulate the current transformation matrix within PDPageContentStream",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"27/Apr/10 17:48","01/Jul/10 07:27","27/Apr/10 17:56"
PDFBOX-706,PDFBOX,"CFFParser.readCharset java.lang.IllegalArgumentException",Bug,CLOSED,Major,Fixed,None,1.5.0,FontBox,None,,"I am using the Trunk code, and I got multiple stack traces. I think they are all related to the base error of
the Illegal Argument exception.
CharStringRenderer:rlineTo:null point is null
Failed to create Type1C font. Falling back to Type1 font
java.awt.geom.IllegalPathStateException: missing initial moveto in path definition
at java.awt.geom.Path2D$Float.needRoom(Path2D.java:263)
at java.awt.geom.Path2D$Float.lineTo(Path2D.java:354)
at org.apache.fontbox.cff.CharStringRenderer.rlineTo(CharStringRenderer.java:140)
at org.apache.fontbox.cff.CharStringRenderer.handleCommand(CharStringRenderer.java:73)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:46)
at org.apache.fontbox.cff.CharStringRenderer.render(CharStringRenderer.java:48)
at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126)
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64)
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:505)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:382)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.lang.IllegalArgumentException
at org.apache.fontbox.cff.CFFParser.readCharset(CFFParser.java:512)
at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:320)
at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:66)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:299)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
CharStringRenderer:rlineTo:null point is null
Failed to create Type1C font. Falling back to Type1 font
java.awt.geom.IllegalPathStateException: missing initial moveto in path definition
at java.awt.geom.Path2D$Float.needRoom(Path2D.java:263)
at java.awt.geom.Path2D$Float.lineTo(Path2D.java:354)
at org.apache.fontbox.cff.CharStringRenderer.rlineTo(CharStringRenderer.java:140)
at org.apache.fontbox.cff.CharStringRenderer.handleCommand(CharStringRenderer.java:73)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:46)
at org.apache.fontbox.cff.CharStringRenderer.render(CharStringRenderer.java:48)
at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126)
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64)
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:505)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:382)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
CharStringRenderer:rlineTo:null point is null
Failed to create Type1C font. Falling back to Type1 font
java.awt.geom.IllegalPathStateException: missing initial moveto in path definition
at java.awt.geom.Path2D$Float.needRoom(Path2D.java:263)
at java.awt.geom.Path2D$Float.lineTo(Path2D.java:354)
at org.apache.fontbox.cff.CharStringRenderer.rlineTo(CharStringRenderer.java:140)
at org.apache.fontbox.cff.CharStringRenderer.handleCommand(CharStringRenderer.java:73)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:46)
at org.apache.fontbox.cff.CharStringRenderer.render(CharStringRenderer.java:48)
at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126)
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64)
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:505)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:382)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.lang.NullPointerException
at org.apache.fontbox.cff.CharStringRenderer.rrcurveTo(CharStringRenderer.java:148)
at org.apache.fontbox.cff.CharStringRenderer.handleCommand(CharStringRenderer.java:77)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:46)
at org.apache.fontbox.cff.CharStringRenderer.render(CharStringRenderer.java:48)
at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126)
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64)
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:505)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:382)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
CharStringRenderer:rlineTo:null point is null
Failed to create Type1C font. Falling back to Type1 font
java.awt.geom.IllegalPathStateException: missing initial moveto in path definition
at java.awt.geom.Path2D$Float.needRoom(Path2D.java:263)
at java.awt.geom.Path2D$Float.lineTo(Path2D.java:354)
at org.apache.fontbox.cff.CharStringRenderer.rlineTo(CharStringRenderer.java:140)
at org.apache.fontbox.cff.CharStringRenderer.handleCommand(CharStringRenderer.java:69)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:46)
at org.apache.fontbox.cff.CharStringRenderer.render(CharStringRenderer.java:48)
at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126)
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64)
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:505)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:382)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.lang.NullPointerException
at org.apache.fontbox.cff.CharStringRenderer.rrcurveTo(CharStringRenderer.java:148)
at org.apache.fontbox.cff.CharStringRenderer.handleCommand(CharStringRenderer.java:77)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:46)
at org.apache.fontbox.cff.CharStringRenderer.render(CharStringRenderer.java:48)
at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126)
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64)
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:505)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:382)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.lang.IllegalArgumentException
at org.apache.fontbox.cff.CFFParser.readCharset(CFFParser.java:512)
at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:320)
at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:66)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:299)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.lang.IllegalArgumentException
at org.apache.fontbox.cff.CFFParser.readCharset(CFFParser.java:512)
at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:320)
at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:66)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:299)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)",0,"Andreas Lehmkühler",Peter_Lenahan@ibi.co,0,1,"28/Apr/10 13:32","04/Mar/11 10:29","02/Jan/11 18:41"
PDFBOX-707,PDFBOX,"Add the current page and the number of pages to the title",Improvement,CLOSED,Minor,Fixed,1.1.0,1.2.0,"Swing GUI",None,,"You can flip through the pages of a pdf document using the PDFReader, but you can't see the current page and the total number of pages of the pdf.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"28/Apr/10 17:48","01/Jul/10 07:27","28/Apr/10 17:54"
PDFBOX-708,PDFBOX,"Failed to create Type1C font. Falling back to Type1 font",Bug,CLOSED,Major,Fixed,1.1.0,1.5.0,FontBox,None,,"Multiple errors which are probably all related.
Failed to create Type1C font. Falling back to Type1 font
java.lang.IllegalArgumentException
at org.apache.fontbox.cff.CFFParser.readCharset(CFFParser.java:512)
at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:320)
at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:66)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:299)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.awt.geom.IllegalPathStateException: missing initial moveto in path definition
at java.awt.geom.Path2D$Float.needRoom(Path2D.java:263)
at java.awt.geom.Path2D.closePath(Path2D.java:1752)
at org.apache.fontbox.cff.CharStringRenderer.closePath(CharStringRenderer.java:175)
at org.apache.fontbox.cff.CharStringRenderer.handleCommand(CharStringRenderer.java:82)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:46)
at org.apache.fontbox.cff.CharStringRenderer.render(CharStringRenderer.java:48)
at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126)
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64)
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:505)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:382)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.awt.geom.IllegalPathStateException: missing initial moveto in path definition
at java.awt.geom.Path2D$Float.needRoom(Path2D.java:263)
at java.awt.geom.Path2D.closePath(Path2D.java:1752)
at org.apache.fontbox.cff.CharStringRenderer.closePath(CharStringRenderer.java:175)
at org.apache.fontbox.cff.CharStringRenderer.handleCommand(CharStringRenderer.java:82)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:46)
at org.apache.fontbox.cff.CharStringRenderer.render(CharStringRenderer.java:48)
at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126)
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64)
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:505)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:382)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.awt.geom.IllegalPathStateException: missing initial moveto in path definition
at java.awt.geom.Path2D$Float.needRoom(Path2D.java:263)
at java.awt.geom.Path2D.closePath(Path2D.java:1752)
at org.apache.fontbox.cff.CharStringRenderer.closePath(CharStringRenderer.java:175)
at org.apache.fontbox.cff.CharStringRenderer.handleCommand(CharStringRenderer.java:82)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:46)
at org.apache.fontbox.cff.CharStringRenderer.render(CharStringRenderer.java:48)
at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126)
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64)
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:505)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:382)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.lang.IndexOutOfBoundsException: Index: 1,Size: 1
at java.util.SubList.rangeCheck(AbstractList.java:746)
at java.util.SubList.get(AbstractList.java:619)
at org.apache.fontbox.cff.CharStringConverter.drawCurve(CharStringConverter.java:344)
at org.apache.fontbox.cff.CharStringConverter.handleType2Command(CharStringConverter.java:225)
at org.apache.fontbox.cff.CharStringConverter.handleCommand(CharStringConverter.java:76)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:46)
at org.apache.fontbox.cff.CharStringConverter.convert(CharStringConverter.java:59)
at org.apache.fontbox.cff.CFFFont$Mapping.toType1Sequence(CFFFont.java:305)
at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126)
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64)
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:505)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:382)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.lang.IllegalArgumentException
at org.apache.fontbox.cff.CFFParser.readCharset(CFFParser.java:512)
at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:320)
at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:66)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:299)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.lang.IllegalArgumentException
at org.apache.fontbox.cff.CFFParser.readCharset(CFFParser.java:512)
at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:320)
at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:66)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:299)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)
Failed to create Type1C font. Falling back to Type1 font
java.lang.IllegalArgumentException
at org.apache.fontbox.cff.CFFParser.readCharset(CFFParser.java:512)
at org.apache.fontbox.cff.CFFParser.parseFont(CFFParser.java:320)
at org.apache.fontbox.cff.CFFParser.parse(CFFParser.java:66)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:299)
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:107)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:124)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:207)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:367)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:291)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:247)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:180)
at org.apache.tika.parser.pdf.PDF2XHTML.process(PDF2XHTML.java:56)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:81)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:121)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:104)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:117)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeedContent(LuceneFastFeed.java:2566)
at ibi.search.lucene.feed.LuceneFastFeed.parseFeed(LuceneFastFeed.java:1445)
at ibi.search.lucene.feed.LuceneFastFeed.<init>(LuceneFastFeed.java:925)
at ibi.search.lucene.feed.LuceneFastXmlFeedServlet.doPost(LuceneFastXmlFeedServlet.java:575)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:121)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
at ibi.srv.util.IBIHttpServlet.service(IBIHttpServlet.java:130)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
at java.lang.Thread.run(Thread.java:619)",0,"Andreas Lehmkühler",Peter_Lenahan@ibi.co,2,5,"28/Apr/10 22:46","01/Oct/11 17:25","02/Jan/11 18:35"
PDFBOX-710,PDFBOX,"XMPSchema.java:392 and XMPSchema.java:570 Possible null pointer dereference of bagElement",Bug,CLOSED,Major,Fixed,1.1.0,1.8.7,JempBox,None,,"Findbugs Scan of the code reports code paths which may result in a null pointer reference.
C:/workspace/ibi_apps/src/org/apache/jempbox/xmp/XMPSchema.java:570 Possible null pointer dereference of bagElement
C:/workspace/ibi_apps/src/org/apache/jempbox/xmp/XMPSchema.java:392 Possible null pointer dereference of bagElement
The solution is to test for null before attempting to use the objects.
A patch file is included
Peter",0,"Andreas Lehmkühler",Peter_Lenahan@ibi.co,0,1,"30/Apr/10 00:17","19/Sep/14 14:40","23/Jun/14 16:40"
PDFBOX-712,PDFBOX,"SecurityHandlersManager May stop the application Server when running PDFParser in a Servlet.","New Feature",CLOSED,Minor,Fixed,1.1.0,1.8.6,PDModel,None,,"When parsing a PDF document within an Application Server, you should never have a code path which call System.exit()
I am not sure what invokes the Class org.apache.pdfbox.pdmodel.encryption.SecurityHandlersManager() from with the code, so I have not a clue how to fix this.
I imagine that the best place to notify PDFBox that it is running in an application would be something like this.
PDDocument.setApplication(true or false);
I would like to be able to tell the Parser that it is not running as an application so this code is never hit, but I did not see a way to do this.
catch(Exception e)
{ System.err.println("SecurityHandlersManager strange error with builtin handlers: " + e.getMessage()); System.exit(1); }
Bug: new org.apache.pdfbox.pdmodel.encryption.SecurityHandlersManager() invokes System.exit(...), which shuts down the entire virtual machine
Pattern id: DM_EXIT, type: Dm, category: BAD_PRACTICE
Invoking System.exit shuts down the entire Java virtual machine. This should only been done when it is appropriate. Such calls make it hard or impossible for your code to be invoked by other code. Consider throwing a RuntimeException instead.",0,"Tilman Hausherr",Peter_Lenahan@ibi.co,0,4,"30/Apr/10 01:37","22/Jun/14 14:34","10/Jun/14 19:11"
PDFBOX-713,PDFBOX,"PDFont fails to close Font File.",Bug,CLOSED,Major,Fixed,1.1.0,1.5.0,FontBox,None,,"Findbugs Reported this problem.
I have include a patch which closes the file.
BufferedReader in = new BufferedReader(new InputStreamReader(fontFile.getUnfilteredStream()));
Bug: org.apache.pdfbox.pdmodel.font.PDFont.getEncodingFromFont() may fail to close stream
Pattern id: OS_OPEN_STREAM, type: OS, category: BAD_PRACTICE
The method creates an IO stream object, does not assign it to any fields, pass it to other methods that might close it, or return it, and does not appear to close the stream on all paths out of the method. This may result in a file descriptor leak. It is generally a good idea to use a finally block to ensure that streams are closed.",0,"Andreas Lehmkühler",Peter_Lenahan@ibi.co,0,0,"30/Apr/10 02:07","04/Mar/11 10:29","23/Jan/11 18:36"
PDFBOX-719,PDFBOX,"Bookmarks not merged correctly by PDFMergerUtility",Bug,CLOSED,Major,Fixed,None,1.2.0,Utilities,None,"windows, java 1.5","When multiple PDFs with bookmarks are merged, not all of the bookmarks are in the output and they are not in the expected order. The output will have all bookmarks from the first file, the first bookmark from all files, and then the bookmarks 2-n of file #2. Files 3 and above will only have the first bookmark copied over.
The expected behavior is that all bookmarks for file 1 appear, followed by all bookmarks for files 2, then all bookmarks for file 3 and so on.
Code to duplicate the problem:
String inputFile = "C:
US_Constitutional_Ammendments_bookmarked.pdf";
String outputFile = "C:
US_Constitutional_Ammendments_bookmarked3.pdf";
PDFMergerUtility merger = new PDFMergerUtility();
merger.setDestinationFileName(outputFile);
merger.addSource(inputFile);
merger.addSource(inputFile);
merger.addSource(inputFile);
merger.mergeDocuments();",0,"Andreas Lehmkühler","Adam Nichols",0,0,"03/May/10 19:22","01/Jul/10 07:27","09/Jun/10 18:38"
PDFBOX-723,PDFBOX,"Our test hangs with custom pdf file on operation PDPage.convertToImage()",Bug,CLOSED,Major,Fixed,"0.7.3, 1.1.0, 1.2.0",2.0.0,None,None,"linux, java 1.5","Our code is:
      String pdfname = "081111.pdf";
      InputStream pdf = Thread.currentThread().getContextClassLoader().getResourceAsStream(pdfname);
      ContentStream stream = new BaseContentStream(pdf, pdfname, new MimeType("application", "pdf"));

      PDDocument pdf = PDDocument.load(stream.getStream());
      PDPage page = (PDPage)pdf.getDocumentCatalog().getAllPages().get(0);
      BufferedImage image = page.convertToImage();
...",0,"Andreas Lehmkühler","Alexey Zavizionov",0,1,"06/May/10 15:54","17/Mar/16 19:07","09/Aug/13 17:54"
PDFBOX-725,PDFBOX,"Text extraction fails due to font problem with Type0, supplement-0 font",Bug,CLOSED,Major,Fixed,1.2.0,2.0.0,"Text extraction",None,"fedora, windows","Text extraction fails. In particular, download and view pg23 or others (1-based) of:
http://www.encana.com/investors/financial/annualreports/2008/pdfs/annual-report-2008.pdf
With pdfbox text extraction, last 5 lines of page are displayed as "?". Other pages in the file have similar problems.
Text extraction yields multiple "?" because "font.encode(buf,i,2)" returns null.
The font COSDictionary contains:
COSName
{Subtype}=COSName{Type0}
COSName{DescendantFonts}=COSArray{[COSObject{554, 0}]}
COSName{BaseFont}=COSName{HelveticaNeueLTStd-Lt-Identity-H}
COSName{Encoding}=COSName{Identity-H}
COSName{Type}=COSName{Font}

The "font.descendentFont" has the following COSDictionary items:
COSName{Subtype}
=COSName
{CIDFontType0}
COSName
{FontDescriptor}=COSObject{540, 0}
COSName{BaseFont}=COSName{ALJOHE+HelveticaNeueLTStd-Lt}
COSName{W}=...
COSName{CIDSystemInfo}=COSDictionary{(COSName{Supplement}:COSInt{0}) (COSName{Ordering}:COSString{Identity},(COSName{Registry}:COSString{Adobe}) }
COSName{DW}=COSInt{1000}
COSName{Type}=COSName{Font}

The "fontDescriptor" of the descendentFont is:
{COSName{StemV}=COSInt{58},
COSName{FontName}=COSName{ALJOHE+HelveticaNeueLTStd-Lt},
COSName{FontFile3}=COSObject{543, 0},
COSName{CIDSet}=COSObject{545, 0},
COSName{Flags}=COSInt{6},
COSName{Descent}=COSInt{-271},
COSName{FontBBox}=COSArray{[COSInt{-166}, COSInt{-214}, COSInt{1050}, COSInt{967}]}, COSName{Ascent}=COSInt{752},
COSName{CapHeight}=COSInt{737},
COSName{XHeight}=COSInt{553},
COSName{Type}=COSName{FontDescriptor}
,
COSName
{ItalicAngle}
=COSInt
{0}
,
COSName
{StemH}
=COSInt{45}}
The last 5 lines on the page are:
"Increased Cash Flow by 11 percent to $9,386 million;"
"Increased Operating Earnings by ..."
etc
These 5 lines are encoded as 2 bytes per character (it is a type0 font)
Each 2 byte code is offset by 31 from its displayed value.
For instance, code "0x00, 0x01" should convert to ascii "0x0020" (a space).
The font is an "Identity" font, which means codes should just map to latin ISO chars.
Yeah, this is a Type0 font which can display a subset of another font (the latin ISO),
but how come codes differ from the ascii by +31?
This same 31 offset is found on all other pages of the file using this font.
The font descriptor for the descendentFont has "Flags=6". Bit 3 is "Symbolic".
PDF Spec 5.7.1 "Font contains glyphs outside the Adobe standard Latin character set."
Maybe because the Font is "Symbolic" there is not a 1:1 map from codes to ascii.
The question is whether the PDF file specifies the +31 offset, and pdfbox fails to properly account for this offset.. I can't find any reference to such an offset in the PDF spec. The 'getFirstChar()' in the descendentFont is -1, but the real value is"32". Maybe this +31 offset just equals 'firstChar-1'?
The real firstChar can be found via:
COSDictionary fontDict = (COSDictionary)font.getCOSObject();
COSArray descendantFontArray = (COSArray)fontDict.getDictionaryObject(COSName.DESCENDANT_FONTS);
if (descendantFontArray != null)
{ COSDictionary descendantFontDictionary = (COSDictionary)descendantFontArray.getObject(0); PDFont descendentFont = PDFontFactory.createFont(descendantFontDictionary); Encoding encoding = descendentFont.getEncoding(); Iterator keyIterator = codeMap.keySet().iterator(); int firstChar=Integer.MAX_VALUE; while (keyIterator.hasNext()) firstChar = Math.min(firstChar,((Integer)keyIterator.next()).intValue()); }
Other example on page 3 of the document:
Text "Portfolio of ...." displays in Acrobat Reader, but the byte[] contains:
[0, 49, 0, 80, 0, 83, 0, 85, 0, 71, 0, 80, 0, 77, 0, 74, 0, 80, 0, 1, 0, 80, 0, 71, 0, 1, 0, 70, 0, 84, 0, 85, 0, 66, 0, 67, 0, 77, 0, 74, 0, 84, 0, 73, 0, 70, 0, 69, 0, 1, 0, 83]
Again, if +31 is added to each of these 2-byte codes then the Ascii is found.
Where does this "+31" come from? Acrobat reader gets it right. How about pdfbox?",0,"Andreas Lehmkühler","Peter Costello",4,3,"10/May/10 20:47","17/Mar/16 19:08","02/Nov/13 15:45"
PDFBOX-728,PDFBOX,"Text extracted from a TeX-created PDF file comes in some form of hex encoding",Bug,CLOSED,Minor,Fixed,1.1.0,2.0.0,"Text extraction",None,"mac os x","The text in this example is extracted essentially correctly, but presented in a hex-encoded form, probably interspersed with some non encoded characters as in the following example:
x54x6f x69x6ex63x6fx72x70x6fx72x61x74x65 x74x68x65 x65x6cx61x73x74x69x63 x70x72x6fx70x65x72x74x69x65x73 x6fx66 x74x68x65 x6dx61x74x65x72x69x61x6cx2c x77x65 x6ex65x65x64 x74x6f x69x6ex74x72x6fx64x75x63x65 x74x68x65 x64x65x66x6fx72x2d
x6dx61x74x69x6fx6e x74x65x6ex73x6fx72
F(X, t) = ∂x∂X (X, t).
A Perl command like
s/x([\da-f]
{2}
)/chr(hex($1))/eg;
will usually reveal a correct translation, although certain characters may be off, I had to add e.g.
s/ÿ/ß/g;",0,"Andreas Lehmkühler","Thomas Fischer",0,1,"16/May/10 11:39","17/Mar/16 19:06","13/Sep/14 15:08"
PDFBOX-73,PDFBOX,"find and replace existing text","New Feature",CLOSED,Minor,"Won't Fix",0.7.0,None,Utilities,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1239382
Originally submitted by nobody on 2005-07-16 04:25.
hello,
i´m looking for a tool which i can use to find a flagged
text ("[[page1]]") and replace this with a hyperlinked
text ("page1").
would this be possible with PDFBox?
thank you for your help
oliver
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
changed from bug to feature request.",0,"Andreas Lehmkühler",Anonymous,0,1,"16/Jul/05 11:25","23/Nov/14 17:17","23/Nov/14 17:17"
PDFBOX-730,PDFBOX,"Basic implementation of Crypt filter","New Feature",CLOSED,Major,Fixed,None,1.2.0,Utilities,None,"windows, java 1.5","I got an exception when trying to merge some documents which read "Unknown stream filter:COSName
{Crypt}
". I've looked around and it found this is a feature which was introduced in version 1.5 of the PDF spec. PDFBox doesn't have this filter implemented yet. This should be implemented per section 7.6.5 "Crypt Filters" of the PDF Specification (for reference, I'm looking at version 1.7 of the spec).
I only have one example PDF which requires this filter and it uses the default encryption (Identity), so this will be the only type of Crypt filter which will be implemented for now. Since I don't have an example which has a filter "Name", I will only be implementing the case where the default is used as I have no test case for Name==Identity. If the "Name" is specified, it will throw an exception (currently it throws an exception for any Crypt filter).",0,"Andreas Lehmkühler","Adam Nichols",0,0,"19/May/10 21:17","01/Jul/10 07:27","09/Jun/10 17:19"
PDFBOX-731,PDFBOX,"Inconsistencies in TextPositionComparator and sortByPosition",Bug,CLOSED,Major,"Cannot Reproduce","1.1.0, 2.0.0",None,Utilities,None,,"Specifying sortByPosition on PDFTextStripper can result in scrambling of text. The problem is caused largely by inconsistencies in TextPositionComparator, which does not always satisfy the required comparator constraint that if a < b and b < c, then a < c. As a result, a true sort is sometimes not achievable. This is caused by the comparator being too flexible with what is regarded as being on the same "line".
I modified the comparator to be more strict when deciding which characters are on the same line, specifically:
1. Two pieces of text can't be on the same line if one's font is double or more the size of the other's.
2. Two pieces of text can't be on the same line if one's baseline is more than half the smaller font point size from the other's baseline.
I'm sure there are probably (superscript?) cases where these two conditions may be too strict, but at least they should (I think but haven't tried to prove result in a < b < c. The comparator source I have used is below, feel free to use or modify it in any way.
Finally, PDFTextStripper needs to be more discriminating in inserting line breaks. Specifically, if the x position of a text segment is < the x position of the last text segment, the there is an implicit line-break. To fix this, I changed:
     if(!overlap(positionY, positionHeight, maxYForLine, maxHeightForLine))
to:
     if(!overlap(positionY, positionHeight, maxYForLine, maxHeightForLine) || (sortByPosition && positionX < lastPosition.getXDirAdj()))
Revised comparator source:
public class TextPositionComparator implements Comparator
{
        private int strictCompare(Object o1, Object o2)
 {
  TextPosition pos1 = (TextPosition)o1;
        TextPosition pos2 = (TextPosition)o2;
        
        // Get the text direction adjusted coordinates
        
        float pos1YBottom = pos1.getYDirAdj();
        float pos2YBottom = pos2.getYDirAdj();

        if (pos1YBottom < pos2YBottom)
         return -1;
        else if (pos1YBottom > pos2YBottom)
         return 1;
        
        float x1 = pos1.getXDirAdj();
        float x2 = pos2.getXDirAdj();
        
        if (x1 < x2)
         return -1;
        else if (x1 > x2)
         return 1;
        
        return 0;
 }
 
 public int compare(Object o1, Object o2)
 {
  TextPosition pos1 = (TextPosition)o1;
        TextPosition pos2 = (TextPosition)o2;

        /* Only compare text that is in the same direction. */
        if (pos1.getDir() < pos2.getDir())
            return -1;
        else if (pos1.getDir() > pos2.getDir())
            return 1;

        float size1 = pos1.getFontSize();
        float size2 = pos2.getFontSize();
        
        if (size1 <= size2/2 || size1 >= size2*2)
         return strictCompare(o1, o2);

        float fontsize = size1;
        
        if (size2 < size1)
         fontsize = size2;
        
        float pos1YBottom = pos1.getYDirAdj();
        float pos2YBottom = pos2.getYDirAdj();

        if (pos1YBottom <= pos2YBottom - fontsize/2 || pos1YBottom >= pos2YBottom + fontsize/2)
         return strictCompare(o1, o2);
        
        // Get the text direction adjusted coordinates
        float x1 = pos1.getXDirAdj();
        float x2 = pos2.getXDirAdj();

        if (x1 < x2)
         return -1;
        else if (x1 > x2)
         return 1;
        
        return 0;
 }
}
YMMV.",0,"Andreas Lehmkühler","Michael van Rooyen",0,2,"21/May/10 13:14","12/Oct/14 12:31","12/Oct/14 12:31"
PDFBOX-732,PDFBOX,"Loading TTF font files from the classpath",Improvement,CLOSED,Major,Fixed,1.1.0,1.2.0,PDModel,font,,"Currently (pdfbox 1.1.0 & 1.2.0 snapshot) TTF font files can only be loaded from the file system as PDTrueTypeFont exposes two load methods:
public static PDTrueTypeFont loadTTF(PDDocument, String)
public static PDTrueTypeFont loadTTF(PDDocument, File)
The first wraps the String in a java.io.File object and delegates to the second, so all TTF reading is from the file system.
It would be useful to be able to read TTF files from the classpath - or indeed from any arbitrary stream.
Could we have a third method?:
public static PDTrueTypeFont loadTTF(PDDocument, InputStream)
This would allow TTFs to be loaded like so:
PDTrueTypeFont.load(myDoc, MyClass.class.getClassLoader().getResourceAsStream("myFont.ttf"));
For what it's worth here's a patch of what I did (see below).
One uncertainty I had was about the use of the COSName.LENGTH1 field which only seems to be used currently in PDTrueTypeFont. So it may be reasonable or not to push the setting of this attribute into the PDStream constructor.
Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java
===================================================================
— pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java (revision 948363)
+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java (working copy)
@@ -114,12 +114,17 @@
{ output = stream.createUnfilteredStream(); }
+ int bytesInInputStream = 0;
byte[] buffer = new byte[ 1024 ];
int amountRead = -1;
while( (amountRead = str.read(buffer)) != -1 )
{ output.write( buffer, 0, amountRead ); + bytesInInputStream += amountRead; }
+
+ // Set the number of bytes read from the input stream
+ this.stream.setInt( COSName.LENGTH1, bytesInInputStream );
}
finally
{ Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java =================================================================== --- pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java (revision 948363) +++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java (working copy) @@ -130,7 +130,7 @@ }
/**
* This will load a TTF to be embedding into a document.
+ * This will load a TTF to be embedded into a document.
*
@param doc The PDF document that will hold the embedded font.
@param file A TTF file stream.
@@ -139,21 +139,32 @@
*/
public static PDTrueTypeFont loadTTF( PDDocument doc, File file ) throws IOException { + return loadTTF( doc, new FileInputStream( file ) ); + }
+
+ /**
+ * This will load a TTF to be embedded into a document.
+ *
+ * @param doc The PDF document that will hold the embedded font.
+ * @param stream A TTF input stream.
+ * @return A PDF TTF.
+ * @throws IOException If there is an error loading the data.
+ */
+ public static PDTrueTypeFont loadTTF( PDDocument doc, InputStream stream ) throws IOException
+ {
PDTrueTypeFont retval = new PDTrueTypeFont();
PDFontDescriptorDictionary fd = new PDFontDescriptorDictionary();
PDStream fontStream = new PDStream(doc, new FileInputStream( file ), false );
fontStream.getStream().setInt( COSName.LENGTH1, (int)file.length() );
+ PDStream fontStream = new PDStream(doc, stream, false );
fontStream.addCompression();
fd.setFontFile2( fontStream );
retval.setFontDescriptor( fd );
InputStream ttfData = new FileInputStream(file);
try { - loadDescriptorDictionary(retval, fd, ttfData); + loadDescriptorDictionary(retval, fd, stream); }
finally
{ - ttfData.close(); + stream.close(); }
//only support winansi encoding right now, should really
//just use Identity-H with unicode mapping",0,"Andreas Lehmkühler","Neil McErlean",0,0,"27/May/10 10:16","01/Jul/10 07:27","16/Jun/10 21:08"
PDFBOX-733,PDFBOX,"Implementation of function types 0,2 and 3 to be used in Separation and DeviceN colorspaces",Improvement,CLOSED,Major,Fixed,"0.8.0-incubator, (2)",1.2.0,"PDModel, (1)","colorspaces devicen ",,"I'm working on an implementation of the function types 0,2 and 3 which are used within Separation and DeviceN colorspaces.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"28/May/10 08:37","01/Jul/10 07:27","09/Jun/10 17:22"
PDFBOX-734,PDFBOX,"how to access a PDoutlineNode object's parent without using its protected menthod getParent() ?",Bug,CLOSED,Blocker,Fixed,1.1.0,1.1.0,None,None,"windows, java","I have some java codes that depend on the getParent() method to traverse the PDOutlineNode structure. They works fine with old version of PDFBox since this method is declared as a public method. Now it is changed to protected in the new version 1.1.0. How should I make my code work without extending or subclassing PDOutlineNode?",0,"Adam Nichols","Harry Lee",0,0,"29/May/10 11:59","24/Mar/13 14:30","28/Jun/11 21:18"
PDFBOX-735,PDFBOX,"Automatic license header checks",Improvement,CLOSED,Major,Fixed,None,1.2.0,None,None,,"It would be nice if we included automatic ASF license header checks in our build. I've done this with Apache RAT in Jackrabbit, and can implement the same mechanism also in PDFBox.",0,"Jukka Zitting","Jukka Zitting",0,0,"31/May/10 08:50","01/Jul/10 07:27","31/May/10 10:02"
PDFBOX-739,PDFBOX,"Problem converting pdf page w/ fully embedded TTF font, Identity-H (CID)",Bug,CLOSED,Major,Fixed,1.2.0,1.2.0,PDModel,"image pdf",,"I'm running into an issue when trying to convert a pdf page to an image. Conditions:
Pdf file with TrueType font fully embedded
Encoding: Identity-H (CID)
Although the FontFile2 stream is present, I get (I added extra info logging):
Jun 1, 2010 12:44:38 PM org.apache.pdfbox.pdmodel.font.PDFontFactory createFont
INFO: subType: COSName
{Type0}
Jun 1, 2010 12:44:38 PM org.apache.pdfbox.pdmodel.font.PDFontFactory createFont
INFO: subType: COSName
{CIDFontType2}
Jun 1, 2010 12:44:39 PM org.apache.pdfbox.pdmodel.font.PDType1Font getawtFont
INFO: Can't find the specified basefont DroidSansFallback
java.lang.Throwable
at org.apache.pdfbox.pdmodel.font.PDType1Font.getawtFont(PDType1Font.java:234)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(PDSimpleFont.java:97)
at org.apache.pdfbox.pdmodel.font.PDType0Font.drawString(PDType0Font.java:68)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:190)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:498)
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:556)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:250)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:208)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:111)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:718)
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:137)
at org.apache.pdfbox.PDFToImage.main(PDFToImage.java:204)
INFO: Using font ArialMT instead
test with:
java -jar pdfbox-app-1.2.0-SNAPSHOT.jar PDFToImage -imageType png -startPage 1 -endPage 1 -color rgba -resolution 108 hello-DroidSans-Identity-H.pdf
Attached is a sample pdf with one of the droid fonts fully embedded in the above manner (free, Apache 2 license):
http://android.git.kernel.org/?p=platform/frameworks/base.git;a=tree;f=data/fonts;hb=HEAD
(The attached file has DroidSans instead of DroidSansFallback as in the log to keep the file size down, but it has the same result)
(I was able to hack fix by changing PDType0 to extends PDTrueTypeFont, but that seems like a terrible hack).
Below are the relevant parts of the pdf that cause the getawtFont issue:
1 0 obj
<</DescendantFonts[7 0 R]
/BaseFont/DroidSans/Type/Font/Encoding/Identity-H/Subtype/Type0/ToUnicode 8 0 R>>
endobj
4 0 obj
<</Parent 3 0 R/Contents 2 0 R/Type/Page/Resources<</ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font<</F1 1 0 R>>
/MediaBox[0 0 328.5 449.28]>>
endobj
5 0 obj
<</Length1 190044/Length 190044>>stream
-snip TTF stream-
endstream
6 0 obj
<</FontBBox[-558 -270 1168 1047]/CapHeight 713/Type/FontDescriptor/FontFile2 5 0 R/StemV 80/Descent -240/Flags 32/FontName/DroidSans/Ascent 765/ItalicAngle 0>>
endobj
7 0 obj
<</BaseFont/DroidSans/CIDSystemInfo<</Ordering(Identity)/Registry(Adobe)/Supplement 0>>/W [3[259 269]43[701]58[883]71[585 535]79[258]82[577]85[398]]/Type/Font/Subtype/CIDFontType2/FontDescriptor 6 0 R/DW 1000/CIDToGIDMap/Identity>>
endobj
8 0 obj
<</Length 485>>stream
/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo
<< /Registry (TTX+0)
/Ordering (T42UV)
/Supplement 0
def
/CMapName /TTX+0 def
/CMapType 2 def
1 begincodespacerange
<0000><FFFF>
endcodespacerange
9 beginbfrange
<0003><0003><0020>
<0004><0004><0021>
<002b><002b><0048>
<003a><003a><0057>
<0047><0047><0064>
<0048><0048><0065>
<004f><004f><006c>
<0052><0052><006f>
<0055><0055><0072>
endbfrange
endcmap
CMapName currentdict /CMap defineresource pop
end end
endstream
endobj",0,"Andreas Lehmkühler","Armando Singer",0,0,"02/Jun/10 07:53","01/Jul/10 07:27","10/Jun/10 19:52"
PDFBOX-741,PDFBOX,"Build latest source code of PDFBox with JDK 1.4.2_16",Task,CLOSED,Major,Invalid,1.1.0,None,None,"Build JDK","java 1.4","I would like to know how to build the latest release of PDFBox with JDK 1.4.2_16 version. Current downloadable version is build using JDK 1.6 release.",0,"Jukka Zitting","Naga Kishore Vankaya",0,0,"02/Jun/10 23:04","11/Jul/10 15:05","03/Jun/10 09:07"
PDFBOX-744,PDFBOX,"Landscape PDF Rasterized as Portrait",Bug,CLOSED,Major,Fixed,1.2.0,1.7.0,Utilities,None,,"The Rotate entry on Page objects is not taken into account when converting a PDF into an image.",0,"Andreas Lehmkühler","Vincent Hennebert",0,0,"07/Jun/10 14:54","29/May/12 16:21","10/Aug/11 06:05"
PDFBOX-758,PDFBOX,"Rotated images aren't placed and rendered correctly while converting PDF pages to images",Bug,CLOSED,Major,Fixed,"1.1.0, 1.2.0",1.6.0,None,None,"java 1.5, java 1.6","Rotated images are misplaced and incorrectly clipped when converting a PDF page to an image.
See attached images and pdf for an example.",0,"Andreas Lehmkühler","Luca De Petrillo",0,1,"22/Jun/10 10:59","02/Jul/11 16:28","25/Mar/11 21:37"
PDFBOX-759,PDFBOX,"Special characters not extracted",Bug,CLOSED,Major,Fixed,"1.1.0, 1.2.0",1.4.0,"Text extraction",None,,"When trying to extract characters for mathematic formulas, there appear to be lots of characters that don't seem to have any meaning.
Take the example on page 80 the last formula with the binomial coefficient. The first opening bracket, when extracted using the Foxit Reader or Adobe Reader gets a character with the int value 18 and the closing bracket is the int value 19. Now when I look at the TextPosition objects using PDFBox, there is one character to the left of the 5 and that one has the glyph name spacehackarabic/space and the int value 32.
The next problem is that there seems to be a character at the same position as the 5, a 'controlLF'. What does it do at the same position as that number?
Mpw after the character 2 are 3 other characters, another 'controlLF' and two 'spacehackarabic/space'. There is no indication whatsoever abouth the bracket. What do those extra characters mean? And why doesn't it show the character for the bracket that I am able to extract using the other PDF readers?
The PDF can be downloaded from http://upload.wikimedia.org/wikibooks/de/f/f6/Mathematik_Stochastik.pdf",0,"Andreas Lehmkühler","Sebastian Freuck",0,1,"24/Jun/10 12:47","20/Dec/10 09:38","14/Dec/10 19:55"
PDFBOX-76,PDFBOX,"Text Extraction Unsuccessful with PDFBox",Bug,CLOSED,Major,"Not A Problem",None,None,"Text extraction",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1250097
Originally submitted by salchow on 2005-08-02 03:07.
Hi Ben,
Here you will find the different files : PDF, text file obtain
with PDFBox, text file obtain with TextFromPDF.
Thanks!
salchow
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1250097&file_id=144104
PDFBox.rar (application/octet-stream), 39931 bytes
[comment on SourceForge]
Originally sent by nobody.
Logged In: NO
I'm getting the following error
Exception in thread "main" java.lang.NoSuchMethodError: org.pdfbox.util.operator.OperatorProcessor.setContext(Lorg/pdfbox/util/PDFStreamEngine;)V
while extracting text from pdf file.
Please help me!
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
A parser for Type1C CFF fonts needs to be written. Adobe
technical spec 5176 CFF talks about the file format. It is a
binary format that looks pretty straighforward, should be
pretty fun to write a parser for it.
This is not a high priority right now, but if someone is willing
to write the parser I will integrate it. If you would like to write
a parser please let me know and we can discuss, it needs to
be somewhat robust as the data structures it creates should
support modifying data so the font can be written back to a
stream, which will support embedding fonts back into the pdf
document.
If this parser is written, I may start a separate project that just
deals with font files in java, PDFBox currently has parsers for
TTF/PFB and soon CFF I see more advanced font
requirements in the pipeline, this type of functionality is really
outside the scope of PDFBox but I don't believe anything else
exists. I am sure if I start a font library project there are other
java libraries that could make use of it as well
Ben Litchfield",0,"Andreas Lehmkühler",Anonymous,0,1,"02/Aug/05 10:07","26/Dec/12 16:45","26/Dec/12 16:45"
PDFBOX-761,PDFBOX,"Border settings are not honored on some PDF documents",Bug,CLOSED,Minor,Fixed,1.1.0,1.3.1,"Swing GUI",None,"mac os, java 1.5","I'm using PDFBox to create a PDF rendering plug-in for Eclipse. I noticed that my plug-in does not honor the border settings of certain documents and renders them in the bottom-left corner (with no space whatsoever between the document text/graphics and the bottom-left corner of the image canvas). Those same documents, however, render correctly when I view them in Adobe Reader or Apple's Preview application.
I was able to reproduce the same faulty behavior with PDFToImage, so I assume that this problem has nothing to do with my plug-in code. Rather than attaching some example documents, I'd rather provide some links (they're public income tax documents anyway):
http://www.irs.gov/pub/irs-pdf/f1040sce.pdf (this document renders correctly)
http://www.irs.gov/pub/irs-pdf/fw4.pdf (this document renders incorrectly, without proper borders)
Let me know if you need any further information to properly diagnose this bug.",0,"Andreas Lehmkühler","Mirko Raner",0,0,"26/Jun/10 04:35","03/Feb/11 18:10","03/Feb/11 18:10"
PDFBOX-764,PDFBOX,"Access to metadata keys in the PD model",Improvement,CLOSED,Minor,Fixed,1.2.0,1.3.1,PDModel,None,,"Currently 1.2.0 I don't think it's possible to get a document's metadata keys from the PD model.
It is possible to get the metadata keys by calling PDDocumentInformation.getDictionary().keySet() and calling getName() on the COSName objects returned.
But that means having to know about the COSDictionary and COSName objects i.e. the lower-level COS model.
It would be nice to be able to retrieve the metadata keys directly from the PD model.
I'm about to add a patch that does this. The patch will also add a new test class.",0,"Jukka Zitting","Neil McErlean",0,1,"30/Jun/10 11:42","26/Oct/10 09:33","06/Oct/10 09:23"
PDFBOX-765,PDFBOX,"Performance regression in PDFBox 1.2.0",Bug,CLOSED,Critical,Fixed,1.2.0,1.2.1,None,None,,"Arjohn Kampman reported a notable performance drop in PDFBox 1.2.0, possibly caused by PDFBOX-754.",0,"Jukka Zitting","Jukka Zitting",0,1,"30/Jun/10 11:49","11/Jul/10 14:56","01/Jul/10 10:45"
PDFBOX-766,PDFBOX,"CLONE -convertToImage seems to invert colors",Bug,CLOSED,Major,Duplicate,0.8.0-incubator,1.2.0,Parsing,None,,"The pdfbox support team asked me to post this message on this forum so attachments could be seen
I have a pdf document that has a white background with black text. It
appears after I make the call to convertToImage the colors are reversed. A
black background with white text
pdDocument = PDDocument.load(new ByteArrayInputStream(aContent));
List<PDPage> documentPageList = pdDocument.getDocumentCatalog().getAllPages();
for(int i=0; i<documentPageList.size(); ++i) {
PDPage aPage = documentPageList.get;
for (int x=1; x < 14; x++) {
BufferedImage tempImage = convertToImage(x, (2 * 72),aPage);
ImageIO.write(tempImage,"jpeg", new File("c:
tmp
page-" + x + ".jpeg"));
}
}",0,"Andreas Lehmkühler","Roland Quast",0,0,"30/Jun/10 18:12","30/Jun/10 18:20","30/Jun/10 18:20"
PDFBOX-767,PDFBOX,"CLONE -convertToImage seems to invert colors",Bug,CLOSED,Major,Fixed,"0.7.0, (7)",1.6.0,Parsing,None,,"The pdfbox support team asked me to post this message on this forum so attachments could be seen
I have a pdf document that has a white background with black text. It
appears after I make the call to convertToImage the colors are reversed. A
black background with white text
pdDocument = PDDocument.load(new ByteArrayInputStream(aContent));
List<PDPage> documentPageList = pdDocument.getDocumentCatalog().getAllPages();
for(int i=0; i<documentPageList.size(); ++i) {
PDPage aPage = documentPageList.get;
for (int x=1; x < 14; x++) {
BufferedImage tempImage = convertToImage(x, (2 * 72),aPage);
ImageIO.write(tempImage,"jpeg", new File("c:
tmp
page-" + x + ".jpeg"));
}
}",0,"Andreas Lehmkühler","Roland Quast",0,1,"30/Jun/10 18:14","13/May/12 07:38","30/May/11 16:41"
PDFBOX-768,PDFBOX,"Convert to image makes blank image",Bug,CLOSED,Major,Fixed,1.2.0,1.6.0,None,None,"mac os x","The attached file when run through convertToImage is white (doesn't render anything when it should).",0,"Andreas Lehmkühler","Roland Quast",1,4,"30/Jun/10 18:41","02/Jul/11 16:29","29/May/11 17:45"
PDFBOX-770,PDFBOX,"Greek text extraction",Bug,CLOSED,Major,Fixed,"1.2.0, 1.2.1, 1.3.1",1.5.0,"Text extraction",None,ubuntu,"Greek text extraction error
Ι have a greek pdf but
a) after extraction the greek letter π is extracted as pi
for expamle
original text in pdf
"φυσικών προσώπων"
extracted text
"φυσικών piροσώpiων"
b) the greek letter μ is displayed as µ
there is no difference in display except that is different encoding and when searching for μ cannot find it (you find only the uppercase Μ)
if you copy μ as displayed search for that is working fine
e.g. the word is displayed as "κλίµακας" but it is different from the typed word κλίμακα due to the letter μ
due to this problem solr is not indexing documents correctly
is there any configuration I can make?",0,"Andreas Lehmkühler","Manos Karampasis",0,0,"04/Jul/10 17:40","08/Mar/11 16:37","08/Mar/11 16:36"
PDFBOX-771,PDFBOX,"PDF 2 Tiff conversion is not happening properly",Bug,CLOSED,Major,Fixed,1.2.0,1.6.0,"Swing GUI",None,,"We are trying to convert PDF to Tiff using the below code, the tiff images are not coming well (width is shrinking, please see the attachment of pdf file and converted tiff file).
PDDocument document = PDDocument.load(pdfFile);
List<PDPage> pages = document.getDocumentCatalog().getAllPages();
for (int i = 0; i < pages.size(); i++) {
PDPage page = (PDPage) pages.get;
BufferedImage image = page.convertToImage(12, 300);
// Convert this image to tiff file.
}
To overcome this problem I modified below code in 'org.apache.pdfbox.util.operator.pagedrawer.Invoke' to adjust the width and height.
// My page width is always 2479
int imageWidth = awtImage.getWidth();
if(imageWidth > 2479) {
imageWidth = 2479;
}
// My page height is always 3508
int imageHeight = awtImage.getHeight();
if(imageHeight > 3508) {
imageHeight = 3508;
}
Now images are coming fine, it is very slow in processing, not even processing 25 pdfs per hour, also it has memory leaks, it uses lot of resources, it is killing other process with OutOfMemory errors.",0,"Andreas Lehmkühler","sri vasu",0,0,"07/Jul/10 14:22","22/Mar/17 05:55","30/May/11 17:08"
PDFBOX-773,PDFBOX,"expected='obj' actual='o' error while parsing the attached PDF",Bug,CLOSED,Major,"Won't Fix","1.2.0, 1.3.1, 1.6.0",None,Parsing,None,"java 1.6, windows 7","Parsing the attached PDF fails with the following error:
Caused by: java.io.IOException: expected='obj' actual='o' org.apache.pdfbox.io.PushBackInputStream@11d75b9
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:509)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:179)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:859)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:826)
...
The same errors appears with the 1.1, 1.2 releases and the 1.3 latest trunk so far - svn rev. 962879 .
The file opens without warnings or any visible issues in the latest versions of Foxit Reader and Acrobat Reader on Windows. The parsing was done via the Apache Tika Parser.
Thank you",0,"Timo Boehme","Marin Nozhchev",1,2,"10/Jul/10 16:41","23/Mar/13 13:05","21/May/12 22:27"
PDFBOX-774,PDFBOX,"convertToImage causes JVM crash on certain PDFs",Bug,CLOSED,Major,Duplicate,"1.2.0, 1.2.1",None,None,None,,"I'm evaluating PDFBox and as part of the process I tried out several PDFs on it. One of the issues I found was on converting certain PDFs to images, it crashed the JVM with this message (Ubuntu Lucid Lynx 64-bit):
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fe5b6be1a37, pid=2133, tid=140628023412496
#
# JRE version: 6.0_20-b02
# Java VM: Java HotSpot(TM) 64-Bit Server VM (16.3-b01 mixed mode linux-amd64 )
# Problematic frame:
# C  [libfontmanager.so+0x27a37]
#
# An error report file with more information is saved as:
# /home/xxxxxx/hs_err_pid2133.log
#
# If you would like to submit a bug report, please visit:
#   http://java.sun.com/webapps/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
Of course, this seems like an issue with Java but it would be nice if PDFBox somehow worked around it. I tested this on 2 separate 64-bit Linux boxes as well as a 32-bit Windows box. Pretty much the same error on both platforms.",0,"Jukka Zitting","Niraj Bhawnani",1,1,"14/Jul/10 01:25","26/Oct/10 09:42","09/Aug/10 13:29"
PDFBOX-776,PDFBOX,"Text extraction gibberish after ghostscript update",Bug,CLOSED,Major,"Won't Fix",1.2.1,None,"FontBox, (1)",None,,"I have a test pdf document that is generated using ps2pdf from ghostscript.
If I use ghostscript 8.70 then pdfbox will correctly extract the text
If I use ghostscript 8.71 then pdfbox will not correctly extract the text (same byte count but gibberish characters).
I will also note, that I had to update poppler to 0.14 to get it to correctly extract text from the test-871.pdf, the previous version would only extract the correct text from text-870.pdf.
Attached will be the pdf generated using the same original postscript file but run using ghostscript 8.70 vs 8.71.",0,"Andreas Lehmkühler","Kevin Pearcey",0,2,"16/Jul/10 11:53","06/Apr/13 14:10","06/Apr/13 14:10"
PDFBOX-777,PDFBOX,"Add utility class to easily extract a range of pages from a PDF","New Feature",CLOSED,Major,Fixed,None,1.3.1,Utilities,None,,"There's currently no utility to extract a range of pages (e.g. pages 3-7). This task adds a PageExtractor class and a corresponding JUnit test class.",0,"Adam Nichols","Adam Nichols",0,0,"16/Jul/10 17:43","26/Oct/10 09:33","19/Jul/10 22:26"
PDFBOX-779,PDFBOX,"All English characters and some Chinese words are separated by a space",Bug,CLOSED,Major,Fixed,"1.2.1, 1.3.1",1.4.0,"Text extraction",None,linux,"See the pdf document and text document extracted by ExtractText.
The file's info:
$ pdfinfo IKAnalyzer.pdf
Title: IKAnalyzer中文分词器V3.0使用手册
Keywords: IK Analyzer 中文分词器 Lucene
Author: 林良益、卓诗垚
Creator: WPS Office 个人版
Producer: PDFlib 7.0.3 (C++/Win32)
CreationDate: Sun Dec 6 22:07:26 2009
Tagged: no
Pages: 15
Encrypted: no
Page size: 595.3 x 841.9 pts (A4)
File size: 441273 bytes
Optimized: no
PDF version: 1.5
$ pdffonts IKAnalyzer.pdf
name type emb sub uni object ID
------------------------------------ ----------------- — --- — ---------
INUZMH+NSimSun-Identity-H CID TrueType yes yes yes 7 0
MGIXAY+MicrosoftYaHei-Identity-H CID TrueType yes yes yes 8 0
CFLOPA+SimSun-Identity-H CID TrueType yes yes yes 6 0
GHNZKZ+TimesNewRomanPS-BoldMT-Identity-H CID TrueType yes yes yes 19 0
UNEBHT+Cambria-Bold-Identity-H CID TrueType yes yes yes 20 0
UQKWWP+Wingdings-Regular-Identity-H CID TrueType yes yes yes 33 0
NKFTTO+MicrosoftYaHei-Identity-H CID TrueType yes yes yes 40 0
OOJXDG+CourierNewPSMT-Identity-H CID TrueType yes yes yes 51 0
WHLDYI+CourierNewPS-ItalicMT-Identity-H CID TrueType yes yes yes 58 0
TXIHGB+Cambria-Identity-H CID TrueType yes yes yes 100 0
CRJWMD+TimesNewRomanPSMT-Identity-H CID TrueType yes yes yes 108 0",0,"Andreas Lehmkühler","Jingxuan Yu",0,0,"19/Jul/10 09:18","20/Dec/10 09:38","14/Dec/10 19:10"
PDFBOX-780,PDFBOX,"EXCEPTION_ACCESS_VIOLATION in fontmanager.so/fontmanager.dll",Bug,CLOSED,Major,Fixed,None,1.3.1,None,None,"redhat, windows xp","It seems when writing a PDF that has an invalid embedded font to an image there is a crash in the native function sun.font.FileFont.getGlyphImage(JI). It can be reproduced using the PDFToImage program on a pdf with an invalid embedded font.
Turing on -Dsun.java2d.debugfonts=true on a bad pdf will show some like the follow for the bad font
INFO: open TTF: C:\DOCUME~1\mdavis\LOCALS~1\Temp+~JF4968602841241472406.tmp
Jul 20, 2010 11:37:31 AM sun.font.TrueTypeGlyphMapper handleBadCMAP
SEVERE: Null Cmap for ** TrueType Font: Family=INKLBC+SymbolMT Name=INKLBC+SymbolMT style=0 fileName=C:\DOCUME~1\mdavis\LOCALS~1\Temp+~JF4968602841241472406.tmpsubstituting for this font
Jul 20, 2010 11:37:31 AM sun.font.FontManager deRegisterBadFont
SEVERE: Deregister bad font: ** TrueType Font: Family=INKLBC+SymbolMT Name=INKLBC+SymbolMT style=0 fileName=C:\DOCUME~1\mdavis\LOCALS~1\Temp+~JF4968602841241472406.tmp
Jul 20, 2010 11:37:31 AM sun.font.FileFontStrike <init>
INFO: Strike for ** TrueType Font: Family=INKLBC+SymbolMT Name=INKLBC+SymbolMT style=0 fileName=C:\DOCUME~1\mdavis\LOCALS~1\Temp+~JF4968602841241472406.tmp at size = 19 use natives = false useJavaRasteriser = true AAHint = 2 Has Embedded bitmaps = false
The following code in PDSimpleFont.java seems to fix the crash although I am not sure if it is correct:
public void drawString(String string, Graphics g, float fontSize, AffineTransform at, float x, float y) throws IOException {
Font _awtFont = getawtFont();
//mdavis - fix fontmanager.so/dll on sun.font.FileFont.getGlyphImage for font with bad cmaps?
if (_awtFont.canDisplayUpTo(string) != -1)
{ log.warn("Changing fonts on <" + string + "> from <" + _awtFont.getName() + "> to default font"); _awtFont = null; }
Graphics2D g2d = (Graphics2D) g;",0,"Jukka Zitting","Matt Davis",0,0,"20/Jul/10 15:40","26/Oct/10 09:33","24/Aug/10 11:59"
PDFBOX-782,PDFBOX,"Update/reactivate ant build",Improvement,CLOSED,Major,Fixed,"1.2.0, 1.2.1",1.3.1,"FontBox, (1)",None,,"Some users want to use ant to build pdfbox. Because of the restructuring the old build file doesn't work anymore.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"22/Jul/10 18:30","26/Oct/10 09:33","22/Jul/10 18:45"
PDFBOX-784,PDFBOX,"Wrong text position",Bug,CLOSED,Major,"Cannot Reproduce",0.8.0-incubator,None,"Text extraction",None,linux,"we tried to convert a lot of PDF files to image(e.g. tif, jpg) on two servers, it worked OK at the begging period, but after converting a cerntain quantity of PDF files, something went wrong, all the characters were drawn at the bottom of the image file. Does anyone meet this problem before?
we invoke the method below to convert pdf to image
org.apache.pdfbox.pdmodel.PDPage
public BufferedImage convertToImage(int imageType, int resolution)",0,"Andreas Lehmkühler",Ralf,0,1,"23/Jul/10 11:54","19/May/13 12:05","19/May/13 12:05"
PDFBOX-785,PDFBOX,"Spliting a PDF creates unnecessarily large files",Bug,CLOSED,Major,Fixed,"1.8.8, 2.0.0","1.8.9, 2.0.0",Utilities,None,"windows xp, openoffice, pdfsam","Using PDFBox 0.8.0 (also tried on 1.1.0 and 1.2.1) to split files result in bigger parts than the original.
Concerned files were made from openOffice .odt documents in version 3.0.0 using openOffice pdf Export and then merging several copies with pdfsam (http://www.pdfsam.org/)
In joined eclipse project the test file size is 10 712 749 bytes for 2812 pages and the result file sizes after splitting in two at page 2300 are : 8 812 515 bytes and 10 701 142 bytes.
Using pdfSplit in command line as result we have all single result files bigger than the original. An example is also attached. An error tells the original file is corrupted, but we tried it on a file (using pdfsam and without using it) with no error and with similar result, so I think it's not related.
This issue seems similar to PDFBOX-28.",0,"Andreas Lehmkühler","mathieu radiguet",1,5,"29/Jul/10 15:10","09/May/16 10:25","22/Dec/14 10:35"
PDFBOX-786,PDFBOX,"PDChoiceField's implementation of SetValue does not work for all PDF forms. Sometimes it throws ClassCastException",Bug,CLOSED,Major,Fixed,1.2.1,1.3.1,PDModel,None,"java 1.6, mac os x","For a choice with the following options:
COSArray{[COSString{ }, COSArray{[COSString
{NR}
, COSString
{Non-reactive}
]}, COSArray{[COSString
{R}
, COSString
{Reactive}
]}, COSArray{[COSString
{Declined}, COSString{Declined}
]}]}
A class cast is thrown as the code expects all items to be strings as the first item is a string. However, the remaining items are all pairs.
The attached code is the fix. It just makes the pair/single check every time through the loop.",0,"Jukka Zitting","Yonas Jongkind",0,0,"30/Jul/10 17:32","26/Oct/10 09:33","09/Aug/10 13:14"
PDFBOX-788,PDFBOX,"PrintPDF does not take the windows default printer orientation into account",Bug,CLOSED,Major,Fixed,1.2.1,1.3.1,None,None,"windows xp","We have 2 printers, the first one is defined to print in Portrait by default in Windows, the other one is defined to print in Landscape by default in Windows.
PrintPDF does not take the default configuration into account.
I wrote a little patch that seems to solve this bug",0,"Jukka Zitting","Christophe Borivant",0,2,"05/Aug/10 13:54","26/Oct/10 09:33","03/Sep/10 13:05"
PDFBOX-789,PDFBOX,"Error by text extraction",Bug,CLOSED,Major,Fixed,1.2.1,1.3.1,"Text extraction",None,"windows xp","Hello,
I tried to extract text from pdf and extraction ended with error. Here is pdf, source file and stacktrace.",0,"Jukka Zitting","Slavomir Varchula",0,1,"05/Aug/10 22:22","26/Oct/10 09:34","14/Oct/10 09:08"
PDFBOX-791,PDFBOX,"PDFToImage : add the ability to select the area to export int the pages","New Feature",CLOSED,Major,Fixed,None,1.3.1,None,None,,"added a -cropbox option to be able to select the area to export as an image.
The option affect each converted page.
See the patch attached",0,"Jukka Zitting","Christophe Borivant",0,0,"12/Aug/10 12:58","26/Oct/10 09:34","24/Aug/10 12:18"
PDFBOX-792,PDFBOX,"error in extracting some unicode characters",Test,CLOSED,Major,"Cannot Reproduce",0.7.0,None,"Text extraction",None,"windows xp","hello all i am extracting text from pdf having unicode text
but i think some characters are not supported in 0.7.0 version
pls some one help me doing that",0,"Andreas Lehmkühler","akib sayyed",0,1,"15/Aug/10 06:23","05/Apr/13 10:44","05/Apr/13 10:44"
PDFBOX-793,PDFBOX,"scratchfile ignored in PDDocument load( File file, RandomAccess scratchFile )",Bug,CLOSED,Minor,Fixed,1.2.1,1.3.1,PDModel,None,,"The PDDocument load function:
    public static PDDocument load( File file, RandomAccess scratchFile ) throws IOException
    {
        return load( new FileInputStream( file ) );
    }
ignores the scratchFile – either drop the parameter or actualy pass it on",0,"Jukka Zitting","Ryan McKinley",0,0,"16/Aug/10 14:19","26/Oct/10 09:34","03/Sep/10 13:32"
PDFBOX-794,PDFBOX,"PDPage convertToImage generates white image with no contents",Test,CLOSED,Major,Duplicate,1.2.1,None,PDModel,None,,"When converting a PDPage to an image where the mediaBox, cropBox, and trimBox width/height are slightly larger than that of the PDDocument pageFormat height/width, the resulting image appears blank. A warning message appears in the log 'getRGBImage returned NULL'. The PDF is rendered fine.",0,"Andreas Lehmkühler","Dan Sabin",2,2,"19/Aug/10 13:12","23/Mar/13 13:05","03/May/11 11:58"
PDFBOX-795,PDFBOX,"PDPage convertToImage partially generates image file and throws exception",Test,CLOSED,Major,Fixed,1.2.1,1.8.0,PDModel,JBIG2,,"Converting a PDPage to an image results in an image file only being partially generated. Some text at the top of the file is created, but the majority of the page is not and an exception is thrown:
[ERROR] java.io.IOException: Unknown stream filter:COSName
{JBIG2Decode}
java.io.IOException: Unknown stream filter:COSName{JBIG2Decode}
at org.apache.pdfbox.filter.FilterManager.getFilter(FilterManager.java:103)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:249)
at org.apache.pdfbox.cos.COSStream.doDecode(COSStream.java:221)
at org.apache.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:156)
at org.apache.pdfbox.pdmodel.common.PDStream.createInputStream(PDStream.java:211)
at org.apache.pdfbox.pdmodel.common.PDStream.getByteArray(PDStream.java:465)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:141)
at org.apache.pdfbox.util.operator.pagedrawer.Invoke.process(Invoke.java:74)
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:567)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:250)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:208)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:112)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:718)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:689)
Is JBIG2Decode not a supported COSStream encoding?",0,"Andreas Lehmkühler","Dan Sabin",0,1,"19/Aug/10 13:18","02/May/13 02:29","18/Nov/12 17:37"
PDFBOX-796,PDFBOX,"Objects from streams overwrite objects already read with the same ID/Generation",Improvement,CLOSED,Major,Fixed,None,1.3.1,Parsing,None,"windows, java 1.5","When trying to merge some documents (using the PDFMergerUtility class) I got a NullPointerException and the merge failed. I traced through to eventually discover that some objects were being overwritten when the PDFParser called document.dereferenceObjectStreams(); (line 207 of PDFParser.java).
Having multiple objects with the same object ID is a violation of the PDF specification, so how this should be dealt with is undefined. The "use the first object" mentality enabled my file to be processed and it is consistent with the other code in PDFBox. For another example of where PDFBox deals with reading in an object which already exists, you can see PDFParser (on line 541) checks to see if the object has already been read and put in the pool. If not, it adds it to the list of conflicts. Later, when resolveConflicts() is called, it overwrites the object only if it's specifically referenced in the xref table. This is a reasonable way to resolve conflicts because if the object isn't in the xref table, it is likely the wrong one.
Since we're reading from a stream of compressed data, we can not give a particular byte offset. This means we can't add these conflicts to the conflict list and try to determine if this object is legitimate or not. It's best to use the data we've already read, as using the one from the stream has been confirmed to cause problems. I've done regression testing with other files which have this problem, including the file from PDFBOX-720 and have not seen any issues.
Unfortunately I can not provide the PDF which demonstrates this problem and solution as it contains information I'm not authorized to release.",0,"Adam Nichols","Adam Nichols",0,0,"20/Aug/10 23:52","03/Dec/10 04:46","26/Aug/10 17:45"
PDFBOX-797,PDFBOX,"NPE in PDPageNode",Bug,CLOSED,Major,Fixed,None,1.5.0,None,None,,"i get a nullpointer exception when parsing a pdf with tika.
http://www.awsg.at/portal/media/4218.pdf
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.PDPageNode.getCount(PDPageNode.java:109)
at
org.apache.pdfbox.pdmodel.PDDocument.getNumberOfPages(PDDocument.java:943)
at
org.apache.tika.parser.pdf.PDFParser.extractMetadata(PDFParser.java:105)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:86)",0,"Adam Nichols","Reinhard Schwab",0,0,"23/Aug/10 20:26","04/Mar/11 10:29","27/Dec/10 21:22"
PDFBOX-798,PDFBOX,"Better handle out of spec PDFs",Improvement,CLOSED,Major,Fixed,None,1.3.1,Parsing,None,"windows, java 1.5","I came across another out-of-spec issue which causes PDFBox to crash. Here's the object:
5 0 obj
<</Type /Page
/Parent 6 0 R
/MediaBox [ 0 0 610.560 783.360
endstream
endobj
There are numerous issues here. The mediabox doesn't have a closing right square bracket, there's no ">>" to end the dictionary, and there's an "endstream" stuck in there for no apparent reason. This is something I actually found out in the wild, however I do not know if it's a bug in the creation program, some data corruption or how this happened. However, I do know that Adobe Reader parses it without crashing. Since this is not a conforming PDF, the result is undefined, so crashing (which is what PDFBox will eventually do, when trying to process the next object in the file) is a perfectly acceptable thing to do.
However, I'd like to make PDFBox be able to detect that the array is completed when it sees endstream, then ignore the rogue endstream, and then know that the object has ended when it sees "endobj". I'm actually going to go one step further and also accept the same object even if endstream or endobj is missing. In addition to the above object, I also tested it with these objects:
% end obj, without the endstream
5 0 obj
<</Type /Page
/Parent 6 0 R
/MediaBox [ 0 0 610.560 783.360
endobj
% end endstream, without the endobj
5 0 obj
<</Type /Page
/Parent 6 0 R
/MediaBox [ 0 0 610.560 783.360
endstream
% properly ended array, dictionary and object (aka conforming PDF)
5 0 obj
<</Type /Page
/Parent 6 0 R
/MediaBox [ 0 0 610.560 783.360 ]
>>
endobj
Although this change will only affect PDFs which do not conform to the spec, I want to put the patch up for review before committing it to SVN since it is a modification to BaseParser.java. If I do not hear any objections/concerns in the few days, I'll go ahead an commit it.",0,"Adam Nichols","Adam Nichols",0,0,"23/Aug/10 22:11","26/Oct/10 09:34","26/Aug/10 17:49"
PDFBOX-799,PDFBOX,"Add ability to ignore errors with AcroForms",Improvement,CLOSED,Major,Fixed,None,1.3.1,None,None,,"AcroForms seem to be implemented poorly by some PDF writers, and as a result there are quite a few out of spec PDFs out there. This can be a problem when trying to merge two PDFs together. I've found multiple which merge fine except for the AcroForms. We should add a flag to PDFMergerUtility to allow the caller to ignore AcroForm errors. This way people who just want to merge PDFs and don't care about the AcroForm fields are able to do so.
The default will be to NOT ignore AcroForm errors, which provides perfect backward compatibility and makes sure these errors are not silently discarded by default.",0,"Adam Nichols","Adam Nichols",0,0,"24/Aug/10 00:32","26/Oct/10 09:34","24/Aug/10 00:36"
PDFBOX-801,PDFBOX,"PDPixelMap is too verbose",Improvement,CLOSED,Trivial,Fixed,None,1.3.1,None,None,,"The PDPixelMap.getRGBImage() logs an INFO-level message for each accessed image. DEBUG would be more appropriate.",0,"Jukka Zitting","Jukka Zitting",0,0,"24/Aug/10 12:41","26/Oct/10 09:34","24/Aug/10 12:42"
PDFBOX-802,PDFBOX,"Better handle corrupt/missing %%EOF flags at the end of a file",Improvement,CLOSED,Major,Fixed,None,1.3.1,None,None,,"Currently, when the %%EOF flag at the end of the file is missing, an IOException is thrown which produces a stacktrace something like this:
java.io.IOException: Error: Expected to read '%%EOF' instead started reading '%%E^@'
at org.apache.pdfbox.pdfparser.BaseParser.readExpectedString(BaseParser.java:1090)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:463)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:179)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:859)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:826)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:751)
While these PDFs are non-conforming, it'd be an improvement to allow them to be read and processed since we're only a few bytes from the end of file anyway.
There's existing code which checks to see if what was read was %%EOF and throw an exception if %%EOF wasn't read and we're not at the end of file. However, this is never reached because readExpectedString() throws an exception before this can happen. To fix this, I changed readExpectedString() to readString() and left the manual check to see if the proper %%EOF flag was found. If not, it'll output a warning. If we're not at the end of the file, we'll still throw an exception. I've seen corrupted and missing %%EOF flags at the end of a file, but never in the middle. Since this doesn't seem to happen, if it does the PDF is clearly out of spec, and these issues would be much harder to deal with, throwing an exception still seems like a reasonable thing to do.",0,"Adam Nichols","Adam Nichols",0,0,"24/Aug/10 19:02","26/Oct/10 09:34","24/Aug/10 19:57"
PDFBOX-803,PDFBOX,"Improved handling erronous data between endstream and endobj lines",Improvement,CLOSED,Major,Fixed,None,1.3.1,None,None,,"I found that a PDF created by Exstream Dialogue Version 5.0.039 had ">> " between the endstream and endobj sections. When this happened, PDFBox threw an exception. This patch ignores junk characters between these sections so the files can be processed. A log message is written warning the user of the violation of the spec. For reference, here's the object I found in the file (excluding the stream data):
27 0 obj
<<
/Filter [/A85 /Fl]
/Length 322
>>
stream
(data from stream omitted)
endstream
>> endobj
%PDF Font (F315)
As a side note Exstream seems to have sold their Dialogue software to HP, and the current version is 7. This means the bug is likely fixed in the latest version, but there are still some older PDFs out there which PDFBox should be able to handle without throwing an exception.",0,"Adam Nichols","Adam Nichols",0,0,"24/Aug/10 22:50","26/Oct/10 09:34","24/Aug/10 23:12"
PDFBOX-804,PDFBOX,"First page not rendered correctly by the pdfbox tools (PDFReader, PDTToImage ...)",Improvement,CLOSED,Major,Fixed,1.2.1,1.7.0,None,FunctionType4,"mac os x, java 1.6","The first page has not the correct background color/image. Instead of a certain blue it is rendered black.",0,"Jeremias Maerki","Sven Hohlfeld",0,0,"26/Aug/10 22:52","29/May/12 16:21","02/Nov/11 07:35"
PDFBOX-806,PDFBOX,"Failure to extract dc:description when the value is the node text",Bug,CLOSED,Major,Fixed,1.2.1,1.4.0,JempBox,None,,"I can not get the dc:description from the following xmpmeta:
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="XMP Core 4.4.0">
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<rdf:Description rdf:about=""
xmlns:exif="http://ns.adobe.com/exif/1.0/">
<exif:UserComment>exif</exif:UserComment>
</rdf:Description>
<rdf:Description rdf:about=""
xmlns:dc="http://purl.org/dc/elements/1.1/">
<dc:description>from XnViewMP 0.26</dc:description>
</rdf:Description>
</rdf:RDF>
</x:xmpmeta>
But it works from this:
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="XMP Core 4.4.0-Exiv2">
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<rdf:Description rdf:about=""
xmlns:dc="http://purl.org/dc/elements/1.1/">
<dc:description>
<rdf:Alt>
<rdf:li xml:lang="x-default">dc:description</rdf:li>
</rdf:Alt>
</dc:description>
</rdf:Description>
</rdf:RDF>
</x:xmpmeta>
Both of them are valid according to http://www.w3.org/RDF/Validator/. My interpretation of http://dublincore.org/documents/dcmes-xml/ is that the first format should be ok for Dublin Core too.
See attached unit test.",0,"Adam Nichols","Staffan Olsson",0,0,"30/Aug/10 12:46","20/Dec/10 09:38","11/Nov/10 20:36"
PDFBOX-807,PDFBOX,"NullPointerException in StandardSecurityHandler.java:261",Bug,CLOSED,Blocker,Fixed,1.2.1,1.7.0,PDModel,None,"java 1.6, windows xp","I like to add text to a PDF and used the example code AddMessageToEachPage.java to do this. I added decryption to support encrypted docs:
doc = PDDocument.load(sourceFile);
if (doc.isEncrypted())
{ doc.decrypt(ownerPwd); }
When my document is encrypted, the decryption succeeds without error message, but for such encrypted docs, when callinf doc.save(), a NullPointerException occurs:
-----------------------------------------
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareDocumentForEncryption(StandardSecurityHandler.java:261)
at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1013)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:911)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:892)
-----------------------------------------------------------------",0,"Andreas Lehmkühler",MH,0,4,"31/Aug/10 09:09","01/Jan/13 16:02","19/May/12 17:12"
PDFBOX-808,PDFBOX,"PDTrueTypeFont.loadTTF() freezes (at TTFDataStream.java:195)",Bug,CLOSED,Critical,Fixed,1.2.1,1.3.1,FontBox,None,"java 1.6, windows xp","Sometimes (not always), my app "freezes". When I look into jVisualVM thread dump, I see this stack trace:
java.lang.Thread.State: RUNNABLE
at org.apache.fontbox.ttf.TTFDataStream.read(TTFDataStream.java:195)
at org.apache.fontbox.ttf.TTFDataStream.readString(TTFDataStream.java:69)
at org.apache.fontbox.ttf.TTFDataStream.readString(TTFDataStream.java:57)
at org.apache.fontbox.ttf.PostScriptTable.initData(PostScriptTable.java:104)
at org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:140)
at org.apache.fontbox.ttf.TTFParser.parseTTF(TTFParser.java:87)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadDescriptorDictionary(PDTrueTypeFont.java:206)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:167)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:143)
at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.loadTTF(PDTrueTypeFont.java:130)
It never returns and blocks the application from continuing. This hapend several times now every few hours.",0,"Jukka Zitting",MH,0,1,"01/Sep/10 11:05","26/Oct/10 09:34","03/Sep/10 12:31"
PDFBOX-81,PDFBOX,"Excetion while extracting images","New Feature",CLOSED,Minor,Fixed,0.8.0-incubator,1.8.0,"Swing GUI",JBIG2,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1259747
Originally submitted by guzzil on 2005-08-15 02:40.
when trying to extract images from I pdf, i get exceptions
like
Exception in thread "main" java.io.IOException: Unknown
stream filter:COSName
{JBIG2Decode}

at
org.pdfbox.filter.FilterManager.getFilter(FilterManager.java:116)
at
org.pdfbox.cos.COSStream.doDecode(COSStream.java:276)
at
org.pdfbox.cos.COSStream.doDecode(COSStream.java:240)
at
org.pdfbox.cos.COSStream.getUnfilteredStream(COSStream.java:173)
at
org.pdfbox.pdmodel.common.PDStream.createInputStream(PDStream.java:205)
at
org.pdfbox.pdmodel.common.PDStream.getByteArray(PDStream.java:458)
at
org.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:131)
at
org.pdfbox.pdmodel.graphics.xobject.PDPixelMap.write2OutputStream(PDPixelMap.java:153)
at
org.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file(PDXObjectImage.java:117)
at
org.pdfbox.ExtractImages.extractImages(ExtractImages.java:169)
at
org.pdfbox.ExtractImages.main(ExtractImages.java:73)
The pdfs are scanned images, which are afterwards
optimized with Adobe Acrobats "optimize" function.
pdfimages from xpdf can extract the images.
I can send you a pdf with this error (it is to big for an
upload).
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
yes please upload the pdf to ftp.pdfbox.org and I will take a
look at it.
Ben Litchfield",0,"Andreas Lehmkühler",Anonymous,3,2,"15/Aug/05 09:40","23/Mar/13 12:56","18/Nov/12 14:40"
PDFBOX-810,PDFBOX,"Problem in extracting roman page numbers [PDPageLabels.java]",Bug,CLOSED,Minor,Fixed,None,1.3.1,PDModel,None,,"Hi all ,
I am very long time user of PDFBOX from 0.7.3 version.
Current I am using the latest version(1.2.1).
While using i came across the problem while extracting PDFPageLabels for PDF with roman numbers .
For example if the label is "xi" PDFBOX output is "xxi" and it is correct for pagenumber less than ten.
I made a small correction in the code PDPageLabels.java and found that it seems to work fine .
ORIGINAL CODE IN PDPageLabels.java
private static final String[][] ROMANS = new String[][]
{
{ "", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix" },
{ "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc" },
{ "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm" }, };


MODIFIED CODE IN PDPageLabels.java


private static final String[][] ROMANS = new String[][]
{
{ "", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix" }
,
{ "", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc" }
,
{ "", "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm" }
, };
*Please advice me whether the above change is correct and incorporate in my PDFBox.
Thank You very much
Regards
Karthick . G",0,"Jukka Zitting",karthick,0,0,"02/Sep/10 04:06","26/Oct/10 09:34","03/Sep/10 12:20"
PDFBOX-811,PDFBOX,"EmbeddedFiles example does not work",Bug,CLOSED,Major,Fixed,1.2.1,1.8.0,PDModel,None,"java 1.6, windows xp","Running the EmbeddedFiles example does not work properly. Obviously it has stopped working with Version 1.1.0 already at least. I've tried the same example with pdfbox 0.7.3 and there it is working without any problems. Although it seems (according to the document's size) that the file is embedded, there is no entry visible in the PDF's attachment/document section ...",0,"Andreas Lehmkühler","Markus Horehled",1,3,"02/Sep/10 11:16","02/May/13 02:29","10/Mar/13 17:27"
PDFBOX-813,PDFBOX,"ClassCastException: COSInteger cannot be cast to COSDictionary",Bug,CLOSED,Critical,Fixed,"1.2.1, 1.3.1",1.3.1,Parsing,None,"windows xp","I get the below exceptions when calling pdfDoc.getDocumentCatalog().getAllPages(). The code continues after the first exception because I've called PDDocument.load("C:/CancerSummReport_34914.pdf", true) setting the load "force" param to true. The second exception causes the code to abort.
(I will try uploading the PDF that causes this problem)
2010-09-02 16:47:47,521 [main] WARN (PDFParser.java:189) - Parsing Error, Skipping Object
java.io.IOException: Error: Expected an integer type, actual='bj'
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1310)
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:497)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:179)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:878)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:843)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:768)
at com.xyz.framework.functionalTests.PDFBoxBug.main(PDFBoxBug.java:16)
2010-09-02 16:47:47,552 [main] WARN (BaseParser.java:215) - Invalid dictionary, found:? but expected:''
Exception in thread "main" java.lang.ClassCastException: org.apache.pdfbox.cos.COSInteger cannot be cast to org.apache.pdfbox.cos.COSDictionary
at org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog(PDDocument.java:414)
at com.xyz.framework.functionalTests.PDFBoxBug.main(PDFBoxBug.java:18)",0,"Jukka Zitting",CP,0,0,"02/Sep/10 20:58","26/Oct/10 09:34","14/Oct/10 10:01"
PDFBOX-815,PDFBOX,"PDFont.getEncodingManager is not thread safe; FIX included",Bug,CLOSED,Major,Fixed,1.3.1,1.3.1,PDModel,None,,"In class PDFont calling static getEncodingManager is not thread safe. Two solutions:
(1) with lazy initialization (thread safe with Java 1.5 and later)
private static volatile EncodingManager encodingManager = null;
protected static EncodingManager getEncodingManager() {
if(encodingManager == null) {
synchronized ( PDFont.class )
{ if ( encodingManager == null ) encodingManager = new EncodingManager(); }
}
return encodingManager;
}
(2) create singleton at class initialization time
private static EncodingManager encodingManager = new EncodingManager();
protected static EncodingManager getEncodingManager()
{ return encodingManager; }",0,"Jukka Zitting","Timo Boehme",0,0,"03/Sep/10 07:34","26/Oct/10 09:34","03/Sep/10 12:13"
PDFBOX-816,PDFBOX,"1.2.1 - PDFTextStripper* uses different Y values when cropbox has non-zero Y: not so for X coordinates.",Bug,CLOSED,Major,Fixed,1.2.1,"1.8.11, 2.0.0",Utilities,None,"mac os x, java 1.6, ubuntu","[First off, kudos to the folks who work on PDFBox. It's got some great functionality.]
The issue is that a cropbox with non-zero "lower-left-corner" changes positions reported for text by PDFTextStripper. In the Y coordinate only.
See page 5 of the attached PDF (which is a phony tax return, not real data).
As an example, near the top is the tax year, "2009". Using a program such as Apple's Preview, one would estimate that a snug bounding rectangle for that text would be x=300, y=54, w=41, and h=18.
And on other PDFs, that would be fine with PDFTextStripperByArea. But this PDF has a non-zero-origin cropbox set, one with the alleged lower-left-corner at [-24.0, -24.0]. So the region coordinates that PDFTextStripperByArea wants to see need to be offset by subtracting -24 from x and y, i.e., yielding x=324, y=78.
Or so you would think. It turns out that the X coordinate stays the same, only the Y coordinate gets affected by the cropbox setting.
Using the sample program PrintTextLocations, which, like PDFTextStripperByArea, derives from PDFTextStripper, reports both coordinates as being offset by 24 in its processTextPosition():
...
String[92.0,94.0 fs=12.0 xscale=1.0 height=9.0720005 space=3.3360004 width=186.71997]U.S. Individual Income Tax Retur
String[278.71997,94.0 fs=12.0 xscale=1.0 height=9.0720005 space=3.3360004 width=7.3320007]n
String[301.0,94.0 fs=18.0 xscale=1.0 height=13.122001 space=5.0040007 width=30.023987]200
String[331.024,94.0 fs=18.0 xscale=1.0 height=13.122001 space=5.0040007 width=10.007996]9
String[368.0,94.0 fs=8.0 xscale=1.0 height=7.5200005 space=2.2240002 width=11.559998](99
String[379.56,94.0 fs=8.0 xscale=1.0 height=7.5200005 space=2.2240002 width=2.6640015])
String[399.0,94.0 fs=6.0 xscale=1.0 height=4.5360003 space=1.6680002 width=36.34201]IRS Use Only
...
(Lines 3 and 4 are the only key ones, the others for comparison).
To make sense of this: 301.0 is close enough to 300 for the X coordinate: if I go to 324, I don't get the "200", just the "9".
Also, the y coordinate of 94 is the bottom of the text, with a height of 18 that roughly extends up to 76, but 78 works as far as extractRegions() is concerned (I think it only cares about the lower-left corner of each character).
So the bounding rectangle reported above for "2009" is lower-left corner (301.0, 94.0) to upper-right corner approx (341.03, 76).
In those coordinates, the region that works with extractRegions() is LL (300, 96) to UR (341, 78).
(Or, the exact Rectangle2D I pass to extractRegions: x=300, y=78, w=41, h=18).
This applies to any field you choose on this page.
So:
(a) it doesn't seem to me that a cropbox has any business changing the coordinates. But I could be wrong.
(b) if it does make sense for a cropbox to affect the coordinates, it should do so in both X and Y dimensions, shouldn't it?
(c) I suppose it would be too much to ask for notes explaining the coordinates used for each method, but it's a nice thought.
I tried looking through PDFTextStripper* but I'm not sufficiently familiar with the code to determine where the coordinate perturbation occurs. It might be in how PDFStreamEngine.processEncodedText() is using the graphicsState (initialized with the cropbox) to transform textMatrixStDisp, but that seems to be initialized with a Dimension, so I don't see how an offset would affect it.",0,"Andreas Lehmkühler","Larry West",0,1,"04/Sep/10 02:53","17/Mar/16 19:07","30/Jan/16 21:24"
PDFBOX-817,PDFBOX,"IllegalArgumentException not catched or declared while creating ICC profile",Bug,CLOSED,Minor,Fixed,1.3.1,1.7.0,PDModel,None,,"In class org.apache.pdfbox.pdmodel.graphics.color.PDICCBased.createColorSpace() the call to ICC_Profile.getInstance( profile ) might return an IllegalArgumentException. This exception is neither documented nor catched in this method (RuntimeException). Since method documentation states that an IOException is thrown if color space could not be created I would suggest catching IllegalArgumentException and wrap it in an IOException. I will add a patch to this issue.",0,"Andreas Lehmkühler","Timo Boehme",0,0,"06/Sep/10 13:31","29/May/12 16:21","25/Mar/12 13:42"
PDFBOX-819,PDFBOX,"PDFBox prints landscape documents as portrait",Bug,CLOSED,Major,Fixed,1.2.1,1.8.0,None,None,"windows xp, windows 7","When we have a PDF document that has landscape orientation and try to print it using PDFBox api itp prints in portrait orientation and crops ale right part of the document.",0,"Andreas Lehmkühler","Aleksander Lech",1,2,"07/Sep/10 10:27","23/Mar/13 12:56","03/Mar/13 13:46"
PDFBOX-82,PDFBOX,"Strange encoding in PDF-file",Bug,CLOSED,Major,"Not A Problem",None,None,"Text extraction",None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1261693
Originally submitted by mai00 on 2005-08-16 23:16.
I've got a PDF-file with a strange encoding. When I use
ExtractText it gives me lines of
MT73MT110MT102MT111MT45MT66....
I tried to use other extracting tools like pdftohtml
and it could extract the text in plain English.
Maybe I'm just doing something wrong with the encoding
but I tried different things and could't extract the
right text.
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1261693&file_id=145929
strangeEncoding.pdf (application/pdf), 155806 bytes
PDF-File with strange encoding
[comment on SourceForge]
Originally sent by mai00.
Logged In: YES
user_id=1310361
Hello,
I have found more files which are strange encoded but e.g.
can be extracted by Adobe. I though it might have to do with
the Font. All of these files don't provide a BaseFont and I
think it might be because maybe this files were created on
Unix systems. Maybe if somehow the font can be provided or
someone can find out which font is used one can find out how
to decode the text.
[comment on SourceForge]
Originally sent by salchow.
Logged In: YES
user_id=1316887
I have got exactly the same problem. I registred a bug (ID
1250097) and asked a question in the forum at the begining
of August under the title : "Text Extraction unsuccessful with
PDFBox". Unfortunately, I haven't got any solution yet.
If you find a way to solve this problem, i am interested in ...
Thanks
Salchow",0,"Andreas Lehmkühler",Anonymous,0,1,"17/Aug/05 06:16","13/Mar/13 17:18","13/Mar/13 17:18"
PDFBOX-821,PDFBOX,"RandomAccessBuffer returns wrong values for single byte reads, patch attached",Bug,CLOSED,Major,Fixed,1.3.1,1.6.0,Parsing,None,,"RandomAccessBuffer contains a critical bug which had no effect so far since this class is currently not used. The problem is in method read() (single byte read). If the byte read is larger than 127 the method returns the signed byte value instead of the unsigned values 128-255. Thus a component using this method will assume end-of-stream.
The solution is to 'AND' the value with 0xff. Patch is attached.",0,"Andreas Lehmkühler","Timo Boehme",0,1,"07/Sep/10 15:34","02/Jul/11 16:28","01/May/11 14:07"
PDFBOX-823,PDFBOX,"NullPointerException in DateConverter.toISO8601(DateConverter.java:221)",Bug,CLOSED,Major,Fixed,1.2.1,"1.8.3, 2.0.0",JempBox,None,"java 1.6, windows xp","I tried to add metadata as shown in AddMetadataFromDocInfo.java. There's also the line
basicSchema.setModifyDate( info.getModificationDate() );
but I get a NullPointerException at this line:
java.lang.NullPointerException
at org.apache.jempbox.impl.DateConverter.toISO8601(DateConverter.java:221)
at org.apache.jempbox.xmp.XMPSchema.setDateProperty(XMPSchema.java:249)
at org.apache.jempbox.xmp.XMPSchemaBasic.setModifyDate(XMPSchemaBasic.java:266)
because the info.getModificationDate() returns null. It would be better to catch null parameters in the metadata set methods.
Workaround:
if (pddi.getModificationDate() != null)
{ basicSchema.setModifyDate(pddi.getModificationDate()); }
//else: avoid NPE",0,"Andreas Lehmkühler",MH,0,2,"08/Sep/10 15:01","30/Nov/13 17:02","11/Nov/13 19:15"
PDFBOX-827,PDFBOX,"Keywords are enclosed in quotes.",Bug,CLOSED,Major,"Cannot Reproduce",1.3.1,None,PDModel,None,"java 1.6","I add keywords (and other properties) via the PDDocumentInformation:
pddi.setKeywords("Test4711");
The resulting PDF shows those keywords but enclosed in quotes:
"Test4711"
instead of just the string:
Test4711
Other strings I set with PDDocumentInformation are shown correctly (without quotes). I debugged my code to ensure that the string object passed to setKeywords() is correct (i.e. without any additional quotes).",0,"Andreas Lehmkühler",MH,0,3,"14/Sep/10 12:29","24/Oct/14 15:43","24/Oct/14 15:43"
PDFBOX-831,PDFBOX,"PDPage.convertToImage throwing an uncaught IOException internally",Bug,CLOSED,Major,Fixed,"1.2.1, 1.3.1, 1.5.0",1.6.0,PDModel,"CFF Type1C","windows 7, java 1.6","After successfully loading a PDF document and extracting pages from it using the following snippet:
doc = PDDocument.load(f);
pages = doc.getDocumentCatalog().getAllPages();
I try and convert the front page to an image as follows:
PDPage page = (PDPage) pages.get(0);
BufferedImage image = page.convertToImage();
The page.convertToImage() causes a RuntimeException to be thrown due to an uncaught internal IOException. Otherwise, the extracting of text/images and all other functions I tried work correctly on this document.
Here is the stack trace:
Exception in thread "main" java.lang.RuntimeException: java.io.IOException: The handle is invalid
at org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:149)
at org.apache.pdfbox.pdfparser.PDFStreamParser$1.hasNext(PDFStreamParser.java:158)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:241)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:208)
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:112)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722)
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:693)
at pdfboxtestant.Main.getFrontPageImage(Main.java:44)
at pdfboxtestant.Main.main(Main.java:25)
Caused by: java.io.IOException: The handle is invalid
at java.io.RandomAccessFile.seek(Native Method)
at org.apache.pdfbox.io.RandomAccessFile.seek(RandomAccessFile.java:59)
at org.apache.pdfbox.io.RandomAccessFileInputStream.read(RandomAccessFileInputStream.java:96)
at java.io.BufferedInputStream.read1(BufferedInputStream.java:256)
at java.io.BufferedInputStream.read(BufferedInputStream.java:317)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
at java.io.FilterInputStream.read(FilterInputStream.java:66)
at java.io.PushbackInputStream.read(PushbackInputStream.java:122)
at org.apache.pdfbox.io.PushBackInputStream.read(PushBackInputStream.java:84)
at org.apache.pdfbox.pdfparser.BaseParser.skipSpaces(BaseParser.java:1296)
at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:197)
at org.apache.pdfbox.pdfparser.PDFStreamParser.access$000(PDFStreamParser.java:47)
at org.apache.pdfbox.pdfparser.PDFStreamParser$1.tryNext(PDFStreamParser.java:146)
... 8 more",0,"Andreas Lehmkühler","Kosta Krauth",2,3,"19/Sep/10 01:46","26/Dec/12 15:53","26/Dec/12 15:53"
PDFBOX-833,PDFBOX,"Wrong encoding with Type1C font when specific encoding is defined",Bug,CLOSED,Major,Fixed,1.3.1,2.0.0,Parsing,None,,"The Type1C font implementation overwrites the encoding() method of PDFont base class. This results in a lookup of codes to characters as defined in the font.
However if an encoding is explicitly given (like WinAnsiEncoding) this leads to wrong results if encoding codes do not match glyph codes.
In a test document (which unfortunately I cannot make public - an article from Elsevier) a Type1C font is embedded which defines a copyright sign at glyph position 259. The encoding is defines as WinAnsiEncoding. Text characters are defined corresponding to the WinAnsiEncoding. In case of the copyright sign it is 0xa9 (169) where the font has glyph 'quotesingle' defined.
Since currently I have no other test cases I implemented following workaround for WinAnsiEncoding (which might be relaxed to other PDF encodings as well:
in PDType1CFont.encode() I start with:
if ( getEncoding() instanceof WinAnsiEncoding )
// use PDFont encoding
return super.encode( bytes, offset, length );
This resolves the encoding problems for text extraction.",0,"Andreas Lehmkühler","Timo Boehme",1,3,"20/Sep/10 13:39","17/Mar/16 19:08","11/Aug/13 15:24"
PDFBOX-834,PDFBOX,"IIOException: Error 2 when displaying PDF containing CCITT Group 3 compressed images",Bug,CLOSED,Major,Fixed,None,1.3.1,PDModel,None,,"A client sent me a PDF that failed with:
SEVERE: javax.imageio.IIOException: Error 2
at com.sun.media.imageioimpl.plugins.tiff.TIFFFaxDecompressor.decodeBlackCodeWord(TIFFFaxDecompressor.java:1389)
com.sun.media.imageioimpl.plugins.tiff.TIFFFaxDecompressor.decodeT6(TIFFFaxDecompressor.java:1140)
com.sun.media.imageioimpl.plugins.tiff.TIFFFaxDecompressor.decodeRaw(TIFFFaxDecompressor.java:680)
com.sun.media.imageio.plugins.tiff.TIFFDecompressor.decode(TIFFDecompressor.java:2514)
It turns out this happens with images using CCITT Group 3 (T.4) compressed images with no "K" key in the DecodeParams (i.e. K=0). Group 4 is set on the TIFF which leads to a decoding error. Extracting the TIFF, the software info field is malformed, too.",0,"Jeremias Maerki","Jeremias Maerki",0,0,"21/Sep/10 13:05","26/Oct/10 09:34","21/Sep/10 13:08"
PDFBOX-835,PDFBOX,"Font Manager Fails to Set StandardFont",Bug,CLOSED,Minor,Fixed,None,1.8.0,PDModel,None,fedora,"On Fedora release 13 (Goddard), FontManager fails to find either of the two enumerated standardFonts, arial or timesnewroman.
The stack trace look something like this:
org.apache.pdfbox.util.PDFStreamEngine - java.lang.NullPointerException
java.lang.NullPointerException
at org.apache.pdfbox.pdmodel.font.PDType1Font.getawtFont(PDType1Font.java:243)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(PDSimpleFont.java:97)
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:193)
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:509)",0,"Andreas Lehmkühler","Kenneth Berland",0,2,"21/Sep/10 16:50","17/Apr/14 08:27","17/Apr/14 08:27"
PDFBOX-837,PDFBOX,"Wrong RevisionNumber when disabling all permissions and using 128bit encryption",Bug,CLOSED,Major,Fixed,1.2.1,"1.8.3, 2.0.0",PDModel,None,,"When disabling all permissions and using a 128bit encryption the following exception is thrown when saving the PDF document:
org.apache.pdfbox.exceptions.COSVisitorException: Error: Expected length=5 actual=16
at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1022)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:911)
at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:892)
at pdfbox.Main.main(Main.java:53)
This is reproducable with the following code:
public class Main {
public static void main(String[] args) {
try
{ AccessPermission ap = new AccessPermission(); StandardProtectionPolicy spp = null; ap.setCanAssembleDocument(false); ap.setCanExtractContent(false); ap.setCanExtractForAccessibility(false); ap.setCanFillInForm(false); ap.setCanModify(false); ap.setCanModifyAnnotations(false); ap.setCanPrint(false); ap.setCanPrintDegraded(false); spp = new StandardProtectionPolicy(null, null, ap); spp.setEncryptionKeyLength(128); PDDocument document = null; FileInputStream sourceFile = new FileInputStream(new File("C:\\Web\\NetBeansProjects\\pdfBox\\test.pdf")); document = PDDocument.load(sourceFile); document.protect(spp); document.save("C:\\Web\\NetBeansProjects\\pdfBox\\test_encrypted.pdf"); document.close(); }
catch (Exception ex)
{ Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex); }
}
}
The problem is based on "computeRevisionNumber" in "StandardSecurityHandler.java". If all flags are disabled, the routine returns a value of 2. But if the 128bit encryption is enabled, the revision should be 3. If not, the method "computeUserPassword" will fail.
A solution would be to check the key length in "computeRevisionNumber".
private int computeRevisionNumber()
{
if(version == 2
&& !policy.getPermissions().canFillInForm()
&& !policy.getPermissions().canExtractForAccessibility()
&& !policy.getPermissions().canPrintDegraded()
&& keyLength == 40 )
{ return 2; }
return 3;
}",0,"Andreas Lehmkühler","Bernd Engelhardt",1,2,"22/Sep/10 13:47","30/Nov/13 17:02","03/Nov/13 11:54"
PDFBOX-838,PDFBOX,"Problem with text extraction",Bug,CLOSED,Major,"Cannot Reproduce",1.2.1,None,"Text extraction",None,,"I want to make a parser that will parse some bookie pdf list with odds. I have two files. One is working flawlessly and the other one have problems although the two files are almost in identical form. The file uploaded (listaMillenium.pdf) has problems with text extraction and the other file (listaMeridian.pdf) is working fine.
This is the code i used:
try
{ doc = PDDocument.load("listaMillenium.pdf"); PDFTextStripper stripper = new PDFTextStripper(); stripper.setStartPage( 6 ); stripper.setEndPage( 6 ); stripper.setSortByPosition(true); stripper.setShouldSeparateByBeads(true); stripper.setSuppressDuplicateOverlappingText(true); stripper.setWordSeparator("~"); stripper.writeText(doc, sw); }
finally {
if (doc != null)
{ doc.close(); }
}
On page 6 of the uploaded document (listaMillenium.pdf) you can see the output lines like this:
nedelja 37 - 14.09. Utorak, 15.09. Sreda i 16.09. Četvrtak~strana 6
~Football~UEFA Europa League~Rezultat~KONAČAN ISHOD~DUPLA ŠANSA~POLUVREME-KRAJ~Hen~HENDIKEP
~dan~čas~šifra~45~90~1~X~2~1X~12~X2~1-1~1-X~1-2~X-1~X-X~X-2~2-1~2-X~2-2~H~H1~HX~H2
~Cet~19:00~4041*~Salzburg~Man. City~5.60~3.25~1.60~2.06~1.24~1.07~10.5~13.5~32.0~10.5~5.65~4.25~35.0~13.0~2.50~1~2.06~3.50~2.07
Cet~19:00~4042*~Juventus~Lech P.~1.20~5.25~10.5~1.08~3.50~1.50~21.0~70.0~4.75~9.00~20.0~40.0~19.0~27.0-1~1.40~3.85~3.50
~Cet~19:00~4043*~Aris~Atl. Madrid~3.50~3.20~1.95~1.67~1.25~1.21~7.00~13.0~30.0~7.25~5.05~4.80~30.0~13.0~3.25~1~1.67~3.30~2.80
Cet~19:00~4044*~Leverkusen~Rosenborg~1.35~4.00~8.30~1.01~1.16~2.70~1.95~17.0~50.0~4.05~7.00~17.0~35.0~15.0~15.0-1~1.63~3.70~2.70
Cet~19:00~4045*~Lille~Sporting L.~1.80~3.20~4.10~1.15~1.25~1.80~2.95~13.0~30.0~4.65~5.25~7.95~30.0~13.0~7.80-1~2.45~3.45~1.80
Cet~19:00~4046*~Levski Sofia~Gent~2.00~3.20~3.35~1.23~1.25~1.64~3.35~13.0~30.0~4.85~5.00~7.00~30.0~13.0~6.75-1~2.95~3.25~1.63
~Cet~19:00~4047*~Dinamo Z.~Villarreal~3.35~3.20~2.00~1.64~1.25~1.23~6.75~13.0~30.0~7.00~5.00~4.85~30.0~13.0~3.35~1~1.63~3.25~2.95
Cet~19:00~4048*~Club Brugge~PAOK~2.10~3.15~3.15~1.26~1.26~1.58~3.50~13.0~30.0~4.95~5.00~6.65~30.0~13.0~6.40-1~3.20~3.25~1.57
Cet~19:00~4049*~AZ Alkmaar~Sheriff Tiraspol~1.50~3.40~6.70~1.04~1.23~2.26~2.25~15.0~40.0~4.15~6.05~12.5~32.0~14.0~11.5-1~1.87~3.60~2.24
Cet~19:00~4050*~Dinamo K.~BATE~1.40~3.75~7.65~1.02~1.18~2.52~2.05~17.0~40.0~4.10~6.65~15.0~32.0~14.0~14.0-1~1.70~3.70~2.52
Cet~19:00~4051*~Sparta P.~Palermo~2.50~3.05~2.60~1.37~1.27~1.40~4.45~12.5~30.0~5.65~5.00~5.80~28.0~12.5~4.65-1~4.40~3.20~1.40
~Cet~19:00~4052*~Lausanne~CSKA Moscow~6.70~3.40~1.50~2.26~1.23~1.04~11.5~14.0~32.0~12.5~6.05~4.15~40.0~15.0~2.25~1~2.24~3.60~1.87
~Cet~21:05~4053*~Anderlecht~Zenit~2.60~3.05~2.50~1.40~1.27~1.37~4.65~12.5~28.0~5.80~5.00~5.65~30.0~12.5~4.45~1~1.40~3.20~4.40
Cet~21:05~4054*~AEK~Hajduk~1.60~3.25~5.60~1.07~1.24~2.06~2.50~13.0~35.0~4.25~5.65~10.5~32.0~13.5~10.5-1~2.07~3.50~2.06
CeCet~21:021:05~4055*~Stuttgart~Y. Boys~1.60~3.25~5.60~1.07~1.24~2.06~2.50~13.0~35.0~4.25~5.65~10.5~32.0~13.5~10.5-1~2.07~3.50~2.06
Last line in this listing has problems. It has duplicate values somehow.
You can find this issue on almost every page of this list. Other lists (that i have not uploaded) have same problems.
As i said, other file (listaMeridian.pdf) does not have this issue.
Maybe this will help you fix this and it will surely help me.",0,"Jukka Zitting","Dusan Radojevic",0,1,"22/Sep/10 15:16","26/Oct/10 09:42","14/Oct/10 09:30"
PDFBOX-84,PDFBOX,"Read PDF XFA Form Contents","New Feature",CLOSED,Major,Fixed,None,1.8.0,None,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1269854
Originally submitted by benlitchfield on 2005-08-24 17:50.
I uploaded the document "test-read.pdf" at
ftp.pdfbox.org. You can fill
in the form fields on the first page and try to read the
content as per my code.
For some reason, it just reads only the original form
content and ignores any
of the entry I make. Also, I saw an RFE for doing
export/import for XDP. Do
you know whether this would be available soon?",0,"Andreas Lehmkühler",Anonymous,0,1,"25/Aug/05 00:50","02/May/13 02:30","02/Feb/13 18:31"
PDFBOX-840,PDFBOX,"Umlauts font size calculation problem",Bug,CLOSED,Major,Fixed,"1.2.1, 1.3.1",1.3.1,None,None,,"The size of umlauts is not calculated correctly",0,"Adam Nichols","Andreas Pieber",0,0,"27/Sep/10 18:51","26/Oct/10 09:34","01/Oct/10 19:19"
PDFBOX-841,PDFBOX,"[pdfbox-app] maven-bundle-configuration problem",Bug,CLOSED,Major,Fixed,"1.2.1, 1.3.1",1.3.1,None,None,,"The problem with the current maven-bundle-plugin setting of the pdfbox-app plugin is that, junit and the commons logging log framework implementations are required. In addition many javax packages are imported which are not requierd.",0,"Jukka Zitting","Andreas Pieber",0,0,"27/Sep/10 18:57","26/Oct/10 09:34","14/Oct/10 09:33"
PDFBOX-846,PDFBOX,"TextExtraction mixes case of text",Bug,CLOSED,Major,Fixed,1.2.1,1.3.1,"Text extraction",None,windows,"Using Text extraction on a file like this, http://www.organictogo.com/pdf/catering/Menu_WA_032509.pdf, the text (in all CAPS) "THAI VEGGIE WRAP" is extracted as:
"ThAI VeGGIe wRAP". However, examining the PDF, shows that it looks like this: "Thai V eggi e Wrap". The related text on the next lines, such as "Crisp red cabbage, cucumbers, carrots and lettuce with Thai" parse in just fine.
We are using this code to get the text in C#:
byte[] pdfData = myWebClient.DownloadData(pdfUrl);
string text = string.Empty;
ByteArrayInputStream stream = new ByteArrayInputStream(pdfData);
PDDocument doc = PDDocument.load(stream);
PDFTextStripper stripper = new PDFTextStripper();
text = stripper.getText(doc);
doc.close();",0,"Andreas Lehmkühler","Mark Looi",0,0,"30/Sep/10 18:51","26/Oct/10 09:34","16/Oct/10 17:45"
PDFBOX-847,PDFBOX,"FlateFilter.java swallows Exceptions (should rethrow)",Bug,CLOSED,Major,Fixed,1.2.1,1.7.0,"Text extraction",None,,"I just re-discovered an issue in FlateFilter.java, which i mentioned quite a while ago on the mailinglist; and which was agreed to be an misfeature
In FlateFilter.java, at lines 115ff, we find this piece of code:
try
{
// decoding not needed
while ((amountRead = decompressor.read(buffer, 0, Math.min(mayRead,BUFFER_SIZE))) != -1)
{ result.write(buffer, 0, amountRead); }
}
catch (OutOfMemoryError exception)
{ // if the stream is corrupt an OutOfMemoryError may occur log.error("Stop reading corrupt stream"); }
catch (ZipException exception)
{ // if the stream is corrupt an OutOfMemoryError may occur log.error("Stop reading corrupt stream"); }
catch (EOFException exception)
{ // if the stream is corrupt an OutOfMemoryError may occur log.error("Stop reading corrupt stream"); }
which means these Exceptions are discarded and not reported upstream to the caller. This is very infortunate, as the caller has no means to discover that text extraction is incomplete. I discovered this on troubleshooting Alfresco DMS, which uses PDFBox for indexing PDF documents - except an innocent log message, Alfresco does not know that conversion has failed.
Proposed solution is to re-throw all 3 Exceptions and let the caller handle the exceptions",0,"Andreas Lehmkühler","Andreas Wollschlaege",6,4,"01/Oct/10 09:29","29/May/12 16:21","06/Jan/12 07:14"
PDFBOX-848,PDFBOX,"PageDrawer does not take the full CropBox into account",Bug,CLOSED,Major,Fixed,None,1.3.1,"Swing GUI",None,,"A client sent me a PDF which was basically a double-sided page of which only the right side was shown by the CropBox. But PDFBox displayed the left side in the PDFReader. I've created a minimal test case with FOP and a Hex Editor showing the problem. It seems as if the PageDrawer doesn't take the full CropBox information into account when painting the page.",0,"Jeremias Maerki","Jeremias Maerki",0,0,"01/Oct/10 14:17","26/Oct/10 09:34","04/Oct/10 07:47"
PDFBOX-852,PDFBOX,"PDFBox build dependencies require updating",Bug,CLOSED,Blocker,Duplicate,1.2.1,None,None,None,,"Ant build script for PDFBox 1.2.1 src download (found here: http://www.apache.org/dyn/closer.cgi/pdfbox/1.2.1/pdfbox-1.2.1.jar) uses maven dependencies of fontbox 1.1.0 and jempbox 1.1.0. Needs to be updated to fontbox 1.2.1 and jempbox 1.2.1.",0,"Andreas Lehmkühler","Erika Ferguson",0,1,"05/Oct/10 22:28","26/Oct/10 09:42","18/Oct/10 08:17"
PDFBOX-854,PDFBOX,"PDPageContentStream.drawString() doesn't work with all PDFs",Bug,CLOSED,Major,Fixed,1.3.1,1.4.0,PDModel,None,"java 1.6","I add custom text to misc exsiting PDF files. Now I wondered why my text doesn't appear for a specific PDF. It is not encrypted, has the same page size and adding Text with iText 2.1.7 works as expected. My code to add text is:
----------------------------------
final PDPage page = (PDPage) allPages.get;
final PDPageContentStream contentStream = new PDPageContentStream(doc, page, true, false);
contentStream.beginText();
contentStream.setFont(font, sizeOfFont);
contentStream.moveTextPositionByAmount(xf, yf);
contentStream.drawString(text);
contentStream.endText();
contentStream.close();
---------------------------------
I tried to find differences between this PDF and other PDFs. What I noticed: the PDF where I can't see the text has a PDF-Version "1.3" and was created by "AFPL Ghostscript 8.54". Is there some known issue with PDFBox and such "older" PDF formats?",0,"Andreas Lehmkühler",MH,0,1,"06/Oct/10 13:44","20/Dec/10 09:38","11/Dec/10 17:15"
PDFBOX-856,PDFBOX,"NPE from PDPageLabels with a large number PDPageLabelRanges",Bug,CLOSED,Major,Fixed,1.2.1,1.3.1,PDModel,None,,"Section 3.8.6 states that number trees have either "Nums" or "Kids" entries. The current PDPageLabels does not handle Kids and fails with a NPE.
Fix:
public PDPageLabels(PDDocument document, COSDictionary dict) throws IOException
{
this(document);
if (dict == null)
{ return; }
PDNumberTreeNode root = new PDNumberTreeNode(dict, COSDictionary.class);
findLabels(root);
}
private void findLabels(PDNumberTreeNode node) throws IOException {
if (node.getKids() != null) {
@SuppressWarnings("unchecked")
List<PDNumberTreeNode> kids = node.getKids();
for (PDNumberTreeNode kid : kids)
{ findLabels(kid); }
}
else if (node.getNumbers() != null) {
@SuppressWarnings("unchecked")
Map<Integer, COSDictionary> numbers = node.getNumbers();
for (Entry<Integer, COSDictionary> i : numbers.entrySet())
{ labels.put(i.getKey(), new PDPageLabelRange(i.getValue())); }
}
}",0,"Andreas Lehmkühler","Kevin Jackson",0,0,"07/Oct/10 15:13","24/Mar/13 14:44","17/Oct/10 17:36"
PDFBOX-858,PDFBOX,"Metadata extraction broken on some PDF files",Bug,CLOSED,Major,"Not A Problem","1.2.1, 1.3.1",None,PDModel,None,,"On certain PDF files (examples attached), the metadata extraction seems to be broken. Preview (on Mac OS X) and Acrobat Reader is able to read the metadata, but PDFbox gives complete jibberish:
Author=è'ÿÆ??kÔ7??ÕªG?
I've tried both the version included in Tika 0.7 (1.0.0 I believe) and r1021264 from SVN.",0,"Andreas Lehmkühler","Patrik Stenmark",0,2,"11/Oct/10 07:38","02/Dec/10 18:18","02/Dec/10 18:18"
PDFBOX-859,PDFBOX,"PDF to Image (JPEG) conversion: colormodel log info and JVM crash for large PDFs",Bug,CLOSED,Critical,"Not A Problem",1.2.1,None,"PDModel, Writing",None,,"I am trying to convert pages in a PDF to JPEG images. For smaller files program runs well but in few cases it give following log info:
org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap getRGBImage
INFO: ColorModel: ColorModel: #pixelBits = 24 numComponents = 3 color space = java.awt.color.ICC_ColorSpace@107ebe1 transparency = 1 has alpha = false isAlphaPre = false
for larger PDFs JVM crashes with the log mentioned above being displayed repeatedly.",0,"Andreas Lehmkühler","Abhishek Sisodia",0,0,"11/Oct/10 09:01","24/Mar/13 14:33","24/Mar/13 14:33"
PDFBOX-862,PDFBOX,"PDPage.ConvertToImage destroys RTL text",Bug,CLOSED,Major,Fixed,1.2.1,1.6.0,None,None,"windows xp, eclipse","Hello,
PDPage convertToImage() doesnt work well with RTL languages.
All i need to do, is export a pdf to jpg and divide it to 2 parts: left.jpg, right.jpg
I managed to do everything fine but the jpg has mixed up text.
What can i do?",0,"Andreas Lehmkühler","Id Bd",0,1,"12/Oct/10 14:54","06/Apr/13 14:48","06/Apr/13 14:48"
PDFBOX-863,PDFBOX,"PDFontDescriptorAFM always returns false for isSymbolic()",Bug,CLOSED,Major,Fixed,1.2.1,1.5.0,PDModel,None,windows,"A font with a Font with a descriptor like this, it creates a descriptor of class PDFontDescriptorAFM which will NEVER read the Flags (4) and return true for isSymbolic(). I am trying to extract the text from the PDF and would like to exclude symbolic fonts.
Font:
/LastChar = 1 /BaseFont = /OEOBNB+WoodtypeOrnaments-Two /Type = /Font /Subtype = /Type1 /Encoding = 26 0 R /Widths = [1000] /FontDescriptor = 28 0 R /ToUnicode = 27 0 R /FirstChar = 1
FontDescriptor:
/CapHeight = 0 /FontBBox = [0, -404, 1944, 753] /CharSet = /dash5 /FontFile3 = 33 0 R /Type = /FontDescriptor /Descent = 0 /StemV = 26 /Flags = 4 /Ascent = 0 /FontName = /OEOBNB+WoodtypeOrnaments-Two /StemH = 26 /ItalicAngle = 0",0,"Andreas Lehmkühler","Kevin Jackson",0,0,"12/Oct/10 23:33","24/Mar/13 14:30","12/Apr/11 19:25"
PDFBOX-864,PDFBOX,"Incorrect cropping from PDFToImage with offset mediaBox",Bug,CLOSED,Major,Fixed,1.2.1,1.7.0,None,None,"windows xp","When the mediaBox is not at 0,0 then incorrect image is created.
The attached file shows the problem.
Note: While the PDFBox creates the image from the mediaBox, the Adobe Reader seems to use the cropBox. That seems like the easiest fix here.",0,"Andreas Lehmkühler","Kevin Jackson",0,0,"13/Oct/10 02:51","29/May/12 16:21","06/Dec/11 20:06"
PDFBOX-865,PDFBOX,"Optional Content Groups (OCGs aka layers): initial support","New Feature",CLOSED,Major,Fixed,None,1.4.0,PDModel,None,,"I'm currently writing some code for a client to create and manipulate optional content groups (OCGs aka layers) on the PD-layer. The goal is to do overlays in a way that the various combined pages each are on a separate layer that can be switched on and off. Please note that this is only a start and, for example, does not include conditional rendering of layers. I'll submit a patch for review in a couple of days. I've got the necessary PD layer code already and now have to upgrade the Overlay utility.",0,"Jeremias Maerki","Jeremias Maerki",0,0,"13/Oct/10 14:46","20/Dec/10 09:38","22/Oct/10 07:26"
PDFBOX-866,PDFBOX,"Indexed images are sometimes corrupted when encrypting the PDF",Bug,CLOSED,Major,Fixed,"0.7.0, (9)",1.3.1,None,None,windows,"While PDFBOX-99 did fix this problem with some images, it did not solve the problem in 100% of the cases. I'll be attaching a file which demonstrates the problem and I plan on fixing this once I figure out what's going awry.",0,"Adam Nichols","Adam Nichols",0,0,"15/Oct/10 00:29","26/Oct/10 09:34","19/Oct/10 18:29"
PDFBOX-869,PDFBOX,"PDF to Image (JPEG) conversion: Incomplete output",Bug,CLOSED,Trivial,"Cannot Reproduce",None,1.4.0,"PDModel, Writing",None,windows,"While converting pages of some PDFs to JPEG images (an image for each page), few components present in PDF (mostly images) goes missing from output images. Other components are rendered correctly in JPEGs with exception of the missing components. For example, in "cloud.pdf", image of author on page 1 of the PDF is not present in its corresponding JPEG image.",0,"Andreas Lehmkühler","Abhishek Sisodia",0,0,"16/Oct/10 13:11","02/Feb/11 17:21","02/Feb/11 17:21"
PDFBOX-871,PDFBOX,"Implement Apache project branding requirements",Task,CLOSED,Major,Fixed,None,None,None,None,,"We should implement the requirements from http://www.apache.org/foundation/marks/pmcs.html latest in Q1 next year.",0,"Andreas Lehmkühler","Jukka Zitting",0,1,"19/Oct/10 09:54","18/May/12 15:01","18/May/12 15:01"
PDFBOX-872,PDFBOX,"ERROR org.apache.pdfbox.filter.FlateFilter - Stop reading corrupt stream",Bug,CLOSED,Critical,Fixed,1.3.1,1.4.0,Parsing,None,"windows xp","This report: http://www2.goldmansachs.com/our-firm/press/press-releases/current/pdfs/2010-q2-earnings.pdf
With this code:
public static String getTransformed(InputStream inputStream) {
PDDocument pdDocument = null;
String document = null;
try
{ PDFParser parser = new PDFParser(inputStream); parser.parse(); pdDocument = parser.getPDDocument(); PDFText2HTML pdf2html = new PDFText2HTML("UTF-8"); document = pdf2html.getText(pdDocument); }
catch (IOException e)
{ e.printStackTrace(); }
finally {
if (pdDocument != null) {
try
{ pdDocument.getDocument().close(); }
catch (IOException e)
{ e.printStackTrace(); }
}
}
return document;
}
returns:
17:01:15,609 [main] ERROR org.apache.pdfbox.filter.FlateFilter - Stop reading corrupt stream
null
java.io.IOException: Error: Expected an integer type, actual=''
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1310)
at org.apache.pdfbox.pdfparser.PDFObjectStreamParser.parse(PDFObjectStreamParser.java:81)
at org.apache.pdfbox.cos.COSDocument.dereferenceObjectStreams(COSDocument.java:449)
at org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1112)
at org.apache.pdfbox.pdmodel.PDDocument.decrypt(PDDocument.java:591)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:246)
at org.apache.pdfbox.util.PDFTextStripper.getText(PDFTextStripper.java:184)
in Foxit PDF this file was opened normally",0,"Adam Nichols",Vladimir,0,0,"19/Oct/10 14:07","20/Dec/10 09:38","22/Nov/10 21:50"
PDFBOX-874,PDFBOX,"OutOfMemoryError in text extraction tests",Bug,CLOSED,Major,Fixed,1.3.1,1.3.1,"FontBox, (1)",None,,"As reported on dev@:
TestTextStripper failed:
testExtract(org.apache.pdfbox.util.TestTextStripper) Time elapsed:
7.32 sec <<< ERROR!
java.lang.OutOfMemoryError: Java heap space
at com.ibm.icu.impl.UCharacterNameReader.read(UCharacterNameReader.java:90)
I can reproduce it by adding a <argLine>-Xmx128m</argLine> option to the surefire plugin configuration in pdfbox/pom.xml. The same problem doesn't occur with 1.2.1.",0,"Jukka Zitting","Jukka Zitting",0,0,"20/Oct/10 09:13","26/Oct/10 09:34","20/Oct/10 13:48"
PDFBOX-876,PDFBOX,"PDFBox crashed JVM when importing certain PDF",Bug,CLOSED,Critical,"Not A Problem",1.2.1,None,"Swing GUI",None,"windows xp, suse","When importing certain PDF, the JVM crashed with the following error:
#
An unexpected error has been detected by Java Runtime Environment:
#
EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x6d2f3bf0, pid=6704, tid=6316
#
Java VM: Java HotSpot(TM) Client VM (11.3-b02 mixed mode windows-x86)
Problematic frame:
C [fontmanager.dll+0x13bf0]
#
An error report file with more information is saved as:
C:\Program Files\Genuitec\Common\plugins\com.genuitec.eclipse.easie.tomcat.myeclipse_7.5.0.zmyeclipse75020090612\tomcat\bin\hs_err_pid6704.log
#
If you would like to submit a bug report, please visit:
http://java.sun.com/webapps/bugreport/crash.jsp
The crash happened outside the Java Virtual Machine in native code.
See problematic frame for where to report the bug.
#
I was able to trace down where I used PDFImageWrite and try to convert the first page of PDF to PNG image.
I tried to update the font and still seem to be problem.
Any help would be really appreciated.
Thanks,",0,"Andreas Lehmkühler","Vu Tran",0,0,"22/Oct/10 19:48","01/Nov/10 18:44","26/Oct/10 20:56"
PDFBOX-879,PDFBOX,PDFMergerUtility,Bug,CLOSED,Major,Fixed,1.3.1,1.7.0,Utilities,None,"java 1.6","I concatenate PDFs with the PDFMergerUtility. As long as I concat my (with FOP) created PDFs that are in "PDF 1.4" format, I get no issue when viewing the result. But when one of the PDFs is a "PDF 1.2" document, the resulting PDF will also have "PDF 1.2" version. When viewing this concatenated PDF in Acrobat Reader (9), the first (originally PDF-1.2) document gets viewed without errors, but as soon as I scroll further to the second page (with the other PDF-1.4 PDFs), I get errors like
"Fehler auf dieser Seite. Die Seite wird unter Umständen nicht richtig in Acrobat angezeigt. Wenden Sie sich an den Ersteller des PDF-Dokuments, um das Problem zu beheben." (Roughly: errors on this page.)
or
"Ungültiger Parameter." (Roughly: invalid parameter.)
Note: when concatenated with iText 2.1.7, the resulting PDF has version "1.4" and no errors occur in Adobe Reader.
Is it possible to tell the merger to set the PDF Version of the result PDF?",0,"Andreas Lehmkühler",MH,0,1,"26/Oct/10 15:07","29/May/12 16:21","26/Dec/11 19:31"
PDFBOX-880,PDFBOX,"ClassCastException: COSDictionary cannot be cast to COSStream",Bug,CLOSED,Major,Fixed,"1.2.1, 1.3.1, 1.4.0",1.5.0,Parsing,None,,"Similar to PDFBOX-813 we are getting a ClassCastException in PDFontFactory.createFont
Stacktrace is from the 1.3.1 release. During our development process we got the exception with the 1.2.1 release also.
java.lang.ClassCastException: org.apache.pdfbox.cos.COSDictionary cannot be cast to org.apache.pdfbox.cos.COSStream
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:115)
at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115)
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:243)
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225)
at org.apache.pdfbox.util.PDFTextStripper.processPage(PDFTextStripper.java:441)
at org.apache.pdfbox.util.PDFTextStripper.processPages(PDFTextStripper.java:365)
at org.apache.pdfbox.util.PDFTextStripper.writeText(PDFTextStripper.java:321)",0,"Andreas Lehmkühler","Lars Torunski",1,0,"28/Oct/10 16:36","30/Mar/11 06:11","30/Mar/11 06:11"
PDFBOX-881,PDFBOX,"Incorrect output when word spacing is achieved by matrix translation",Bug,CLOSED,Major,Fixed,"1.3.1, 1.4.0",1.4.0,"Text extraction",None,,"When extracting text in a PDF document in which word spacing is achieved by matrix translation, in versions 1.3.x and 1.4 the different words are being merged.
This situation doesn't happen in 1.2 branch. After investigating a bit, the error was introduced with a refactoring of the PDFStreamEngine class, and is related to textMatrixEnd computation. In 1.2 branch the characterSpacingWidth was added after computing the textMatrixEnd, but in 1.3 (and 1.4) this characterSpacingWidth is preadded to the textMatrixEnd, so the system is unable to detect a new word.",0,"Andreas Lehmkühler","David Rodríguez Alfa",0,0,"29/Oct/10 17:51","20/Dec/10 09:38","05/Nov/10 14:35"
PDFBOX-883,PDFBOX,"Special characters are not correctly handled anymore when printing or exporting to image",Bug,CLOSED,Major,Fixed,1.3.1,1.4.0,None,None,"windows xp","I've just upgraded PDFBox from 1.2.1 to 1.3.1 and special characters (like 'é', '°', 'à', ...) are not correctly handled anymore when printing or exporting to image. These characters are remplaced by 'Ø' or blank spaces. Everything was working flawlessly with PDFBox 1.2.1.",0,"Andreas Lehmkühler","Bertrand Gillis",2,2,"02/Nov/10 14:03","20/Dec/10 09:38","02/Nov/10 15:19"
PDFBOX-884,PDFBOX,"Error in HTML output when detecting paragraph boundaries",Bug,CLOSED,Major,Duplicate,"1.3.1, 1.4.0",None,"Text extraction",None,,"There is an error in paragraph detection in 1.3 version and in current development trunk. In some situations is outputing a non closed <p> tag. It happens in new pages, when - I think - the first paragraph is empty (an empty string).
I attach a quite simple patch for solving this problem, perhaps is not very elegant, but is quite dificult for me to understand paragraph logic in current development trunk.",0,"Andreas Lehmkühler","David Rodríguez Alfa",0,1,"02/Nov/10 17:51","24/Oct/14 15:32","24/Oct/14 15:32"
PDFBOX-885,PDFBOX,"Add constructors from super class to PDFTextStripperByArea to support encoding",Improvement,CLOSED,Major,Fixed,1.3.1,1.4.0,"Text extraction",None,,"The PDFTextStripperByArea has only a default constructor that calls the super class' default constructor. This limits the ability to provide the properties or character encoding parameters. Adding the constructors from the super class should resolve this.",0,"Andreas Lehmkühler","Tim Stavenger",0,1,"03/Nov/10 20:17","20/Dec/10 09:38","05/Nov/10 13:14"
PDFBOX-886,PDFBOX,"Scanned PDFs from XEROX scanners was blank/black when convert to image",Bug,CLOSED,Major,Fixed,None,1.7.0,"Swing GUI",None,"windows, linux","I am using Apache PDFReader to convert scanned PDF's received from XEROX scanners and convert them into jpg images. The results images was either black or white. Does anyone aware of the issue and has the knowledge on how to fix this?
Thanks,
Vu Tran",0,"Andreas Lehmkühler","Vu Tran",0,1,"04/Nov/10 22:26","29/May/12 16:21","18/May/12 14:59"
PDFBOX-887,PDFBOX,"CCITTFaxDecodeFilter doesn't use the abbreviated names for image parameters",Bug,CLOSED,Minor,Fixed,1.3.1,1.4.0,"Parsing, (1)",None,,"The CCITTFaxDecodeFilter doesn't use the abbreviated names for image parameter e.g. "W" instead of "Width"",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"05/Nov/10 01:23","20/Dec/10 09:38","05/Nov/10 01:27"
PDFBOX-888,PDFBOX,"Decrypt doesn't allow more then 3 args",Bug,CLOSED,Minor,Fixed,1.3.1,1.4.0,Utilities,None,"ubuntu, java 1.6","According to the usage this utility should allow up to 8 arguments but at the moment nothing is processed if args.length > 3 thus there's no way to input 4 arguments (min number of arguments to decrypt a file)",0,"Andreas Lehmkühler","Andrea Vacondio",0,0,"06/Nov/10 15:59","20/Dec/10 09:38","28/Nov/10 22:58"
PDFBOX-889,PDFBOX,"Empty page causes NPE in importPage",Bug,CLOSED,Major,Fixed,1.3.1,1.4.0,PDModel,None,,"An empty page does not need to have a Contents item.
PDDocument.importPage() fails with a NullPointerException when such an empty page is imported.
Eclipse Workspace Patch 1.0
#P pdfbox
Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java
===================================================================
pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java (revision 1026306)
+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java (working copy)
@@ -322,16 +322,19 @@
try
{
PDStream src = page.getContents();
PDStream dest = new PDStream( new COSStream( src.getStream(), document.getScratchFile() ) );
importedPage.setContents( dest );
os = dest.createOutputStream();
+ if (src != null)
+ {
+ PDStream dest = new PDStream( new COSStream( src.getStream(), document.getScratchFile() ) );
+ importedPage.setContents( dest );
+ os = dest.createOutputStream();
byte[] buf = new byte[10240];
int amountRead = 0;
is = src.createInputStream();
while((amountRead = is.read(buf,0,10240)) > -1)
{
os.write(buf, 0, amountRead);
+ byte[] buf = new byte[10240];
+ int amountRead = 0;
+ is = src.createInputStream();
+ while((amountRead = is.read(buf,0,10240)) > -1)
+ { + os.write(buf, 0, amountRead); + }
}
addPage( importedPage );
}",0,"Adam Nichols","Kevin Jackson",0,0,"08/Nov/10 20:11","20/Dec/10 09:38","23/Nov/10 18:02"
PDFBOX-890,PDFBOX,"Can't extract text from PDF",Bug,CLOSED,Major,Fixed,1.3.1,1.5.0,"Text extraction",None,,"I have created a simply pdf by using Bullzip PDF printer (virtual Windows printer).
PDFBOX is not able to parse text from this PDF, it just return some low ascii chars.
command:
@java -jar pdfbox-app-1.3.1.jar ExtractText -console test.pdf",0,"Andreas Lehmkühler","Igor Spasic",0,1,"09/Nov/10 14:29","06/Apr/13 14:55","06/Apr/13 14:55"
PDFBOX-891,PDFBOX,"Malformed document causes NPE in PDNameTreeNode.getValue",Bug,CLOSED,Major,Fixed,1.3.1,1.4.0,PDModel,None,,"If a NameTreeNode has neither a Names or Kids item, then getValue crashes with a Null Pointer Exception.
Fix:
Eclipse Workspace Patch 1.0
#P pdfbox
Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java
===================================================================
pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java (revision 1026306)
+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java (working copy)
@@ -147,13 +147,15 @@
else
{
List kids = getKids();
for( int i=0; i<kids.size() && retval == null; i++ )
{
PDNameTreeNode childNode = (PDNameTreeNode)kids.get( i );
if( childNode.getLowerLimit().compareTo( name ) <= 0 &&
childNode.getUpperLimit().compareTo( name ) >= 0 )
+ if (kids != null) {
+ for( int i=0; i<kids.size() && retval == null; i++ )
{
retval = childNode.getValue( name );
+ PDNameTreeNode childNode = (PDNameTreeNode)kids.get( i );
+ if( childNode.getLowerLimit().compareTo( name ) <= 0 &&
+ childNode.getUpperLimit().compareTo( name ) >= 0 )
+ { + retval = childNode.getValue( name ); + }
}
}
}",0,"Adam Nichols","Kevin Jackson",0,0,"11/Nov/10 03:14","24/Mar/13 14:44","19/Nov/10 22:43"
PDFBOX-892,PDFBOX,"ClassCastException in PDXObjectImage.getMask",Bug,CLOSED,Major,Fixed,1.3.1,1.7.0,PDModel,None,,"Certain /FlateDecode encoded images which contain a Mask Dictionary cause the getRGBImage() method to fail with the following exception:
java.lang.ClassCastException: org.apache.pdfbox.cos.COSStream cannot be cast to org.apache.pdfbox.cos.COSArray
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.getMask(PDXObjectImage.java:364)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.getRGBImage(PDPixelMap.java:205)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap.write2OutputStream(PDPixelMap.java:310)
at org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage.write2file(PDXObjectImage.java:139)
at ImagePdfBoxTest2.main(ImagePdfBoxTest2.java:41)
I will attach a simple test program and a test dokument which was created with OpenOffice 3.2.",0,"Andreas Lehmkühler","Marko Mocnik",0,1,"17/Nov/10 11:02","29/May/12 16:21","18/May/12 14:54"
PDFBOX-893,PDFBOX,"Performance improvement in PDFStreamEngine and Matrix (patch included)",Improvement,CLOSED,Minor,Fixed,1.3.1,1.4.0,Utilities,None,,"I've been profiling PDFBox during text extraction from some large PDF documents e.g. 2000 pages, mostly text, 20 Mb file size.
Some of these documents can take a long time to process e.g. 40s+, sometimes a lot more than that.
(I'm using a 2.5 GHz, 4 Gb, Mac OS X 10.5.8, Java(TM) SE Runtime Environment (build 1.6.0_22-b04-307-9M3263) with -Xms256m -Xmx1024m -XX:PermSize=256m)
I've begun by profiling where the code spends its time during text extraction and I see that a lot of time is spent constructing org.apache.pdfbox.util.Matrix objects.
Screenshot PDFReference_nopatch.tiff shows the most used methods in PDFBox during text extraction for a large document. When this screenshot was taken the percentages had stabilised and Matrix.<init> accounts for 40% of cpu time apparently - the largest time of any method. I was surprised.
Most of these Matrix instances are being constructed within PDFStreamEngine.prcoessEncodedText(byte[])
On revision 1035639 (pre-1.4.0) this method constructs one Matrix object and then a further 7 within a loop which is called for each character in the document. So that's a lot of Matrix objects.
The attached patch refactors PDFStreamEngine.processEncodedText so that it now creates 5 reusable Matrix instances outside the loop and 2 within it.
This was achieved by adding a new method to Matrix: Matrix.multiply(Matrix, Matrix) which allows you to multiply two matrices and have the result stored in a specified Matrix object. This has the effect of reducing the number of temporary Matrix objects created during multiplication within PDFStreamEngine. This should save the garbage collector some work.
I profiled PDFBox again with this patch included and Matrix.<init> now accounts for only 30% of the cpu time.
Unfortunately, whilst less temporary objects are being created, it doesn't have an appreciable effect on the time it takes to extract text from my large documents.
The profiling continues...",0,"Andreas Lehmkühler","Neil McErlean",0,1,"17/Nov/10 12:58","20/Dec/10 09:38","12/Dec/10 14:07"
PDFBOX-894,PDFBOX,"Can`t open XREF as a stream. Latin Chars unreconized",Bug,CLOSED,Major,Fixed,1.3.1,1.3.1,Parsing,None,"windows xp","Latin characters (e.g. á, é, í, õ, ç) just aren`t recognized in PDF, creating text files with strange characters like Œ, ? and ˆ instead of the right ones.
I tryied to investigate through the PDFBox code what could have caused this, but with my limited knowledge on PDF formating, I couldn`t advance too much.
There are 2 points which I`d like to comment:
1 - The PDF has no XREF table, using Stream XREF(e.g. 3076/Type/XRef/W[1 3 1]>>stream) instead;
2 - While encoding the byte stream (COSStream.getFilteredStream().doEncode()) the Filter encoding is FlateDecode (not sure if it`s a real issue, since in other PDFs I get this same encoding and it works fine).
I`m not sure if there`s a problem with the pdf itself, since I can open it and see the Latin Characters with no trouble at Adobe and Foxit Readers.
Attached is on of the PDFs that I`m talking about. The issue is seen from the 5th page on.",0,"Andreas Lehmkühler","Pedro Rodrigues",0,1,"18/Nov/10 17:27","22/Jul/12 14:11","22/Jul/12 14:10"
PDFBOX-895,PDFBOX,"Infinite recursion when trying to extract text from specific types of PDFs",Bug,CLOSED,Critical,Fixed,1.3.1,1.7.0,"Text extraction",None,,"Hello and thanks for PDFBox.
We just started using PDFBox for text extraction(through Tika)
and it fails to finish text extraction falling in an infinite loop
and never returning the text.
Please note that this happens only for a specific type of PDF
documents(used for hand writing recognition) such as the one attached.
Not sure if this is a bug of PDFBox or due to the nature of the PDFs,
but I think that PDFBox should at least break out if extraction is not possible.
I wish I could give you more information but I know nothing about PDF format, parsing, etc.
Please let me know if you need any information or my help in any way.
Thanks a lot for your time.",0,"Andreas Lehmkühler","Panayiotis Vlissidis",0,0,"19/Nov/10 12:21","29/May/12 16:21","09/Nov/11 07:13"
PDFBOX-896,PDFBOX,"PDFViewer doesn't render landscape mode correctly",Bug,CLOSED,Minor,Fixed,1.4.0,1.4.0,None,None,,"When using the PDFViewer, landscape oriented documents are rendered vertically rather than horizontally.",0,"Adam Nichols","Robert Stone",0,0,"19/Nov/10 14:51","19/Nov/10 22:41","19/Nov/10 22:41"
PDFBOX-897,PDFBOX,"NullPointerException PDFFont#getEncodingFromFont with a PDF book because Type1Encoding is null",Bug,CLOSED,Major,Fixed,1.3.1,1.4.0,Parsing,None,,"A NullPointerException was thrown while extracting text from a PDF ebook. The exception was thrown in
PDFFont#getEncodingFromFont line:
[snip]
encoding.addCharacterEncoding(index, name.replace("/", ""));
[snip]
encoding was null. The line that was scanned was "/Encoding 256 array 0 1 255
{1 index exch /.notdef put}
for". The array check however only checks for line.endsWith("array"). The NPE was fixed when using line.contains("array") instead.
I have added a patch. The PDF is a PDF book with copyright so it cannot be attached as an example. The meta data of the document was:
Acrobat Distiller 7.0 (Windows)
PScript5.dll Version 5.2.2
PDF-1.6",0,"Adam Nichols","Martijn Brinkers",0,0,"19/Nov/10 23:45","20/Dec/10 09:38","22/Nov/10 21:15"
PDFBOX-898,PDFBOX,"COSStreamArray NullPointerException. firstStream is null if COSArray contains no items",Bug,CLOSED,Major,Fixed,1.3.1,1.4.0,Parsing,None,,"COSStreamArray checks whether array contains any items. If array is empty firstStream is not set and therefore null.
public COSStreamArray( COSArray array )
{
super( new COSDictionary(), null );
streams = array;
if( array.size() > 0 )
{ firstStream = (COSStream)array.getObject( 0 ); }
}
Most methods of COSStreamArray however use firstStream without any checks which can result in a NullPointerException.
I have a PDF that when parsed, results in a NPE because COSStreamArray#getScratchFile is called while firstStream is null.
One option would be to not create an instance of COSStreamArray when there are no items in the array.
A patch is attached that checks whether the array is empty and only creates an instance of there are any items.
The PDF was created with:
LaTeX with hyperref package
PDF-1.2",0,"Adam Nichols","Martijn Brinkers",0,0,"20/Nov/10 11:44","20/Dec/10 09:38","22/Nov/10 21:21"
PDFBOX-90,PDFBOX,"Support explicit retrieval of page labels","New Feature",CLOSED,Major,Fixed,None,1.0.0,PDModel,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552835&aid=1283254
Originally submitted by cvonsee on 2005-09-06 11:26.
Please include methods in PDPage (or elsewhere) to
allow explicit retrieval of page label information for
the current page and for all pages. Retrieved
information should include everything that is available
from the PDF, including page numbering style, label
prefix and page number for current page.
Thanks! Keep up the good work!
Chris von See",0,"Jukka Zitting",Anonymous,1,0,"06/Sep/05 18:26","22/Feb/10 18:27","10/Feb/10 18:49"
PDFBOX-900,PDFBOX,"ArrayIndexOutOfBoundsException with extracting labels from malformed document",Bug,CLOSED,Major,Fixed,1.3.1,1.4.0,PDModel,None,,"This document opens fine in Adobe Reader but inside there is a negative page label offset. This results in an ArrayIndexOutOfBoundsException in getLabelsByPageIndices() in PDFBox
My patch is to ignore that page label.
Eclipse Workspace Patch 1.0
#P pdfbox
Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java
===================================================================
pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java (revision 1026306)
+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java (working copy)
@@ -108,7 +108,9 @@
Map<Integer, COSDictionary> numbers = node.getNumbers();
for (Entry<Integer, COSDictionary> i : numbers.entrySet())
{
labels.put(i.getKey(), new PDPageLabelRange(i.getValue()));
+ if (i.getKey() >= 0) { + labels.put(i.getKey(), new PDPageLabelRange(i.getValue())); + }
}
}
}",0,"Adam Nichols","Kevin Jackson",0,1,"23/Nov/10 05:46","08/Feb/15 12:18","23/Nov/10 17:38"
PDFBOX-902,PDFBOX,"ClassCastException caused by unhandled Markup Annotations.",Bug,CLOSED,Major,Fixed,1.3.1,1.4.0,PDModel,None,,"Got a ClassCastException in the getParent() method of PDAnnotationPopup because some Markup Annotations are not handled fully by PDFBox and become PDAnnotationUnknown
Solution to make them generic PDAnnotationMarkup instead.
Eclipse Workspace Patch 1.0
#P pdfbox
Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java
===================================================================
pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java (revision 1026306)
+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java (working copy)
@@ -138,6 +138,15 @@ { annot = new PDAnnotationWidget( annotDic ); }
+ else if( subtype.equals( PDAnnotationMarkup.SUB_TYPE_FREETEXT ) ||
+ subtype.equals( PDAnnotationMarkup.SUB_TYPE_POLYGON ) ||
+ subtype.equals( PDAnnotationMarkup.SUB_TYPE_POLYLINE ) ||
+ subtype.equals( PDAnnotationMarkup.SUB_TYPE_CARET ) ||
+ subtype.equals( PDAnnotationMarkup.SUB_TYPE_INK ) ||
+ subtype.equals( PDAnnotationMarkup.SUB_TYPE_SOUND ))
+
{ + annot = new PDAnnotationMarkup( annotDic ); + }
else
{
annot = new PDAnnotationUnknown( annotDic );
Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationMarkup.java
===================================================================
pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationMarkup.java (revision 1026306)
+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationMarkup.java (working copy)
@@ -32,8 +32,32 @@
@author Paul King
@version $Revision: 1.1 $
*/
-public abstract class PDAnnotationMarkup extends PDAnnotation
+public class PDAnnotationMarkup extends PDAnnotation
{
+ /**
+ * Constant for a FreeText type of annotation.
+ */
+ public static final String SUB_TYPE_FREETEXT = "FreeText";
+ /**
+ * Constant for an Polygon type of annotation.
+ */
+ public static final String SUB_TYPE_POLYGON = "Polygon";
+ /**
+ * Constant for an PolyLine type of annotation.
+ */
+ public static final String SUB_TYPE_POLYLINE = "PolyLine";
+ /**
+ * Constant for an Caret type of annotation.
+ */
+ public static final String SUB_TYPE_CARET = "Caret";
+ /**
+ * Constant for an Ink type of annotation.
+ */
+ public static final String SUB_TYPE_INK = "Ink";
+ /**
+ * Constant for an Sound type of annotation.
+ */
+ public static final String SUB_TYPE_SOUND = "Sound";
/*
The various values of the reply type as defined in the PDF 1.7 reference",0,"Adam Nichols","Kevin Jackson",0,0,"23/Nov/10 06:07","20/Dec/10 09:38","23/Nov/10 17:51"
PDFBOX-905,PDFBOX,"NullPointerException when writing pdf to image",Bug,CLOSED,Major,Fixed,1.3.1,2.0.0,FontBox,None,,"java.lang.NullPointerException: null
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:76) ~[fontbox-1.3.1.jar:na]
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57) ~[fontbox-1.3.1.jar:na]
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50) ~[fontbox-1.3.1.jar:na]
at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:529) ~[pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:404) ~[pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:123) ~[pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.pdmodel.font.PDType1Font.getawtFont(PDType1Font.java:214) ~[pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.drawString(PDSimpleFont.java:97) ~[pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.pdmodel.font.PDType0Font.drawString(PDType0Font.java:68) ~[pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.pdfviewer.PageDrawer.processTextPosition(PageDrawer.java:190) [pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.util.PDFStreamEngine.processEncodedText(PDFStreamEngine.java:472) [pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.util.operator.ShowText.process(ShowText.java:45) ~[pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.util.PDFStreamEngine.processOperator(PDFStreamEngine.java:529) [pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:274) [pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.util.PDFStreamEngine.processSubStream(PDFStreamEngine.java:251) [pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.util.PDFStreamEngine.processStream(PDFStreamEngine.java:225) [pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.pdfviewer.PageDrawer.drawPage(PageDrawer.java:107) [pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.pdmodel.PDPage.convertToImage(PDPage.java:722) [pdfbox-1.3.1.jar:na]
at org.apache.pdfbox.util.PDFImageWriter.writeImage(PDFImageWriter.java:135) [pdfbox-1.3.1.jar:na]
Oddly, even though this exception gets thrown, image file gets written and seems to be ok.",0,"Andreas Lehmkühler","Stevo Slavic",2,6,"25/Nov/10 15:21","17/Mar/16 19:08","08/Oct/13 16:48"
PDFBOX-907,PDFBOX,"Encrypted Key not correctly calculated when the meta data is not encrypted",Bug,CLOSED,Major,Fixed,1.3.1,1.4.0,Parsing,None,,"Since rev 4, meta data can be unencrypted while the data is encrypted. If the metadata is not encrypted 0xFFFFFFFF should be added to the hash:
"Security handlers of revision 4 or greater) If document metadata is not being encrypted, pass 4 bytes with
the value 0xFFFFFFFF to the MD5 hash function."
(see see 7.6.3.3 Algorithm 2 Step f of PDF 32000-1:2008)
Whether or not the metadata is encrypted is store in the encryption dictionary. The default value is to encrypt the meta data.
I will attach a patch to detect whether the meta data is encrypted, and if not 0xFFFFFFFF will be added.
The document that I have tested with can be downloaded from http://www.mbtareview.com/MBTA_Review_2009.pdf",0,"Andreas Lehmkühler","Martijn Brinkers",0,0,"26/Nov/10 13:26","20/Dec/10 09:38","02/Dec/10 19:44"
PDFBOX-908,PDFBOX,"Gracefull handle corrupt PDFs",Bug,CLOSED,Major,Fixed,"1.3.1, 2.0.0",2.0.0,Parsing,None,,"I will use PDFBox for text extraction and one of the main requirements are that it should extract as much text as possible. If the PDF document contains something that isn't strictly correct according to the PDF specs it should try recover gracefully and continue scanning if possible if forceParsing is enabled. While testing against a large batch of PDF documents (including large ebooks) I found that the parser sometimes stops parsing and/or extracting text even with forceParsing enabled. I have attached a patch to make PDFBox handle some PDF problems more gracefully when forceParsing is enabled.
Some of my patches tries to handle certain situations differently from the existing code. For example the existing code to handle cases when an endobj is missing seems to be very complex. In all of my tests it seems to work better when the code just assumes that the endobj was missing. Whether or not assuming that endobj is missing or whether the existing way to cope with this is better is of course debatable.
A patch is included to handle situations where the data (DI) for an inline image contains the EI keyword. The EI is now only accepted if the char before EI is an end-of-line marker instead of whitespace.
I have added the method #isContinueOnError to PDFParser. By default it returns forceParsing but implementors can override it to stop parsing when a certain limit is reached (for example on a timeout). This can be helpful to stop parsing when the parser gets stuck in an unlimited loop.
BaseParser#readInt unread the data when a NumberFormatException was thrown. This resulted in an unlimited loop when forcParsing was enabled when testing with test-integer-too-large.pdf (see attached file). I think it's better to not unread data when an exception will be thrown because the risks are higher that you run into an unlimited loop.
The other patches are just minor like checks for null values etc.
I have attached four test PDF documents. These PDF documents are PDFs which I corrupted by hand to try to replicate similar situations I found in existing (copyrighted) ebooks.",0,"Andreas Lehmkühler","Martijn Brinkers",1,4,"26/Nov/10 15:20","17/Mar/16 19:08","29/Jan/16 10:55"
PDFBOX-909,PDFBOX,"Add support for a 6 element matrix",Improvement,CLOSED,Major,Fixed,"1.2.0, 1.2.1, 1.3.1",1.4.0,PDModel,None,,"The PDMatrix class only supports 3x3 matrices.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"27/Nov/10 19:20","20/Dec/10 09:38","07/Dec/10 19:48"
PDFBOX-910,PDFBOX,"certain sequences (such as endstrea[^m] are eaten by BaseParser#readUntilEndStream",Bug,CLOSED,Minor,Fixed,1.3.1,1.4.0,Parsing,None,,"Reported on the dev list by Martijn List:
It looks like there are two missing else parts in
BaseParser#readUntilEndStream.
The last part when trying to match "endstream" contains this:
if(byteRead==M){
//found the whole marker
pdfSource.unread( ENDSTREAM );
return;
}
But what happens when the last character is not "m" (for example
endstreaX). Because there is no else statement it seems that "endstrea"
is never written. Shouldn't it be:
if(byteRead==M){
//found the whole marker
pdfSource.unread( ENDSTREAM );
return;
}
else {
out.write(ENDSTREAM, 0, 8);
}
Similar thing happens happens below when matching "endobj".
If the last character does not match "j". "endob" is not written:
if(byteRead==J){
//found whole marker
pdfSource.unread( ENDOBJ );
return;
}
shouldn't it be:
if(byteRead==J){
//found whole marker
pdfSource.unread( ENDOBJ );
return;
}
else {
out.write(ENDOBJ, 0, 5);
}",0,"Adam Nichols","Adam Nichols",0,0,"29/Nov/10 18:28","20/Dec/10 09:38","29/Nov/10 18:31"
PDFBOX-911,PDFBOX,"Method PDDocument.getNumberOfPages() returns wrong number of pages",Bug,CLOSED,Major,Fixed,1.3.1,1.8.1,None,None,"windows xp, eclipse","Hello,
I use PDFbox and are very pleased.
For one PDF file however getNumberOfPages() returns the wrong number of pages (1 instead of 2 pages).
Test code:
File xx = new File("c:\\temp
test.pdf");
PDDocument pdoc = PDDocument.load(xx);
int x = pdoc.getNumberOfPages();
The PDF file could be provided.
Thanks in advance.
Regards",0,"Andreas Lehmkühler",nielsen,1,2,"29/Nov/10 20:13","08/Dec/13 14:14","08/Dec/13 14:14"
PDFBOX-912,PDFBOX,"PDF signing interface and improvments",Improvement,CLOSED,Minor,Fixed,1.4.0,1.6.0,"AcroForm, (3)",None,,"This is a first version of a signing interface for pdfbox. There are some design issues i could not handle without rewriting too much of the code.
Here we go:
incremental update support (tested for signatures with pdf/a compatibility), not compatible with encrypted documents nor with xref-streams
cos object improvment
COSString with ability to force writing hexbin for given string
COSBase with ability to write direct into a dictionary (that means if this is set, no indirect object will be wrote) (sry hard to explain what i mean, actualy needed for incremental update to lower the rate of indirect objects)
COSBase with ability to force writing object (this hook help the COSWriter write needed objects for inkremental update)
COSName added new names
COSDocument some getter and setter for handling new signature and incremental features
SignatureException with some exceptions for handling the bunch of new possible errors
-Parser improvments
– PDFParser saves now the position of the last startxref
– VisualSignatureParser (hook for parsing visual signature templates) (it's only for prepared visualisation that should be merged with the document)
-IO improvments
– COSFilterInput helps to find the proper content that should be hashed / signed
– COSStandardOutputStream is tricky, it helps the writer to jump to the right place in the document
– COSWriter got some improvments for incremental update
– COSWriterXRefEntry needed for incremental updates and writing the new Xref table
PDDocument
got a new method addSignature with the needed implementation (do the whole signature stuff)
cleanup
Fields and Annotations
PDSignature represent the signature dictionary
PDSignatureFild / Annotation are the visible & unvisible signature representations
Signature Interface and options
SignatureInterface the interface that shall be implemented for proper signing
SignatureOptions, some additional options for signing
Patch splited into pieces
sry for spelling, didn't include a spellchecker for english.",0,"Adam Nichols","Thomas Chojecki",0,6,"29/Nov/10 23:00","24/Jan/14 13:50","16/May/11 22:10"
PDFBOX-913,PDFBOX,"Add program which decompresses object streams","New Feature",CLOSED,Minor,Fixed,None,1.4.0,Utilities,None,,"It's very difficult to try to debug PDFs which have object streams because it's not possible to trace through the PDF in a text editor. Using some utilities like pdftk may fix additional problems which you are trying to debug. This task is to add a small program which will just decompress all the object streams into normal objects. This will not fix any problems with conforming PDF, it just makes things easier to debug. It may fix problems with non-conforming PDFs which have duplicate object IDs with the same revision as the first object will be overwritten by subsequent versions.",0,"Adam Nichols","Adam Nichols",0,0,"03/Dec/10 08:22","20/Dec/10 09:38","03/Dec/10 08:28"
PDFBOX-914,PDFBOX,"Using TextToPDF to create a PDF from the empty string produces unreadble PDF file (patch included)",Improvement,CLOSED,Major,Fixed,1.3.1,1.4.0,Utilities,None,,"If you create a PDF document from org.apache.pdfbox.TextToPDF like so:
TextToPDF pdfCreator = new TextToPDF();
PDDocument pdfDoc = pdfCreator.createPDFFromText(new StringReader("")); // Note the empty String
then it does produce a PDF file. But the file cannot be opened as it contains no pages.
Adobe Reader (I have 9.4.1), and Mac OSX's Preview/Quicklook cannot open the document.
I have attached (or will do in a minute) a patch that includes a test case that reproduces the problem (no PDPages in a PDF with no text).
And I've patched TextToPDF so that it inserts a single empty page for an empty string input.",0,"Andreas Lehmkühler","Neil McErlean",0,1,"04/Dec/10 22:03","20/Dec/10 09:38","11/Dec/10 17:52"
PDFBOX-915,PDFBOX,"some pdf file for chinese can't extracted by correct encode",Bug,CLOSED,Major,Invalid,"1.3.1, 2.0.0",None,"Text extraction",None,"java 1.5","i used the PDFTextStripper to extracted the contents of pdf which include chinese code ,some file can extracted correct ,but some is extracted with wrong code.",0,"Andreas Lehmkühler",chenlong,0,1,"07/Dec/10 08:56","04/Mar/15 11:17","04/Mar/15 11:17"
PDFBOX-917,PDFBOX,"Read non-conforming PDFs (attached) without throwing java.io.IOException: expected='endobj' org.apache.pdfbox.io.PushBackInputStream",Improvement,CLOSED,Major,Fixed,1.3.1,1.5.0,Parsing,None,tika,"This happened using the following PDF (~2MB):
http://biblioteca.sinbad.ua.pt/DisQSws/get.aspx?filename=2010001615.pdf&catalog=Teses&type=pdf
When reading non-conforming PDFs like the one above the following exception is thrown and the text extraction partially fails:
WARN - Parsing Error, Skipping Object
java.io.IOException: expected='endobj' firstReadAttempt='' secondReadAttempt='' org.apache.pdfbox.io.PushBackInputStream@53ab04
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:607)
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:172)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:878)
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:843)
at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:74)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:197)
at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:197)
at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:137)
at org.apache.tika.cli.TikaCLI.process(TikaCLI.java:218)
at org.apache.tika.cli.TikaCLI.main(TikaCLI.java:84)",0,"Adam Nichols","Alex Rodriguez Lopez",1,0,"10/Dec/10 10:15","04/Mar/11 10:29","20/Jan/11 17:44"
PDFBOX-92,PDFBOX,"Character positioning in PDFReader",Bug,CLOSED,Major,"Cannot Reproduce",None,None,PDModel,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1290572
Originally submitted by benlitchfield on 2005-09-13 18:13.
The PDFReader(and subsequently printing) does not
always position characters correctly.
See:CONVENTION20.pdf
original-spacing-issue.pdf
result-spacing-issue.pdf",0,"Andreas Lehmkühler",Anonymous,0,2,"14/Sep/05 01:13","13/Mar/13 11:31","13/Mar/13 11:31"
PDFBOX-920,PDFBOX,"PDFStreamEngine.processEncodedText fails on UTF-16 text",Bug,CLOSED,Major,Fixed,1.3.1,1.5.0,"Text extraction",None,,"I have a PDF document which yields gibberish text. When I debug it, I get to the PDFStreamEngine.processEncodedText. The method gets a following byte array:
[0, 47, 0, 82, 0, 82, 0, 78, 0, 3, 0, 68, 0, 87, 0, 3, 0, 87, 0, 75, 0, 72, 0, 3, 0, -64, 0, 85, 0, 86, 0, 87, 0, 3, 0, 83, 0, 76, 0, 70, 0, 87, 0, 88, 0, 85, 0, 72, 0, 3, 0, 68, 0, 69, 0, 82, 0, 89, 0, 72, 0, 17, 0, 3]
This looks to me like some UTF16 text, but the codes seem different than what you'd normally expect. I don't understand the encoding. In 1.2.1 this yielded the correct output though ("Look at the picture above"). In the 1.3.1 and the current trunk this is converted to garbage. The culprit is here:
codeLength = 1;
String c = font.encode( string, i, codeLength );
if( c == null && i+1<string.length)
{
//maybe a multibyte encoding
codeLength++;
c = font.encode( string, i, codeLength );
}
So the code first tries to 'encode' a single byte as a character, and then tries two bytes, three bytes etc. First it starts with a 00 byte. In 1.2.1 the PDFont.encode would return null. The program would then try with two bytes getting a correct character on the second attempt.
In the current trunk the font.encode method returns a space " " when 00 is passed. This is clearly wrong, because afterwards the entire string is parsed incorrectly. I tried to debug further and it seems to me that the problem is in the Encoding class, in the getName method. It looks like this:
public String getName( int code ) throws IOException
{
String name = codeToName.get( code );
if( name == null )
{ //lets be forgiving for now name = "space"; }
return name;
}
The crucial bit is the "let's be forgiving for now". If a code is unknown in the encoding, a space is returned. In my case this completely breaks the parsing of a file.
What was the rationale behind this behavior? Removing it fixed my problem and didn't break anything. All unit tests of pdfbox pass. The regression tests of my applications (based on the pdf extraction code from the Aperture Framework) also pass. The "forgiving" part has been added in PDFBOX-626, but the issue description doesn't name any reasons for that. If the "forgiveness" is there for a good reason, I'd be grateful for advice how to deal with the problem. Otherwise please remove it.
Unfortunately I can't share the problem file.",0,"Andreas Lehmkühler","Antoni Mylka",0,0,"13/Dec/10 18:47","04/Mar/11 10:29","08/Jan/11 16:15"
PDFBOX-921,PDFBOX,"NumberFormatException when parsing a type1 font",Bug,CLOSED,Major,Fixed,1.3.1,1.4.0,"Parsing, (2)",None,,"Martijn Brinkers reported this issue on dev@pdfbox [1]. A NumberFormatException can occur if the header of an embedded type1 font wasn't malformed.
The pdf attached to PDFBOX-816 triggers that exception.
[1] http://markmail.org/message/xxquw7om7uvlf5bz",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"14/Dec/10 17:19","17/Jan/11 09:57","14/Dec/10 17:26"
PDFBOX-923,PDFBOX,"pdf gets messed up when updated with xfdf data",Bug,CLOSED,Major,Fixed,1.3.1,2.0.0,AcroForm,None,"java 1.6, windows 7","we load a pdf file and update it with an xfdf file, the resulting pdf is all mixed up.
( you can open pdf_output.pdf to see how it looks)
PDDocument pdf = PDDocument.load("ar104-1.10.0.pdf");
PDDocumentCatalog docCatalog = pdf.getDocumentCatalog();
PDAcroForm acroForm = docCatalog.getAcroForm();
FDFDocument fdfdoc=FDFDocument.loadXFDF(new File("form_data.xfdf"));
acroForm.importFDF(fdfdoc);
pdf.save("pdf_output.pdf");
System.out.println("pdf created successfully");
Please see attached
1. input pdf file
2. the xfdf file( created from the content submitted by the input file) and
3. the messed up output pdf file",0,"Maruan Sahyoun","Madhav Vodnala",0,2,"20/Dec/10 08:05","17/Mar/16 19:07","03/Feb/15 22:32"
PDFBOX-924,PDFBOX,"Image not getting rendered correctly..",Bug,CLOSED,Critical,Fixed,1.3.1,2.0.0,PDModel,None,"windows xp, java 1.6","Hi,
I converted a MS office word document in to pdf using open office. And then I used the PDFBox API to convert the pages of the PDF to Image.
Class : PDPage
API : public BufferedImage convertToImage(int imageType, int resolution)
But the image contained ")" characters which were not present in the pdf.",0,"Andreas Lehmkühler","Sandeep Dhawan",1,2,"20/Dec/10 13:52","17/Mar/16 19:07","09/Aug/13 15:34"
PDFBOX-925,PDFBOX,"ExtractText china pdf ,but pdfbox distinguish Korea,The pdf 1.2 is ok,since 1.3 error",Bug,CLOSED,Major,Fixed,"1.3.1, 1.4.0",1.5.0,"Text extraction",None,"windows xp",,0,"Andreas Lehmkühler",yuedaxia,0,0,"21/Dec/10 08:28","04/Mar/11 10:29","23/Jan/11 13:57"
PDFBOX-926,PDFBOX,"JVM crash calling Graphics2D.draw(Shape) with a specific path",Improvement,CLOSED,Major,"Won't Fix",1.4.0,None,Utilities,None,"windows 7, mac os, windows","When I call PDPage.convertToImage(), JVM crash occur. This is caused by JVM itself, not PDFBox.
I will attach the test code to replicate this issue.
It seems that AWT has certain issue with a certain path/stroke combination. And by changing something that make the rendering behave slightly differently seems avoid the issue.
There is a couple workaround that I tried myself as explained in [1] such as setting graphics.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);
Maybe PDFBox can include the workaround buildin.
I already file a bug to Sun [2]. (It may need a day or two to show in public bug database)
[1] http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6215380
[2] http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7008242",0,"Andreas Lehmkühler",Christanto,0,4,"21/Dec/10 11:29","07/Mar/17 11:43","07/Mar/17 11:43"
PDFBOX-927,PDFBOX,"Problem on writing some kind of images to a File in filesystem",Bug,CLOSED,Minor,Fixed,"1.2.1, 1.3.1, 1.4.0",1.8.0,PDModel,None,"java 1.5, java 1.6","I have an image object which is an instance of PDXObjectImage.
If it has PDIndexed as colorspace.
"image.getColorSpace() instanceof PDIndexed"
the image is wrongly rendered.
Is there any known issue with this colorSpace?
I think the problem could be at:
image.write2file(...) or
image.write2OutputStream(...);",0,"Andreas Lehmkühler","JOSE FREITAS",0,2,"21/Dec/10 12:39","23/Mar/13 12:56","14/Jan/13 19:26"
PDFBOX-928,PDFBOX,"added NPE protection which occurred when reading corrupt PDFs",Improvement,CLOSED,Trivial,Fixed,"0.8.0-incubator, (6)",1.5.0,PDModel,None,,"I came across a non-conforming PDF which resulted in a NPE when I tried to append a page to the document. The error was because there were no kids listed, so when rootPages.getKids().add(page); was called in addPage(PDPage page) it went into the COSArray.add() but threw an exception on line 180: array.add(((COSObjectable)o).getCOSObject()); I fixed this by checking to see if array was null before attempting to call the add() method.
I can not attach the sample PDF because it contains confidential data.
Despite the major non-conforming aspects of this PDF, Adobe reader is able to open it. This is one reason why I want to make sure PDFBox can at least process the file without throwing an exception.",0,"Adam Nichols","Adam Nichols",0,0,"28/Dec/10 00:38","04/Mar/11 10:29","28/Dec/10 00:40"
PDFBOX-930,PDFBOX,"I cant able to get list of fields",Bug,CLOSED,Major,Incomplete,0.7.3,None,AcroForm,None,"windows xp","I have a pdf template contains textboxes. I need textbox value but its not displayed properly. I am getting Null Pointer Exception.
Here i mentioned my code ....
try
{ PDDocument pdf = PDDocument.load("C:\\Documents and Settings\\manikandan.n\\Desktop\\MyTemplate\\1.pdf" ); PDDocumentCatalog docCatalog = pdf.getDocumentCatalog(); PDAcroForm acroForm = docCatalog.getAcroForm(); acroForm.setCacheFields(true); PDField field = acroForm.getField("Client_Name"); field.setValue("Smith"); System.out.println("Sample::::::"+field.getValue()); pdf.save( "C:\\Documents and Settings\\manikandan.n\\Desktop\\MyTemplate\\2.pdf" );*/ }
catch(Exception e)
{ System.out.println("Error::::"+e); }",0,"Maruan Sahyoun",Manikandan,0,2,"03/Jan/11 09:12","17/Mar/16 19:15","03/Feb/15 22:11"
PDFBOX-931,PDFBOX,"PDPage convertToImage generates white image with no contents",Bug,CLOSED,Major,Invalid,"1.3.1, 1.4.0",None,PDModel,None,"java 1.6","When converting a PDPage of this pdf into an image, the resulting file is always a white image with no contents.
The following message appeared in the log output (It doesn't seem to be a duplicate of PDFBOX-794.) :
ERROR filter.FlateFilter - Stop reading corrupt stream
Here's the code used to convert the image :
@Test
public void testConvertImage() {
try {
PDDocument pdDocument = PDDocument.load("pdf_causing_white_pages.pdf");
List<PDPage> documentPageList = pdDocument.getDocumentCatalog().getAllPages();
TestCase.assertNotNull(documentPageList);
int pageNumber = 1;
for (PDPage tmpPage :documentPageList)
{ BufferedImage tempImage = tmpPage.convertToImage(); ImageIO.write(tempImage,"jpeg", new File("result_"+pageNumber+".jpeg")); pageNumber ++; }

} catch (FileNotFoundException e)
{ TestCase.fail(e.getMessage()); } catch (IOException e) { TestCase.fail(e.getMessage()); }
}",0,"Andreas Lehmkühler","Vincent VIAL",1,1,"03/Jan/11 15:29","26/May/11 06:01","01/May/11 14:56"
PDFBOX-932,PDFBOX,"Swedish characters are garbled in form",Bug,CLOSED,Major,Fixed,1.4.0,2.0.0,AcroForm,"Appearance Encoding","mac os x, java 1.6","When using swedish characters to fill in a form they show up garbled in the PDF. This seems to have to do with the PDAppearance class. When calling setValue on the field, the value seems to be set ok since COSString handles characters outside ASCII in its writePDF method. When PDAppearance writes the value in insertGeneratedAppearance it does not do the same check. If the same check is done it seems to work for PDAppearance to (see patch below). Since I do not know very much about the PDF format, I dont know if this is the right way to do it...
PDDocument document = PDDocument.load(<pdf-file>);
PDDocumentCatalog docCatalog = document.getDocumentCatalog();
PDAcroForm form = docCatalog.getAcroForm();
PDField field = form.getField(<field name>);
field.setValue("åäö");
@@ -400,9 +401,32 @@
{ throw new IOException( "Error: Unknown justification value:" + q ); }
printWriter.println("(" + value + ") Tj");
printWriter.println("ET" );
printWriter.flush();
+ boolean outsideASCII = false;
+ byte[] bytes = value.getBytes("ISO-8859-1");
+ int length = bytes.length;
+
+ for( int i=0; i<length && !outsideASCII; i++ )
+ { + //if the byte is negative then it is an eight bit byte and is + //outside the ASCII range. + outsideASCII = bytes[i] <0; + }
+ if(!outsideASCII)
{ + printWriter.println("(" + value + ") Tj"); + printWriter.println("ET" ); + printWriter.flush(); + }
else
Unknown macro: {+ printWriter.print("<");+ for(int i=0; i<length; i++ )+ { + String val = COSHEXTable.HEX_TABLE[ (bytes[i]+256)%256 ]; + printWriter.write(val); + }+ printWriter.println("> Tj");+ printWriter.println("ET" );+ printWriter.flush(); + }
}",0,"Maruan Sahyoun","Pär Wenåker",1,0,"04/Jan/11 10:28","17/Mar/16 19:07","27/Jan/15 22:13"
PDFBOX-933,PDFBOX,""Limits" entry should not added to the root node dictionary of name trees",Bug,CLOSED,Major,Duplicate,1.4.0,None,PDModel,None,"acrobat, windows 7","Embedding file using PDComplexFileSpecification (as shown in org.apache.pdfbox.examples.pdmodel.EmbeddedFiles example) adds "Limits" entry to the name tree root node dictionary associated with EmbeddedFiles entry in PDF documents name dictionary. Here is a fragment taken from the PDF document created by EmbeddedFiles example:
...
3 0 obj
<<
/EmbeddedFiles 5 0 R
>>
5 0 obj
<<
/Limits [(My first attachment) (My first attachment)]
/Names [(My first attachment) 8 0 R]
>>
...
Such PDF document opened in Adobe Acrobat does not show embedded files in attachments panel, unless "Limits" entry is removed or commented.
According to PDF3200:2008 specification (see clause "7.9.6 Name Trees") "Limits" entry in name tree node dictionary can only appear in intermediate or leaf node, but not root node.
"The tree shall always have exactly one root node, which shall contain a single entry: either Kids or Names but not both. If the root node has a Names entry, it shall be the only node in the tree. If it has a Kids entry, each of the remaining nodes shall be either an intermediate node, that shall contain a Limits entry and a Kids entry, or a leaf node, that shall contain a Limits entry and a Names entry."",0,"Andreas Lehmkühler",Petras,0,1,"04/Jan/11 14:43","10/Mar/13 15:02","10/Mar/13 15:02"
PDFBOX-934,PDFBOX,"ImageToPDF.createPDFFromImage causes problems for certain TIFF inputs",Bug,CLOSED,Major,Fixed,1.4.0,"1.8.6, 2.0.0",Writing,"CCITTFaxDecode ccitt",,"I try to create a PDF for a given TIFF image while trying
ImageToPDF imageToPDF = new ImageToPDF();
imageToPDF.createPDFFromImage("c:\\tmp
myDocument.pdf", "c:\\tmp
myImage.tif");
Problem: Acrobat Reader (Version 9.3.4) cannot display the generated file myDocument.pdf
The error message shown by Acrobat Reader says that there is "insufficient data for an image" (in German: "Nicht genügend Daten für ein Bild")",0,"Tilman Hausherr","Stefan Hammelbeck",0,1,"04/Jan/11 16:11","22/Jun/14 14:34","10/Jun/14 12:27"
PDFBOX-935,PDFBOX,"Text not extracted with PDFBox 1.4",Bug,CLOSED,Major,Fixed,1.4.0,1.5.0,"Text extraction",None,,"I have used PDFBox v1.2.1 to extract text from a PDF file, and it works perfect. But now I have tested it with PDFBox v1.4 and most of the text is not extracted.
I have attached a 1-page PDF file to test.",0,"Andreas Lehmkühler",Hesham,0,1,"06/Jan/11 07:47","04/Mar/11 10:29","08/Jan/11 14:52"
PDFBOX-936,PDFBOX,"No HTML Header using PDFText2HTML",Bug,CLOSED,Major,Fixed,1.3.1,1.6.0,Utilities,None,"ubuntu, netbeans, java 1.6","The following code should output html string with this header:
<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN
"http://www.w3.org/TR/html4/loose.dtd">
<html><head><title></title>
... but it does not !
Here is te test code:
package fr.def.iss.vd2.mod_instruction_gui.view;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import org.apache.pdfbox.exceptions.COSVisitorException;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.util.PDFText2HTML;
public class Test {
public static void main(final String[] args)
{ byte[] buf = rawText2Pdf("Hell world"); String html = pdf2Html(buf); System.out.println("html:" + html); }
public static byte[] rawText2Pdf(String text) {
ByteArrayOutputStream os = null;
try
{ os = new ByteArrayOutputStream(); PDDocument document = new PDDocument(); PDPage page = new PDPage(); document.addPage(page); PDFont font = PDType1Font.HELVETICA_BOLD; PDPageContentStream contentStream = new PDPageContentStream( document, page); contentStream.beginText(); contentStream.setFont(font, 12); contentStream.moveTextPositionByAmount( 100, 700); contentStream.drawString(text); contentStream.endText(); contentStream.close(); document.save(os); document.close(); }
catch (COSVisitorException ex)
{ ex.printStackTrace(); } catch (IOException ex) { ex.printStackTrace(); }
byte[] result = null;
if (os != null)
{ result = os.toByteArray(); }
return result;
}
public static String pdf2Html(byte[] pdf) {
String result = null;
ByteArrayOutputStream os = null;
PDFText2HTML stripper = null;
StringBuilder buf = new StringBuilder();
try
{ stripper = new PDFText2HTML("utf-8"); ByteArrayInputStream is = new ByteArrayInputStream(pdf); PDDocument document = PDDocument.load(is); os = new ByteArrayOutputStream(); Writer writer = new OutputStreamWriter(os, "utf-8"); stripper.writeText(document, writer); writer.close(); os.close(); result = buf.toString() + stripper.getText(document); }
catch (IOException ex)
{ ex.printStackTrace(); }
return result;
}
}",0,"Andreas Lehmkühler","Clement Igonet",0,2,"06/Jan/11 10:33","04/Mar/15 11:26","04/Mar/15 11:26"
PDFBOX-938,PDFBOX,"Wrong extracted text using PDFBox 1.4",Bug,CLOSED,Major,Fixed,1.4.0,1.5.0,"Text extraction",None,,"Hello ,
I am using PDFBox v1.4 to extract some text from a PDF, but some words are not extracted right.
For example words :
"Nefteiugansk" is read: "Nežeiugansk"
"fiancee" is read: "Äancée"
"first" is read: "Ärst"
Please check the attached file to test this.
Best regards",0,"Andreas Lehmkühler",Hesham,0,1,"11/Jan/11 13:45","04/Mar/11 10:29","02/Feb/11 19:44"
PDFBOX-939,PDFBOX,"Lost whitespaces when extracting Arabic text",Bug,CLOSED,Major,Fixed,1.4.0,1.5.0,"Text extraction",None,,"I tried to extract text from an arabic PDF. Result looks good for the first look, but if you look closer, you may notice that some of whitespaces is missing comparing to copy/pasted text from the same PDF.
Copy/pasted line from attached PDF:
بعد ما اكتشف حقيقة المثلث الغامض
Extracted text:
بعد ما اكتشف حقيقةالمثلثالغامض",0,"Andreas Lehmkühler","Anton Stremoukhov",0,0,"11/Jan/11 15:11","04/Mar/11 10:29","25/Jan/11 07:18"
PDFBOX-940,PDFBOX,"[pdmodel.font.PDFont] Error: Could not parse predefined CMAP file for 'PDFXC-Indentity0-0'",Bug,CLOSED,Major,Fixed,1.4.0,"1.8.4, 2.0.0",None,None,"tomcat, windows","Hi,
when i am trying to upload a pdf document the following error is thrown in the tomcat.. i am using pdfbox-1.4.0.jar..
17:29:33,465 ERROR [pdmodel.font.PDFont] Error: Could not parse predefined CMAP file for 'PDFXC-Indentity0-0'
please find the solution",0,"Andreas Lehmkühler",krishna,16,17,"12/Jan/11 12:08","31/Jan/14 06:46","01/Jan/14 17:14"
PDFBOX-941,PDFBOX,"extracting Japanese characters gives garbage",Bug,CLOSED,Major,Fixed,1.4.0,1.5.0,"Text extraction",None,"java 1.6, centos, mac os x","when extracting text from this pdf file, I got this exception, and the text extracted was gibberish.
44 [main] ERROR org.apache.pdfbox.pdmodel.font.PDFont - Error: Could not parse predefined CMAP file for 'Adobe-Japan1-UCS2'
PDFBox 1.2.1 worked fine with the same file, I wonder why 1.4.0 could not.",0,"Andreas Lehmkühler","Liang Qu",0,0,"13/Jan/11 21:03","02/Oct/11 12:15","16/Jan/11 16:14"
PDFBOX-942,PDFBOX,"Image quality improvements",Bug,CLOSED,Major,Fixed,1.4.0,1.5.0,PDModel,None,,"The quality of the images inserted in a PDF documents could be improved by changing PDJpeg.java
In the API
public PDJpeg(PDDocument doc, BufferedImage bi) throws IOException
ImageIO.write(bi, "jpeg", os);
could be replaced by :
ImageWriter writer = null;
Iterator iter = ImageIO.getImageWritersByFormatName("jpg");
if (iter.hasNext())
{ writer = (ImageWriter) iter.next(); }
ImageOutputStream ios = ImageIO.createImageOutputStream(os);
writer.setOutput(ios);
// Set the compression quality
JPEGImageWriteParam iwparam = new JPEGImageWriteParam(Locale.getDefault());
iwparam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
iwparam.setCompressionQuality(1.0f);
// Write the image
writer.write(null, new IIOImage(bi, null, null), iwparam);
writer.dispose();
This increase the size of the generated PDF.
By default the JPEG quality is 0.75, in the patch I use 1.0, the maximum quality
As a suggestion the quality of the JPEG could be a global variable since it affect the size of the PDF",0,"Andreas Lehmkühler","Olivier DOREMIEUX",0,0,"14/Jan/11 17:27","04/Mar/11 10:29","30/Jan/11 17:10"
PDFBOX-943,PDFBOX,"Creating a link without borders appears with borders in Mac's Preview",Bug,CLOSED,Major,"Won't Fix",1.4.0,None,Writing,None,"mac os","I am trying to create a link with no borders. The link appears and works perfect in Adobe reader, but in Mac Preview the link appears with a border around it. Here is my code :
PDAnnotationLink link = new PDAnnotationLink();
PDBorderStyleDictionary border = new PDBorderStyleDictionary();
border.setWidth( 0f );
link.setBorderStyle( border );
Can this be fixed to show no border in Mac's Preview ?
I have attached a sample PDF with a link in its last page ... You can test it on Adobe reader and Mac's Preview programs.",0,"Andreas Lehmkühler",Hesham,0,1,"19/Jan/11 05:32","01/Feb/11 07:17","01/Feb/11 07:16"
PDFBOX-945,PDFBOX,"PDFBOX may not depend on plattform encoding",Bug,CLOSED,Major,Fixed,1.5.0,1.5.0,None,None,,"The pdf specification states, that PDFs use an ASCII compatible, 8 bit characterset.
PDFBOX uses on various places the plattform encoding to convert bytes from/to strings.
On JREs with an non ASCII compatible plattform encoding (there are such systems out there), this will break pdfbox.",0,"Andreas Lehmkühler","Martin Koegler",0,0,"23/Jan/11 17:34","02/Nov/13 16:10","25/Jan/11 19:02"
PDFBOX-946,PDFBOX,"RandomAccessBuffer shoud be created empty",Bug,CLOSED,Major,Fixed,1.4.0,1.5.0,None,None,,"RandomAccessBuffer shoud be created empty (size=0), as new normal files are normaly also empty.",0,"Andreas Lehmkühler","Martin Koegler",0,0,"23/Jan/11 18:27","02/May/13 02:28","20/Feb/11 18:24"
PDFBOX-947,PDFBOX,"Avoid using temporary files in PDJpeg",Improvement,CLOSED,Major,Fixed,1.4.0,1.5.0,None,None,,"The current code writes the PDF to a tmp file and then read it back. This can be done in-memory using the InputStream constructors.",0,"Andreas Lehmkühler","Martin Koegler",0,0,"23/Jan/11 18:57","04/Mar/11 10:29","20/Feb/11 18:40"
PDFBOX-948,PDFBOX,"Don't use temporty files by default for all PDF sizes",Improvement,CLOSED,Major,Fixed,1.4.0,1.5.0,None,None,,"PDFBOX uses by default temporary files as work space (regardless of the PDF size).
org.apache.pdfbox.io.RandomAcessFile is not buffered, so each read/write acess is a system call. There are functions like readlong, which call read 4 times to read 4 bytes. Additionally, it adds the usual problems with tempory files.
For normal sized PDFs files, the in-memory implementation RandomAccessBuffer should not increase the memory usage too much, while providing faster IO as all access operations are only memory copies.
Therefore, please consider switching the default to in-memory scratch buffers. Users with very large files can still pass a temporary directory.",0,"Andreas Lehmkühler","Martin Koegler",0,0,"23/Jan/11 21:22","02/May/13 02:28","20/Feb/11 18:31"
PDFBOX-95,PDFBOX,"ClassCastException in FlateFilter",Bug,CLOSED,Major,"Cannot Reproduce",None,None,Parsing,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1297272
Originally submitted by yves_bussard on 2005-09-20 22:35.
Hi Ben,
There is another Bug in FlateFilter.decode(). Let's
have a look at the following stream in the attached
document:
174 0 obj
<<
/Length 94
/LayerCreator /Neevia
/LayerID <c5593367f4b69653b3dd4f771209026a>
/LayerXML 177 0 R
/Filter [ /FlateDecode ]
/DecodeParms [ null ]
>>
stream
<the 94 bytes of the stream>
endstream
endobj
As described in the PDF Reference this document uses
the possibility to define an array of filters instead
of just one filter(name). In the above case the array
contains only one element (filter). In this case it
should also define an array of dictionaries (one for
each filter) which it does.
Now the decode() method is passed a parametere options
which imho should be the dictionary with the parameters
for this filter instance. Instead the options parameter
actually is the stream itself (COSStream is derived
from COSDictionary) which contains the filter
parameters in DecodeParms. Now if you have a COSArray
of COSDictionaries in the entry DecodeParms then you
have no way of knowing which set (index) of parameters
you should use. I think that the parameter options
should contain the dictionary with the parameters
itself (not the stream). This affects a few places
calling the method.
Also another bug is on line 78 in the same method:
predictor = dict.getInt("Predictor");
colors = dict.getInt("Colors");
--> bitsPerPixel =
options.getInt("BitsPerComponent");
columns = dict.getInt("Columns");
the parameter BitsPerComponent is stored at the same
location as columns. Therefore it should be from the
variable dict that the BitsPerComponent are retrieved.
To me it looks as if originally the parameter options
used to be the decode parameters and it has been
changed later on (I don't know for which reason).
cheers
Yves",0,"Andreas Lehmkühler",Anonymous,0,1,"21/Sep/05 05:35","23/Aug/12 17:20","23/Aug/12 17:20"
PDFBOX-952,PDFBOX,"getParent method of class PDField doesn't consider both parent keys "P" and "Parent".",Bug,CLOSED,Major,Fixed,1.4.0,1.5.0,PDModel,None,,"The getParent method should lookup a parent using both valid parent keys: "P" and "Parent". The method findFieldType of this class already performs it's lookup using both keys.
Additionally method getParent of the class PDField has a return type of PDField. While this is appropriate for nested fields this doesn't work for PDPages. I have an AcroForm I'm working with that sets a Page object to be the parent of an AcroForm Field. It does this specifically by setting the "P" key to the object reference for a particular page (e.g. << /P 102 0 R/FT/Btn >> with "102 0 R" being the aforementioned object reference).
As a result of this design decision there is no way of getting a field's parent page from the getParent method. We are required to get the backing COSDictionary, call getDictionaryObject("P") and create a PDPage Object from scratch. This is workable, but not optimal. We'd prefer to avoid the COS data types wherever possible.
Thanks,
Robert McHugh",0,"Andreas Lehmkühler","Robert McHugh",0,1,"28/Jan/11 20:58","04/Mar/11 10:29","29/Jan/11 17:52"
PDFBOX-953,PDFBOX,"PDFBox fails to ExtractText from Adobe Acrobat X 256-bit AES encrypted documents","New Feature",CLOSED,Major,Fixed,"1.3.1, 1.4.0",2.0.0,None,None,"java 1.6","From the command line version of PDFBox, this exception is printed out:
ExtractText failed with the following exception:
java.lang.ArrayIndexOutOfBoundsException
at java.lang.System.arraycopy(Native Method)
at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.computeEncryptedKey(StandardSecurityHandler.java:571)
at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.computeUserPassword(StandardSecurityHandler.java:608)
at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.isUserPassword(StandardSecurityHandler.java:792)
at org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.decryptDocument(StandardSecurityHandler.java:189)
at org.apache.pdfbox.pdmodel.PDDocument.openProtection(PDDocument.java:1091)
at org.apache.pdfbox.ExtractText.main(ExtractText.java:190)
at org.apache.pdfbox.PDFBox.main(PDFBox.java:42)
The document I was using was encrypted using Adobe Acrobat X Pro and has only Page Extraction disabled inside of it. It was encrypted only with a permissions password.",0,"Andreas Lehmkühler","Peter Nordquist",1,4,"31/Jan/11 17:44","17/Mar/16 19:08","26/Oct/14 17:31"
PDFBOX-954,PDFBOX,"Embedded font: value for /Widths faulty (worked in PDFBox 1.3.0!)",Bug,CLOSED,Major,Fixed,1.4.0,1.7.1,FontBox,None,"java 1.6, windows xp","We have a problem with the font 'LucidiaSansUnicode (l_10646.ttf). It is embedded in a PDF and when viewing this PDF (with Acrobat Reader 9), an error
In der Schrift "LucidaSansUnicode" ist der Wert für /Widths fehlerhaft.
occurs (roughly translated: "In font "LucidaSansUNicode" the value for /Widths is faulty."). I noticed that this error only occurs when the first page is displayed that has text added by PDFBox! The same font is also used for all other text (used by Apache FOP to generate). When I look at the dialog window of Acrobat 3. tab "Fonts", I notice lots of entries
LucidaSansUnicode (Eingebettete Untergruppe)
Typ: TrueType (CID)
Kodierung: Identity-H
but only 1 entry at the very top that looks different:
LucidaSansUnicode (Eingebettet)
Typ: TrueType
Kodierung: Ansi
I guess one is from Apache FOP (generation of PDF) and one is from PDFBox (adding additional text to the PDF). However, both use the same source file "l_10646.ttf"!
Using PDFBox 1.3.0-snapshot (or iText 2.1.7), this problem does NOT occur!
This only occurs with this "LucidaSansUnicode" font - all our other custom fonts don't cause this problem.
The difference I notice in Acrobat Reader Fonts tab is the first font entry:
PDFBox 1.4.0:
LucidaSansUnicode (Eingebettet)
Typ: TrueType
Kodierung: Ansi
PDFBox 1.3.0 or iText 2.1.7:
LucidaSansUnicode (Eingebettete Untergruppe)
Typ: TrueType
Kodierung: Ansi
So, PDFBox 1.4.0 only shows "embedded" ("Eingebettet") but PDFBox 1.3.0/iText version shows "embedded subgroup" ("Eingebettete Untergruppe")! Perhaps this is the problem?",0,"Andreas Lehmkühler",MH,4,5,"01/Feb/11 12:38","17/Apr/13 18:42","04/Jul/12 05:02"
PDFBOX-955,PDFBOX,"Can't extract b/w images from PDF",Improvement,CLOSED,Minor,Fixed,1.4.0,1.6.0,None,extract,"windows xp, java 1.6, netbeans","I wrote a test application using org.apache.pdfbox.ExtractImages to... extract images as PNG. (This is the start of something bigger, which involves making a statistic about the content of over a million pages within PDF files) However all images I get are all black or all white when I test on our own PDF files. I did get correct images from a file that had color images. To extract, I tried page.convertToImage() and then writing with ImageIO.write(), but I also tried using PDFImageWriter, neither had success for b/w images.
The sample PDF is not confidential; it does give a warning "getRGBImage returned NULL" but other PDFs that don't give the warning (but are confidential) also fail.",0,"Andreas Lehmkühler","Tilman Hausherr",0,2,"02/Feb/11 13:57","18/Aug/13 16:35","18/Aug/13 16:35"
PDFBOX-956,PDFBOX,"Poor text extraction performance in PDFTextStripper.java",Improvement,CLOSED,Major,Fixed,1.4.0,1.7.0,"Text extraction",None,,"The worst case performance of the suppressDuplicateOverlappingText logic in processTextPosition is O(n^2).
The patch is to use a TreeMap to achieve O(N log N) performance.
The example PDF took over 2 hours to extract the text before this patch and less than 10 minute after.
BTW: The extracted text is also quite different compared to Adobe Reader. Not sure which is correct but for this document it doesn't matter.",0,"Andreas Lehmkühler","Kevin Jackson",0,1,"05/Feb/11 02:35","29/May/12 16:21","09/Nov/11 07:13"
PDFBOX-957,PDFBOX,"Text extraction using ExtractText (pdf file is input file) generates some weired characters",Bug,CLOSED,Critical,"Not A Problem",1.4.0,None,"Text extraction","pdfbox textExtractio","windows 7","When I tried to extract text from pdf document it is generating some gibberish text.
ExtractText.exe "\Jobvite\Resumes\Resume-Boston.pdf Resume-Boston.txt
Will provide the pdf documents when requested, I could not find a way to include attachments.",0,"Andreas Lehmkühler","Ashok Chigullapally",0,0,"08/Feb/11 00:51","12/Feb/11 19:07","08/Feb/11 19:03"
PDFBOX-958,PDFBOX,"convertToImage mangles images which were in the PDF",Bug,CLOSED,Critical,Fixed,"1.2.1, 1.4.0, 1.5.0",1.6.0,None,None,"redhat, java 1.6, windows","Of the PDFs we've tried running through PDFBox and generating page images, a number of them (coming from disparate sources and method of creation) seem to produce images where an image that was embedded in the page of the PDF shows somewhat mangled. It seems to be divided by horizontal stripes, where some stripes look normal, others seem to have some kind of "smearing" effect going on. See attached images and original PDF (image is of page 13).
I marked this as critical as we are trying to use PDFBox in a project where page images are crucial, and inability to produce reasonable looking page images is pretty much a deal breaker.
The code we use to extract the images looks more or less like the following:
BufferedImage image = page.convertToImage();
SmartDeferredFileOutputStream outStream = new SmartDeferredFileOutputStream();
String[] writerFormatNames = ImageIO.getWriterFormatNames();
ImageIO.write(image, "jpeg", outStream);
outStream.close()
We've also tried specifying "png". In both "jpg" and "png" cases we get an image file that is indeed the correct format, and both images look exactly the same.",0,"Andreas Lehmkühler","Eric Schwarzenbach",0,3,"11/Feb/11 00:05","15/May/14 16:43","15/May/14 16:43"
PDFBOX-959,PDFBOX,"Text extraction slow and /tmp fills upwith AWT font files",Bug,CLOSED,Critical,Fixed,1.4.0,1.6.0,"Text extraction",None,,"During text extraction there is NO need to create AWT fonts.
However the current Type1C Font code creates the AWT always while initializing.
This has several really bad side effects:
1. Wasted time creating the AWT font.
2. The font files are copied into /tmp which fills up after a few thousand text extractions.
3. The AWT is created in a synchronized region so is single threaded.
The patch is quite simple. Just delay creation of the AWT fint until required.",0,"Andreas Lehmkühler","Kevin Jackson",0,1,"11/Feb/11 03:00","02/Jul/11 16:29","27/Mar/11 11:59"
PDFBOX-960,PDFBOX,"Null Pointer Exception when Annotation is missing the Subtype",Bug,CLOSED,Major,Fixed,1.4.0,1.5.0,PDModel,None,,"If an annotation is missing the required Subtype then calling createAnnotation() will result in a NPE.
A better result is to return null and let the upper level code handle it.",0,"Andreas Lehmkühler","Kevin Jackson",0,0,"11/Feb/11 03:29","04/Mar/11 10:29","12/Feb/11 16:10"
PDFBOX-962,PDFBOX,"All sort of Problems when importing Xfdf files into PDFs -> damaged pdfs and NPEs",Bug,CLOSED,Critical,Fixed,1.4.0,"1.8.11, 2.0.0",Utilities,"acroform xfdf","ubuntu, jvm","When trying to merge PDFs with there corresponding XFDFs all sort of Problems occur.
I created different pdfs with form fields and a "sendbutton". (The Sendbutton triggers a send-action to
send the form data via POST-Request to a URL in the XFDF format).
Merging that xfdf data with the pdf worked only for the simplest most minimal Example: 1 Text-Input + Send Button.
In the other cases I experienced some of the following problems
Missing checkbox
NPE in importFDF (acroForm == null)
Miss-rendered send-button (not working any longer: either URL damaged or document no send-able with strange Adobe message)
I tried doing the same with the evaluation Version of Aspose Pdf Kit for Java which worked fine in all of that cases.
I could provide examples of pdfs and and corresponding xfdf that show that faulty behavior",0,"Tilman Hausherr","Konstantinos Kostare",0,2,"14/Feb/11 14:06","18/Jan/16 12:01","10/Jan/16 13:58"
PDFBOX-963,PDFBOX,"PDF Box Image Color Distortion",Bug,CLOSED,Major,Fixed,1.4.0,1.6.0,None,"converToImage pdfbox","windows xp, windows 7, java 1.6","Colors displayed incorrect, after pdf page was converted to image. Attached archive contains pdf and code example.",0,"Andreas Lehmkühler",Andrew,1,1,"17/Feb/11 10:06","02/Jul/11 16:28","13/Jun/11 15:14"
PDFBOX-966,PDFBOX,"PDFText2HTML does not escape special characters in title",Bug,CLOSED,Minor,Fixed,1.4.0,1.6.0,Utilities,None,,"The special characters such as "<" in the title are not escaped in the output from PDFText2HTML.",0,"Andreas Lehmkühler","Shinya Kasatani",0,0,"28/Feb/11 05:17","02/Jul/11 16:28","21/Mar/11 18:59"
PDFBOX-967,PDFBOX,"Create Type1C font metrics only when necessary",Improvement,CLOSED,Minor,Fixed,1.5.0,1.6.0,Parsing,None,,"The font metrics of a Type1C font are always created during initialization, even if they aren't needed e.g. when extracting the text",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,1,"28/Feb/11 17:59","28/Jul/11 13:57","28/Feb/11 18:18"
PDFBOX-968,PDFBOX,"Writing text into existing PDF - extra spaces between characters on some pages of the PDF",Bug,CLOSED,Major,"Not A Problem",1.3.1,None,Writing,None,"windows, solaris","I used PDFBox to add text into existing PDF documents (kind of text stamping).
For some pages of PDF, the space/gap between letters/characters of the text is much wider !
I cannot explain how/why it happens ?!
Sample of my code:
contentStream.beginText();
contentStream.setNonStrokingColor(colorText);
contentStream.setFont(pdfFont, fontSize);
contentStream.moveTextPositionByAmount(xText, yText);
contentStream.drawString(messageStamp);
contentStream.endText();",0,"Andreas Lehmkühler","C. Bertho",0,1,"03/Mar/11 13:18","13/Oct/14 18:17","13/Oct/14 18:17"
PDFBOX-969,PDFBOX,"IndexOutOfBound whle creating a Type1C font",Bug,CLOSED,Major,Fixed,1.5.0,1.8.0,FontBox,Type1C,,"As PDFBOX-708 was already closed and the this seems to be an other issue, I created a new issue using the description from PDFBOX-708
I encountered this issue while trying to add a line of text to a page that uses an embedded Myriad Pro font. I got the same error and switched to trunk, where I got a different error, still on the font parsing: Caused by: java.lang.IndexOutOfBoundsException: Index: 2,Size: 2 at java.util.SubList.rangeCheck(AbstractList.java:746) at java.util.SubList.get(AbstractList.java:619) at org.apache.fontbox.cff.CharStringConverter.drawCurve(CharStringConverter.java:415) at org.apache.fontbox.cff.CharStringConverter.handleType2Command(CharStringConverter.java:277) at org.apache.fontbox.cff.CharStringConverter.handleCommand(CharStringConverter.java:81) at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:53) at org.apache.fontbox.cff.CharStringConverter.handleType2Command(CharStringConverter.java:307) at org.apache.fontbox.cff.CharStringConverter.handleCommand(CharStringConverter.java:81) at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:53) at org.apache.fontbox.cff.CharStringConverter.handleType2Command(CharStringConverter.java:307) at org.apache.fontbox.cff.CharStringConverter.handleCommand(CharStringConverter.java:81) at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:53) at org.apache.fontbox.cff.CharStringConverter.convert(CharStringConverter.java:64) at org.apache.fontbox.cff.CFFFont$Mapping.toType1Sequence(CFFFont.java:374) at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126) at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64) at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57) at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50) at org.apache.pdfbox.pdmodel.font.PDType1CFont.prepareFontMetric(PDType1CFont.java:502) at org.apache.pdfbox.pdmodel.font.PDType1CFont.load(PDType1CFont.java:381) at org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>(PDType1CFont.java:104) at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:162) at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:108) at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:81) at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:115) at org.apache.pdfbox.pdmodel.PDResources.getFonts(PDResources.java:131) at org.apache.pdfbox.pdmodel.edit.PDPageContentStream.<init>(PDPageContentStream.java:189)
I can't attach the PDF for copyright reasons, but I narrowed down the problem to an embedded and subset version of MyriadPro. Sample output of pdffonts:
name type emb sub uni object ID
------------------------------------ ----------------- — --- — ---------
LLUBBA+MyriadPro-LightSemiExt Type 1C yes yes no 2405 0
LLUBBA+MyriadPro-LightSemiExt Type 1C yes yes yes 2406 0",0,"Andreas Lehmkühler","Jean-Philippe Bougie",0,2,"04/Mar/11 11:05","02/May/13 02:29","26/Dec/12 15:44"
PDFBOX-971,PDFBOX,"ExtractImages ignores -prefix",Bug,CLOSED,Minor,Fixed,"1.4.0, 1.6.0",1.6.0,Utilities,None,,"ExtractImages utility ignores the -prefix option, doesn't output expected filenames.
String name = getUniqueFileName( key, image.getSuffix() );
should be
String name = getUniqueFileName( prefix, image.getSuffix() );",0,"Andreas Lehmkühler","Mike Tillberg",0,0,"08/Mar/11 21:20","02/Jul/11 16:29","21/Mar/11 18:39"
PDFBOX-972,PDFBOX,"Specific Type1C methods not used anymore",Bug,CLOSED,Major,"Not A Problem",1.6.0,None,PDModel,None,,"In one of the last releases the PDFontFactory changed so that for Type1C fonts a PDType1Font will be created and not as before a PDType1CFont. While PDType1Font will internally instantiate a PDType1CFont several of the methods which PDType1CFont overrides are now hidden and not used (instead the PDSimpleFont variants are used).
I will add the necessary methods in an attachment which calls the appropriate methods.
However having all these type specific switches it seems to be a better solution to subclass PDType1CFont from PDType1Font.",0,"Andreas Lehmkühler","Timo Boehme",0,3,"11/Mar/11 11:07","13/Oct/14 18:19","13/Oct/14 18:19"
PDFBOX-975,PDFBOX,"Shape transparency not respected when exporting to image",Bug,CLOSED,Major,Fixed,None,1.6.0,None,"patch pdf pdfbox tra",,"When a pdf file has a shape that is drawn with a transparency value the transparency values are not respected when exported to image.
I have attached a small patch that fixes this issue. The patch does not fully satisfy the PDF transparency model, for example only Alpha composition is used. But it covers the most common use-case of drawing shapes with a transparency value for fill and stroke.
I have also attached a maven project that demonstrates the issue. It had a pdf with a shape in it that is semi transparent. Running the application (execute the runexample.sh script) will load that pdf and export it as an image. During the export (the output is a file called pdfAsImage) the transparency is lost.
Compare the exported image and the original pdf to see the difference. PDF is in src/main/resources/...",0,"Andreas Lehmkühler","Jesse Eichar",0,0,"14/Mar/11 10:24","02/Jul/11 16:29","21/Mar/11 18:11"
PDFBOX-976,PDFBOX,"ClassCastException in PDFont.getFontWidth(int)",Bug,CLOSED,Major,Fixed,1.5.0,1.6.0,None,None,"java 1.6","Using PDFont.getFontWidth() on a TrueType font fails with ClassCastException in PDFBox 1.5.0:
Exception in thread "main" java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Float
at org.apache.pdfbox.pdmodel.font.PDFont.getFontWidth(PDFont.java:786)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.getFontWidth(PDSimpleFont.java:191)
at org.apache.pdfbox.pdmodel.font.PDFont.getStringWidth(PDFont.java:283)
at ...
This is due to PDTrueTypeFont.loadDescriptorDictionary(...) loading a non-generic List of Integer instances (lines 342-355) and then calling setWidths() with that list in line 356. But the list has been declared as List<Float>. PDFont.getFontWidth(int) then fails in line 786 with that the exception.",0,"Andreas Lehmkühler","Jan Normann Nielsen",0,2,"14/Mar/11 11:21","02/Jul/11 16:28","26/Mar/11 14:54"
PDFBOX-977,PDFBOX,"java.io.IOException: Error converting date when trying to get the creation date.",Bug,CLOSED,Major,Duplicate,1.5.0,None,Utilities,None,,"Hi,
when I try to get the creation date of these documents
http://www.ebi.ac.uk/pdbe/docs/dbdoc/MSDSD_license4.pdf
http://www.ebi.ac.uk/panda/Publications/evgeni-paper11.pdf
http://www.ebi.ac.uk/luscombe/docs/aa_base.pdf
http://www.ebi.ac.uk/2can/pdf/nar_interpro.pdf
http://www.ebi.ac.uk/asd/altextron/gcag.pdf
I get an IOException:
Caused by: java.io.IOException: Error converting date:B<ItÂ©4Ã‘@/Vo<U+0097><U+0090><U+008C>oÂ²
at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:297) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]
at org.apache.pdfbox.util.DateConverter.toCalendar(DateConverter.java:175) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]
at org.apache.pdfbox.cos.COSDictionary.getDate(COSDictionary.java:797) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]
at org.apache.pdfbox.pdmodel.PDDocumentInformation.getCreationDate(PDDocumentInformation.java:210) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]
at main.parsers.PDFParser.addCreationDate(PDFParser.java:82) ~[na:na]
at main.parsers.PDFParser.parseAndIndex(PDFParser.java:105) ~[na:na]
... 9 common frames omitted",0,"Andreas Lehmkühler","Franck Valentin",0,0,"14/Mar/11 16:27","27/Jun/11 20:18","27/Jun/11 20:18"
PDFBOX-978,PDFBOX,"unreading of trailing content after 'endobj' is missing new line byte (fix included)",Bug,CLOSED,Major,Fixed,1.6.0,1.6.0,Parsing,None,,"I have several journal PDFs where the last xref section starts like
endobj xref
0 92
0000000000 65535 f
0000000044 00000 n
in this cases the PDF parser reads the endobj line completely and unreads " xref".
However the newline (in this case ^D) is lost. This is already documented in the
method readline() within PDFParser:
"Note: if you later unread the results of this function, you'll
need to add a newline character to the end of the string."
Currently I get an error like: "expected='obj' actual='655'" because the 'xref' is read as 'xref0'.
The fix:
in PDFParser insert before line 579 (the unreading of trailing characters after 'endobj') the lines:
// add a space first in place of the newline consumed by readline()
pdfSource.unread( SPACE_BYTE );
thus we get:
if (endObjectKey.startsWith( "endobj" ) )
{ /* * Some PDF files don't contain a new line after endobj so we * need to make sure that the next object number is getting read separately * and not part of the endobj keyword. Ex. Some files would have "endobj28" * instead of "endobj" */ // add a space first in place of the newline consumed by readline() pdfSource.unread( SPACE_BYTE ); pdfSource.unread( endObjectKey.substring( 6 ).getBytes("ISO-8859-1") ); }",0,"Adam Nichols","Timo Boehme",0,0,"15/Mar/11 08:31","27/Feb/14 07:28","16/Mar/11 16:46"
PDFBOX-979,PDFBOX,"errors in %%EOF handling (fix included)",Bug,CLOSED,Major,Fixed,1.6.0,1.6.0,Parsing,None,,"The '%%EOF' handling in PDFParser has several errors. The current implementation (start from line 467):
String eof = "";
if(!pdfSource.isEOF())
readLine(); // if there's more data to read, get the EOF flag
// verify that EOF exists
if("%%EOF".equals(eof))
{ // PDF does not conform to spec, we should warn someone log.warn("expected='%%EOF' actual='" + eof + "'"); // if we're not at the end of a file, just put it back and move on if(!pdfSource.isEOF()) pdfSource.unread(eof.getBytes("ISO-8859-1")); }
The problems:
eof variable gets no value
comparison if("%%EOF".equals(eof)) must be negated
unreading must first add a newline or space byte because we read with readline() (like in bug PDFBOX-978)
Corrected version:
String eof = "";
if(!pdfSource.isEOF())
eof = readLine(); // if there's more data to read, get the EOF flag
// verify that EOF exists
if(!"%%EOF".equals(eof)) {
// PDF does not conform to spec, we should warn someone
log.warn("expected='%%EOF' actual='" + eof + "'");
// if we're not at the end of a file, just put it back and move on
if(!pdfSource.isEOF())
{ pdfSource.unread( SPACE_BYTE ); // we read a whole line; add space as newline replacement pdfSource.unread(eof.getBytes("ISO-8859-1")); }
}",0,"Adam Nichols","Timo Boehme",0,0,"15/Mar/11 09:23","02/Jul/11 16:28","16/Mar/11 16:40"
PDFBOX-980,PDFBOX,"Expected an integer type, actual='Active'",Bug,CLOSED,Major,Fixed,1.5.0,1.7.0,None,None,,"Hi,
When I try to parse the file I've attached (prot_dna_long.pdf)
I get the following exception:
Caused by: java.io.IOException: Error: Expected an integer type, actual='Active'
at org.apache.pdfbox.pdfparser.BaseParser.readInt(BaseParser.java:1384) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]
at org.apache.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:507) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]
at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:180) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:862) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]
at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:829) ~[ebinocle-indexer-1.0-SNAPSHOT-jar-with-dependencies.jar:na]",0,"Andreas Lehmkühler","Franck Valentin",0,1,"15/Mar/11 16:25","29/May/12 16:21","18/May/12 14:27"
PDFBOX-981,PDFBOX,"PDColorspaceFactory does not recognize colorspace DeviceGray (patch included herein)",Bug,CLOSED,Major,Fixed,1.5.0,1.6.0,"Text extraction",pdfbox,,"I was trying to use PDFTextStripper to extract text from a large corpus of PDF files. In some of them, the method:
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpaceFactory.createColorSpace( COSBase colorSpace, Map colorSpaces )
fails to recognize the case when the colorSpace argument is of type COSArray and the array's (first) element corresponds to COSName.DEVICEGRAY. Adding that case successfully parses the files that failed with the stock pdfbox-1.5.0. Below is a diff of my patched PDColorSpaceFactory that handles the case where the colorspace name is DeviceGray. Incidentally, it occurs to me that another (possibly better) approach is to call through to createColorSpace(String) when no other case matches.
% diff PDColorSpaceFactory.java.orig PDColorSpaceFactory.java
94a95,97
> else if ( type.getName().equals( PDDeviceGray.NAME) )
{ > retval = new PDDeviceGray(); > }",0,"Andreas Lehmkühler","Matt England",0,1,"15/Mar/11 19:03","02/Jul/11 16:28","20/Mar/11 16:29"
PDFBOX-983,PDFBOX,"Unable to add text with drawLine() version 1.3 pdf files (Acrobat 4.x)",Bug,CLOSED,Major,"Won't Fix","1.3.1, 1.5.0",None,"PDModel, Writing",None,"windows xp, netbeans, java 1.6","If I open a scanned pdf file made under pdf 1.3 version I unable to add some text to that. If I convert the same file to 1.4 version it works fine. Other pdf files have 1.4 or higher version also work fine.",0,"Andreas Lehmkühler","Sandor Feher",0,0,"17/Mar/11 14:22","22/Mar/11 08:50","22/Mar/11 07:57"
PDFBOX-984,PDFBOX,"When create images from PDF File with characters from PT-BR it´s printing wrong",Bug,CLOSED,Major,Fixed,1.5.0,2.0.0,Utilities,None,"java 1.6",,0,"Andreas Lehmkühler","Guilherme Façanha",0,1,"18/Mar/11 19:55","17/Mar/16 19:07","09/Aug/13 15:34"
PDFBOX-985,PDFBOX,"PDF Printing Orientation",Bug,CLOSED,Major,Fixed,1.5.0,1.8.0,PDModel,print,,"I try to print a PDF using the following code
// aDevice is the printer device Name
// aData is a byte array of my PDF (stored on a DB)
....
   vPrintService = this.getPrintService(aDevice);
   vPrinterJob = java.awt.print.PrinterJob.getPrinterJob();
   vPrinterJob.setPrintService(vPrintService);
   vPDDocument = this.getPDDocument(aData);
   vPDDocument.silentPrint(vPrinterJob);
--
Unable to find source-code formatter for language: suppors methods. Available languages are: actionscript, ada, applescript, bash, c, c#, c++, cpp, css, erlang, go, groovy, haskell, html, java, javascript, js, json, lua, none, nyan, objc, perl, php, python, r, rainbow, ruby, scala, sh, sql, swift, visualbasic, xml, yaml
         
public PrintService getPrintService(String aDevice) throws Exception
{
 javax.print.PrintService[] vPrintServices = java.awt.print.PrinterJob.lookupPrintServices();
    boolean printerFound = false;
    for(int i = 0; i < vPrintServices.length; i++)
    {
     if(vPrintServices[i].getName().trim().equals(aDevice.trim()))
         return vPrintServices[i];
    }
  return null;
}

public PDDocument getPDDocument(GenericBean aData) throws Exception
{
   byte[] vPageData  =  (byte[])aData.getValueAtKey("Byte");
   return PDDocument.load( new ByteArrayInputStream(vPageData) );
}
But if my PDF is LANDSCAPE and the printer instead as PORTRAIT as default, PORTRAIT wins and so the report is not well printed.
Checking the code (based on 1.5.0 and also from lateast trunk) for class PDPageable... probably I found the issue.. and I believe that the implementation is not right (at least from my point of view).
Get a look to the getPageFormat method.
As first it get the page format from the job (PrinterJob)
PageFormat format = job.defaultPage();
after it get the (optional) print service from the job (Printer Job)
PrintService service = job.getPrintService(); // can be null
If the printer service is not null and it have LANDSCAPE as orientation.. it force LANDSCAPE as orientation in the page format otherwise it force it as PORTRAIT
But... in my mind, it should get the orientation from the PDF Page.. and not from the printer job / print service.
I can print documents with different orientation on the same printer and also I can have in the same document pages with different orientation.
Of couse I can make same mistake and read the code in the wrong way... (I found this project yesterday....)
Maybe the "findRotation" method on the PDPage should be invoked and "checked".. or something else....
It this a bug on PDFBox ?
thanks
Roberto",0,"Andreas Lehmkühler","Roberto Mazzola",0,2,"21/Mar/11 11:30","23/Mar/13 12:56","03/Mar/13 14:54"
PDFBOX-986,PDFBOX,"PDFont.getFontWidth(): ClassCastException: Integer cannot be cast to Float",Bug,CLOSED,Blocker,Duplicate,1.5.0,None,PDModel,None,"java 1.6, windows xp","Just tested upgrading from PDFBox 1.4.0 to 1.5.0. But I get this exception when adding custom text to PDF documents:
java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Float
at org.apache.pdfbox.pdmodel.font.PDFont.getFontWidth(PDFont.java:786)
at org.apache.pdfbox.pdmodel.font.PDSimpleFont.getFontWidth(PDSimpleFont.java:191)
at org.apache.pdfbox.pdmodel.font.PDFont.getStringWidth(PDFont.java:283)",0,"Andreas Lehmkühler",MH,0,0,"23/Mar/11 12:10","26/Mar/11 14:55","26/Mar/11 14:55"
PDFBOX-987,PDFBOX,"Skip PS XObjects instead of throwing an exception",Improvement,CLOSED,Major,Fixed,"1.5.0, 1.6.0",1.6.0,"Parsing, (1)",None,,"If a PDF contains a PS XObject an exception is thrown. PDFBox should just skip those XObjects, as they are rarely used.",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"23/Mar/11 17:16","02/Jul/11 16:28","23/Mar/11 17:38"
PDFBOX-988,PDFBOX,"pdmodel.font.PDSimpleFont hanging on TrueType font (ubuntu)",Bug,CLOSED,Major,Fixed,1.5.0,2.0.0,PDModel,None,ubuntu,"When calling PDPage.convertToImage(imagetype,resolution) , I have found a case where the application hangs. No error messages, no exceptions, no CPU spike, no I/O. The error had to do with some strange corruption of the awtFont, by the time it reached the method PDSimpleFont.drawString. Some pretty deep digging turned up that if a font with too few glyphs is sent into PDSimpleFont.writeFont, it will enter Graphics2D.drawString ... ne'er to return.
If a check is done to count the glyphs and if they fall below a certain threshold, then just re-instantiate the Font, then all goes well. Typical numbers range from 70 to 1000+, so I've gone with an arbitrary value of 40. All goes well, and I can't measure any difference in performance (except that my app will actually return from attempting this doc!).
Attached is a sample PDF which can re-create the problem, and a patch which seems to solve it sensibly.",0,"Andreas Lehmkühler","Craig Stires",0,3,"25/Mar/11 03:40","17/Mar/16 19:06","09/Aug/13 18:02"
PDFBOX-99,PDFBOX,"Indexed color images have wrong colors after encryption",Bug,CLOSED,Major,Fixed,None,1.3.1,PDModel,None,,"[imported from SourceForge]
http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1323753
Originally submitted by loppermann on 2005-10-11 04:27.
When a PDF including an index-color image is encrypted,
the colors get mixed up. The pallette seems to remain
intact, but the colors of the pixels are wrong.
Test code: (bitmaptest.pdf is attached)
package pdfboxtest;
import org.pdfbox.pdmodel.PDDocument;
import org.pdfbox.pdmodel.encryption.*;
import java.io.*;
public class Main {
public static void main(String[] args) {
try
{ PDStandardEncryption enc = new PDStandardEncryption(); enc.setVersion(PDEncryptionDictionary.VERSION2_VARIABLE_LENGTH_ALGORITHM); enc.setRevision(PDStandardEncryption.REVISION3); enc.setLength(128); PDDocument doc = PDDocument.load("bitmaptest.pdf"); doc.setEncryptionDictionary(enc); doc.encrypt("owner", ""); doc.save("result.pdf"); doc.close(); }
catch (Exception e)
{ e.printStackTrace(); }
}
}
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1323753&file_id=152105
bitmaptest.pdf (application/pdf), 14049 bytes
pdf containg an indexed color image
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1323753&file_id=152106
result.pdf (application/pdf), 13927 bytes
result.pdf file with messed up colors
[attachment on SourceForge]
http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1323753&file_id=152108
Main.java (application/octet-stream), 743 bytes
test case source
[comment on SourceForge]
Originally sent by loppermann.
Logged In: YES
user_id=1359988
I haven't found anything about exceptions for strings in the
spec. On the otherhand, acrobar reader as well as pdfbox
clearly seem not to decrypt the palette string.
I am not an expert at cryptography, but I imagine, that this
could have the following reason:
Since palettes are often known (windows standard palette,
web-palette etc.) encrypting them, might give an attacker a
reasonable guess at what the cleartext of the encrypted
string should look like. Hence, if he was able to use a
clear-text attack against the palette string he could use
the extracted key for all other streams in the file.
Since the a palette does not include very sensitive
information by itself, it might be a more secure choice to
not encrypt it at all, in order to protect from such
clear-text attacks.
[comment on SourceForge]
Originally sent by benlitchfield.
Logged In: YES
user_id=601708
strings should be encrypted, but there are some exceptions.
thanks for looking further into this for me. I will check with
the PDF reference to see if it says anything. the exceptions
are usually security related so I would be surprised if it was
not suppose to encrypted, there it might be something related.
Ben
[comment on SourceForge]
Originally sent by loppermann.
Logged In: YES
user_id=1359988
ok, if all strings are not encrypted, Docuemnt information
will get messed up, i.e. it will be encrypted during
decryption
[comment on SourceForge]
Originally sent by loppermann.
Logged In: YES
user_id=1359988
my observation of the palatte staying intact seems to be
wrong. after some more testing and debugging, I see, that
the palette seems to get encrypted, which I think it should
not be. Due to the symmetric nature of RC4, encrypting,
decrypting and encrypting again will yield the right
palette. So even PDFBox does not try to decypt the palette
string it has encrypted when opening and decrypting the PDF.
When I disable the encryption of Strings in the PDFWriter,
everything seems to work fine. I haven't found this in the
spec yet, with which I'm not so familiar. I will keep
looking though.
So if in fact strings should not be encrypted (and the fact
that they are not decrypted seems to imply this), the fix is
simply to take out the encryption of strings in PDFWriter.
[comment on SourceForge]
Originally sent by loppermann.
Logged In: YES
user_id=1359988
attached test case
[comment on SourceForge]
Originally sent by loppermann.
Logged In: YES
user_id=1359988
attached result.pdf file with messed up colors",0,"Adam Nichols",Anonymous,0,0,"11/Oct/05 11:27","26/Oct/10 09:33","12/Oct/10 00:26"
PDFBOX-990,PDFBOX,"Add optional debug output to ExtractText","New Feature",CLOSED,Minor,Fixed,1.6.0,1.6.0,"Text extraction",None,,"It would be useful to have some information about the time consumption for different stages of the text extraction",0,"Andreas Lehmkühler","Andreas Lehmkühler",0,0,"27/Mar/11 12:28","02/Jul/11 16:28","27/Mar/11 12:37"
PDFBOX-992,PDFBOX,"IndexOutOfBoundsException: while parsing few pdf's",Bug,CLOSED,Major,Fixed,1.5.0,1.8.0,"Text extraction","pdfbox textExtractio","windows xp, websphere, rad","Hi Team, The text extraction works fine with most pdf's but it failed for couple of them with the below error: The pdf can be found here http://cid-a3aa7f7d9888874d.office.live.com/self.aspx/Public/getting%5E_started%5E_with%5E_Flex3.pdf . Let me know if this is a bug or an issue with the pdf.
java.lang.IndexOutOfBoundsException: Index: 2,Size: 2
at java.util.SubList.rangeCheck(AbstractList.java:864)
at java.util.SubList.get(AbstractList.java:737)
at org.apache.fontbox.cff.CharStringConverter.drawCurve(CharStringConverter.java:415)
at org.apache.fontbox.cff.CharStringConverter.handleType2Command(CharStringConverter.java:277)
at org.apache.fontbox.cff.CharStringConverter.handleCommand(CharStringConverter.java:81)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:53)
at org.apache.fontbox.cff.CharStringConverter.handleType2Command(CharStringConverter.java:307)
at org.apache.fontbox.cff.CharStringConverter.handleCommand(CharStringConverter.java:81)
at org.apache.fontbox.cff.CharStringHandler.handleSequence(CharStringHandler.java:53)
at org.apache.fontbox.cff.CharStringConverter.convert(CharStringConverter.java:64)
at org.apache.fontbox.cff.CFFFont$Mapping.toType1Sequence(CFFFont.java:374)
at org.apache.fontbox.cff.AFMFormatter.renderFont(AFMFormatter.java:126)
at org.apache.fontbox.cff.AFMFormatter.printFontMetrics(AFMFormatter.java:64)
at org.apache.fontbox.cff.AFMFormatter.printFont(AFMFormatter.java:57)
at org.apache.fontbox.cff.AFMFormatter.format(AFMFormatter.java:50)",0,"Andreas Lehmkühler","Nilesh Naik",2,4,"29/Mar/11 10:22","02/May/13 02:29","26/Dec/12 17:50"
PDFBOX-993,PDFBOX,"Image transparency lost when drawing an image (during pdf to image conversion)",Bug,CLOSED,Minor,Fixed,1.5.0,1.6.0,None,"image transparent",,"My scenario is converting an existing PDF to an image. When the PDF contains an image with transparency the transparency is lost and the image is drawn at 100% opacity.
This fix is related (and depends on) the issue: https://issues.apache.org/jira/browse/PDFBOX-975
All that is needed is to set the composite of the graphics before drawing the image as specified in the graphics state (See attached patch)
Note: line number in patch maybe off since it was created from 1.5.0 but after fixing 975.",0,"Andreas Lehmkühler","Jesse Eichar",0,0,"30/Mar/11 14:37","02/Jul/11 16:28","03/Apr/11 15:22"
PDFBOX-999,PDFBOX,"Cant compile PDFBOX 1.5 with IKVM",Bug,CLOSED,Major,Fixed,1.5.0,"1.6.0, 1.7.0","Text extraction",None,"windows xp, ant","I just can't use PDFBOX inside vb.net. There are classes missing.
Tryed with 1.5 and 1.6, same erros.
This is a small part of the console output from ikvm with the errors:
[exec] Note IKVMC0001: found main method in class "org.apache.pdfbox.ExtractText"
[exec] Warning IKVMC0109: skipping class: "org.apache.pdfbox.ExtractText"
[exec] (class is already available in referenced assembly "pdfbox-1.6.0-SNAPSHOT, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")
[echo] Building ImportFDF
[exec] Note IKVMC0001: found main method in class "org.apache.pdfbox.ImportFDF"
[exec] Warning IKVMC0109: skipping class: "org.apache.pdfbox.ImportFDF"
[exec] (class is already available in referenced assembly "pdfbox-1.6.0-SNAPSHOT, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")
[echo] Building IimportXFDF
[exec] Note IKVMC0001: found main method in class "org.apache.pdfbox.ImportXFDF"
[exec] Warning IKVMC0109: skipping class: "org.apache.pdfbox.ImportXFDF"
[exec] (class is already available in referenced assembly "pdfbox-1.6.0-SNAPSHOT, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")
[echo] Building Overlay
[exec] Note IKVMC0001: found main method in class "org.apache.pdfbox.Overlay"
[exec] Warning IKVMC0109: skipping class: "org.apache.pdfbox.Overlay"
[exec] (class is already available in referenced assembly "pdfbox-1.6.0-SNAPSHOT, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")
[echo] Building PDFSplit
[exec] Note IKVMC0001: found main method in class "org.apache.pdfbox.PDFSplit"
[exec] Warning IKVMC0109: skipping class: "org.apache.pdfbox.PDFSplit"
[exec] (class is already available in referenced assembly "pdfbox-1.6.0-SNAPSHOT, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")
[echo] Building PDFReader
[exec] Note IKVMC0001: found main method in class "org.apache.pdfbox.PDFReader"
[exec] Warning IKVMC0109: skipping class: "org.apache.pdfbox.PDFReader"
[exec] (class is already available in referenced assembly "pdfbox-1.6.0-SNAPSHOT, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")",0,"Andreas Lehmkühler",Alex,0,0,"19/Apr/11 16:16","29/May/12 16:21","10/Jul/11 16:26"
